
parking-garage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000612c  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08006378  08006378  00007378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006394  08006394  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006394  08006394  0000800c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006394  08006394  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006394  08006394  00007394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006398  08006398  00007398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800639c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  080063a8  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  080063a8  000080cc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a6b  00000000  00000000  00008042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022cb  00000000  00000000  00019aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  0001bd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca3  00000000  00000000  0001cdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031f58  00000000  00000000  0001da73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017118  00000000  00000000  0004f9cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013e960  00000000  00000000  00066ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a5443  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044ec  00000000  00000000  001a5488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001a9974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000000c 	.word	0x2000000c
 8000268:	00000000 	.word	0x00000000
 800026c:	08006360 	.word	0x08006360

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000010 	.word	0x20000010
 8000288:	08006360 	.word	0x08006360

0800028c <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN(PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT(PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b08c      	sub	sp, #48	@ 0x30
 8000290:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000292:	f107 031c 	add.w	r3, r7, #28
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
 80002a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002a2:	4b94      	ldr	r3, [pc, #592]	@ (80004f4 <MX_GPIO_Init+0x268>)
 80002a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002a8:	4a92      	ldr	r2, [pc, #584]	@ (80004f4 <MX_GPIO_Init+0x268>)
 80002aa:	f043 0310 	orr.w	r3, r3, #16
 80002ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80002b2:	4b90      	ldr	r3, [pc, #576]	@ (80004f4 <MX_GPIO_Init+0x268>)
 80002b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002b8:	f003 0310 	and.w	r3, r3, #16
 80002bc:	61bb      	str	r3, [r7, #24]
 80002be:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002c0:	4b8c      	ldr	r3, [pc, #560]	@ (80004f4 <MX_GPIO_Init+0x268>)
 80002c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002c6:	4a8b      	ldr	r2, [pc, #556]	@ (80004f4 <MX_GPIO_Init+0x268>)
 80002c8:	f043 0320 	orr.w	r3, r3, #32
 80002cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80002d0:	4b88      	ldr	r3, [pc, #544]	@ (80004f4 <MX_GPIO_Init+0x268>)
 80002d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002d6:	f003 0320 	and.w	r3, r3, #32
 80002da:	617b      	str	r3, [r7, #20]
 80002dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002de:	4b85      	ldr	r3, [pc, #532]	@ (80004f4 <MX_GPIO_Init+0x268>)
 80002e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002e4:	4a83      	ldr	r2, [pc, #524]	@ (80004f4 <MX_GPIO_Init+0x268>)
 80002e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80002ee:	4b81      	ldr	r3, [pc, #516]	@ (80004f4 <MX_GPIO_Init+0x268>)
 80002f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002f8:	613b      	str	r3, [r7, #16]
 80002fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fc:	4b7d      	ldr	r3, [pc, #500]	@ (80004f4 <MX_GPIO_Init+0x268>)
 80002fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000302:	4a7c      	ldr	r2, [pc, #496]	@ (80004f4 <MX_GPIO_Init+0x268>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800030c:	4b79      	ldr	r3, [pc, #484]	@ (80004f4 <MX_GPIO_Init+0x268>)
 800030e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000312:	f003 0301 	and.w	r3, r3, #1
 8000316:	60fb      	str	r3, [r7, #12]
 8000318:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031a:	4b76      	ldr	r3, [pc, #472]	@ (80004f4 <MX_GPIO_Init+0x268>)
 800031c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000320:	4a74      	ldr	r2, [pc, #464]	@ (80004f4 <MX_GPIO_Init+0x268>)
 8000322:	f043 0302 	orr.w	r3, r3, #2
 8000326:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800032a:	4b72      	ldr	r3, [pc, #456]	@ (80004f4 <MX_GPIO_Init+0x268>)
 800032c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000330:	f003 0302 	and.w	r3, r3, #2
 8000334:	60bb      	str	r3, [r7, #8]
 8000336:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000338:	4b6e      	ldr	r3, [pc, #440]	@ (80004f4 <MX_GPIO_Init+0x268>)
 800033a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800033e:	4a6d      	ldr	r2, [pc, #436]	@ (80004f4 <MX_GPIO_Init+0x268>)
 8000340:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000344:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000348:	4b6a      	ldr	r3, [pc, #424]	@ (80004f4 <MX_GPIO_Init+0x268>)
 800034a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800034e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000356:	4b67      	ldr	r3, [pc, #412]	@ (80004f4 <MX_GPIO_Init+0x268>)
 8000358:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800035c:	4a65      	ldr	r2, [pc, #404]	@ (80004f4 <MX_GPIO_Init+0x268>)
 800035e:	f043 0308 	orr.w	r3, r3, #8
 8000362:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000366:	4b63      	ldr	r3, [pc, #396]	@ (80004f4 <MX_GPIO_Init+0x268>)
 8000368:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800036c:	f003 0308 	and.w	r3, r3, #8
 8000370:	603b      	str	r3, [r7, #0]
 8000372:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, P3_G_Pin|P4_R_Pin|P5_G_Pin|P9_R_Pin
 8000374:	2200      	movs	r2, #0
 8000376:	f24b 71c0 	movw	r1, #47040	@ 0xb7c0
 800037a:	485f      	ldr	r0, [pc, #380]	@ (80004f8 <MX_GPIO_Init+0x26c>)
 800037c:	f001 fa22 	bl	80017c4 <HAL_GPIO_WritePin>
                          |P4_G_Pin|P3_R_Pin|P8_R_Pin|P2_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, P12_R_Pin|P12_G_Pin|P7_R_Pin, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	f44f 5194 	mov.w	r1, #4736	@ 0x1280
 8000386:	485d      	ldr	r0, [pc, #372]	@ (80004fc <MX_GPIO_Init+0x270>)
 8000388:	f001 fa1c 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, P2_R_Pin|P1_G_Pin|P6_G_Pin, GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	2129      	movs	r1, #41	@ 0x29
 8000390:	485b      	ldr	r0, [pc, #364]	@ (8000500 <MX_GPIO_Init+0x274>)
 8000392:	f001 fa17 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, P11_R_Pin|P7_G_Pin|P9_G_Pin|P8_G_Pin, GPIO_PIN_RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	f245 0141 	movw	r1, #20545	@ 0x5041
 800039c:	4859      	ldr	r0, [pc, #356]	@ (8000504 <MX_GPIO_Init+0x278>)
 800039e:	f001 fa11 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P1_R_Pin|P6_R_Pin, GPIO_PIN_RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80003a8:	4857      	ldr	r0, [pc, #348]	@ (8000508 <MX_GPIO_Init+0x27c>)
 80003aa:	f001 fa0b 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, P5_R_Pin|P10_G_Pin|P10_R_Pin|P11_G_Pin, GPIO_PIN_RESET);
 80003ae:	2200      	movs	r2, #0
 80003b0:	f24e 0102 	movw	r1, #57346	@ 0xe002
 80003b4:	4855      	ldr	r0, [pc, #340]	@ (800050c <MX_GPIO_Init+0x280>)
 80003b6:	f001 fa05 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P3_G_Pin P4_R_Pin P5_G_Pin P9_R_Pin
                           P4_G_Pin P3_R_Pin P8_R_Pin P2_G_Pin */
  GPIO_InitStruct.Pin = P3_G_Pin|P4_R_Pin|P5_G_Pin|P9_R_Pin
 80003ba:	f24b 73c0 	movw	r3, #47040	@ 0xb7c0
 80003be:	61fb      	str	r3, [r7, #28]
                          |P4_G_Pin|P3_R_Pin|P8_R_Pin|P2_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c0:	2301      	movs	r3, #1
 80003c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c4:	2300      	movs	r3, #0
 80003c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c8:	2300      	movs	r3, #0
 80003ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003cc:	f107 031c 	add.w	r3, r7, #28
 80003d0:	4619      	mov	r1, r3
 80003d2:	4849      	ldr	r0, [pc, #292]	@ (80004f8 <MX_GPIO_Init+0x26c>)
 80003d4:	f001 f880 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P10_Pin P7_Pin */
  GPIO_InitStruct.Pin = P10_Pin|P7_Pin;
 80003d8:	f242 0308 	movw	r3, #8200	@ 0x2008
 80003dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003de:	2300      	movs	r3, #0
 80003e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80003e6:	f107 031c 	add.w	r3, r7, #28
 80003ea:	4619      	mov	r1, r3
 80003ec:	4843      	ldr	r0, [pc, #268]	@ (80004fc <MX_GPIO_Init+0x270>)
 80003ee:	f001 f873 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P12_R_Pin P12_G_Pin P7_R_Pin */
  GPIO_InitStruct.Pin = P12_R_Pin|P12_G_Pin|P7_R_Pin;
 80003f2:	f44f 5394 	mov.w	r3, #4736	@ 0x1280
 80003f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f8:	2301      	movs	r3, #1
 80003fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fc:	2300      	movs	r3, #0
 80003fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000400:	2300      	movs	r3, #0
 8000402:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000404:	f107 031c 	add.w	r3, r7, #28
 8000408:	4619      	mov	r1, r3
 800040a:	483c      	ldr	r0, [pc, #240]	@ (80004fc <MX_GPIO_Init+0x270>)
 800040c:	f001 f864 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P2_R_Pin P1_G_Pin P6_G_Pin */
  GPIO_InitStruct.Pin = P2_R_Pin|P1_G_Pin|P6_G_Pin;
 8000410:	2329      	movs	r3, #41	@ 0x29
 8000412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000414:	2301      	movs	r3, #1
 8000416:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000418:	2300      	movs	r3, #0
 800041a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041c:	2300      	movs	r3, #0
 800041e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000420:	f107 031c 	add.w	r3, r7, #28
 8000424:	4619      	mov	r1, r3
 8000426:	4836      	ldr	r0, [pc, #216]	@ (8000500 <MX_GPIO_Init+0x274>)
 8000428:	f001 f856 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P2_Pin P5_Pin P6_Pin */
  GPIO_InitStruct.Pin = P2_Pin|P5_Pin|P6_Pin;
 800042c:	f240 1305 	movw	r3, #261	@ 0x105
 8000430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000432:	2300      	movs	r3, #0
 8000434:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000436:	2300      	movs	r3, #0
 8000438:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800043a:	f107 031c 	add.w	r3, r7, #28
 800043e:	4619      	mov	r1, r3
 8000440:	4831      	ldr	r0, [pc, #196]	@ (8000508 <MX_GPIO_Init+0x27c>)
 8000442:	f001 f849 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P11_R_Pin P7_G_Pin P9_G_Pin P8_G_Pin */
  GPIO_InitStruct.Pin = P11_R_Pin|P7_G_Pin|P9_G_Pin|P8_G_Pin;
 8000446:	f245 0341 	movw	r3, #20545	@ 0x5041
 800044a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044c:	2301      	movs	r3, #1
 800044e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	2300      	movs	r3, #0
 8000456:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000458:	f107 031c 	add.w	r3, r7, #28
 800045c:	4619      	mov	r1, r3
 800045e:	4829      	ldr	r0, [pc, #164]	@ (8000504 <MX_GPIO_Init+0x278>)
 8000460:	f001 f83a 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : P11_Pin */
  GPIO_InitStruct.Pin = P11_Pin;
 8000464:	2302      	movs	r3, #2
 8000466:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000468:	2300      	movs	r3, #0
 800046a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	2300      	movs	r3, #0
 800046e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(P11_GPIO_Port, &GPIO_InitStruct);
 8000470:	f107 031c 	add.w	r3, r7, #28
 8000474:	4619      	mov	r1, r3
 8000476:	4823      	ldr	r0, [pc, #140]	@ (8000504 <MX_GPIO_Init+0x278>)
 8000478:	f001 f82e 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P9_Pin P8_Pin P1_Pin */
  GPIO_InitStruct.Pin = P9_Pin|P8_Pin|P1_Pin;
 800047c:	f644 0301 	movw	r3, #18433	@ 0x4801
 8000480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000482:	2300      	movs	r3, #0
 8000484:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000486:	2300      	movs	r3, #0
 8000488:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800048a:	f107 031c 	add.w	r3, r7, #28
 800048e:	4619      	mov	r1, r3
 8000490:	4819      	ldr	r0, [pc, #100]	@ (80004f8 <MX_GPIO_Init+0x26c>)
 8000492:	f001 f821 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P1_R_Pin P6_R_Pin */
  GPIO_InitStruct.Pin = P1_R_Pin|P6_R_Pin;
 8000496:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800049a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049c:	2301      	movs	r3, #1
 800049e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a4:	2300      	movs	r3, #0
 80004a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a8:	f107 031c 	add.w	r3, r7, #28
 80004ac:	4619      	mov	r1, r3
 80004ae:	4816      	ldr	r0, [pc, #88]	@ (8000508 <MX_GPIO_Init+0x27c>)
 80004b0:	f001 f812 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P3_Pin P4_Pin P12_Pin */
  GPIO_InitStruct.Pin = P3_Pin|P4_Pin|P12_Pin;
 80004b4:	f641 0301 	movw	r3, #6145	@ 0x1801
 80004b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ba:	2300      	movs	r3, #0
 80004bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004be:	2300      	movs	r3, #0
 80004c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004c2:	f107 031c 	add.w	r3, r7, #28
 80004c6:	4619      	mov	r1, r3
 80004c8:	4810      	ldr	r0, [pc, #64]	@ (800050c <MX_GPIO_Init+0x280>)
 80004ca:	f001 f805 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P5_R_Pin P10_G_Pin P10_R_Pin P11_G_Pin */
  GPIO_InitStruct.Pin = P5_R_Pin|P10_G_Pin|P10_R_Pin|P11_G_Pin;
 80004ce:	f24e 0302 	movw	r3, #57346	@ 0xe002
 80004d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d4:	2301      	movs	r3, #1
 80004d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d8:	2300      	movs	r3, #0
 80004da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004dc:	2300      	movs	r3, #0
 80004de:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004e0:	f107 031c 	add.w	r3, r7, #28
 80004e4:	4619      	mov	r1, r3
 80004e6:	4809      	ldr	r0, [pc, #36]	@ (800050c <MX_GPIO_Init+0x280>)
 80004e8:	f000 fff6 	bl	80014d8 <HAL_GPIO_Init>

}
 80004ec:	bf00      	nop
 80004ee:	3730      	adds	r7, #48	@ 0x30
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	44020c00 	.word	0x44020c00
 80004f8:	42021000 	.word	0x42021000
 80004fc:	42021400 	.word	0x42021400
 8000500:	42020000 	.word	0x42020000
 8000504:	42021800 	.word	0x42021800
 8000508:	42020400 	.word	0x42020400
 800050c:	42020c00 	.word	0x42020c00

08000510 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af02      	add	r7, sp, #8
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	f023 030f 	bic.w	r3, r3, #15
 8000520:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	011b      	lsls	r3, r3, #4
 8000526:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000528:	7bfb      	ldrb	r3, [r7, #15]
 800052a:	f043 030c 	orr.w	r3, r3, #12
 800052e:	b2db      	uxtb	r3, r3
 8000530:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8000532:	7bfb      	ldrb	r3, [r7, #15]
 8000534:	f043 0308 	orr.w	r3, r3, #8
 8000538:	b2db      	uxtb	r3, r3
 800053a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 800053c:	7bbb      	ldrb	r3, [r7, #14]
 800053e:	f043 030c 	orr.w	r3, r3, #12
 8000542:	b2db      	uxtb	r3, r3
 8000544:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8000546:	7bbb      	ldrb	r3, [r7, #14]
 8000548:	f043 0308 	orr.w	r3, r3, #8
 800054c:	b2db      	uxtb	r3, r3
 800054e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000550:	f107 0208 	add.w	r2, r7, #8
 8000554:	2364      	movs	r3, #100	@ 0x64
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	2304      	movs	r3, #4
 800055a:	214e      	movs	r1, #78	@ 0x4e
 800055c:	4803      	ldr	r0, [pc, #12]	@ (800056c <lcd_send_cmd+0x5c>)
 800055e:	f001 f9e5 	bl	800192c <HAL_I2C_Master_Transmit>
}
 8000562:	bf00      	nop
 8000564:	3710      	adds	r7, #16
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000028 	.word	0x20000028

08000570 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af02      	add	r7, sp, #8
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	f023 030f 	bic.w	r3, r3, #15
 8000580:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	011b      	lsls	r3, r3, #4
 8000586:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	f043 030d 	orr.w	r3, r3, #13
 800058e:	b2db      	uxtb	r3, r3
 8000590:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	f043 0309 	orr.w	r3, r3, #9
 8000598:	b2db      	uxtb	r3, r3
 800059a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 800059c:	7bbb      	ldrb	r3, [r7, #14]
 800059e:	f043 030d 	orr.w	r3, r3, #13
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 80005a6:	7bbb      	ldrb	r3, [r7, #14]
 80005a8:	f043 0309 	orr.w	r3, r3, #9
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005b0:	f107 0208 	add.w	r2, r7, #8
 80005b4:	2364      	movs	r3, #100	@ 0x64
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2304      	movs	r3, #4
 80005ba:	214e      	movs	r1, #78	@ 0x4e
 80005bc:	4803      	ldr	r0, [pc, #12]	@ (80005cc <lcd_send_data+0x5c>)
 80005be:	f001 f9b5 	bl	800192c <HAL_I2C_Master_Transmit>
}
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000028 	.word	0x20000028

080005d0 <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80005d4:	2032      	movs	r0, #50	@ 0x32
 80005d6:	f000 fdf7 	bl	80011c8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005da:	2030      	movs	r0, #48	@ 0x30
 80005dc:	f7ff ff98 	bl	8000510 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80005e0:	2005      	movs	r0, #5
 80005e2:	f000 fdf1 	bl	80011c8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005e6:	2030      	movs	r0, #48	@ 0x30
 80005e8:	f7ff ff92 	bl	8000510 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80005ec:	2001      	movs	r0, #1
 80005ee:	f000 fdeb 	bl	80011c8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005f2:	2030      	movs	r0, #48	@ 0x30
 80005f4:	f7ff ff8c 	bl	8000510 <lcd_send_cmd>
	HAL_Delay(10);
 80005f8:	200a      	movs	r0, #10
 80005fa:	f000 fde5 	bl	80011c8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80005fe:	2020      	movs	r0, #32
 8000600:	f7ff ff86 	bl	8000510 <lcd_send_cmd>
	HAL_Delay(10);
 8000604:	200a      	movs	r0, #10
 8000606:	f000 fddf 	bl	80011c8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800060a:	2028      	movs	r0, #40	@ 0x28
 800060c:	f7ff ff80 	bl	8000510 <lcd_send_cmd>
	HAL_Delay(1);
 8000610:	2001      	movs	r0, #1
 8000612:	f000 fdd9 	bl	80011c8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000616:	2008      	movs	r0, #8
 8000618:	f7ff ff7a 	bl	8000510 <lcd_send_cmd>
	HAL_Delay(1);
 800061c:	2001      	movs	r0, #1
 800061e:	f000 fdd3 	bl	80011c8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000622:	2001      	movs	r0, #1
 8000624:	f7ff ff74 	bl	8000510 <lcd_send_cmd>
	HAL_Delay(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f000 fdcd 	bl	80011c8 <HAL_Delay>
	HAL_Delay(1);
 800062e:	2001      	movs	r0, #1
 8000630:	f000 fdca 	bl	80011c8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000634:	2006      	movs	r0, #6
 8000636:	f7ff ff6b 	bl	8000510 <lcd_send_cmd>
	HAL_Delay(1);
 800063a:	2001      	movs	r0, #1
 800063c:	f000 fdc4 	bl	80011c8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000640:	200c      	movs	r0, #12
 8000642:	f7ff ff65 	bl	8000510 <lcd_send_cmd>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}

0800064a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b082      	sub	sp, #8
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000652:	e006      	b.n	8000662 <lcd_send_string+0x18>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	1c5a      	adds	r2, r3, #1
 8000658:	607a      	str	r2, [r7, #4]
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff87 	bl	8000570 <lcd_send_data>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d1f4      	bne.n	8000654 <lcd_send_string+0xa>
}
 800066a:	bf00      	nop
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000678:	4b1b      	ldr	r3, [pc, #108]	@ (80006e8 <MX_I2C1_Init+0x74>)
 800067a:	4a1c      	ldr	r2, [pc, #112]	@ (80006ec <MX_I2C1_Init+0x78>)
 800067c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 800067e:	4b1a      	ldr	r3, [pc, #104]	@ (80006e8 <MX_I2C1_Init+0x74>)
 8000680:	4a1b      	ldr	r2, [pc, #108]	@ (80006f0 <MX_I2C1_Init+0x7c>)
 8000682:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000684:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <MX_I2C1_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800068a:	4b17      	ldr	r3, [pc, #92]	@ (80006e8 <MX_I2C1_Init+0x74>)
 800068c:	2201      	movs	r2, #1
 800068e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000690:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <MX_I2C1_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000696:	4b14      	ldr	r3, [pc, #80]	@ (80006e8 <MX_I2C1_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800069c:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <MX_I2C1_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <MX_I2C1_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <MX_I2C1_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ae:	480e      	ldr	r0, [pc, #56]	@ (80006e8 <MX_I2C1_Init+0x74>)
 80006b0:	f001 f8a0 	bl	80017f4 <HAL_I2C_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006ba:	f000 fb07 	bl	8000ccc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006be:	2100      	movs	r1, #0
 80006c0:	4809      	ldr	r0, [pc, #36]	@ (80006e8 <MX_I2C1_Init+0x74>)
 80006c2:	f001 fc41 	bl	8001f48 <HAL_I2CEx_ConfigAnalogFilter>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006cc:	f000 fafe 	bl	8000ccc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006d0:	2100      	movs	r1, #0
 80006d2:	4805      	ldr	r0, [pc, #20]	@ (80006e8 <MX_I2C1_Init+0x74>)
 80006d4:	f001 fc83 	bl	8001fde <HAL_I2CEx_ConfigDigitalFilter>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006de:	f000 faf5 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000028 	.word	0x20000028
 80006ec:	40005400 	.word	0x40005400
 80006f0:	60808cd3 	.word	0x60808cd3

080006f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b0cc      	sub	sp, #304	@ 0x130
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80006fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000702:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000714:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000718:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800071c:	4618      	mov	r0, r3
 800071e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000722:	461a      	mov	r2, r3
 8000724:	2100      	movs	r1, #0
 8000726:	f005 fdef 	bl	8006308 <memset>
  if(i2cHandle->Instance==I2C1)
 800072a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800072e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a33      	ldr	r2, [pc, #204]	@ (8000804 <HAL_I2C_MspInit+0x110>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d15d      	bne.n	80007f8 <HAL_I2C_MspInit+0x104>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800073c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000740:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000744:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000748:	f04f 0300 	mov.w	r3, #0
 800074c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000750:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000754:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000758:	2200      	movs	r2, #0
 800075a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800075e:	f107 0310 	add.w	r3, r7, #16
 8000762:	4618      	mov	r0, r3
 8000764:	f002 fbc0 	bl	8002ee8 <HAL_RCCEx_PeriphCLKConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 800076e:	f000 faad 	bl	8000ccc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	4b25      	ldr	r3, [pc, #148]	@ (8000808 <HAL_I2C_MspInit+0x114>)
 8000774:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000778:	4a23      	ldr	r2, [pc, #140]	@ (8000808 <HAL_I2C_MspInit+0x114>)
 800077a:	f043 0302 	orr.w	r3, r3, #2
 800077e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000782:	4b21      	ldr	r3, [pc, #132]	@ (8000808 <HAL_I2C_MspInit+0x114>)
 8000784:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000788:	f003 0202 	and.w	r2, r3, #2
 800078c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000790:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800079a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800079e:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007a0:	23c0      	movs	r3, #192	@ 0xc0
 80007a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007a6:	2312      	movs	r3, #18
 80007a8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007b8:	2304      	movs	r3, #4
 80007ba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007be:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80007c2:	4619      	mov	r1, r3
 80007c4:	4811      	ldr	r0, [pc, #68]	@ (800080c <HAL_I2C_MspInit+0x118>)
 80007c6:	f000 fe87 	bl	80014d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <HAL_I2C_MspInit+0x114>)
 80007cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80007d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000808 <HAL_I2C_MspInit+0x114>)
 80007d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007d6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80007da:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <HAL_I2C_MspInit+0x114>)
 80007dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80007e0:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80007e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80007e8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80007f2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80007f6:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007f8:	bf00      	nop
 80007fa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40005400 	.word	0x40005400
 8000808:	44020c00 	.word	0x44020c00
 800080c:	42020400 	.word	0x42020400

08000810 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END ICACHE_Init 1 */
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
	...

08000820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08c      	sub	sp, #48	@ 0x30
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000826:	f000 fc11 	bl	800104c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082a:	f000 f9df 	bl	8000bec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082e:	f7ff fd2d 	bl	800028c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000832:	f7ff ff1f 	bl	8000674 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000836:	f000 fb01 	bl	8000e3c <MX_TIM3_Init>
  MX_ICACHE_Init();
 800083a:	f7ff ffe9 	bl	8000810 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  //LCD
  lcd_init();
 800083e:	f7ff fec7 	bl	80005d0 <lcd_init>
  HAL_Delay(50);
 8000842:	2032      	movs	r0, #50	@ 0x32
 8000844:	f000 fcc0 	bl	80011c8 <HAL_Delay>
  lcd_send_string("parking 2");
 8000848:	48b3      	ldr	r0, [pc, #716]	@ (8000b18 <main+0x2f8>)
 800084a:	f7ff fefe 	bl	800064a <lcd_send_string>
  HAL_Delay(500);
 800084e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000852:	f000 fcb9 	bl	80011c8 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(10);
 8000856:	200a      	movs	r0, #10
 8000858:	f000 fcb6 	bl	80011c8 <HAL_Delay>
	int p1 = HAL_GPIO_ReadPin(GPIOE, P1_Pin);
 800085c:	2101      	movs	r1, #1
 800085e:	48af      	ldr	r0, [pc, #700]	@ (8000b1c <main+0x2fc>)
 8000860:	f000 ff98 	bl	8001794 <HAL_GPIO_ReadPin>
 8000864:	4603      	mov	r3, r0
 8000866:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if(p1==1)
 8000868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800086a:	2b01      	cmp	r3, #1
 800086c:	d10b      	bne.n	8000886 <main+0x66>
	{
		HAL_GPIO_WritePin(GPIOB, P1_R_Pin, 1);
 800086e:	2201      	movs	r2, #1
 8000870:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000874:	48aa      	ldr	r0, [pc, #680]	@ (8000b20 <main+0x300>)
 8000876:	f000 ffa5 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, P1_G_Pin, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2108      	movs	r1, #8
 800087e:	48a9      	ldr	r0, [pc, #676]	@ (8000b24 <main+0x304>)
 8000880:	f000 ffa0 	bl	80017c4 <HAL_GPIO_WritePin>
 8000884:	e00d      	b.n	80008a2 <main+0x82>
	}
	else if(p1==0)
 8000886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000888:	2b00      	cmp	r3, #0
 800088a:	d10a      	bne.n	80008a2 <main+0x82>
	{
		HAL_GPIO_WritePin(GPIOB, P1_R_Pin, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000892:	48a3      	ldr	r0, [pc, #652]	@ (8000b20 <main+0x300>)
 8000894:	f000 ff96 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, P1_G_Pin, 1);
 8000898:	2201      	movs	r2, #1
 800089a:	2108      	movs	r1, #8
 800089c:	48a1      	ldr	r0, [pc, #644]	@ (8000b24 <main+0x304>)
 800089e:	f000 ff91 	bl	80017c4 <HAL_GPIO_WritePin>
	}

	int p2 = HAL_GPIO_ReadPin(GPIOB, P2_Pin);
 80008a2:	2101      	movs	r1, #1
 80008a4:	489e      	ldr	r0, [pc, #632]	@ (8000b20 <main+0x300>)
 80008a6:	f000 ff75 	bl	8001794 <HAL_GPIO_ReadPin>
 80008aa:	4603      	mov	r3, r0
 80008ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	if(p2==1)
 80008ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d10b      	bne.n	80008cc <main+0xac>
	{
		HAL_GPIO_WritePin(GPIOA, P2_R_Pin, 1);
 80008b4:	2201      	movs	r2, #1
 80008b6:	2101      	movs	r1, #1
 80008b8:	489a      	ldr	r0, [pc, #616]	@ (8000b24 <main+0x304>)
 80008ba:	f000 ff83 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P2_G_Pin, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008c4:	4895      	ldr	r0, [pc, #596]	@ (8000b1c <main+0x2fc>)
 80008c6:	f000 ff7d 	bl	80017c4 <HAL_GPIO_WritePin>
 80008ca:	e00d      	b.n	80008e8 <main+0xc8>
	}
	else if(p2==0)
 80008cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d10a      	bne.n	80008e8 <main+0xc8>
	{
		HAL_GPIO_WritePin(GPIOE, P2_G_Pin, 1);
 80008d2:	2201      	movs	r2, #1
 80008d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008d8:	4890      	ldr	r0, [pc, #576]	@ (8000b1c <main+0x2fc>)
 80008da:	f000 ff73 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, P2_R_Pin, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2101      	movs	r1, #1
 80008e2:	4890      	ldr	r0, [pc, #576]	@ (8000b24 <main+0x304>)
 80008e4:	f000 ff6e 	bl	80017c4 <HAL_GPIO_WritePin>
	}

	int p3 = HAL_GPIO_ReadPin(GPIOD, P3_Pin);
 80008e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008ec:	488e      	ldr	r0, [pc, #568]	@ (8000b28 <main+0x308>)
 80008ee:	f000 ff51 	bl	8001794 <HAL_GPIO_ReadPin>
 80008f2:	4603      	mov	r3, r0
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
	if(p3==1)
 80008f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d10b      	bne.n	8000914 <main+0xf4>
	{
		HAL_GPIO_WritePin(GPIOE, P3_R_Pin, 1);
 80008fc:	2201      	movs	r2, #1
 80008fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000902:	4886      	ldr	r0, [pc, #536]	@ (8000b1c <main+0x2fc>)
 8000904:	f000 ff5e 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P3_G_Pin, 0);
 8000908:	2200      	movs	r2, #0
 800090a:	2140      	movs	r1, #64	@ 0x40
 800090c:	4883      	ldr	r0, [pc, #524]	@ (8000b1c <main+0x2fc>)
 800090e:	f000 ff59 	bl	80017c4 <HAL_GPIO_WritePin>
 8000912:	e00d      	b.n	8000930 <main+0x110>
	}
	else if(p3==0)
 8000914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000916:	2b00      	cmp	r3, #0
 8000918:	d10a      	bne.n	8000930 <main+0x110>
	{
		HAL_GPIO_WritePin(GPIOE, P3_G_Pin, 1);
 800091a:	2201      	movs	r2, #1
 800091c:	2140      	movs	r1, #64	@ 0x40
 800091e:	487f      	ldr	r0, [pc, #508]	@ (8000b1c <main+0x2fc>)
 8000920:	f000 ff50 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P3_R_Pin, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800092a:	487c      	ldr	r0, [pc, #496]	@ (8000b1c <main+0x2fc>)
 800092c:	f000 ff4a 	bl	80017c4 <HAL_GPIO_WritePin>
	}

	int p4 = HAL_GPIO_ReadPin(GPIOD, P4_Pin);
 8000930:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000934:	487c      	ldr	r0, [pc, #496]	@ (8000b28 <main+0x308>)
 8000936:	f000 ff2d 	bl	8001794 <HAL_GPIO_ReadPin>
 800093a:	4603      	mov	r3, r0
 800093c:	623b      	str	r3, [r7, #32]
	if(p4==1)
 800093e:	6a3b      	ldr	r3, [r7, #32]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d10b      	bne.n	800095c <main+0x13c>
	{
		HAL_GPIO_WritePin(GPIOE, P4_R_Pin, 1);
 8000944:	2201      	movs	r2, #1
 8000946:	2180      	movs	r1, #128	@ 0x80
 8000948:	4874      	ldr	r0, [pc, #464]	@ (8000b1c <main+0x2fc>)
 800094a:	f000 ff3b 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P4_G_Pin, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000954:	4871      	ldr	r0, [pc, #452]	@ (8000b1c <main+0x2fc>)
 8000956:	f000 ff35 	bl	80017c4 <HAL_GPIO_WritePin>
 800095a:	e00d      	b.n	8000978 <main+0x158>
	}
	else if(p4==0)
 800095c:	6a3b      	ldr	r3, [r7, #32]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d10a      	bne.n	8000978 <main+0x158>
	{
		HAL_GPIO_WritePin(GPIOE, P4_G_Pin, 1);
 8000962:	2201      	movs	r2, #1
 8000964:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000968:	486c      	ldr	r0, [pc, #432]	@ (8000b1c <main+0x2fc>)
 800096a:	f000 ff2b 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P4_R_Pin, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2180      	movs	r1, #128	@ 0x80
 8000972:	486a      	ldr	r0, [pc, #424]	@ (8000b1c <main+0x2fc>)
 8000974:	f000 ff26 	bl	80017c4 <HAL_GPIO_WritePin>
	}

	int p5 = HAL_GPIO_ReadPin(GPIOB, P5_Pin);
 8000978:	2104      	movs	r1, #4
 800097a:	4869      	ldr	r0, [pc, #420]	@ (8000b20 <main+0x300>)
 800097c:	f000 ff0a 	bl	8001794 <HAL_GPIO_ReadPin>
 8000980:	4603      	mov	r3, r0
 8000982:	61fb      	str	r3, [r7, #28]
	if(p5==1)
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d10c      	bne.n	80009a4 <main+0x184>
	{
		HAL_GPIO_WritePin(GPIOD, P5_R_Pin, 1);
 800098a:	2201      	movs	r2, #1
 800098c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000990:	4865      	ldr	r0, [pc, #404]	@ (8000b28 <main+0x308>)
 8000992:	f000 ff17 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P5_G_Pin, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800099c:	485f      	ldr	r0, [pc, #380]	@ (8000b1c <main+0x2fc>)
 800099e:	f000 ff11 	bl	80017c4 <HAL_GPIO_WritePin>
 80009a2:	e00e      	b.n	80009c2 <main+0x1a2>
	}
	else if(p5==0)
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d10b      	bne.n	80009c2 <main+0x1a2>
	{
		HAL_GPIO_WritePin(GPIOE, P5_G_Pin, 1);
 80009aa:	2201      	movs	r2, #1
 80009ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009b0:	485a      	ldr	r0, [pc, #360]	@ (8000b1c <main+0x2fc>)
 80009b2:	f000 ff07 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, P5_R_Pin, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009bc:	485a      	ldr	r0, [pc, #360]	@ (8000b28 <main+0x308>)
 80009be:	f000 ff01 	bl	80017c4 <HAL_GPIO_WritePin>
	}

	int p6 = HAL_GPIO_ReadPin(GPIOB, P6_Pin);
 80009c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009c6:	4856      	ldr	r0, [pc, #344]	@ (8000b20 <main+0x300>)
 80009c8:	f000 fee4 	bl	8001794 <HAL_GPIO_ReadPin>
 80009cc:	4603      	mov	r3, r0
 80009ce:	61bb      	str	r3, [r7, #24]
	if(p6==1)
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d10b      	bne.n	80009ee <main+0x1ce>
	{
		HAL_GPIO_WritePin(GPIOB, P6_R_Pin, 1);
 80009d6:	2201      	movs	r2, #1
 80009d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009dc:	4850      	ldr	r0, [pc, #320]	@ (8000b20 <main+0x300>)
 80009de:	f000 fef1 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, P6_G_Pin, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2120      	movs	r1, #32
 80009e6:	484f      	ldr	r0, [pc, #316]	@ (8000b24 <main+0x304>)
 80009e8:	f000 feec 	bl	80017c4 <HAL_GPIO_WritePin>
 80009ec:	e00d      	b.n	8000a0a <main+0x1ea>
	}
	else if(p6==0)
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d10a      	bne.n	8000a0a <main+0x1ea>
	{
		HAL_GPIO_WritePin(GPIOA, P6_G_Pin, 1);
 80009f4:	2201      	movs	r2, #1
 80009f6:	2120      	movs	r1, #32
 80009f8:	484a      	ldr	r0, [pc, #296]	@ (8000b24 <main+0x304>)
 80009fa:	f000 fee3 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, P6_R_Pin, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a04:	4846      	ldr	r0, [pc, #280]	@ (8000b20 <main+0x300>)
 8000a06:	f000 fedd 	bl	80017c4 <HAL_GPIO_WritePin>
	}

	int p7 = HAL_GPIO_ReadPin(GPIOF, P7_Pin);
 8000a0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a0e:	4847      	ldr	r0, [pc, #284]	@ (8000b2c <main+0x30c>)
 8000a10:	f000 fec0 	bl	8001794 <HAL_GPIO_ReadPin>
 8000a14:	4603      	mov	r3, r0
 8000a16:	617b      	str	r3, [r7, #20]
	if(p7==1)
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d10b      	bne.n	8000a36 <main+0x216>
	{
		HAL_GPIO_WritePin(GPIOF, P7_R_Pin, 1);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a24:	4841      	ldr	r0, [pc, #260]	@ (8000b2c <main+0x30c>)
 8000a26:	f000 fecd 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, P7_G_Pin, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2140      	movs	r1, #64	@ 0x40
 8000a2e:	4840      	ldr	r0, [pc, #256]	@ (8000b30 <main+0x310>)
 8000a30:	f000 fec8 	bl	80017c4 <HAL_GPIO_WritePin>
 8000a34:	e00d      	b.n	8000a52 <main+0x232>
	}
	else if(p7==0)
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d10a      	bne.n	8000a52 <main+0x232>
	{
		HAL_GPIO_WritePin(GPIOG, P7_G_Pin, 1);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2140      	movs	r1, #64	@ 0x40
 8000a40:	483b      	ldr	r0, [pc, #236]	@ (8000b30 <main+0x310>)
 8000a42:	f000 febf 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, P7_R_Pin, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a4c:	4837      	ldr	r0, [pc, #220]	@ (8000b2c <main+0x30c>)
 8000a4e:	f000 feb9 	bl	80017c4 <HAL_GPIO_WritePin>
	}

	int p8 = HAL_GPIO_ReadPin(GPIOE, P8_Pin);
 8000a52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a56:	4831      	ldr	r0, [pc, #196]	@ (8000b1c <main+0x2fc>)
 8000a58:	f000 fe9c 	bl	8001794 <HAL_GPIO_ReadPin>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	613b      	str	r3, [r7, #16]
	if(p8==1)
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d10c      	bne.n	8000a80 <main+0x260>
	{
		HAL_GPIO_WritePin(GPIOE, P8_R_Pin, 1);
 8000a66:	2201      	movs	r2, #1
 8000a68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a6c:	482b      	ldr	r0, [pc, #172]	@ (8000b1c <main+0x2fc>)
 8000a6e:	f000 fea9 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, P8_G_Pin, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a78:	482d      	ldr	r0, [pc, #180]	@ (8000b30 <main+0x310>)
 8000a7a:	f000 fea3 	bl	80017c4 <HAL_GPIO_WritePin>
 8000a7e:	e00e      	b.n	8000a9e <main+0x27e>
	}
	else if(p8==0)
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d10b      	bne.n	8000a9e <main+0x27e>
	{
		HAL_GPIO_WritePin(GPIOG, P8_G_Pin, 1);
 8000a86:	2201      	movs	r2, #1
 8000a88:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a8c:	4828      	ldr	r0, [pc, #160]	@ (8000b30 <main+0x310>)
 8000a8e:	f000 fe99 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P8_R_Pin, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a98:	4820      	ldr	r0, [pc, #128]	@ (8000b1c <main+0x2fc>)
 8000a9a:	f000 fe93 	bl	80017c4 <HAL_GPIO_WritePin>
	}

	int p9 = HAL_GPIO_ReadPin(GPIOE, P9_Pin);
 8000a9e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000aa2:	481e      	ldr	r0, [pc, #120]	@ (8000b1c <main+0x2fc>)
 8000aa4:	f000 fe76 	bl	8001794 <HAL_GPIO_ReadPin>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	60fb      	str	r3, [r7, #12]
	if(p9==1)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d10c      	bne.n	8000acc <main+0x2ac>
	{
		HAL_GPIO_WritePin(GPIOE, P9_R_Pin, 1);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ab8:	4818      	ldr	r0, [pc, #96]	@ (8000b1c <main+0x2fc>)
 8000aba:	f000 fe83 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, P9_G_Pin, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ac4:	481a      	ldr	r0, [pc, #104]	@ (8000b30 <main+0x310>)
 8000ac6:	f000 fe7d 	bl	80017c4 <HAL_GPIO_WritePin>
 8000aca:	e00e      	b.n	8000aea <main+0x2ca>
	}
	else if(p9==0)
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d10b      	bne.n	8000aea <main+0x2ca>
	{
		HAL_GPIO_WritePin(GPIOG, P9_G_Pin, 1);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ad8:	4815      	ldr	r0, [pc, #84]	@ (8000b30 <main+0x310>)
 8000ada:	f000 fe73 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P9_R_Pin, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ae4:	480d      	ldr	r0, [pc, #52]	@ (8000b1c <main+0x2fc>)
 8000ae6:	f000 fe6d 	bl	80017c4 <HAL_GPIO_WritePin>
	}

	int p10 = HAL_GPIO_ReadPin(GPIOF, P10_Pin);
 8000aea:	2108      	movs	r1, #8
 8000aec:	480f      	ldr	r0, [pc, #60]	@ (8000b2c <main+0x30c>)
 8000aee:	f000 fe51 	bl	8001794 <HAL_GPIO_ReadPin>
 8000af2:	4603      	mov	r3, r0
 8000af4:	60bb      	str	r3, [r7, #8]
	if(p10==1)
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d11b      	bne.n	8000b34 <main+0x314>
	{
		HAL_GPIO_WritePin(GPIOD, P10_R_Pin, 1);
 8000afc:	2201      	movs	r2, #1
 8000afe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b02:	4809      	ldr	r0, [pc, #36]	@ (8000b28 <main+0x308>)
 8000b04:	f000 fe5e 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, P10_G_Pin, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b0e:	4806      	ldr	r0, [pc, #24]	@ (8000b28 <main+0x308>)
 8000b10:	f000 fe58 	bl	80017c4 <HAL_GPIO_WritePin>
 8000b14:	e01d      	b.n	8000b52 <main+0x332>
 8000b16:	bf00      	nop
 8000b18:	08006378 	.word	0x08006378
 8000b1c:	42021000 	.word	0x42021000
 8000b20:	42020400 	.word	0x42020400
 8000b24:	42020000 	.word	0x42020000
 8000b28:	42020c00 	.word	0x42020c00
 8000b2c:	42021400 	.word	0x42021400
 8000b30:	42021800 	.word	0x42021800
	}
	else if(p10==0)
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d10b      	bne.n	8000b52 <main+0x332>
	{
		HAL_GPIO_WritePin(GPIOD, P10_G_Pin, 1);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b40:	4827      	ldr	r0, [pc, #156]	@ (8000be0 <main+0x3c0>)
 8000b42:	f000 fe3f 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, P10_R_Pin, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b4c:	4824      	ldr	r0, [pc, #144]	@ (8000be0 <main+0x3c0>)
 8000b4e:	f000 fe39 	bl	80017c4 <HAL_GPIO_WritePin>
	}

	int p11 = HAL_GPIO_ReadPin(GPIOG, P11_Pin);
 8000b52:	2102      	movs	r1, #2
 8000b54:	4823      	ldr	r0, [pc, #140]	@ (8000be4 <main+0x3c4>)
 8000b56:	f000 fe1d 	bl	8001794 <HAL_GPIO_ReadPin>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	607b      	str	r3, [r7, #4]
	if(p11==1)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d10a      	bne.n	8000b7a <main+0x35a>
	{
		HAL_GPIO_WritePin(GPIOG, P11_R_Pin, 1);
 8000b64:	2201      	movs	r2, #1
 8000b66:	2101      	movs	r1, #1
 8000b68:	481e      	ldr	r0, [pc, #120]	@ (8000be4 <main+0x3c4>)
 8000b6a:	f000 fe2b 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, P11_G_Pin, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2102      	movs	r1, #2
 8000b72:	481b      	ldr	r0, [pc, #108]	@ (8000be0 <main+0x3c0>)
 8000b74:	f000 fe26 	bl	80017c4 <HAL_GPIO_WritePin>
 8000b78:	e00c      	b.n	8000b94 <main+0x374>
	}
	else if(p11==0)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d109      	bne.n	8000b94 <main+0x374>
	{
		HAL_GPIO_WritePin(GPIOD, P11_G_Pin, 1);
 8000b80:	2201      	movs	r2, #1
 8000b82:	2102      	movs	r1, #2
 8000b84:	4816      	ldr	r0, [pc, #88]	@ (8000be0 <main+0x3c0>)
 8000b86:	f000 fe1d 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, P11_R_Pin, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	4815      	ldr	r0, [pc, #84]	@ (8000be4 <main+0x3c4>)
 8000b90:	f000 fe18 	bl	80017c4 <HAL_GPIO_WritePin>
	}

	int p12 = HAL_GPIO_ReadPin(GPIOD, P12_Pin);
 8000b94:	2101      	movs	r1, #1
 8000b96:	4812      	ldr	r0, [pc, #72]	@ (8000be0 <main+0x3c0>)
 8000b98:	f000 fdfc 	bl	8001794 <HAL_GPIO_ReadPin>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	603b      	str	r3, [r7, #0]
	if(p12==1)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d10b      	bne.n	8000bbe <main+0x39e>
	{
		HAL_GPIO_WritePin(GPIOF, P12_R_Pin, 1);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2180      	movs	r1, #128	@ 0x80
 8000baa:	480f      	ldr	r0, [pc, #60]	@ (8000be8 <main+0x3c8>)
 8000bac:	f000 fe0a 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, P12_G_Pin, 0);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bb6:	480c      	ldr	r0, [pc, #48]	@ (8000be8 <main+0x3c8>)
 8000bb8:	f000 fe04 	bl	80017c4 <HAL_GPIO_WritePin>
 8000bbc:	e64b      	b.n	8000856 <main+0x36>
	}
	else if(p12==0)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	f47f ae48 	bne.w	8000856 <main+0x36>
	{
		HAL_GPIO_WritePin(GPIOF, P12_G_Pin, 1);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bcc:	4806      	ldr	r0, [pc, #24]	@ (8000be8 <main+0x3c8>)
 8000bce:	f000 fdf9 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, P12_R_Pin, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2180      	movs	r1, #128	@ 0x80
 8000bd6:	4804      	ldr	r0, [pc, #16]	@ (8000be8 <main+0x3c8>)
 8000bd8:	f000 fdf4 	bl	80017c4 <HAL_GPIO_WritePin>
  {
 8000bdc:	e63b      	b.n	8000856 <main+0x36>
 8000bde:	bf00      	nop
 8000be0:	42020c00 	.word	0x42020c00
 8000be4:	42021800 	.word	0x42021800
 8000be8:	42021400 	.word	0x42021400

08000bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b09c      	sub	sp, #112	@ 0x70
 8000bf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf2:	f107 0320 	add.w	r3, r7, #32
 8000bf6:	2250      	movs	r2, #80	@ 0x50
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f005 fb84 	bl	8006308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
 8000c10:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c12:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc4 <SystemClock_Config+0xd8>)
 8000c14:	691b      	ldr	r3, [r3, #16]
 8000c16:	4a2b      	ldr	r2, [pc, #172]	@ (8000cc4 <SystemClock_Config+0xd8>)
 8000c18:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000c1c:	6113      	str	r3, [r2, #16]
 8000c1e:	4b29      	ldr	r3, [pc, #164]	@ (8000cc4 <SystemClock_Config+0xd8>)
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c2a:	bf00      	nop
 8000c2c:	4b25      	ldr	r3, [pc, #148]	@ (8000cc4 <SystemClock_Config+0xd8>)
 8000c2e:	695b      	ldr	r3, [r3, #20]
 8000c30:	f003 0308 	and.w	r3, r3, #8
 8000c34:	2b08      	cmp	r3, #8
 8000c36:	d1f9      	bne.n	8000c2c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c40:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c42:	2302      	movs	r3, #2
 8000c44:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000c46:	2303      	movs	r3, #3
 8000c48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8000c4e:	23fa      	movs	r3, #250	@ 0xfa
 8000c50:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c52:	2302      	movs	r3, #2
 8000c54:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c56:	2302      	movs	r3, #2
 8000c58:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8000c5e:	2304      	movs	r3, #4
 8000c60:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6a:	f107 0320 	add.w	r3, r7, #32
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 fa02 	bl	8002078 <HAL_RCC_OscConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c7a:	f000 f827 	bl	8000ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c7e:	231f      	movs	r3, #31
 8000c80:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c82:	2303      	movs	r3, #3
 8000c84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c96:	f107 0308 	add.w	r3, r7, #8
 8000c9a:	2105      	movs	r1, #5
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f001 fe23 	bl	80028e8 <HAL_RCC_ClockConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ca8:	f000 f810 	bl	8000ccc <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000cac:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <SystemClock_Config+0xdc>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000cb4:	4a04      	ldr	r2, [pc, #16]	@ (8000cc8 <SystemClock_Config+0xdc>)
 8000cb6:	f043 0320 	orr.w	r3, r3, #32
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	3770      	adds	r7, #112	@ 0x70
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	44020800 	.word	0x44020800
 8000cc8:	40022000 	.word	0x40022000

08000ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd0:	b672      	cpsid	i
}
 8000cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <Error_Handler+0x8>

08000cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cea:	bf00      	nop
 8000cec:	e7fd      	b.n	8000cea <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	bf00      	nop
 8000cf4:	e7fd      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfa:	bf00      	nop
 8000cfc:	e7fd      	b.n	8000cfa <MemManage_Handler+0x4>

08000cfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d02:	bf00      	nop
 8000d04:	e7fd      	b.n	8000d02 <BusFault_Handler+0x4>

08000d06 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d0a:	bf00      	nop
 8000d0c:	e7fd      	b.n	8000d0a <UsageFault_Handler+0x4>

08000d0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3c:	f000 fa24 	bl	8001188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d4a:	4b35      	ldr	r3, [pc, #212]	@ (8000e20 <SystemInit+0xdc>)
 8000d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d50:	4a33      	ldr	r2, [pc, #204]	@ (8000e20 <SystemInit+0xdc>)
 8000d52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d56:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000d5a:	4b32      	ldr	r3, [pc, #200]	@ (8000e24 <SystemInit+0xe0>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000d60:	4b30      	ldr	r3, [pc, #192]	@ (8000e24 <SystemInit+0xe0>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000d66:	4b2f      	ldr	r3, [pc, #188]	@ (8000e24 <SystemInit+0xe0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000d6c:	4b2d      	ldr	r3, [pc, #180]	@ (8000e24 <SystemInit+0xe0>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	492c      	ldr	r1, [pc, #176]	@ (8000e24 <SystemInit+0xe0>)
 8000d72:	4b2d      	ldr	r3, [pc, #180]	@ (8000e28 <SystemInit+0xe4>)
 8000d74:	4013      	ands	r3, r2
 8000d76:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000d78:	4b2a      	ldr	r3, [pc, #168]	@ (8000e24 <SystemInit+0xe0>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000d7e:	4b29      	ldr	r3, [pc, #164]	@ (8000e24 <SystemInit+0xe0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000d84:	4b27      	ldr	r3, [pc, #156]	@ (8000e24 <SystemInit+0xe0>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000d8a:	4b26      	ldr	r3, [pc, #152]	@ (8000e24 <SystemInit+0xe0>)
 8000d8c:	4a27      	ldr	r2, [pc, #156]	@ (8000e2c <SystemInit+0xe8>)
 8000d8e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000d90:	4b24      	ldr	r3, [pc, #144]	@ (8000e24 <SystemInit+0xe0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000d96:	4b23      	ldr	r3, [pc, #140]	@ (8000e24 <SystemInit+0xe0>)
 8000d98:	4a24      	ldr	r2, [pc, #144]	@ (8000e2c <SystemInit+0xe8>)
 8000d9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000d9c:	4b21      	ldr	r3, [pc, #132]	@ (8000e24 <SystemInit+0xe0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000da2:	4b20      	ldr	r3, [pc, #128]	@ (8000e24 <SystemInit+0xe0>)
 8000da4:	4a21      	ldr	r2, [pc, #132]	@ (8000e2c <SystemInit+0xe8>)
 8000da6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000da8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e24 <SystemInit+0xe0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000dae:	4b1d      	ldr	r3, [pc, #116]	@ (8000e24 <SystemInit+0xe0>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e24 <SystemInit+0xe0>)
 8000db4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000db8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000dba:	4b1a      	ldr	r3, [pc, #104]	@ (8000e24 <SystemInit+0xe0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dc0:	4b17      	ldr	r3, [pc, #92]	@ (8000e20 <SystemInit+0xdc>)
 8000dc2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000dc6:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000dc8:	4b19      	ldr	r3, [pc, #100]	@ (8000e30 <SystemInit+0xec>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000dd0:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000dd8:	d003      	beq.n	8000de2 <SystemInit+0x9e>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000de0:	d117      	bne.n	8000e12 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000de2:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <SystemInit+0xec>)
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d005      	beq.n	8000dfa <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000dee:	4b10      	ldr	r3, [pc, #64]	@ (8000e30 <SystemInit+0xec>)
 8000df0:	4a10      	ldr	r2, [pc, #64]	@ (8000e34 <SystemInit+0xf0>)
 8000df2:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000df4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <SystemInit+0xec>)
 8000df6:	4a10      	ldr	r2, [pc, #64]	@ (8000e38 <SystemInit+0xf4>)
 8000df8:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000e30 <SystemInit+0xec>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	4a0c      	ldr	r2, [pc, #48]	@ (8000e30 <SystemInit+0xec>)
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000e06:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <SystemInit+0xec>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	4a09      	ldr	r2, [pc, #36]	@ (8000e30 <SystemInit+0xec>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	61d3      	str	r3, [r2, #28]
  }
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00
 8000e24:	44020c00 	.word	0x44020c00
 8000e28:	eae2eae3 	.word	0xeae2eae3
 8000e2c:	01010280 	.word	0x01010280
 8000e30:	40022000 	.word	0x40022000
 8000e34:	08192a3b 	.word	0x08192a3b
 8000e38:	4c5d6e7f 	.word	0x4c5d6e7f

08000e3c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08e      	sub	sp, #56	@ 0x38
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]
 8000e6a:	615a      	str	r2, [r3, #20]
 8000e6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e6e:	4b32      	ldr	r3, [pc, #200]	@ (8000f38 <MX_TIM3_Init+0xfc>)
 8000e70:	4a32      	ldr	r2, [pc, #200]	@ (8000f3c <MX_TIM3_Init+0x100>)
 8000e72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e74:	4b30      	ldr	r3, [pc, #192]	@ (8000f38 <MX_TIM3_Init+0xfc>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f38 <MX_TIM3_Init+0xfc>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e80:	4b2d      	ldr	r3, [pc, #180]	@ (8000f38 <MX_TIM3_Init+0xfc>)
 8000e82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e88:	4b2b      	ldr	r3, [pc, #172]	@ (8000f38 <MX_TIM3_Init+0xfc>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f38 <MX_TIM3_Init+0xfc>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e94:	4828      	ldr	r0, [pc, #160]	@ (8000f38 <MX_TIM3_Init+0xfc>)
 8000e96:	f004 f8e1 	bl	800505c <HAL_TIM_Base_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ea0:	f7ff ff14 	bl	8000ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000eaa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4821      	ldr	r0, [pc, #132]	@ (8000f38 <MX_TIM3_Init+0xfc>)
 8000eb2:	f004 fa9f 	bl	80053f4 <HAL_TIM_ConfigClockSource>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000ebc:	f7ff ff06 	bl	8000ccc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ec0:	481d      	ldr	r0, [pc, #116]	@ (8000f38 <MX_TIM3_Init+0xfc>)
 8000ec2:	f004 f922 	bl	800510a <HAL_TIM_PWM_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000ecc:	f7ff fefe 	bl	8000ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4619      	mov	r1, r3
 8000ede:	4816      	ldr	r0, [pc, #88]	@ (8000f38 <MX_TIM3_Init+0xfc>)
 8000ee0:	f005 f942 	bl	8006168 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000eea:	f7ff feef 	bl	8000ccc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eee:	2360      	movs	r3, #96	@ 0x60
 8000ef0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000efe:	463b      	mov	r3, r7
 8000f00:	2200      	movs	r2, #0
 8000f02:	4619      	mov	r1, r3
 8000f04:	480c      	ldr	r0, [pc, #48]	@ (8000f38 <MX_TIM3_Init+0xfc>)
 8000f06:	f004 f961 	bl	80051cc <HAL_TIM_PWM_ConfigChannel>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000f10:	f7ff fedc 	bl	8000ccc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f14:	463b      	mov	r3, r7
 8000f16:	2204      	movs	r2, #4
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4807      	ldr	r0, [pc, #28]	@ (8000f38 <MX_TIM3_Init+0xfc>)
 8000f1c:	f004 f956 	bl	80051cc <HAL_TIM_PWM_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000f26:	f7ff fed1 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f2a:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <MX_TIM3_Init+0xfc>)
 8000f2c:	f000 f82a 	bl	8000f84 <HAL_TIM_MspPostInit>

}
 8000f30:	bf00      	nop
 8000f32:	3738      	adds	r7, #56	@ 0x38
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	2000007c 	.word	0x2000007c
 8000f3c:	40000400 	.word	0x40000400

08000f40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f7c <HAL_TIM_Base_MspInit+0x3c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d10e      	bne.n	8000f70 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f52:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <HAL_TIM_Base_MspInit+0x40>)
 8000f54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f58:	4a09      	ldr	r2, [pc, #36]	@ (8000f80 <HAL_TIM_Base_MspInit+0x40>)
 8000f5a:	f043 0302 	orr.w	r3, r3, #2
 8000f5e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000f62:	4b07      	ldr	r3, [pc, #28]	@ (8000f80 <HAL_TIM_Base_MspInit+0x40>)
 8000f64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	40000400 	.word	0x40000400
 8000f80:	44020c00 	.word	0x44020c00

08000f84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a12      	ldr	r2, [pc, #72]	@ (8000fec <HAL_TIM_MspPostInit+0x68>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d11e      	bne.n	8000fe4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <HAL_TIM_MspPostInit+0x6c>)
 8000fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fac:	4a10      	ldr	r2, [pc, #64]	@ (8000ff0 <HAL_TIM_MspPostInit+0x6c>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <HAL_TIM_MspPostInit+0x6c>)
 8000fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fc4:	23c0      	movs	r3, #192	@ 0xc0
 8000fc6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <HAL_TIM_MspPostInit+0x70>)
 8000fe0:	f000 fa7a 	bl	80014d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fe4:	bf00      	nop
 8000fe6:	3720      	adds	r7, #32
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40000400 	.word	0x40000400
 8000ff0:	44020c00 	.word	0x44020c00
 8000ff4:	42020000 	.word	0x42020000

08000ff8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ff8:	480d      	ldr	r0, [pc, #52]	@ (8001030 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ffa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ffc:	f7ff fea2 	bl	8000d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001000:	480c      	ldr	r0, [pc, #48]	@ (8001034 <LoopForever+0x6>)
  ldr r1, =_edata
 8001002:	490d      	ldr	r1, [pc, #52]	@ (8001038 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001004:	4a0d      	ldr	r2, [pc, #52]	@ (800103c <LoopForever+0xe>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0a      	ldr	r2, [pc, #40]	@ (8001040 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001018:	4c0a      	ldr	r4, [pc, #40]	@ (8001044 <LoopForever+0x16>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001026:	f005 f977 	bl	8006318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800102a:	f7ff fbf9 	bl	8000820 <main>

0800102e <LoopForever>:

LoopForever:
    b LoopForever
 800102e:	e7fe      	b.n	800102e <LoopForever>
  ldr   r0, =_estack
 8001030:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001038:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800103c:	0800639c 	.word	0x0800639c
  ldr r2, =_sbss
 8001040:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001044:	200000cc 	.word	0x200000cc

08001048 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001048:	e7fe      	b.n	8001048 <ADC1_IRQHandler>
	...

0800104c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001050:	2003      	movs	r0, #3
 8001052:	f000 f96c 	bl	800132e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001056:	f001 fdff 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 800105a:	4602      	mov	r2, r0
 800105c:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <HAL_Init+0x44>)
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	f003 030f 	and.w	r3, r3, #15
 8001064:	490b      	ldr	r1, [pc, #44]	@ (8001094 <HAL_Init+0x48>)
 8001066:	5ccb      	ldrb	r3, [r1, r3]
 8001068:	fa22 f303 	lsr.w	r3, r2, r3
 800106c:	4a0a      	ldr	r2, [pc, #40]	@ (8001098 <HAL_Init+0x4c>)
 800106e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001070:	2004      	movs	r0, #4
 8001072:	f000 f9a3 	bl	80013bc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001076:	200f      	movs	r0, #15
 8001078:	f000 f810 	bl	800109c <HAL_InitTick>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e002      	b.n	800108c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001086:	f7ff fe27 	bl	8000cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	bd80      	pop	{r7, pc}
 8001090:	44020c00 	.word	0x44020c00
 8001094:	08006384 	.word	0x08006384
 8001098:	20000000 	.word	0x20000000

0800109c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80010a8:	4b33      	ldr	r3, [pc, #204]	@ (8001178 <HAL_InitTick+0xdc>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e05c      	b.n	800116e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80010b4:	4b31      	ldr	r3, [pc, #196]	@ (800117c <HAL_InitTick+0xe0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	2b04      	cmp	r3, #4
 80010be:	d10c      	bne.n	80010da <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80010c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001180 <HAL_InitTick+0xe4>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001178 <HAL_InitTick+0xdc>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	e037      	b.n	800114a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80010da:	f000 f9c7 	bl	800146c <HAL_SYSTICK_GetCLKSourceConfig>
 80010de:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d023      	beq.n	800112e <HAL_InitTick+0x92>
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d82d      	bhi.n	8001148 <HAL_InitTick+0xac>
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_InitTick+0x5e>
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d00d      	beq.n	8001114 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80010f8:	e026      	b.n	8001148 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80010fa:	4b21      	ldr	r3, [pc, #132]	@ (8001180 <HAL_InitTick+0xe4>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001178 <HAL_InitTick+0xdc>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	4619      	mov	r1, r3
 8001104:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001108:	fbb3 f3f1 	udiv	r3, r3, r1
 800110c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001110:	60fb      	str	r3, [r7, #12]
        break;
 8001112:	e01a      	b.n	800114a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001114:	4b18      	ldr	r3, [pc, #96]	@ (8001178 <HAL_InitTick+0xdc>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001122:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	60fb      	str	r3, [r7, #12]
        break;
 800112c:	e00d      	b.n	800114a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800112e:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <HAL_InitTick+0xdc>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001138:	fbb3 f3f2 	udiv	r3, r3, r2
 800113c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001140:	fbb2 f3f3 	udiv	r3, r2, r3
 8001144:	60fb      	str	r3, [r7, #12]
        break;
 8001146:	e000      	b.n	800114a <HAL_InitTick+0xae>
        break;
 8001148:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f000 f914 	bl	8001378 <HAL_SYSTICK_Config>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e009      	b.n	800116e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800115a:	2200      	movs	r2, #0
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	f04f 30ff 	mov.w	r0, #4294967295
 8001162:	f000 f8ef 	bl	8001344 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001166:	4a07      	ldr	r2, [pc, #28]	@ (8001184 <HAL_InitTick+0xe8>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000008 	.word	0x20000008
 800117c:	e000e010 	.word	0xe000e010
 8001180:	20000000 	.word	0x20000000
 8001184:	20000004 	.word	0x20000004

08001188 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <HAL_IncTick+0x20>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <HAL_IncTick+0x24>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4413      	add	r3, r2
 8001198:	4a04      	ldr	r2, [pc, #16]	@ (80011ac <HAL_IncTick+0x24>)
 800119a:	6013      	str	r3, [r2, #0]
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000008 	.word	0x20000008
 80011ac:	200000c8 	.word	0x200000c8

080011b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return uwTick;
 80011b4:	4b03      	ldr	r3, [pc, #12]	@ (80011c4 <HAL_GetTick+0x14>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	200000c8 	.word	0x200000c8

080011c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d0:	f7ff ffee 	bl	80011b0 <HAL_GetTick>
 80011d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e0:	d005      	beq.n	80011ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e2:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <HAL_Delay+0x44>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ee:	bf00      	nop
 80011f0:	f7ff ffde 	bl	80011b0 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d8f7      	bhi.n	80011f0 <HAL_Delay+0x28>
  {
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000008 	.word	0x20000008

08001210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001220:	4b0c      	ldr	r3, [pc, #48]	@ (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800122c:	4013      	ands	r3, r2
 800122e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001238:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800123c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001242:	4a04      	ldr	r2, [pc, #16]	@ (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	60d3      	str	r3, [r2, #12]
}
 8001248:	bf00      	nop
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800125c:	4b04      	ldr	r3, [pc, #16]	@ (8001270 <__NVIC_GetPriorityGrouping+0x18>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	f003 0307 	and.w	r3, r3, #7
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001280:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001284:	2b00      	cmp	r3, #0
 8001286:	db0a      	blt.n	800129e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	490c      	ldr	r1, [pc, #48]	@ (80012c0 <__NVIC_SetPriority+0x4c>)
 800128e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	440b      	add	r3, r1
 8001298:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800129c:	e00a      	b.n	80012b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4908      	ldr	r1, [pc, #32]	@ (80012c4 <__NVIC_SetPriority+0x50>)
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	3b04      	subs	r3, #4
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	761a      	strb	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000e100 	.word	0xe000e100
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	@ 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f1c3 0307 	rsb	r3, r3, #7
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	bf28      	it	cs
 80012e6:	2304      	movcs	r3, #4
 80012e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3304      	adds	r3, #4
 80012ee:	2b06      	cmp	r3, #6
 80012f0:	d902      	bls.n	80012f8 <NVIC_EncodePriority+0x30>
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3b03      	subs	r3, #3
 80012f6:	e000      	b.n	80012fa <NVIC_EncodePriority+0x32>
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43da      	mvns	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001310:	f04f 31ff 	mov.w	r1, #4294967295
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43d9      	mvns	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	4313      	orrs	r3, r2
         );
}
 8001322:	4618      	mov	r0, r3
 8001324:	3724      	adds	r7, #36	@ 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ff6a 	bl	8001210 <__NVIC_SetPriorityGrouping>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
 8001350:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001352:	f7ff ff81 	bl	8001258 <__NVIC_GetPriorityGrouping>
 8001356:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	68b9      	ldr	r1, [r7, #8]
 800135c:	6978      	ldr	r0, [r7, #20]
 800135e:	f7ff ffb3 	bl	80012c8 <NVIC_EncodePriority>
 8001362:	4602      	mov	r2, r0
 8001364:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ff82 	bl	8001274 <__NVIC_SetPriority>
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001388:	d301      	bcc.n	800138e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800138a:	2301      	movs	r3, #1
 800138c:	e00d      	b.n	80013aa <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800138e:	4a0a      	ldr	r2, [pc, #40]	@ (80013b8 <HAL_SYSTICK_Config+0x40>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001396:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <HAL_SYSTICK_Config+0x40>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <HAL_SYSTICK_Config+0x40>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a05      	ldr	r2, [pc, #20]	@ (80013b8 <HAL_SYSTICK_Config+0x40>)
 80013a2:	f043 0303 	orr.w	r3, r3, #3
 80013a6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000e010 	.word	0xe000e010

080013bc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d844      	bhi.n	8001454 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80013ca:	a201      	add	r2, pc, #4	@ (adr r2, 80013d0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80013cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d0:	080013f3 	.word	0x080013f3
 80013d4:	08001411 	.word	0x08001411
 80013d8:	08001433 	.word	0x08001433
 80013dc:	08001455 	.word	0x08001455
 80013e0:	080013e5 	.word	0x080013e5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80013e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001464 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001464 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	6013      	str	r3, [r2, #0]
      break;
 80013f0:	e031      	b.n	8001456 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80013f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001464 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80013f8:	f023 0304 	bic.w	r3, r3, #4
 80013fc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80013fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001400:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001404:	4a18      	ldr	r2, [pc, #96]	@ (8001468 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001406:	f023 030c 	bic.w	r3, r3, #12
 800140a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800140e:	e022      	b.n	8001456 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001410:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a13      	ldr	r2, [pc, #76]	@ (8001464 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001416:	f023 0304 	bic.w	r3, r3, #4
 800141a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800141c:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800141e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001422:	f023 030c 	bic.w	r3, r3, #12
 8001426:	4a10      	ldr	r2, [pc, #64]	@ (8001468 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001430:	e011      	b.n	8001456 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001432:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a0b      	ldr	r2, [pc, #44]	@ (8001464 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001438:	f023 0304 	bic.w	r3, r3, #4
 800143c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800143e:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001440:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001444:	f023 030c 	bic.w	r3, r3, #12
 8001448:	4a07      	ldr	r2, [pc, #28]	@ (8001468 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800144a:	f043 0308 	orr.w	r3, r3, #8
 800144e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001452:	e000      	b.n	8001456 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001454:	bf00      	nop
  }
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000e010 	.word	0xe000e010
 8001468:	44020c00 	.word	0x44020c00

0800146c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001472:	4b17      	ldr	r3, [pc, #92]	@ (80014d0 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	2b00      	cmp	r3, #0
 800147c:	d002      	beq.n	8001484 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800147e:	2304      	movs	r3, #4
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	e01e      	b.n	80014c2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001484:	4b13      	ldr	r3, [pc, #76]	@ (80014d4 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001486:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800148a:	f003 030c 	and.w	r3, r3, #12
 800148e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	2b08      	cmp	r3, #8
 8001494:	d00f      	beq.n	80014b6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	2b08      	cmp	r3, #8
 800149a:	d80f      	bhi.n	80014bc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d003      	beq.n	80014b0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80014a8:	e008      	b.n	80014bc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
        break;
 80014ae:	e008      	b.n	80014c2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80014b0:	2301      	movs	r3, #1
 80014b2:	607b      	str	r3, [r7, #4]
        break;
 80014b4:	e005      	b.n	80014c2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80014b6:	2302      	movs	r3, #2
 80014b8:	607b      	str	r3, [r7, #4]
        break;
 80014ba:	e002      	b.n	80014c2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80014bc:	2300      	movs	r3, #0
 80014be:	607b      	str	r3, [r7, #4]
        break;
 80014c0:	bf00      	nop
    }
  }
  return systick_source;
 80014c2:	687b      	ldr	r3, [r7, #4]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000e010 	.word	0xe000e010
 80014d4:	44020c00 	.word	0x44020c00

080014d8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80014d8:	b480      	push	{r7}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80014e6:	e142      	b.n	800176e <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	2101      	movs	r1, #1
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	fa01 f303 	lsl.w	r3, r1, r3
 80014f4:	4013      	ands	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 8134 	beq.w	8001768 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x38>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b12      	cmp	r3, #18
 800150e:	d125      	bne.n	800155c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	08da      	lsrs	r2, r3, #3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3208      	adds	r2, #8
 8001518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800151c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	220f      	movs	r2, #15
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	4013      	ands	r3, r2
 8001532:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	f003 020f 	and.w	r2, r3, #15
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	4313      	orrs	r3, r2
 800154c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	6979      	ldr	r1, [r7, #20]
 8001558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	4013      	ands	r3, r2
 8001572:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	4313      	orrs	r3, r2
 8001588:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d00b      	beq.n	80015b0 <HAL_GPIO_Init+0xd8>
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b02      	cmp	r3, #2
 800159e:	d007      	beq.n	80015b0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015a4:	2b11      	cmp	r3, #17
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b12      	cmp	r3, #18
 80015ae:	d130      	bne.n	8001612 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	2203      	movs	r2, #3
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	4013      	ands	r3, r2
 80015c6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015e6:	2201      	movs	r2, #1
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	4013      	ands	r3, r2
 80015f4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	091b      	lsrs	r3, r3, #4
 80015fc:	f003 0201 	and.w	r2, r3, #1
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	4313      	orrs	r3, r2
 800160a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	2b03      	cmp	r3, #3
 800161c:	d109      	bne.n	8001632 <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001626:	2b03      	cmp	r3, #3
 8001628:	d11b      	bne.n	8001662 <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d017      	beq.n	8001662 <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	2203      	movs	r2, #3
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	4013      	ands	r3, r2
 8001648:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	4313      	orrs	r3, r2
 800165a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d07c      	beq.n	8001768 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800166e:	4a47      	ldr	r2, [pc, #284]	@ (800178c <HAL_GPIO_Init+0x2b4>)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	089b      	lsrs	r3, r3, #2
 8001674:	3318      	adds	r3, #24
 8001676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	220f      	movs	r2, #15
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	4013      	ands	r3, r2
 8001690:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	0a9a      	lsrs	r2, r3, #10
 8001696:	4b3e      	ldr	r3, [pc, #248]	@ (8001790 <HAL_GPIO_Init+0x2b8>)
 8001698:	4013      	ands	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	f002 0203 	and.w	r2, r2, #3
 80016a0:	00d2      	lsls	r2, r2, #3
 80016a2:	4093      	lsls	r3, r2
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80016aa:	4938      	ldr	r1, [pc, #224]	@ (800178c <HAL_GPIO_Init+0x2b4>)
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	3318      	adds	r3, #24
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80016b8:	4b34      	ldr	r3, [pc, #208]	@ (800178c <HAL_GPIO_Init+0x2b4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	4013      	ands	r3, r2
 80016c6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4313      	orrs	r3, r2
 80016da:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80016dc:	4a2b      	ldr	r2, [pc, #172]	@ (800178c <HAL_GPIO_Init+0x2b4>)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80016e2:	4b2a      	ldr	r3, [pc, #168]	@ (800178c <HAL_GPIO_Init+0x2b4>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	4013      	ands	r3, r2
 80016f0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4313      	orrs	r3, r2
 8001704:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001706:	4a21      	ldr	r2, [pc, #132]	@ (800178c <HAL_GPIO_Init+0x2b4>)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800170c:	4b1f      	ldr	r3, [pc, #124]	@ (800178c <HAL_GPIO_Init+0x2b4>)
 800170e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001712:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	43db      	mvns	r3, r3
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	4013      	ands	r3, r2
 800171c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4313      	orrs	r3, r2
 8001730:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001732:	4a16      	ldr	r2, [pc, #88]	@ (800178c <HAL_GPIO_Init+0x2b4>)
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800173a:	4b14      	ldr	r3, [pc, #80]	@ (800178c <HAL_GPIO_Init+0x2b4>)
 800173c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001740:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	43db      	mvns	r3, r3
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	4013      	ands	r3, r2
 800174a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4313      	orrs	r3, r2
 800175e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001760:	4a0a      	ldr	r2, [pc, #40]	@ (800178c <HAL_GPIO_Init+0x2b4>)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	3301      	adds	r3, #1
 800176c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	fa22 f303 	lsr.w	r3, r2, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	f47f aeb5 	bne.w	80014e8 <HAL_GPIO_Init+0x10>
  }
}
 800177e:	bf00      	nop
 8001780:	bf00      	nop
 8001782:	371c      	adds	r7, #28
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	44022000 	.word	0x44022000
 8001790:	002f7f7f 	.word	0x002f7f7f

08001794 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	691a      	ldr	r2, [r3, #16]
 80017a4:	887b      	ldrh	r3, [r7, #2]
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d002      	beq.n	80017b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017ac:	2301      	movs	r3, #1
 80017ae:	73fb      	strb	r3, [r7, #15]
 80017b0:	e001      	b.n	80017b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
 80017d0:	4613      	mov	r3, r2
 80017d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017d4:	787b      	ldrb	r3, [r7, #1]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017da:	887a      	ldrh	r2, [r7, #2]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017e0:	e002      	b.n	80017e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017e2:	887a      	ldrh	r2, [r7, #2]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e08d      	b.n	8001922 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d106      	bne.n	8001820 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7fe ff6a 	bl	80006f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2224      	movs	r2, #36	@ 0x24
 8001824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0201 	bic.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001844:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001854:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d107      	bne.n	800186e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	e006      	b.n	800187c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800187a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d108      	bne.n	8001896 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	e007      	b.n	80018a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691a      	ldr	r2, [r3, #16]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69d9      	ldr	r1, [r3, #28]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a1a      	ldr	r2, [r3, #32]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0201 	orr.w	r2, r2, #1
 8001902:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2220      	movs	r2, #32
 800190e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af02      	add	r7, sp, #8
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	461a      	mov	r2, r3
 8001938:	460b      	mov	r3, r1
 800193a:	817b      	strh	r3, [r7, #10]
 800193c:	4613      	mov	r3, r2
 800193e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b20      	cmp	r3, #32
 800194a:	f040 80da 	bne.w	8001b02 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001954:	2b01      	cmp	r3, #1
 8001956:	d101      	bne.n	800195c <HAL_I2C_Master_Transmit+0x30>
 8001958:	2302      	movs	r3, #2
 800195a:	e0d3      	b.n	8001b04 <HAL_I2C_Master_Transmit+0x1d8>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001964:	f7ff fc24 	bl	80011b0 <HAL_GetTick>
 8001968:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2319      	movs	r3, #25
 8001970:	2201      	movs	r2, #1
 8001972:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f000 f8f0 	bl	8001b5c <I2C_WaitOnFlagUntilTimeout>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e0be      	b.n	8001b04 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2221      	movs	r2, #33	@ 0x21
 800198a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2210      	movs	r2, #16
 8001992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	893a      	ldrh	r2, [r7, #8]
 80019a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	2bff      	cmp	r3, #255	@ 0xff
 80019b6:	d90e      	bls.n	80019d6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	22ff      	movs	r2, #255	@ 0xff
 80019bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	8979      	ldrh	r1, [r7, #10]
 80019c6:	4b51      	ldr	r3, [pc, #324]	@ (8001b0c <HAL_I2C_Master_Transmit+0x1e0>)
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 fa88 	bl	8001ee4 <I2C_TransferConfig>
 80019d4:	e06c      	b.n	8001ab0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019da:	b29a      	uxth	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	8979      	ldrh	r1, [r7, #10]
 80019e8:	4b48      	ldr	r3, [pc, #288]	@ (8001b0c <HAL_I2C_Master_Transmit+0x1e0>)
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f000 fa77 	bl	8001ee4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80019f6:	e05b      	b.n	8001ab0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	6a39      	ldr	r1, [r7, #32]
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f000 f906 	bl	8001c0e <I2C_WaitOnTXISFlagUntilTimeout>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e07b      	b.n	8001b04 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a10:	781a      	ldrb	r2, [r3, #0]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1c:	1c5a      	adds	r2, r3, #1
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d034      	beq.n	8001ab0 <HAL_I2C_Master_Transmit+0x184>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d130      	bne.n	8001ab0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	6a3b      	ldr	r3, [r7, #32]
 8001a54:	2200      	movs	r2, #0
 8001a56:	2180      	movs	r1, #128	@ 0x80
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f000 f87f 	bl	8001b5c <I2C_WaitOnFlagUntilTimeout>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e04d      	b.n	8001b04 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	2bff      	cmp	r3, #255	@ 0xff
 8001a70:	d90e      	bls.n	8001a90 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	22ff      	movs	r2, #255	@ 0xff
 8001a76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	8979      	ldrh	r1, [r7, #10]
 8001a80:	2300      	movs	r3, #0
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f000 fa2b 	bl	8001ee4 <I2C_TransferConfig>
 8001a8e:	e00f      	b.n	8001ab0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	8979      	ldrh	r1, [r7, #10]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 fa1a 	bl	8001ee4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d19e      	bne.n	80019f8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	6a39      	ldr	r1, [r7, #32]
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 f8ec 	bl	8001c9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e01a      	b.n	8001b04 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6859      	ldr	r1, [r3, #4]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <HAL_I2C_Master_Transmit+0x1e4>)
 8001ae2:	400b      	ands	r3, r1
 8001ae4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2220      	movs	r2, #32
 8001aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e000      	b.n	8001b04 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001b02:	2302      	movs	r3, #2
  }
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	80002000 	.word	0x80002000
 8001b10:	fe00e800 	.word	0xfe00e800

08001b14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d103      	bne.n	8001b32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d007      	beq.n	8001b50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699a      	ldr	r2, [r3, #24]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	619a      	str	r2, [r3, #24]
  }
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b6c:	e03b      	b.n	8001be6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	6839      	ldr	r1, [r7, #0]
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 f8d6 	bl	8001d24 <I2C_IsErrorOccurred>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e041      	b.n	8001c06 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b88:	d02d      	beq.n	8001be6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b8a:	f7ff fb11 	bl	80011b0 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d302      	bcc.n	8001ba0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d122      	bne.n	8001be6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699a      	ldr	r2, [r3, #24]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	bf0c      	ite	eq
 8001bb0:	2301      	moveq	r3, #1
 8001bb2:	2300      	movne	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d113      	bne.n	8001be6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc2:	f043 0220 	orr.w	r2, r3, #32
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2220      	movs	r2, #32
 8001bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e00f      	b.n	8001c06 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	699a      	ldr	r2, [r3, #24]
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	bf0c      	ite	eq
 8001bf6:	2301      	moveq	r3, #1
 8001bf8:	2300      	movne	r3, #0
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d0b4      	beq.n	8001b6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b084      	sub	sp, #16
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c1a:	e033      	b.n	8001c84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	68b9      	ldr	r1, [r7, #8]
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f000 f87f 	bl	8001d24 <I2C_IsErrorOccurred>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e031      	b.n	8001c94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c36:	d025      	beq.n	8001c84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c38:	f7ff faba 	bl	80011b0 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d302      	bcc.n	8001c4e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d11a      	bne.n	8001c84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d013      	beq.n	8001c84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c60:	f043 0220 	orr.w	r2, r3, #32
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e007      	b.n	8001c94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d1c4      	bne.n	8001c1c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ca8:	e02f      	b.n	8001d0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 f838 	bl	8001d24 <I2C_IsErrorOccurred>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e02d      	b.n	8001d1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cbe:	f7ff fa77 	bl	80011b0 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	68ba      	ldr	r2, [r7, #8]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d302      	bcc.n	8001cd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d11a      	bne.n	8001d0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f003 0320 	and.w	r3, r3, #32
 8001cde:	2b20      	cmp	r3, #32
 8001ce0:	d013      	beq.n	8001d0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce6:	f043 0220 	orr.w	r2, r3, #32
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e007      	b.n	8001d1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f003 0320 	and.w	r3, r3, #32
 8001d14:	2b20      	cmp	r3, #32
 8001d16:	d1c8      	bne.n	8001caa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	@ 0x28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	f003 0310 	and.w	r3, r3, #16
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d068      	beq.n	8001e22 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2210      	movs	r2, #16
 8001d56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d58:	e049      	b.n	8001dee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d60:	d045      	beq.n	8001dee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d62:	f7ff fa25 	bl	80011b0 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d302      	bcc.n	8001d78 <I2C_IsErrorOccurred+0x54>
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d13a      	bne.n	8001dee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d9a:	d121      	bne.n	8001de0 <I2C_IsErrorOccurred+0xbc>
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001da2:	d01d      	beq.n	8001de0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001da4:	7cfb      	ldrb	r3, [r7, #19]
 8001da6:	2b20      	cmp	r3, #32
 8001da8:	d01a      	beq.n	8001de0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001db8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001dba:	f7ff f9f9 	bl	80011b0 <HAL_GetTick>
 8001dbe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dc0:	e00e      	b.n	8001de0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001dc2:	f7ff f9f5 	bl	80011b0 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b19      	cmp	r3, #25
 8001dce:	d907      	bls.n	8001de0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001dd0:	6a3b      	ldr	r3, [r7, #32]
 8001dd2:	f043 0320 	orr.w	r3, r3, #32
 8001dd6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001dde:	e006      	b.n	8001dee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	f003 0320 	and.w	r3, r3, #32
 8001dea:	2b20      	cmp	r3, #32
 8001dec:	d1e9      	bne.n	8001dc2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f003 0320 	and.w	r3, r3, #32
 8001df8:	2b20      	cmp	r3, #32
 8001dfa:	d003      	beq.n	8001e04 <I2C_IsErrorOccurred+0xe0>
 8001dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0aa      	beq.n	8001d5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d103      	bne.n	8001e14 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2220      	movs	r2, #32
 8001e12:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e14:	6a3b      	ldr	r3, [r7, #32]
 8001e16:	f043 0304 	orr.w	r3, r3, #4
 8001e1a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00b      	beq.n	8001e4c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00b      	beq.n	8001e6e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	f043 0308 	orr.w	r3, r3, #8
 8001e5c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00b      	beq.n	8001e90 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	f043 0302 	orr.w	r3, r3, #2
 8001e7e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001e90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d01c      	beq.n	8001ed2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f7ff fe3b 	bl	8001b14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6859      	ldr	r1, [r3, #4]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee0 <I2C_IsErrorOccurred+0x1bc>)
 8001eaa:	400b      	ands	r3, r1
 8001eac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001ed2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3728      	adds	r7, #40	@ 0x28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	fe00e800 	.word	0xfe00e800

08001ee4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	817b      	strh	r3, [r7, #10]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ef6:	897b      	ldrh	r3, [r7, #10]
 8001ef8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001efc:	7a7b      	ldrb	r3, [r7, #9]
 8001efe:	041b      	lsls	r3, r3, #16
 8001f00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f04:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f12:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	0d5b      	lsrs	r3, r3, #21
 8001f1e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001f22:	4b08      	ldr	r3, [pc, #32]	@ (8001f44 <I2C_TransferConfig+0x60>)
 8001f24:	430b      	orrs	r3, r1
 8001f26:	43db      	mvns	r3, r3
 8001f28:	ea02 0103 	and.w	r1, r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f36:	bf00      	nop
 8001f38:	371c      	adds	r7, #28
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	03ff63ff 	.word	0x03ff63ff

08001f48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b20      	cmp	r3, #32
 8001f5c:	d138      	bne.n	8001fd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e032      	b.n	8001fd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2224      	movs	r2, #36	@ 0x24
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0201 	bic.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6819      	ldr	r1, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0201 	orr.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e000      	b.n	8001fd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fd0:	2302      	movs	r3, #2
  }
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b085      	sub	sp, #20
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b20      	cmp	r3, #32
 8001ff2:	d139      	bne.n	8002068 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d101      	bne.n	8002002 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e033      	b.n	800206a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2224      	movs	r2, #36	@ 0x24
 800200e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0201 	bic.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002030:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	021b      	lsls	r3, r3, #8
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4313      	orrs	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0201 	orr.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2220      	movs	r2, #32
 8002058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	e000      	b.n	800206a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002068:	2302      	movs	r3, #2
  }
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d102      	bne.n	800208c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	f000 bc28 	b.w	80028dc <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800208c:	4b94      	ldr	r3, [pc, #592]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	f003 0318 	and.w	r3, r3, #24
 8002094:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002096:	4b92      	ldr	r3, [pc, #584]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 8002098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0310 	and.w	r3, r3, #16
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d05b      	beq.n	8002164 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d005      	beq.n	80020be <HAL_RCC_OscConfig+0x46>
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	2b18      	cmp	r3, #24
 80020b6:	d114      	bne.n	80020e2 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d111      	bne.n	80020e2 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d102      	bne.n	80020cc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	f000 bc08 	b.w	80028dc <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80020cc:	4b84      	ldr	r3, [pc, #528]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	041b      	lsls	r3, r3, #16
 80020da:	4981      	ldr	r1, [pc, #516]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80020e0:	e040      	b.n	8002164 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d023      	beq.n	8002132 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80020ea:	4b7d      	ldr	r3, [pc, #500]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a7c      	ldr	r2, [pc, #496]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 80020f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f6:	f7ff f85b 	bl	80011b0 <HAL_GetTick>
 80020fa:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80020fe:	f7ff f857 	bl	80011b0 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e3e5      	b.n	80028dc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002110:	4b73      	ldr	r3, [pc, #460]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800211c:	4b70      	ldr	r3, [pc, #448]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	041b      	lsls	r3, r3, #16
 800212a:	496d      	ldr	r1, [pc, #436]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 800212c:	4313      	orrs	r3, r2
 800212e:	618b      	str	r3, [r1, #24]
 8002130:	e018      	b.n	8002164 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002132:	4b6b      	ldr	r3, [pc, #428]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a6a      	ldr	r2, [pc, #424]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 8002138:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800213c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213e:	f7ff f837 	bl	80011b0 <HAL_GetTick>
 8002142:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002146:	f7ff f833 	bl	80011b0 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e3c1      	b.n	80028dc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002158:	4b61      	ldr	r3, [pc, #388]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1f0      	bne.n	8002146 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80a0 	beq.w	80022b2 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	2b10      	cmp	r3, #16
 8002176:	d005      	beq.n	8002184 <HAL_RCC_OscConfig+0x10c>
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	2b18      	cmp	r3, #24
 800217c:	d109      	bne.n	8002192 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	2b03      	cmp	r3, #3
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	f040 8092 	bne.w	80022b2 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e3a4      	b.n	80028dc <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800219a:	d106      	bne.n	80021aa <HAL_RCC_OscConfig+0x132>
 800219c:	4b50      	ldr	r3, [pc, #320]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a4f      	ldr	r2, [pc, #316]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 80021a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	e058      	b.n	800225c <HAL_RCC_OscConfig+0x1e4>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d112      	bne.n	80021d8 <HAL_RCC_OscConfig+0x160>
 80021b2:	4b4b      	ldr	r3, [pc, #300]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a4a      	ldr	r2, [pc, #296]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 80021b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	4b48      	ldr	r3, [pc, #288]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a47      	ldr	r2, [pc, #284]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 80021c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b45      	ldr	r3, [pc, #276]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a44      	ldr	r2, [pc, #272]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 80021d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e041      	b.n	800225c <HAL_RCC_OscConfig+0x1e4>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021e0:	d112      	bne.n	8002208 <HAL_RCC_OscConfig+0x190>
 80021e2:	4b3f      	ldr	r3, [pc, #252]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a3e      	ldr	r2, [pc, #248]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 80021e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	4b3c      	ldr	r3, [pc, #240]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a3b      	ldr	r2, [pc, #236]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 80021f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b39      	ldr	r3, [pc, #228]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a38      	ldr	r2, [pc, #224]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 8002200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	e029      	b.n	800225c <HAL_RCC_OscConfig+0x1e4>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002210:	d112      	bne.n	8002238 <HAL_RCC_OscConfig+0x1c0>
 8002212:	4b33      	ldr	r3, [pc, #204]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a32      	ldr	r2, [pc, #200]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 8002218:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	4b30      	ldr	r3, [pc, #192]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a2f      	ldr	r2, [pc, #188]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 8002224:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	4b2d      	ldr	r3, [pc, #180]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a2c      	ldr	r2, [pc, #176]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 8002230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e011      	b.n	800225c <HAL_RCC_OscConfig+0x1e4>
 8002238:	4b29      	ldr	r3, [pc, #164]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a28      	ldr	r2, [pc, #160]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 800223e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	4b26      	ldr	r3, [pc, #152]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a25      	ldr	r2, [pc, #148]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 800224a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4b23      	ldr	r3, [pc, #140]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a22      	ldr	r2, [pc, #136]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 8002256:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800225a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d013      	beq.n	800228c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7fe ffa4 	bl	80011b0 <HAL_GetTick>
 8002268:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800226c:	f7fe ffa0 	bl	80011b0 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	@ 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e32e      	b.n	80028dc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800227e:	4b18      	ldr	r3, [pc, #96]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0x1f4>
 800228a:	e012      	b.n	80022b2 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7fe ff90 	bl	80011b0 <HAL_GetTick>
 8002290:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002294:	f7fe ff8c 	bl	80011b0 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b64      	cmp	r3, #100	@ 0x64
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e31a      	b.n	80028dc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022a6:	4b0e      	ldr	r3, [pc, #56]	@ (80022e0 <HAL_RCC_OscConfig+0x268>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 809a 	beq.w	80023f4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <HAL_RCC_OscConfig+0x25a>
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	2b18      	cmp	r3, #24
 80022ca:	d149      	bne.n	8002360 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d146      	bne.n	8002360 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d104      	bne.n	80022e4 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e2fe      	b.n	80028dc <HAL_RCC_OscConfig+0x864>
 80022de:	bf00      	nop
 80022e0:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d11c      	bne.n	8002324 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80022ea:	4b9a      	ldr	r3, [pc, #616]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0218 	and.w	r2, r3, #24
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d014      	beq.n	8002324 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80022fa:	4b96      	ldr	r3, [pc, #600]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f023 0218 	bic.w	r2, r3, #24
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	4993      	ldr	r1, [pc, #588]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 8002308:	4313      	orrs	r3, r2
 800230a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 800230c:	f000 fdd0 	bl	8002eb0 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002310:	4b91      	ldr	r3, [pc, #580]	@ (8002558 <HAL_RCC_OscConfig+0x4e0>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe fec1 	bl	800109c <HAL_InitTick>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e2db      	b.n	80028dc <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7fe ff44 	bl	80011b0 <HAL_GetTick>
 8002328:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800232c:	f7fe ff40 	bl	80011b0 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e2ce      	b.n	80028dc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800233e:	4b85      	ldr	r3, [pc, #532]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f0      	beq.n	800232c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800234a:	4b82      	ldr	r3, [pc, #520]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	041b      	lsls	r3, r3, #16
 8002358:	497e      	ldr	r1, [pc, #504]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 800235a:	4313      	orrs	r3, r2
 800235c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800235e:	e049      	b.n	80023f4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d02c      	beq.n	80023c2 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002368:	4b7a      	ldr	r3, [pc, #488]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f023 0218 	bic.w	r2, r3, #24
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	4977      	ldr	r1, [pc, #476]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800237a:	4b76      	ldr	r3, [pc, #472]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a75      	ldr	r2, [pc, #468]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002386:	f7fe ff13 	bl	80011b0 <HAL_GetTick>
 800238a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800238e:	f7fe ff0f 	bl	80011b0 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e29d      	b.n	80028dc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023a0:	4b6c      	ldr	r3, [pc, #432]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80023ac:	4b69      	ldr	r3, [pc, #420]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	041b      	lsls	r3, r3, #16
 80023ba:	4966      	ldr	r1, [pc, #408]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	610b      	str	r3, [r1, #16]
 80023c0:	e018      	b.n	80023f4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023c2:	4b64      	ldr	r3, [pc, #400]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a63      	ldr	r2, [pc, #396]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ce:	f7fe feef 	bl	80011b0 <HAL_GetTick>
 80023d2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80023d6:	f7fe feeb 	bl	80011b0 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e279      	b.n	80028dc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e8:	4b5a      	ldr	r3, [pc, #360]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1f0      	bne.n	80023d6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0308 	and.w	r3, r3, #8
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d03c      	beq.n	800247a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d01c      	beq.n	8002442 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002408:	4b52      	ldr	r3, [pc, #328]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 800240a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800240e:	4a51      	ldr	r2, [pc, #324]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 8002410:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002414:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002418:	f7fe feca 	bl	80011b0 <HAL_GetTick>
 800241c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002420:	f7fe fec6 	bl	80011b0 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e254      	b.n	80028dc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002432:	4b48      	ldr	r3, [pc, #288]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 8002434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002438:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0ef      	beq.n	8002420 <HAL_RCC_OscConfig+0x3a8>
 8002440:	e01b      	b.n	800247a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002442:	4b44      	ldr	r3, [pc, #272]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 8002444:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002448:	4a42      	ldr	r2, [pc, #264]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 800244a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800244e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002452:	f7fe fead 	bl	80011b0 <HAL_GetTick>
 8002456:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800245a:	f7fe fea9 	bl	80011b0 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e237      	b.n	80028dc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800246c:	4b39      	ldr	r3, [pc, #228]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 800246e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002472:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1ef      	bne.n	800245a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 80d2 	beq.w	800262c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002488:	4b34      	ldr	r3, [pc, #208]	@ (800255c <HAL_RCC_OscConfig+0x4e4>)
 800248a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d118      	bne.n	80024c6 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002494:	4b31      	ldr	r3, [pc, #196]	@ (800255c <HAL_RCC_OscConfig+0x4e4>)
 8002496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002498:	4a30      	ldr	r2, [pc, #192]	@ (800255c <HAL_RCC_OscConfig+0x4e4>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a0:	f7fe fe86 	bl	80011b0 <HAL_GetTick>
 80024a4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a8:	f7fe fe82 	bl	80011b0 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e210      	b.n	80028dc <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80024ba:	4b28      	ldr	r3, [pc, #160]	@ (800255c <HAL_RCC_OscConfig+0x4e4>)
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d108      	bne.n	80024e0 <HAL_RCC_OscConfig+0x468>
 80024ce:	4b21      	ldr	r3, [pc, #132]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 80024d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024de:	e074      	b.n	80025ca <HAL_RCC_OscConfig+0x552>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d118      	bne.n	800251a <HAL_RCC_OscConfig+0x4a2>
 80024e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 80024ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024ee:	4a19      	ldr	r2, [pc, #100]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 80024f0:	f023 0301 	bic.w	r3, r3, #1
 80024f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024f8:	4b16      	ldr	r3, [pc, #88]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 80024fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024fe:	4a15      	ldr	r2, [pc, #84]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 8002500:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002504:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002508:	4b12      	ldr	r3, [pc, #72]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 800250a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800250e:	4a11      	ldr	r2, [pc, #68]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 8002510:	f023 0304 	bic.w	r3, r3, #4
 8002514:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002518:	e057      	b.n	80025ca <HAL_RCC_OscConfig+0x552>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b05      	cmp	r3, #5
 8002520:	d11e      	bne.n	8002560 <HAL_RCC_OscConfig+0x4e8>
 8002522:	4b0c      	ldr	r3, [pc, #48]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 8002524:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002528:	4a0a      	ldr	r2, [pc, #40]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 800252a:	f043 0304 	orr.w	r3, r3, #4
 800252e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002532:	4b08      	ldr	r3, [pc, #32]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 8002534:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002538:	4a06      	ldr	r2, [pc, #24]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 800253a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800253e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002542:	4b04      	ldr	r3, [pc, #16]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 8002544:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002548:	4a02      	ldr	r2, [pc, #8]	@ (8002554 <HAL_RCC_OscConfig+0x4dc>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002552:	e03a      	b.n	80025ca <HAL_RCC_OscConfig+0x552>
 8002554:	44020c00 	.word	0x44020c00
 8002558:	20000004 	.word	0x20000004
 800255c:	44020800 	.word	0x44020800
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	2b85      	cmp	r3, #133	@ 0x85
 8002566:	d118      	bne.n	800259a <HAL_RCC_OscConfig+0x522>
 8002568:	4ba2      	ldr	r3, [pc, #648]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 800256a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800256e:	4aa1      	ldr	r2, [pc, #644]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 8002570:	f043 0304 	orr.w	r3, r3, #4
 8002574:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002578:	4b9e      	ldr	r3, [pc, #632]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 800257a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800257e:	4a9d      	ldr	r2, [pc, #628]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 8002580:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002584:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002588:	4b9a      	ldr	r3, [pc, #616]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 800258a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800258e:	4a99      	ldr	r2, [pc, #612]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002598:	e017      	b.n	80025ca <HAL_RCC_OscConfig+0x552>
 800259a:	4b96      	ldr	r3, [pc, #600]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 800259c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025a0:	4a94      	ldr	r2, [pc, #592]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 80025a2:	f023 0301 	bic.w	r3, r3, #1
 80025a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025aa:	4b92      	ldr	r3, [pc, #584]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 80025ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025b0:	4a90      	ldr	r2, [pc, #576]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 80025b2:	f023 0304 	bic.w	r3, r3, #4
 80025b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025ba:	4b8e      	ldr	r3, [pc, #568]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 80025bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025c0:	4a8c      	ldr	r2, [pc, #560]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 80025c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d016      	beq.n	8002600 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d2:	f7fe fded 	bl	80011b0 <HAL_GetTick>
 80025d6:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d8:	e00a      	b.n	80025f0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025da:	f7fe fde9 	bl	80011b0 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e175      	b.n	80028dc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f0:	4b80      	ldr	r3, [pc, #512]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 80025f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0ed      	beq.n	80025da <HAL_RCC_OscConfig+0x562>
 80025fe:	e015      	b.n	800262c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7fe fdd6 	bl	80011b0 <HAL_GetTick>
 8002604:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002606:	e00a      	b.n	800261e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002608:	f7fe fdd2 	bl	80011b0 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e15e      	b.n	80028dc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800261e:	4b75      	ldr	r3, [pc, #468]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 8002620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1ed      	bne.n	8002608 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	2b00      	cmp	r3, #0
 8002636:	d036      	beq.n	80026a6 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263c:	2b00      	cmp	r3, #0
 800263e:	d019      	beq.n	8002674 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002640:	4b6c      	ldr	r3, [pc, #432]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a6b      	ldr	r2, [pc, #428]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 8002646:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800264a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264c:	f7fe fdb0 	bl	80011b0 <HAL_GetTick>
 8002650:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002654:	f7fe fdac 	bl	80011b0 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e13a      	b.n	80028dc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002666:	4b63      	ldr	r3, [pc, #396]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x5dc>
 8002672:	e018      	b.n	80026a6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002674:	4b5f      	ldr	r3, [pc, #380]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a5e      	ldr	r2, [pc, #376]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 800267a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800267e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002680:	f7fe fd96 	bl	80011b0 <HAL_GetTick>
 8002684:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002688:	f7fe fd92 	bl	80011b0 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e120      	b.n	80028dc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800269a:	4b56      	ldr	r3, [pc, #344]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 8115 	beq.w	80028da <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	2b18      	cmp	r3, #24
 80026b4:	f000 80af 	beq.w	8002816 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026bc:	2b02      	cmp	r3, #2
 80026be:	f040 8086 	bne.w	80027ce <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80026c2:	4b4c      	ldr	r3, [pc, #304]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a4b      	ldr	r2, [pc, #300]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 80026c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ce:	f7fe fd6f 	bl	80011b0 <HAL_GetTick>
 80026d2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80026d6:	f7fe fd6b 	bl	80011b0 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e0f9      	b.n	80028dc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80026e8:	4b42      	ldr	r3, [pc, #264]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f0      	bne.n	80026d6 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80026f4:	4b3f      	ldr	r3, [pc, #252]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 80026f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80026fc:	f023 0303 	bic.w	r3, r3, #3
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002708:	0212      	lsls	r2, r2, #8
 800270a:	430a      	orrs	r2, r1
 800270c:	4939      	ldr	r1, [pc, #228]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 800270e:	4313      	orrs	r3, r2
 8002710:	628b      	str	r3, [r1, #40]	@ 0x28
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002716:	3b01      	subs	r3, #1
 8002718:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002720:	3b01      	subs	r3, #1
 8002722:	025b      	lsls	r3, r3, #9
 8002724:	b29b      	uxth	r3, r3
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800272c:	3b01      	subs	r3, #1
 800272e:	041b      	lsls	r3, r3, #16
 8002730:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273a:	3b01      	subs	r3, #1
 800273c:	061b      	lsls	r3, r3, #24
 800273e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002742:	492c      	ldr	r1, [pc, #176]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 8002744:	4313      	orrs	r3, r2
 8002746:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002748:	4b2a      	ldr	r3, [pc, #168]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 800274a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274c:	4a29      	ldr	r2, [pc, #164]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 800274e:	f023 0310 	bic.w	r3, r3, #16
 8002752:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002758:	4a26      	ldr	r2, [pc, #152]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800275e:	4b25      	ldr	r3, [pc, #148]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 8002760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002762:	4a24      	ldr	r2, [pc, #144]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 8002764:	f043 0310 	orr.w	r3, r3, #16
 8002768:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800276a:	4b22      	ldr	r3, [pc, #136]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 800276c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276e:	f023 020c 	bic.w	r2, r3, #12
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002776:	491f      	ldr	r1, [pc, #124]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 8002778:	4313      	orrs	r3, r2
 800277a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800277c:	4b1d      	ldr	r3, [pc, #116]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 800277e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002780:	f023 0220 	bic.w	r2, r3, #32
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002788:	491a      	ldr	r1, [pc, #104]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 800278a:	4313      	orrs	r3, r2
 800278c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800278e:	4b19      	ldr	r3, [pc, #100]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 8002790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002792:	4a18      	ldr	r2, [pc, #96]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002798:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800279a:	4b16      	ldr	r3, [pc, #88]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a15      	ldr	r2, [pc, #84]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 80027a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a6:	f7fe fd03 	bl	80011b0 <HAL_GetTick>
 80027aa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80027ae:	f7fe fcff 	bl	80011b0 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e08d      	b.n	80028dc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80027c0:	4b0c      	ldr	r3, [pc, #48]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0x736>
 80027cc:	e085      	b.n	80028da <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80027ce:	4b09      	ldr	r3, [pc, #36]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a08      	ldr	r2, [pc, #32]	@ (80027f4 <HAL_RCC_OscConfig+0x77c>)
 80027d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027da:	f7fe fce9 	bl	80011b0 <HAL_GetTick>
 80027de:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80027e0:	e00a      	b.n	80027f8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80027e2:	f7fe fce5 	bl	80011b0 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d903      	bls.n	80027f8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e073      	b.n	80028dc <HAL_RCC_OscConfig+0x864>
 80027f4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80027f8:	4b3a      	ldr	r3, [pc, #232]	@ (80028e4 <HAL_RCC_OscConfig+0x86c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1ee      	bne.n	80027e2 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002804:	4b37      	ldr	r3, [pc, #220]	@ (80028e4 <HAL_RCC_OscConfig+0x86c>)
 8002806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002808:	4a36      	ldr	r2, [pc, #216]	@ (80028e4 <HAL_RCC_OscConfig+0x86c>)
 800280a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800280e:	f023 0303 	bic.w	r3, r3, #3
 8002812:	6293      	str	r3, [r2, #40]	@ 0x28
 8002814:	e061      	b.n	80028da <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002816:	4b33      	ldr	r3, [pc, #204]	@ (80028e4 <HAL_RCC_OscConfig+0x86c>)
 8002818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800281c:	4b31      	ldr	r3, [pc, #196]	@ (80028e4 <HAL_RCC_OscConfig+0x86c>)
 800281e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002820:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002826:	2b01      	cmp	r3, #1
 8002828:	d031      	beq.n	800288e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	f003 0203 	and.w	r2, r3, #3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002834:	429a      	cmp	r2, r3
 8002836:	d12a      	bne.n	800288e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	0a1b      	lsrs	r3, r3, #8
 800283c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002844:	429a      	cmp	r2, r3
 8002846:	d122      	bne.n	800288e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002852:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002854:	429a      	cmp	r2, r3
 8002856:	d11a      	bne.n	800288e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	0a5b      	lsrs	r3, r3, #9
 800285c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002864:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d111      	bne.n	800288e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	0c1b      	lsrs	r3, r3, #16
 800286e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002876:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002878:	429a      	cmp	r2, r3
 800287a:	d108      	bne.n	800288e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	0e1b      	lsrs	r3, r3, #24
 8002880:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002888:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800288a:	429a      	cmp	r2, r3
 800288c:	d001      	beq.n	8002892 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e024      	b.n	80028dc <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002892:	4b14      	ldr	r3, [pc, #80]	@ (80028e4 <HAL_RCC_OscConfig+0x86c>)
 8002894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002896:	08db      	lsrs	r3, r3, #3
 8002898:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d01a      	beq.n	80028da <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80028a4:	4b0f      	ldr	r3, [pc, #60]	@ (80028e4 <HAL_RCC_OscConfig+0x86c>)
 80028a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a8:	4a0e      	ldr	r2, [pc, #56]	@ (80028e4 <HAL_RCC_OscConfig+0x86c>)
 80028aa:	f023 0310 	bic.w	r3, r3, #16
 80028ae:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b0:	f7fe fc7e 	bl	80011b0 <HAL_GetTick>
 80028b4:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80028b6:	bf00      	nop
 80028b8:	f7fe fc7a 	bl	80011b0 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d0f9      	beq.n	80028b8 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c8:	4a06      	ldr	r2, [pc, #24]	@ (80028e4 <HAL_RCC_OscConfig+0x86c>)
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80028ce:	4b05      	ldr	r3, [pc, #20]	@ (80028e4 <HAL_RCC_OscConfig+0x86c>)
 80028d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d2:	4a04      	ldr	r2, [pc, #16]	@ (80028e4 <HAL_RCC_OscConfig+0x86c>)
 80028d4:	f043 0310 	orr.w	r3, r3, #16
 80028d8:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3720      	adds	r7, #32
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	44020c00 	.word	0x44020c00

080028e8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e19e      	b.n	8002c3a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028fc:	4b83      	ldr	r3, [pc, #524]	@ (8002b0c <HAL_RCC_ClockConfig+0x224>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 030f 	and.w	r3, r3, #15
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d910      	bls.n	800292c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b80      	ldr	r3, [pc, #512]	@ (8002b0c <HAL_RCC_ClockConfig+0x224>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 020f 	bic.w	r2, r3, #15
 8002912:	497e      	ldr	r1, [pc, #504]	@ (8002b0c <HAL_RCC_ClockConfig+0x224>)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	4313      	orrs	r3, r2
 8002918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b7c      	ldr	r3, [pc, #496]	@ (8002b0c <HAL_RCC_ClockConfig+0x224>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e186      	b.n	8002c3a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	2b00      	cmp	r3, #0
 8002936:	d012      	beq.n	800295e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	695a      	ldr	r2, [r3, #20]
 800293c:	4b74      	ldr	r3, [pc, #464]	@ (8002b10 <HAL_RCC_ClockConfig+0x228>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	0a1b      	lsrs	r3, r3, #8
 8002942:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002946:	429a      	cmp	r2, r3
 8002948:	d909      	bls.n	800295e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800294a:	4b71      	ldr	r3, [pc, #452]	@ (8002b10 <HAL_RCC_ClockConfig+0x228>)
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	021b      	lsls	r3, r3, #8
 8002958:	496d      	ldr	r1, [pc, #436]	@ (8002b10 <HAL_RCC_ClockConfig+0x228>)
 800295a:	4313      	orrs	r3, r2
 800295c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b00      	cmp	r3, #0
 8002968:	d012      	beq.n	8002990 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691a      	ldr	r2, [r3, #16]
 800296e:	4b68      	ldr	r3, [pc, #416]	@ (8002b10 <HAL_RCC_ClockConfig+0x228>)
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	091b      	lsrs	r3, r3, #4
 8002974:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002978:	429a      	cmp	r2, r3
 800297a:	d909      	bls.n	8002990 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800297c:	4b64      	ldr	r3, [pc, #400]	@ (8002b10 <HAL_RCC_ClockConfig+0x228>)
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	4961      	ldr	r1, [pc, #388]	@ (8002b10 <HAL_RCC_ClockConfig+0x228>)
 800298c:	4313      	orrs	r3, r2
 800298e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d010      	beq.n	80029be <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	4b5b      	ldr	r3, [pc, #364]	@ (8002b10 <HAL_RCC_ClockConfig+0x228>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d908      	bls.n	80029be <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80029ac:	4b58      	ldr	r3, [pc, #352]	@ (8002b10 <HAL_RCC_ClockConfig+0x228>)
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4955      	ldr	r1, [pc, #340]	@ (8002b10 <HAL_RCC_ClockConfig+0x228>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d010      	beq.n	80029ec <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	4b50      	ldr	r3, [pc, #320]	@ (8002b10 <HAL_RCC_ClockConfig+0x228>)
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d908      	bls.n	80029ec <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80029da:	4b4d      	ldr	r3, [pc, #308]	@ (8002b10 <HAL_RCC_ClockConfig+0x228>)
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	f023 020f 	bic.w	r2, r3, #15
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	494a      	ldr	r1, [pc, #296]	@ (8002b10 <HAL_RCC_ClockConfig+0x228>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 8093 	beq.w	8002b20 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d107      	bne.n	8002a12 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002a02:	4b43      	ldr	r3, [pc, #268]	@ (8002b10 <HAL_RCC_ClockConfig+0x228>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d121      	bne.n	8002a52 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e113      	b.n	8002c3a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d107      	bne.n	8002a2a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a1a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b10 <HAL_RCC_ClockConfig+0x228>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d115      	bne.n	8002a52 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e107      	b.n	8002c3a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002a32:	4b37      	ldr	r3, [pc, #220]	@ (8002b10 <HAL_RCC_ClockConfig+0x228>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e0fb      	b.n	8002c3a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a42:	4b33      	ldr	r3, [pc, #204]	@ (8002b10 <HAL_RCC_ClockConfig+0x228>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e0f3      	b.n	8002c3a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002a52:	4b2f      	ldr	r3, [pc, #188]	@ (8002b10 <HAL_RCC_ClockConfig+0x228>)
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f023 0203 	bic.w	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	492c      	ldr	r1, [pc, #176]	@ (8002b10 <HAL_RCC_ClockConfig+0x228>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a64:	f7fe fba4 	bl	80011b0 <HAL_GetTick>
 8002a68:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	d112      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002a74:	f7fe fb9c 	bl	80011b0 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e0d7      	b.n	8002c3a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a8a:	4b21      	ldr	r3, [pc, #132]	@ (8002b10 <HAL_RCC_ClockConfig+0x228>)
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	f003 0318 	and.w	r3, r3, #24
 8002a92:	2b18      	cmp	r3, #24
 8002a94:	d1ee      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x18c>
 8002a96:	e043      	b.n	8002b20 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d112      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aa0:	e00a      	b.n	8002ab8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa2:	f7fe fb85 	bl	80011b0 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e0c0      	b.n	8002c3a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ab8:	4b15      	ldr	r3, [pc, #84]	@ (8002b10 <HAL_RCC_ClockConfig+0x228>)
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	f003 0318 	and.w	r3, r3, #24
 8002ac0:	2b10      	cmp	r3, #16
 8002ac2:	d1ee      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
 8002ac4:	e02c      	b.n	8002b20 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d122      	bne.n	8002b14 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad0:	f7fe fb6e 	bl	80011b0 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e0a9      	b.n	8002c3a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b10 <HAL_RCC_ClockConfig+0x228>)
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f003 0318 	and.w	r3, r3, #24
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d1ee      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x1e8>
 8002af2:	e015      	b.n	8002b20 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002af4:	f7fe fb5c 	bl	80011b0 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d906      	bls.n	8002b14 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e097      	b.n	8002c3a <HAL_RCC_ClockConfig+0x352>
 8002b0a:	bf00      	nop
 8002b0c:	40022000 	.word	0x40022000
 8002b10:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b14:	4b4b      	ldr	r3, [pc, #300]	@ (8002c44 <HAL_RCC_ClockConfig+0x35c>)
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	f003 0318 	and.w	r3, r3, #24
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1e9      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d010      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	4b44      	ldr	r3, [pc, #272]	@ (8002c44 <HAL_RCC_ClockConfig+0x35c>)
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d208      	bcs.n	8002b4e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002b3c:	4b41      	ldr	r3, [pc, #260]	@ (8002c44 <HAL_RCC_ClockConfig+0x35c>)
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	f023 020f 	bic.w	r2, r3, #15
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	493e      	ldr	r1, [pc, #248]	@ (8002c44 <HAL_RCC_ClockConfig+0x35c>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c48 <HAL_RCC_ClockConfig+0x360>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d210      	bcs.n	8002b7e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5c:	4b3a      	ldr	r3, [pc, #232]	@ (8002c48 <HAL_RCC_ClockConfig+0x360>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f023 020f 	bic.w	r2, r3, #15
 8002b64:	4938      	ldr	r1, [pc, #224]	@ (8002c48 <HAL_RCC_ClockConfig+0x360>)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6c:	4b36      	ldr	r3, [pc, #216]	@ (8002c48 <HAL_RCC_ClockConfig+0x360>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d001      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e05d      	b.n	8002c3a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d010      	beq.n	8002bac <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	4b2d      	ldr	r3, [pc, #180]	@ (8002c44 <HAL_RCC_ClockConfig+0x35c>)
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d208      	bcs.n	8002bac <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002b9a:	4b2a      	ldr	r3, [pc, #168]	@ (8002c44 <HAL_RCC_ClockConfig+0x35c>)
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	4927      	ldr	r1, [pc, #156]	@ (8002c44 <HAL_RCC_ClockConfig+0x35c>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d012      	beq.n	8002bde <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	4b21      	ldr	r3, [pc, #132]	@ (8002c44 <HAL_RCC_ClockConfig+0x35c>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d209      	bcs.n	8002bde <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002bca:	4b1e      	ldr	r3, [pc, #120]	@ (8002c44 <HAL_RCC_ClockConfig+0x35c>)
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	491a      	ldr	r1, [pc, #104]	@ (8002c44 <HAL_RCC_ClockConfig+0x35c>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0310 	and.w	r3, r3, #16
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d012      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695a      	ldr	r2, [r3, #20]
 8002bee:	4b15      	ldr	r3, [pc, #84]	@ (8002c44 <HAL_RCC_ClockConfig+0x35c>)
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	0a1b      	lsrs	r3, r3, #8
 8002bf4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d209      	bcs.n	8002c10 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002bfc:	4b11      	ldr	r3, [pc, #68]	@ (8002c44 <HAL_RCC_ClockConfig+0x35c>)
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	021b      	lsls	r3, r3, #8
 8002c0a:	490e      	ldr	r1, [pc, #56]	@ (8002c44 <HAL_RCC_ClockConfig+0x35c>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002c10:	f000 f822 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002c14:	4602      	mov	r2, r0
 8002c16:	4b0b      	ldr	r3, [pc, #44]	@ (8002c44 <HAL_RCC_ClockConfig+0x35c>)
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	490b      	ldr	r1, [pc, #44]	@ (8002c4c <HAL_RCC_ClockConfig+0x364>)
 8002c20:	5ccb      	ldrb	r3, [r1, r3]
 8002c22:	fa22 f303 	lsr.w	r3, r2, r3
 8002c26:	4a0a      	ldr	r2, [pc, #40]	@ (8002c50 <HAL_RCC_ClockConfig+0x368>)
 8002c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c54 <HAL_RCC_ClockConfig+0x36c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe fa34 	bl	800109c <HAL_InitTick>
 8002c34:	4603      	mov	r3, r0
 8002c36:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002c38:	7afb      	ldrb	r3, [r7, #11]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	44020c00 	.word	0x44020c00
 8002c48:	40022000 	.word	0x40022000
 8002c4c:	08006384 	.word	0x08006384
 8002c50:	20000000 	.word	0x20000000
 8002c54:	20000004 	.word	0x20000004

08002c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b089      	sub	sp, #36	@ 0x24
 8002c5c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002c5e:	4b8c      	ldr	r3, [pc, #560]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f003 0318 	and.w	r3, r3, #24
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d102      	bne.n	8002c70 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002c6a:	4b8a      	ldr	r3, [pc, #552]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	e107      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c70:	4b87      	ldr	r3, [pc, #540]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	f003 0318 	and.w	r3, r3, #24
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d112      	bne.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002c7c:	4b84      	ldr	r3, [pc, #528]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d009      	beq.n	8002c9c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002c88:	4b81      	ldr	r3, [pc, #516]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	08db      	lsrs	r3, r3, #3
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	4a81      	ldr	r2, [pc, #516]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x240>)
 8002c94:	fa22 f303 	lsr.w	r3, r2, r3
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	e0f1      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002c9c:	4b7e      	ldr	r3, [pc, #504]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x240>)
 8002c9e:	61fb      	str	r3, [r7, #28]
 8002ca0:	e0ee      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ca2:	4b7b      	ldr	r3, [pc, #492]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	f003 0318 	and.w	r3, r3, #24
 8002caa:	2b10      	cmp	r3, #16
 8002cac:	d102      	bne.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cae:	4b7b      	ldr	r3, [pc, #492]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0x244>)
 8002cb0:	61fb      	str	r3, [r7, #28]
 8002cb2:	e0e5      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cb4:	4b76      	ldr	r3, [pc, #472]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x238>)
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	f003 0318 	and.w	r3, r3, #24
 8002cbc:	2b18      	cmp	r3, #24
 8002cbe:	f040 80dd 	bne.w	8002e7c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002cc2:	4b73      	ldr	r3, [pc, #460]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x238>)
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002ccc:	4b70      	ldr	r3, [pc, #448]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x238>)
 8002cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd0:	0a1b      	lsrs	r3, r3, #8
 8002cd2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cd6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002cd8:	4b6d      	ldr	r3, [pc, #436]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x238>)
 8002cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002ce4:	4b6a      	ldr	r3, [pc, #424]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002ce8:	08db      	lsrs	r3, r3, #3
 8002cea:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	fb02 f303 	mul.w	r3, r2, r3
 8002cf4:	ee07 3a90 	vmov	s15, r3
 8002cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cfc:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 80b7 	beq.w	8002e76 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d003      	beq.n	8002d16 <HAL_RCC_GetSysClockFreq+0xbe>
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d056      	beq.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x16a>
 8002d14:	e077      	b.n	8002e06 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002d16:	4b5e      	ldr	r3, [pc, #376]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d02d      	beq.n	8002d7e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002d22:	4b5b      	ldr	r3, [pc, #364]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	08db      	lsrs	r3, r3, #3
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	4a5a      	ldr	r2, [pc, #360]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x240>)
 8002d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d32:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	ee07 3a90 	vmov	s15, r3
 8002d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d4c:	4b50      	ldr	r3, [pc, #320]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d54:	ee07 3a90 	vmov	s15, r3
 8002d58:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d5c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d60:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002ea0 <HAL_RCC_GetSysClockFreq+0x248>
 8002d64:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d68:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d70:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d78:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002d7c:	e065      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	ee07 3a90 	vmov	s15, r3
 8002d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d88:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002ea4 <HAL_RCC_GetSysClockFreq+0x24c>
 8002d8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d90:	4b3f      	ldr	r3, [pc, #252]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d98:	ee07 3a90 	vmov	s15, r3
 8002d9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002da0:	ed97 6a02 	vldr	s12, [r7, #8]
 8002da4:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002ea0 <HAL_RCC_GetSysClockFreq+0x248>
 8002da8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002db0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002db4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dbc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002dc0:	e043      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	ee07 3a90 	vmov	s15, r3
 8002dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dcc:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002ea8 <HAL_RCC_GetSysClockFreq+0x250>
 8002dd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dd4:	4b2e      	ldr	r3, [pc, #184]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x238>)
 8002dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ddc:	ee07 3a90 	vmov	s15, r3
 8002de0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002de4:	ed97 6a02 	vldr	s12, [r7, #8]
 8002de8:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002ea0 <HAL_RCC_GetSysClockFreq+0x248>
 8002dec:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002df0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002df4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002df8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e00:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002e04:	e021      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	ee07 3a90 	vmov	s15, r3
 8002e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e10:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002eac <HAL_RCC_GetSysClockFreq+0x254>
 8002e14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e18:	4b1d      	ldr	r3, [pc, #116]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e20:	ee07 3a90 	vmov	s15, r3
 8002e24:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e28:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e2c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002ea0 <HAL_RCC_GetSysClockFreq+0x248>
 8002e30:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e34:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e44:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002e48:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002e4a:	4b11      	ldr	r3, [pc, #68]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e4e:	0a5b      	lsrs	r3, r3, #9
 8002e50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e54:	3301      	adds	r3, #1
 8002e56:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	ee07 3a90 	vmov	s15, r3
 8002e5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e62:	edd7 6a06 	vldr	s13, [r7, #24]
 8002e66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e6e:	ee17 3a90 	vmov	r3, s15
 8002e72:	61fb      	str	r3, [r7, #28]
 8002e74:	e004      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
 8002e7a:	e001      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002e7c:	4b06      	ldr	r3, [pc, #24]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x240>)
 8002e7e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002e80:	69fb      	ldr	r3, [r7, #28]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3724      	adds	r7, #36	@ 0x24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	44020c00 	.word	0x44020c00
 8002e94:	003d0900 	.word	0x003d0900
 8002e98:	03d09000 	.word	0x03d09000
 8002e9c:	007a1200 	.word	0x007a1200
 8002ea0:	46000000 	.word	0x46000000
 8002ea4:	4c742400 	.word	0x4c742400
 8002ea8:	4af42400 	.word	0x4af42400
 8002eac:	4a742400 	.word	0x4a742400

08002eb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002eb4:	f7ff fed0 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	4b08      	ldr	r3, [pc, #32]	@ (8002edc <HAL_RCC_GetHCLKFreq+0x2c>)
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002ebe:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002ec2:	4907      	ldr	r1, [pc, #28]	@ (8002ee0 <HAL_RCC_GetHCLKFreq+0x30>)
 8002ec4:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002ec6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002eca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ece:	4a05      	ldr	r2, [pc, #20]	@ (8002ee4 <HAL_RCC_GetHCLKFreq+0x34>)
 8002ed0:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002ed2:	4b04      	ldr	r3, [pc, #16]	@ (8002ee4 <HAL_RCC_GetHCLKFreq+0x34>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	44020c00 	.word	0x44020c00
 8002ee0:	08006384 	.word	0x08006384
 8002ee4:	20000000 	.word	0x20000000

08002ee8 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eec:	b0d8      	sub	sp, #352	@ 0x160
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002efa:	2300      	movs	r3, #0
 8002efc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002f00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f08:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	ea54 0305 	orrs.w	r3, r4, r5
 8002f12:	d00b      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002f14:	4bcd      	ldr	r3, [pc, #820]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002f16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f1a:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8002f1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f24:	4ac9      	ldr	r2, [pc, #804]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002f26:	430b      	orrs	r3, r1
 8002f28:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f34:	f002 0801 	and.w	r8, r2, #1
 8002f38:	f04f 0900 	mov.w	r9, #0
 8002f3c:	ea58 0309 	orrs.w	r3, r8, r9
 8002f40:	d042      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002f42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f48:	2b05      	cmp	r3, #5
 8002f4a:	d823      	bhi.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8002f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f54 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f52:	bf00      	nop
 8002f54:	08002f9d 	.word	0x08002f9d
 8002f58:	08002f6d 	.word	0x08002f6d
 8002f5c:	08002f81 	.word	0x08002f81
 8002f60:	08002f9d 	.word	0x08002f9d
 8002f64:	08002f9d 	.word	0x08002f9d
 8002f68:	08002f9d 	.word	0x08002f9d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f70:	3308      	adds	r3, #8
 8002f72:	4618      	mov	r0, r3
 8002f74:	f001 ff42 	bl	8004dfc <RCCEx_PLL2_Config>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8002f7e:	e00e      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f84:	3330      	adds	r3, #48	@ 0x30
 8002f86:	4618      	mov	r0, r3
 8002f88:	f001 ffd0 	bl	8004f2c <RCCEx_PLL3_Config>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8002f92:	e004      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8002f9a:	e000      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8002f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f9e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002fa6:	4ba9      	ldr	r3, [pc, #676]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002fa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002fac:	f023 0107 	bic.w	r1, r3, #7
 8002fb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb6:	4aa5      	ldr	r2, [pc, #660]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002fbe:	e003      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002fc4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd0:	f002 0a02 	and.w	sl, r2, #2
 8002fd4:	f04f 0b00 	mov.w	fp, #0
 8002fd8:	ea5a 030b 	orrs.w	r3, sl, fp
 8002fdc:	f000 8088 	beq.w	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002fe0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe6:	2b28      	cmp	r3, #40	@ 0x28
 8002fe8:	d868      	bhi.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002fea:	a201      	add	r2, pc, #4	@ (adr r2, 8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff0:	080030c5 	.word	0x080030c5
 8002ff4:	080030bd 	.word	0x080030bd
 8002ff8:	080030bd 	.word	0x080030bd
 8002ffc:	080030bd 	.word	0x080030bd
 8003000:	080030bd 	.word	0x080030bd
 8003004:	080030bd 	.word	0x080030bd
 8003008:	080030bd 	.word	0x080030bd
 800300c:	080030bd 	.word	0x080030bd
 8003010:	08003095 	.word	0x08003095
 8003014:	080030bd 	.word	0x080030bd
 8003018:	080030bd 	.word	0x080030bd
 800301c:	080030bd 	.word	0x080030bd
 8003020:	080030bd 	.word	0x080030bd
 8003024:	080030bd 	.word	0x080030bd
 8003028:	080030bd 	.word	0x080030bd
 800302c:	080030bd 	.word	0x080030bd
 8003030:	080030a9 	.word	0x080030a9
 8003034:	080030bd 	.word	0x080030bd
 8003038:	080030bd 	.word	0x080030bd
 800303c:	080030bd 	.word	0x080030bd
 8003040:	080030bd 	.word	0x080030bd
 8003044:	080030bd 	.word	0x080030bd
 8003048:	080030bd 	.word	0x080030bd
 800304c:	080030bd 	.word	0x080030bd
 8003050:	080030c5 	.word	0x080030c5
 8003054:	080030bd 	.word	0x080030bd
 8003058:	080030bd 	.word	0x080030bd
 800305c:	080030bd 	.word	0x080030bd
 8003060:	080030bd 	.word	0x080030bd
 8003064:	080030bd 	.word	0x080030bd
 8003068:	080030bd 	.word	0x080030bd
 800306c:	080030bd 	.word	0x080030bd
 8003070:	080030c5 	.word	0x080030c5
 8003074:	080030bd 	.word	0x080030bd
 8003078:	080030bd 	.word	0x080030bd
 800307c:	080030bd 	.word	0x080030bd
 8003080:	080030bd 	.word	0x080030bd
 8003084:	080030bd 	.word	0x080030bd
 8003088:	080030bd 	.word	0x080030bd
 800308c:	080030bd 	.word	0x080030bd
 8003090:	080030c5 	.word	0x080030c5
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003094:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003098:	3308      	adds	r3, #8
 800309a:	4618      	mov	r0, r3
 800309c:	f001 feae 	bl	8004dfc <RCCEx_PLL2_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80030a6:	e00e      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80030a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030ac:	3330      	adds	r3, #48	@ 0x30
 80030ae:	4618      	mov	r0, r3
 80030b0:	f001 ff3c 	bl	8004f2c <RCCEx_PLL3_Config>
 80030b4:	4603      	mov	r3, r0
 80030b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80030ba:	e004      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80030c2:	e000      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80030c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10c      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80030ce:	4b5f      	ldr	r3, [pc, #380]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80030d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80030d4:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80030d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030de:	4a5b      	ldr	r2, [pc, #364]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80030e0:	430b      	orrs	r3, r1
 80030e2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80030e6:	e003      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80030ec:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f8:	f002 0304 	and.w	r3, r2, #4
 80030fc:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8003100:	2300      	movs	r3, #0
 8003102:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8003106:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 800310a:	460b      	mov	r3, r1
 800310c:	4313      	orrs	r3, r2
 800310e:	d04e      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003110:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003114:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003116:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800311a:	d02c      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800311c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003120:	d825      	bhi.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003122:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003126:	d028      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003128:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800312c:	d81f      	bhi.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800312e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003130:	d025      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003132:	2bc0      	cmp	r3, #192	@ 0xc0
 8003134:	d81b      	bhi.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003136:	2b80      	cmp	r3, #128	@ 0x80
 8003138:	d00f      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x272>
 800313a:	2b80      	cmp	r3, #128	@ 0x80
 800313c:	d817      	bhi.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800313e:	2b00      	cmp	r3, #0
 8003140:	d01f      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8003142:	2b40      	cmp	r3, #64	@ 0x40
 8003144:	d113      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003146:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800314a:	3308      	adds	r3, #8
 800314c:	4618      	mov	r0, r3
 800314e:	f001 fe55 	bl	8004dfc <RCCEx_PLL2_Config>
 8003152:	4603      	mov	r3, r0
 8003154:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8003158:	e014      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800315a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800315e:	3330      	adds	r3, #48	@ 0x30
 8003160:	4618      	mov	r0, r3
 8003162:	f001 fee3 	bl	8004f2c <RCCEx_PLL3_Config>
 8003166:	4603      	mov	r3, r0
 8003168:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800316c:	e00a      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003174:	e006      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003176:	bf00      	nop
 8003178:	e004      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800317a:	bf00      	nop
 800317c:	e002      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800317e:	bf00      	nop
 8003180:	e000      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003182:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003184:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10c      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800318c:	4b2f      	ldr	r3, [pc, #188]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800318e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003192:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003196:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800319a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800319c:	4a2b      	ldr	r2, [pc, #172]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800319e:	430b      	orrs	r3, r1
 80031a0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80031a4:	e003      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80031aa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80031b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b6:	f002 0308 	and.w	r3, r2, #8
 80031ba:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80031be:	2300      	movs	r3, #0
 80031c0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80031c4:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 80031c8:	460b      	mov	r3, r1
 80031ca:	4313      	orrs	r3, r2
 80031cc:	d056      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80031ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80031d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031d4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80031d8:	d031      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x356>
 80031da:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80031de:	d82a      	bhi.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80031e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031e4:	d02d      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80031e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031ea:	d824      	bhi.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80031ec:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80031f0:	d029      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80031f2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80031f6:	d81e      	bhi.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80031f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031fc:	d011      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80031fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003202:	d818      	bhi.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003204:	2b00      	cmp	r3, #0
 8003206:	d023      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800320c:	d113      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800320e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003212:	3308      	adds	r3, #8
 8003214:	4618      	mov	r0, r3
 8003216:	f001 fdf1 	bl	8004dfc <RCCEx_PLL2_Config>
 800321a:	4603      	mov	r3, r0
 800321c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8003220:	e017      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003222:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003226:	3330      	adds	r3, #48	@ 0x30
 8003228:	4618      	mov	r0, r3
 800322a:	f001 fe7f 	bl	8004f2c <RCCEx_PLL3_Config>
 800322e:	4603      	mov	r3, r0
 8003230:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8003234:	e00d      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800323c:	e009      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800323e:	bf00      	nop
 8003240:	e007      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003242:	bf00      	nop
 8003244:	e005      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003246:	bf00      	nop
 8003248:	e003      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800324a:	bf00      	nop
 800324c:	44020c00 	.word	0x44020c00
        break;
 8003250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003252:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10c      	bne.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800325a:	4bbb      	ldr	r3, [pc, #748]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800325c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003260:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003264:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003268:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800326a:	4ab7      	ldr	r2, [pc, #732]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800326c:	430b      	orrs	r3, r1
 800326e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003272:	e003      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003274:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003278:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800327c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003284:	f002 0310 	and.w	r3, r2, #16
 8003288:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800328c:	2300      	movs	r3, #0
 800328e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003292:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8003296:	460b      	mov	r3, r1
 8003298:	4313      	orrs	r3, r2
 800329a:	d053      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800329c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032a2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80032a6:	d031      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x424>
 80032a8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80032ac:	d82a      	bhi.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80032ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032b2:	d02d      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80032b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032b8:	d824      	bhi.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80032ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80032be:	d029      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80032c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80032c4:	d81e      	bhi.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80032c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032ca:	d011      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80032cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032d0:	d818      	bhi.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d020      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80032d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032da:	d113      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032e0:	3308      	adds	r3, #8
 80032e2:	4618      	mov	r0, r3
 80032e4:	f001 fd8a 	bl	8004dfc <RCCEx_PLL2_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80032ee:	e014      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80032f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032f4:	3330      	adds	r3, #48	@ 0x30
 80032f6:	4618      	mov	r0, r3
 80032f8:	f001 fe18 	bl	8004f2c <RCCEx_PLL3_Config>
 80032fc:	4603      	mov	r3, r0
 80032fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8003302:	e00a      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800330a:	e006      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800330c:	bf00      	nop
 800330e:	e004      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003310:	bf00      	nop
 8003312:	e002      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003314:	bf00      	nop
 8003316:	e000      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800331a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10c      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003322:	4b89      	ldr	r3, [pc, #548]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003324:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003328:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800332c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003330:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003332:	4a85      	ldr	r2, [pc, #532]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003334:	430b      	orrs	r3, r1
 8003336:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800333a:	e003      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003340:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003344:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334c:	f002 0320 	and.w	r3, r2, #32
 8003350:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003354:	2300      	movs	r3, #0
 8003356:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800335a:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 800335e:	460b      	mov	r3, r1
 8003360:	4313      	orrs	r3, r2
 8003362:	d053      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8003364:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800336e:	d031      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8003370:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003374:	d82a      	bhi.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003376:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800337a:	d02d      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800337c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003380:	d824      	bhi.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003382:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003386:	d029      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003388:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800338c:	d81e      	bhi.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800338e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003392:	d011      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003398:	d818      	bhi.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800339a:	2b00      	cmp	r3, #0
 800339c:	d020      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800339e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033a2:	d113      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033a8:	3308      	adds	r3, #8
 80033aa:	4618      	mov	r0, r3
 80033ac:	f001 fd26 	bl	8004dfc <RCCEx_PLL2_Config>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80033b6:	e014      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80033b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033bc:	3330      	adds	r3, #48	@ 0x30
 80033be:	4618      	mov	r0, r3
 80033c0:	f001 fdb4 	bl	8004f2c <RCCEx_PLL3_Config>
 80033c4:	4603      	mov	r3, r0
 80033c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80033ca:	e00a      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80033d2:	e006      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80033d4:	bf00      	nop
 80033d6:	e004      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80033d8:	bf00      	nop
 80033da:	e002      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80033dc:	bf00      	nop
 80033de:	e000      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80033e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10c      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80033ea:	4b57      	ldr	r3, [pc, #348]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80033ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80033f0:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 80033f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fa:	4a53      	ldr	r2, [pc, #332]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80033fc:	430b      	orrs	r3, r1
 80033fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003402:	e003      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003404:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003408:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800340c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003414:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003418:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800341c:	2300      	movs	r3, #0
 800341e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003422:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8003426:	460b      	mov	r3, r1
 8003428:	4313      	orrs	r3, r2
 800342a:	d053      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 800342c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003432:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003436:	d031      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8003438:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800343c:	d82a      	bhi.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800343e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003442:	d02d      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8003444:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003448:	d824      	bhi.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800344a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800344e:	d029      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003450:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003454:	d81e      	bhi.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003456:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800345a:	d011      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800345c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003460:	d818      	bhi.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003462:	2b00      	cmp	r3, #0
 8003464:	d020      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003466:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800346a:	d113      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800346c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003470:	3308      	adds	r3, #8
 8003472:	4618      	mov	r0, r3
 8003474:	f001 fcc2 	bl	8004dfc <RCCEx_PLL2_Config>
 8003478:	4603      	mov	r3, r0
 800347a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800347e:	e014      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003480:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003484:	3330      	adds	r3, #48	@ 0x30
 8003486:	4618      	mov	r0, r3
 8003488:	f001 fd50 	bl	8004f2c <RCCEx_PLL3_Config>
 800348c:	4603      	mov	r3, r0
 800348e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8003492:	e00a      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800349a:	e006      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800349c:	bf00      	nop
 800349e:	e004      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80034a0:	bf00      	nop
 80034a2:	e002      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80034a4:	bf00      	nop
 80034a6:	e000      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80034a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10c      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80034b2:	4b25      	ldr	r3, [pc, #148]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80034b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80034b8:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 80034bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034c2:	4a21      	ldr	r2, [pc, #132]	@ (8003548 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80034c4:	430b      	orrs	r3, r1
 80034c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80034ca:	e003      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034cc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80034d0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80034d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034dc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80034e0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80034e4:	2300      	movs	r3, #0
 80034e6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80034ea:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 80034ee:	460b      	mov	r3, r1
 80034f0:	4313      	orrs	r3, r2
 80034f2:	d055      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 80034f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034fa:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80034fe:	d033      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8003500:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003504:	d82c      	bhi.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003506:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800350a:	d02f      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x684>
 800350c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003510:	d826      	bhi.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003512:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003516:	d02b      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8003518:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800351c:	d820      	bhi.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800351e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003522:	d013      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003524:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003528:	d81a      	bhi.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800352a:	2b00      	cmp	r3, #0
 800352c:	d022      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800352e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003532:	d115      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003534:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003538:	3308      	adds	r3, #8
 800353a:	4618      	mov	r0, r3
 800353c:	f001 fc5e 	bl	8004dfc <RCCEx_PLL2_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8003546:	e016      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003548:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800354c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003550:	3330      	adds	r3, #48	@ 0x30
 8003552:	4618      	mov	r0, r3
 8003554:	f001 fcea 	bl	8004f2c <RCCEx_PLL3_Config>
 8003558:	4603      	mov	r3, r0
 800355a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800355e:	e00a      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003566:	e006      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003568:	bf00      	nop
 800356a:	e004      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800356c:	bf00      	nop
 800356e:	e002      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003570:	bf00      	nop
 8003572:	e000      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003576:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10c      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800357e:	4bbb      	ldr	r3, [pc, #748]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003580:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003584:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003588:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800358c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800358e:	4ab7      	ldr	r2, [pc, #732]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003590:	430b      	orrs	r3, r1
 8003592:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003596:	e003      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003598:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800359c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80035a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80035ac:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80035b0:	2300      	movs	r3, #0
 80035b2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80035b6:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80035ba:	460b      	mov	r3, r1
 80035bc:	4313      	orrs	r3, r2
 80035be:	d053      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80035c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035c6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80035ca:	d031      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80035cc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80035d0:	d82a      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80035d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035d6:	d02d      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80035d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035dc:	d824      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80035de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035e2:	d029      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x750>
 80035e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035e8:	d81e      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80035ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035ee:	d011      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80035f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035f4:	d818      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d020      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x754>
 80035fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035fe:	d113      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003600:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003604:	3308      	adds	r3, #8
 8003606:	4618      	mov	r0, r3
 8003608:	f001 fbf8 	bl	8004dfc <RCCEx_PLL2_Config>
 800360c:	4603      	mov	r3, r0
 800360e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8003612:	e014      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003614:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003618:	3330      	adds	r3, #48	@ 0x30
 800361a:	4618      	mov	r0, r3
 800361c:	f001 fc86 	bl	8004f2c <RCCEx_PLL3_Config>
 8003620:	4603      	mov	r3, r0
 8003622:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8003626:	e00a      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800362e:	e006      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003630:	bf00      	nop
 8003632:	e004      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003634:	bf00      	nop
 8003636:	e002      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003638:	bf00      	nop
 800363a:	e000      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800363c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800363e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10c      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8003646:	4b89      	ldr	r3, [pc, #548]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003648:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800364c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003650:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003654:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003656:	4a85      	ldr	r2, [pc, #532]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003658:	430b      	orrs	r3, r1
 800365a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800365e:	e003      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003660:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003664:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8003668:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003670:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8003674:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003678:	2300      	movs	r3, #0
 800367a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800367e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003682:	460b      	mov	r3, r1
 8003684:	4313      	orrs	r3, r2
 8003686:	d055      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8003688:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800368c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003690:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8003694:	d031      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x812>
 8003696:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800369a:	d82a      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800369c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036a0:	d02d      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x816>
 80036a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036a6:	d824      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80036a8:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80036ac:	d029      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80036ae:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80036b2:	d81e      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80036b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036b8:	d011      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80036ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036be:	d818      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d020      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80036c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036c8:	d113      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036ce:	3308      	adds	r3, #8
 80036d0:	4618      	mov	r0, r3
 80036d2:	f001 fb93 	bl	8004dfc <RCCEx_PLL2_Config>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80036dc:	e014      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80036de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036e2:	3330      	adds	r3, #48	@ 0x30
 80036e4:	4618      	mov	r0, r3
 80036e6:	f001 fc21 	bl	8004f2c <RCCEx_PLL3_Config>
 80036ea:	4603      	mov	r3, r0
 80036ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80036f0:	e00a      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80036f8:	e006      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80036fa:	bf00      	nop
 80036fc:	e004      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80036fe:	bf00      	nop
 8003700:	e002      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003702:	bf00      	nop
 8003704:	e000      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003708:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10d      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8003710:	4b56      	ldr	r3, [pc, #344]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003712:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003716:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 800371a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800371e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003722:	4a52      	ldr	r2, [pc, #328]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003724:	430b      	orrs	r3, r1
 8003726:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800372a:	e003      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003730:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8003734:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003740:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003744:	2300      	movs	r3, #0
 8003746:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800374a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800374e:	460b      	mov	r3, r1
 8003750:	4313      	orrs	r3, r2
 8003752:	d044      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8003754:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003758:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800375c:	2b05      	cmp	r3, #5
 800375e:	d823      	bhi.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8003760:	a201      	add	r2, pc, #4	@ (adr r2, 8003768 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003766:	bf00      	nop
 8003768:	080037b1 	.word	0x080037b1
 800376c:	08003781 	.word	0x08003781
 8003770:	08003795 	.word	0x08003795
 8003774:	080037b1 	.word	0x080037b1
 8003778:	080037b1 	.word	0x080037b1
 800377c:	080037b1 	.word	0x080037b1
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003780:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003784:	3308      	adds	r3, #8
 8003786:	4618      	mov	r0, r3
 8003788:	f001 fb38 	bl	8004dfc <RCCEx_PLL2_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003792:	e00e      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003794:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003798:	3330      	adds	r3, #48	@ 0x30
 800379a:	4618      	mov	r0, r3
 800379c:	f001 fbc6 	bl	8004f2c <RCCEx_PLL3_Config>
 80037a0:	4603      	mov	r3, r0
 80037a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80037a6:	e004      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80037ae:	e000      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 80037b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10d      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80037ba:	4b2c      	ldr	r3, [pc, #176]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80037bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80037c0:	f023 0107 	bic.w	r1, r3, #7
 80037c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037cc:	4a27      	ldr	r2, [pc, #156]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80037ce:	430b      	orrs	r3, r1
 80037d0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80037d4:	e003      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80037da:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80037de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80037ea:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80037ee:	2300      	movs	r3, #0
 80037f0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80037f4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80037f8:	460b      	mov	r3, r1
 80037fa:	4313      	orrs	r3, r2
 80037fc:	d04f      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80037fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003806:	2b50      	cmp	r3, #80	@ 0x50
 8003808:	d029      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x976>
 800380a:	2b50      	cmp	r3, #80	@ 0x50
 800380c:	d823      	bhi.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800380e:	2b40      	cmp	r3, #64	@ 0x40
 8003810:	d027      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8003812:	2b40      	cmp	r3, #64	@ 0x40
 8003814:	d81f      	bhi.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003816:	2b30      	cmp	r3, #48	@ 0x30
 8003818:	d025      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800381a:	2b30      	cmp	r3, #48	@ 0x30
 800381c:	d81b      	bhi.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800381e:	2b20      	cmp	r3, #32
 8003820:	d00f      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003822:	2b20      	cmp	r3, #32
 8003824:	d817      	bhi.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003826:	2b00      	cmp	r3, #0
 8003828:	d022      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800382a:	2b10      	cmp	r3, #16
 800382c:	d113      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800382e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003832:	3308      	adds	r3, #8
 8003834:	4618      	mov	r0, r3
 8003836:	f001 fae1 	bl	8004dfc <RCCEx_PLL2_Config>
 800383a:	4603      	mov	r3, r0
 800383c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003840:	e017      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003842:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003846:	3330      	adds	r3, #48	@ 0x30
 8003848:	4618      	mov	r0, r3
 800384a:	f001 fb6f 	bl	8004f2c <RCCEx_PLL3_Config>
 800384e:	4603      	mov	r3, r0
 8003850:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003854:	e00d      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800385c:	e009      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800385e:	bf00      	nop
 8003860:	e007      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003862:	bf00      	nop
 8003864:	e005      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003866:	bf00      	nop
 8003868:	e003      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800386a:	bf00      	nop
 800386c:	44020c00 	.word	0x44020c00
        break;
 8003870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003872:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10d      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800387a:	4baf      	ldr	r3, [pc, #700]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800387c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003880:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003884:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800388c:	4aaa      	ldr	r2, [pc, #680]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800388e:	430b      	orrs	r3, r1
 8003890:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003894:	e003      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003896:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800389a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800389e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80038aa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80038ae:	2300      	movs	r3, #0
 80038b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80038b4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80038b8:	460b      	mov	r3, r1
 80038ba:	4313      	orrs	r3, r2
 80038bc:	d055      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80038be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038c6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80038ca:	d031      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 80038cc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80038d0:	d82a      	bhi.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80038d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038d6:	d02d      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80038d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038dc:	d824      	bhi.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80038de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80038e2:	d029      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80038e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80038e8:	d81e      	bhi.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80038ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038ee:	d011      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 80038f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038f4:	d818      	bhi.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d020      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80038fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038fe:	d113      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003900:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003904:	3308      	adds	r3, #8
 8003906:	4618      	mov	r0, r3
 8003908:	f001 fa78 	bl	8004dfc <RCCEx_PLL2_Config>
 800390c:	4603      	mov	r3, r0
 800390e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003912:	e014      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003914:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003918:	3330      	adds	r3, #48	@ 0x30
 800391a:	4618      	mov	r0, r3
 800391c:	f001 fb06 	bl	8004f2c <RCCEx_PLL3_Config>
 8003920:	4603      	mov	r3, r0
 8003922:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003926:	e00a      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800392e:	e006      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003930:	bf00      	nop
 8003932:	e004      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003934:	bf00      	nop
 8003936:	e002      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003938:	bf00      	nop
 800393a:	e000      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800393c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800393e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10d      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003946:	4b7c      	ldr	r3, [pc, #496]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800394c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003950:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003954:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003958:	4a77      	ldr	r2, [pc, #476]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800395a:	430b      	orrs	r3, r1
 800395c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003960:	e003      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003962:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003966:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800396a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800396e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003972:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003976:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800397a:	2300      	movs	r3, #0
 800397c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003980:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003984:	460b      	mov	r3, r1
 8003986:	4313      	orrs	r3, r2
 8003988:	d03d      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800398a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800398e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003992:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003996:	d01b      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003998:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800399c:	d814      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800399e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039a2:	d017      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80039a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039a8:	d80e      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d014      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 80039ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b2:	d109      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039b8:	3330      	adds	r3, #48	@ 0x30
 80039ba:	4618      	mov	r0, r3
 80039bc:	f001 fab6 	bl	8004f2c <RCCEx_PLL3_Config>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80039c6:	e008      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80039ce:	e004      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80039d0:	bf00      	nop
 80039d2:	e002      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80039d4:	bf00      	nop
 80039d6:	e000      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80039d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10d      	bne.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80039e2:	4b55      	ldr	r3, [pc, #340]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80039e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80039e8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80039ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039f4:	4a50      	ldr	r2, [pc, #320]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80039f6:	430b      	orrs	r3, r1
 80039f8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80039fc:	e003      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a02:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003a12:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a16:	2300      	movs	r3, #0
 8003a18:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a1c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4313      	orrs	r3, r2
 8003a24:	d03d      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003a26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a2e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a32:	d01b      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8003a34:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a38:	d814      	bhi.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003a3a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a3e:	d017      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8003a40:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a44:	d80e      	bhi.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d014      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8003a4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a4e:	d109      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a54:	3330      	adds	r3, #48	@ 0x30
 8003a56:	4618      	mov	r0, r3
 8003a58:	f001 fa68 	bl	8004f2c <RCCEx_PLL3_Config>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003a62:	e008      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003a6a:	e004      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003a6c:	bf00      	nop
 8003a6e:	e002      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003a70:	bf00      	nop
 8003a72:	e000      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a76:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10d      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003a7e:	4b2e      	ldr	r3, [pc, #184]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003a80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003a84:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003a88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a90:	4a29      	ldr	r2, [pc, #164]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003a92:	430b      	orrs	r3, r1
 8003a94:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003a98:	e003      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a9e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003aa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aaa:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003aae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003ab8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003abc:	460b      	mov	r3, r1
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	d040      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003ac2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ac6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003aca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ace:	d01b      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003ad0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ad4:	d814      	bhi.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003ad6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ada:	d017      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003adc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ae0:	d80e      	bhi.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d014      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003ae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003aea:	d109      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003aec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003af0:	3330      	adds	r3, #48	@ 0x30
 8003af2:	4618      	mov	r0, r3
 8003af4:	f001 fa1a 	bl	8004f2c <RCCEx_PLL3_Config>
 8003af8:	4603      	mov	r3, r0
 8003afa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003afe:	e008      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003b06:	e004      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003b08:	bf00      	nop
 8003b0a:	e002      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003b0c:	bf00      	nop
 8003b0e:	e000      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b12:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d110      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003b1a:	4b07      	ldr	r3, [pc, #28]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003b1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b20:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003b24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b2c:	4a02      	ldr	r2, [pc, #8]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003b2e:	430b      	orrs	r3, r1
 8003b30:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003b34:	e006      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003b36:	bf00      	nop
 8003b38:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b3c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b40:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8003b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003b5a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4313      	orrs	r3, r2
 8003b62:	d03d      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8003b64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b6c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b70:	d01b      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003b72:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b76:	d814      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003b78:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b7c:	d017      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8003b7e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b82:	d80e      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d014      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003b88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b8c:	d109      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b92:	3330      	adds	r3, #48	@ 0x30
 8003b94:	4618      	mov	r0, r3
 8003b96:	f001 f9c9 	bl	8004f2c <RCCEx_PLL3_Config>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003ba8:	e004      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003baa:	bf00      	nop
 8003bac:	e002      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003bae:	bf00      	nop
 8003bb0:	e000      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003bb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bb4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10d      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003bbc:	4bbe      	ldr	r3, [pc, #760]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003bbe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003bc2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003bc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bce:	4aba      	ldr	r2, [pc, #744]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003bd6:	e003      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003bdc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003be0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003bec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003bf6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	d035      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003c00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c0c:	d015      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8003c0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c12:	d80e      	bhi.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d012      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003c18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c1c:	d109      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c22:	3330      	adds	r3, #48	@ 0x30
 8003c24:	4618      	mov	r0, r3
 8003c26:	f001 f981 	bl	8004f2c <RCCEx_PLL3_Config>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003c30:	e006      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003c38:	e002      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003c3a:	bf00      	nop
 8003c3c:	e000      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003c3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c40:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10d      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003c48:	4b9b      	ldr	r3, [pc, #620]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003c4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c4e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003c52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c5a:	4a97      	ldr	r2, [pc, #604]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003c62:	e003      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c64:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c68:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003c6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c74:	2100      	movs	r1, #0
 8003c76:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8003c7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c82:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	d00e      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003c8c:	4b8a      	ldr	r3, [pc, #552]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	4a89      	ldr	r2, [pc, #548]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003c92:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003c96:	61d3      	str	r3, [r2, #28]
 8003c98:	4b87      	ldr	r3, [pc, #540]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003c9a:	69d9      	ldr	r1, [r3, #28]
 8003c9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ca0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003ca4:	4a84      	ldr	r2, [pc, #528]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003ca6:	430b      	orrs	r3, r1
 8003ca8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003caa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003cb6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003cc0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	d055      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003cca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003cd2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003cd6:	d031      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8003cd8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003cdc:	d82a      	bhi.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ce2:	d02d      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003ce4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ce8:	d824      	bhi.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003cea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cee:	d029      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003cf0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cf4:	d81e      	bhi.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003cf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cfa:	d011      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8003cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d00:	d818      	bhi.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d020      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d0a:	d113      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d10:	3308      	adds	r3, #8
 8003d12:	4618      	mov	r0, r3
 8003d14:	f001 f872 	bl	8004dfc <RCCEx_PLL2_Config>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003d1e:	e014      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d24:	3330      	adds	r3, #48	@ 0x30
 8003d26:	4618      	mov	r0, r3
 8003d28:	f001 f900 	bl	8004f2c <RCCEx_PLL3_Config>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003d32:	e00a      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003d3a:	e006      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003d3c:	bf00      	nop
 8003d3e:	e004      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003d40:	bf00      	nop
 8003d42:	e002      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003d44:	bf00      	nop
 8003d46:	e000      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003d48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d4a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10d      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003d52:	4b59      	ldr	r3, [pc, #356]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d54:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003d58:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003d5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003d64:	4a54      	ldr	r2, [pc, #336]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d66:	430b      	orrs	r3, r1
 8003d68:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003d6c:	e003      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d72:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003d82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d86:	2300      	movs	r3, #0
 8003d88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d8c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003d90:	460b      	mov	r3, r1
 8003d92:	4313      	orrs	r3, r2
 8003d94:	d055      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003d96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003d9e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003da2:	d031      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8003da4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003da8:	d82a      	bhi.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003daa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dae:	d02d      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8003db0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003db4:	d824      	bhi.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003db6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003dba:	d029      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8003dbc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003dc0:	d81e      	bhi.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003dc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dc6:	d011      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8003dc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dcc:	d818      	bhi.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d020      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd6:	d113      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003dd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ddc:	3308      	adds	r3, #8
 8003dde:	4618      	mov	r0, r3
 8003de0:	f001 f80c 	bl	8004dfc <RCCEx_PLL2_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003dea:	e014      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003dec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003df0:	3330      	adds	r3, #48	@ 0x30
 8003df2:	4618      	mov	r0, r3
 8003df4:	f001 f89a 	bl	8004f2c <RCCEx_PLL3_Config>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003dfe:	e00a      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003e06:	e006      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003e08:	bf00      	nop
 8003e0a:	e004      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003e0c:	bf00      	nop
 8003e0e:	e002      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003e10:	bf00      	nop
 8003e12:	e000      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e16:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10d      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003e1e:	4b26      	ldr	r3, [pc, #152]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e20:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003e24:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003e28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e30:	4a21      	ldr	r2, [pc, #132]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e32:	430b      	orrs	r3, r1
 8003e34:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003e38:	e003      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e3a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e3e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8003e42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	d057      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8003e62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003e6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e6e:	d033      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8003e70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e74:	d82c      	bhi.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003e76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e7a:	d02f      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8003e7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e80:	d826      	bhi.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003e82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e86:	d02b      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8003e88:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e8c:	d820      	bhi.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003e8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e92:	d013      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003e94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e98:	d81a      	bhi.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d022      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8003e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ea2:	d115      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ea4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ea8:	3308      	adds	r3, #8
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 ffa6 	bl	8004dfc <RCCEx_PLL2_Config>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003eb6:	e016      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8003eb8:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ebc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ec0:	3330      	adds	r3, #48	@ 0x30
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f001 f832 	bl	8004f2c <RCCEx_PLL3_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003ece:	e00a      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003ed6:	e006      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003ed8:	bf00      	nop
 8003eda:	e004      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003edc:	bf00      	nop
 8003ede:	e002      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003ee0:	bf00      	nop
 8003ee2:	e000      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ee6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10d      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8003eee:	4bbb      	ldr	r3, [pc, #748]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003ef0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003ef4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003ef8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003efc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003f00:	4ab6      	ldr	r2, [pc, #728]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003f02:	430b      	orrs	r3, r1
 8003f04:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003f08:	e003      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f0e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8003f12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8003f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003f28:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	d055      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8003f32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003f3a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8003f3e:	d031      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003f40:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8003f44:	d82a      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003f46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f4a:	d02d      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8003f4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f50:	d824      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003f52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f56:	d029      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8003f58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f5c:	d81e      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003f5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f62:	d011      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8003f64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f68:	d818      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d020      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8003f6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f72:	d113      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f78:	3308      	adds	r3, #8
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 ff3e 	bl	8004dfc <RCCEx_PLL2_Config>
 8003f80:	4603      	mov	r3, r0
 8003f82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003f86:	e014      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f8c:	3330      	adds	r3, #48	@ 0x30
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 ffcc 	bl	8004f2c <RCCEx_PLL3_Config>
 8003f94:	4603      	mov	r3, r0
 8003f96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003f9a:	e00a      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003fa2:	e006      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003fa4:	bf00      	nop
 8003fa6:	e004      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003fa8:	bf00      	nop
 8003faa:	e002      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003fac:	bf00      	nop
 8003fae:	e000      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10d      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8003fba:	4b88      	ldr	r3, [pc, #544]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003fbc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003fc0:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8003fc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003fcc:	4a83      	ldr	r2, [pc, #524]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003fce:	430b      	orrs	r3, r1
 8003fd0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003fd4:	e003      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003fda:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8003fde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8003fec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ff4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	d055      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8003ffe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004002:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004006:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800400a:	d031      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 800400c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004010:	d82a      	bhi.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004012:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004016:	d02d      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8004018:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800401c:	d824      	bhi.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800401e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004022:	d029      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8004024:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004028:	d81e      	bhi.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800402a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800402e:	d011      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8004030:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004034:	d818      	bhi.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004036:	2b00      	cmp	r3, #0
 8004038:	d020      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800403a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800403e:	d113      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004040:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004044:	3308      	adds	r3, #8
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fed8 	bl	8004dfc <RCCEx_PLL2_Config>
 800404c:	4603      	mov	r3, r0
 800404e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8004052:	e014      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004054:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004058:	3330      	adds	r3, #48	@ 0x30
 800405a:	4618      	mov	r0, r3
 800405c:	f000 ff66 	bl	8004f2c <RCCEx_PLL3_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8004066:	e00a      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800406e:	e006      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004070:	bf00      	nop
 8004072:	e004      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004074:	bf00      	nop
 8004076:	e002      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004078:	bf00      	nop
 800407a:	e000      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800407c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800407e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10d      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8004086:	4b55      	ldr	r3, [pc, #340]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004088:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800408c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004090:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004094:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004098:	4a50      	ldr	r2, [pc, #320]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800409a:	430b      	orrs	r3, r1
 800409c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80040a0:	e003      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80040a6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80040aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b2:	2100      	movs	r1, #0
 80040b4:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80040b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80040c0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80040c4:	460b      	mov	r3, r1
 80040c6:	4313      	orrs	r3, r2
 80040c8:	d055      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80040ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80040d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040d6:	d031      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80040d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040dc:	d82a      	bhi.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80040de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040e2:	d02d      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80040e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040e8:	d824      	bhi.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80040ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040ee:	d029      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80040f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040f4:	d81e      	bhi.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80040f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040fa:	d011      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80040fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004100:	d818      	bhi.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004102:	2b00      	cmp	r3, #0
 8004104:	d020      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8004106:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800410a:	d113      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800410c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004110:	3308      	adds	r3, #8
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fe72 	bl	8004dfc <RCCEx_PLL2_Config>
 8004118:	4603      	mov	r3, r0
 800411a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800411e:	e014      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004120:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004124:	3330      	adds	r3, #48	@ 0x30
 8004126:	4618      	mov	r0, r3
 8004128:	f000 ff00 	bl	8004f2c <RCCEx_PLL3_Config>
 800412c:	4603      	mov	r3, r0
 800412e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8004132:	e00a      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800413a:	e006      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800413c:	bf00      	nop
 800413e:	e004      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004140:	bf00      	nop
 8004142:	e002      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004144:	bf00      	nop
 8004146:	e000      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004148:	bf00      	nop
    }

    if (ret == HAL_OK)
 800414a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10d      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8004152:	4b22      	ldr	r3, [pc, #136]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004154:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004158:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800415c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004160:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004164:	4a1d      	ldr	r2, [pc, #116]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004166:	430b      	orrs	r3, r1
 8004168:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800416c:	e003      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004172:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004176:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004182:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004186:	2300      	movs	r3, #0
 8004188:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800418c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004190:	460b      	mov	r3, r1
 8004192:	4313      	orrs	r3, r2
 8004194:	d055      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004196:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800419a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800419e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041a2:	d035      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80041a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041a8:	d82e      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80041aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80041ae:	d031      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80041b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80041b4:	d828      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80041b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041ba:	d01b      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80041bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041c0:	d822      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80041c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041ca:	d009      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80041cc:	e01c      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ce:	4b03      	ldr	r3, [pc, #12]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80041d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d2:	4a02      	ldr	r2, [pc, #8]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80041d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041d8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80041da:	e01c      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 80041dc:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041e4:	3308      	adds	r3, #8
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fe08 	bl	8004dfc <RCCEx_PLL2_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80041f2:	e010      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041f8:	3330      	adds	r3, #48	@ 0x30
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fe96 	bl	8004f2c <RCCEx_PLL3_Config>
 8004200:	4603      	mov	r3, r0
 8004202:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004206:	e006      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800420e:	e002      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004210:	bf00      	nop
 8004212:	e000      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004216:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10d      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800421e:	4bc3      	ldr	r3, [pc, #780]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004224:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004228:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800422c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004230:	4abe      	ldr	r2, [pc, #760]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004232:	430b      	orrs	r3, r1
 8004234:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004238:	e003      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800423e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8004242:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800424e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004252:	2300      	movs	r3, #0
 8004254:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004258:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800425c:	460b      	mov	r3, r1
 800425e:	4313      	orrs	r3, r2
 8004260:	d051      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004262:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004266:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800426a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800426e:	d033      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004270:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004274:	d82c      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004276:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800427a:	d02d      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800427c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004280:	d826      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004282:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004286:	d019      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8004288:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800428c:	d820      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8004292:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004296:	d007      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8004298:	e01a      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800429a:	4ba4      	ldr	r3, [pc, #656]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800429c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429e:	4aa3      	ldr	r2, [pc, #652]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80042a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042a4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80042a6:	e018      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042ac:	3308      	adds	r3, #8
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fda4 	bl	8004dfc <RCCEx_PLL2_Config>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80042ba:	e00e      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042c0:	3330      	adds	r3, #48	@ 0x30
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fe32 	bl	8004f2c <RCCEx_PLL3_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80042ce:	e004      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80042d6:	e000      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 80042d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10d      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80042e2:	4b92      	ldr	r3, [pc, #584]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80042e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80042e8:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 80042ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042f0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80042f4:	4a8d      	ldr	r2, [pc, #564]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80042f6:	430b      	orrs	r3, r1
 80042f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80042fc:	e003      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004302:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004306:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800430a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004312:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004314:	2300      	movs	r3, #0
 8004316:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004318:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800431c:	460b      	mov	r3, r1
 800431e:	4313      	orrs	r3, r2
 8004320:	d032      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004322:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004326:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800432a:	2b05      	cmp	r3, #5
 800432c:	d80f      	bhi.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800432e:	2b03      	cmp	r3, #3
 8004330:	d211      	bcs.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8004332:	2b01      	cmp	r3, #1
 8004334:	d911      	bls.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8004336:	2b02      	cmp	r3, #2
 8004338:	d109      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800433a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800433e:	3308      	adds	r3, #8
 8004340:	4618      	mov	r0, r3
 8004342:	f000 fd5b 	bl	8004dfc <RCCEx_PLL2_Config>
 8004346:	4603      	mov	r3, r0
 8004348:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800434c:	e006      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004354:	e002      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8004356:	bf00      	nop
 8004358:	e000      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800435a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800435c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10d      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004364:	4b71      	ldr	r3, [pc, #452]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004366:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800436a:	f023 0107 	bic.w	r1, r3, #7
 800436e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004372:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004376:	4a6d      	ldr	r2, [pc, #436]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004378:	430b      	orrs	r3, r1
 800437a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800437e:	e003      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004380:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004384:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004388:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800438c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004390:	2100      	movs	r1, #0
 8004392:	6739      	str	r1, [r7, #112]	@ 0x70
 8004394:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004398:	677b      	str	r3, [r7, #116]	@ 0x74
 800439a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800439e:	460b      	mov	r3, r1
 80043a0:	4313      	orrs	r3, r2
 80043a2:	d024      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80043a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d005      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d005      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80043ba:	e002      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80043bc:	bf00      	nop
 80043be:	e000      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80043c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10d      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80043ca:	4b58      	ldr	r3, [pc, #352]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80043cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80043d0:	f023 0108 	bic.w	r1, r3, #8
 80043d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80043dc:	4a53      	ldr	r2, [pc, #332]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80043de:	430b      	orrs	r3, r1
 80043e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80043e4:	e003      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80043ea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f6:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80043fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043fc:	2300      	movs	r3, #0
 80043fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004400:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004404:	460b      	mov	r3, r1
 8004406:	4313      	orrs	r3, r2
 8004408:	f000 80b9 	beq.w	800457e <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800440c:	4b48      	ldr	r3, [pc, #288]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800440e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004410:	4a47      	ldr	r2, [pc, #284]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8004412:	f043 0301 	orr.w	r3, r3, #1
 8004416:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004418:	f7fc feca 	bl	80011b0 <HAL_GetTick>
 800441c:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004420:	e00b      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004422:	f7fc fec5 	bl	80011b0 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d903      	bls.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004438:	e005      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800443a:	4b3d      	ldr	r3, [pc, #244]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800443c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0ed      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8004446:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800444a:	2b00      	cmp	r3, #0
 800444c:	f040 8093 	bne.w	8004576 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004450:	4b36      	ldr	r3, [pc, #216]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004456:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800445a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800445e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004462:	2b00      	cmp	r3, #0
 8004464:	d023      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8004466:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800446a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800446e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004472:	4293      	cmp	r3, r2
 8004474:	d01b      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004476:	4b2d      	ldr	r3, [pc, #180]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800447c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004480:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004484:	4b29      	ldr	r3, [pc, #164]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004486:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800448a:	4a28      	ldr	r2, [pc, #160]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800448c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004490:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004494:	4b25      	ldr	r3, [pc, #148]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004496:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800449a:	4a24      	ldr	r2, [pc, #144]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800449c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044a4:	4a21      	ldr	r2, [pc, #132]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80044a6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80044aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d019      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ba:	f7fc fe79 	bl	80011b0 <HAL_GetTick>
 80044be:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044c2:	e00d      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c4:	f7fc fe74 	bl	80011b0 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80044ce:	1ad2      	subs	r2, r2, r3
 80044d0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d903      	bls.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 80044de:	e006      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044e0:	4b12      	ldr	r3, [pc, #72]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80044e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0ea      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 80044ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d13a      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80044f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044fa:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80044fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004502:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004506:	d115      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8004508:	4b08      	ldr	r3, [pc, #32]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004510:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004514:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8004518:	091b      	lsrs	r3, r3, #4
 800451a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800451e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004522:	4a02      	ldr	r2, [pc, #8]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004524:	430b      	orrs	r3, r1
 8004526:	61d3      	str	r3, [r2, #28]
 8004528:	e00a      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800452a:	bf00      	nop
 800452c:	44020c00 	.word	0x44020c00
 8004530:	44020800 	.word	0x44020800
 8004534:	4b9f      	ldr	r3, [pc, #636]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	4a9e      	ldr	r2, [pc, #632]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800453a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800453e:	61d3      	str	r3, [r2, #28]
 8004540:	4b9c      	ldr	r3, [pc, #624]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004546:	4a9b      	ldr	r2, [pc, #620]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004548:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800454c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004550:	4b98      	ldr	r3, [pc, #608]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004552:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8004556:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800455a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800455e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004562:	4a94      	ldr	r2, [pc, #592]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004564:	430b      	orrs	r3, r1
 8004566:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800456a:	e008      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800456c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004570:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8004574:	e003      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004576:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800457a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800457e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004586:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800458a:	663b      	str	r3, [r7, #96]	@ 0x60
 800458c:	2300      	movs	r3, #0
 800458e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004590:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004594:	460b      	mov	r3, r1
 8004596:	4313      	orrs	r3, r2
 8004598:	d035      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800459a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800459e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80045a2:	2b30      	cmp	r3, #48	@ 0x30
 80045a4:	d014      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80045a6:	2b30      	cmp	r3, #48	@ 0x30
 80045a8:	d80e      	bhi.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80045aa:	2b20      	cmp	r3, #32
 80045ac:	d012      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 80045ae:	2b20      	cmp	r3, #32
 80045b0:	d80a      	bhi.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d010      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 80045b6:	2b10      	cmp	r3, #16
 80045b8:	d106      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045ba:	4b7e      	ldr	r3, [pc, #504]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80045bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045be:	4a7d      	ldr	r2, [pc, #500]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80045c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045c4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80045c6:	e008      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80045ce:	e004      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80045d0:	bf00      	nop
 80045d2:	e002      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80045d4:	bf00      	nop
 80045d6:	e000      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80045d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10d      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80045e2:	4b74      	ldr	r3, [pc, #464]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80045e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80045e8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80045ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045f0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80045f4:	4a6f      	ldr	r2, [pc, #444]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80045f6:	430b      	orrs	r3, r1
 80045f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80045fc:	e003      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004602:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004606:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460e:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004612:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004614:	2300      	movs	r3, #0
 8004616:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004618:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800461c:	460b      	mov	r3, r1
 800461e:	4313      	orrs	r3, r2
 8004620:	d033      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8004622:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004626:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800462e:	2b40      	cmp	r3, #64	@ 0x40
 8004630:	d007      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8004632:	e010      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004634:	4b5f      	ldr	r3, [pc, #380]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004638:	4a5e      	ldr	r2, [pc, #376]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800463a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800463e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004640:	e00d      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004642:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004646:	3308      	adds	r3, #8
 8004648:	4618      	mov	r0, r3
 800464a:	f000 fbd7 	bl	8004dfc <RCCEx_PLL2_Config>
 800464e:	4603      	mov	r3, r0
 8004650:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004654:	e003      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800465c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800465e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10d      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8004666:	4b53      	ldr	r3, [pc, #332]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004668:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800466c:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004670:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004674:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004678:	4a4e      	ldr	r2, [pc, #312]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800467a:	430b      	orrs	r3, r1
 800467c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004680:	e003      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004682:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004686:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800468a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004696:	653b      	str	r3, [r7, #80]	@ 0x50
 8004698:	2300      	movs	r3, #0
 800469a:	657b      	str	r3, [r7, #84]	@ 0x54
 800469c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80046a0:	460b      	mov	r3, r1
 80046a2:	4313      	orrs	r3, r2
 80046a4:	d033      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80046a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046aa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 80046b2:	2b80      	cmp	r3, #128	@ 0x80
 80046b4:	d007      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 80046b6:	e010      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046b8:	4b3e      	ldr	r3, [pc, #248]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046bc:	4a3d      	ldr	r2, [pc, #244]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046c2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80046c4:	e00d      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046ca:	3308      	adds	r3, #8
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 fb95 	bl	8004dfc <RCCEx_PLL2_Config>
 80046d2:	4603      	mov	r3, r0
 80046d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80046d8:	e003      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80046e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10d      	bne.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80046ea:	4b32      	ldr	r3, [pc, #200]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80046f0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80046f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046f8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80046fc:	4a2d      	ldr	r2, [pc, #180]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046fe:	430b      	orrs	r3, r1
 8004700:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004704:	e003      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004706:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800470a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800470e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004716:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800471a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800471c:	2300      	movs	r3, #0
 800471e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004720:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004724:	460b      	mov	r3, r1
 8004726:	4313      	orrs	r3, r2
 8004728:	d04a      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800472a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800472e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004732:	2b04      	cmp	r3, #4
 8004734:	d827      	bhi.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8004736:	a201      	add	r2, pc, #4	@ (adr r2, 800473c <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8004738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473c:	08004751 	.word	0x08004751
 8004740:	0800475f 	.word	0x0800475f
 8004744:	08004773 	.word	0x08004773
 8004748:	0800478f 	.word	0x0800478f
 800474c:	0800478f 	.word	0x0800478f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004750:	4b18      	ldr	r3, [pc, #96]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004754:	4a17      	ldr	r2, [pc, #92]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004756:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800475a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800475c:	e018      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800475e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004762:	3308      	adds	r3, #8
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fb49 	bl	8004dfc <RCCEx_PLL2_Config>
 800476a:	4603      	mov	r3, r0
 800476c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004770:	e00e      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004772:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004776:	3330      	adds	r3, #48	@ 0x30
 8004778:	4618      	mov	r0, r3
 800477a:	f000 fbd7 	bl	8004f2c <RCCEx_PLL3_Config>
 800477e:	4603      	mov	r3, r0
 8004780:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004784:	e004      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800478c:	e000      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800478e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004790:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10f      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004798:	4b06      	ldr	r3, [pc, #24]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800479a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800479e:	f023 0107 	bic.w	r1, r3, #7
 80047a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047aa:	4a02      	ldr	r2, [pc, #8]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047ac:	430b      	orrs	r3, r1
 80047ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80047b2:	e005      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 80047b4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80047bc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80047c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80047cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80047ce:	2300      	movs	r3, #0
 80047d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80047d2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80047d6:	460b      	mov	r3, r1
 80047d8:	4313      	orrs	r3, r2
 80047da:	f000 8081 	beq.w	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80047de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80047e6:	2b20      	cmp	r3, #32
 80047e8:	d85f      	bhi.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 80047ea:	a201      	add	r2, pc, #4	@ (adr r2, 80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 80047ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f0:	08004875 	.word	0x08004875
 80047f4:	080048ab 	.word	0x080048ab
 80047f8:	080048ab 	.word	0x080048ab
 80047fc:	080048ab 	.word	0x080048ab
 8004800:	080048ab 	.word	0x080048ab
 8004804:	080048ab 	.word	0x080048ab
 8004808:	080048ab 	.word	0x080048ab
 800480c:	080048ab 	.word	0x080048ab
 8004810:	08004883 	.word	0x08004883
 8004814:	080048ab 	.word	0x080048ab
 8004818:	080048ab 	.word	0x080048ab
 800481c:	080048ab 	.word	0x080048ab
 8004820:	080048ab 	.word	0x080048ab
 8004824:	080048ab 	.word	0x080048ab
 8004828:	080048ab 	.word	0x080048ab
 800482c:	080048ab 	.word	0x080048ab
 8004830:	08004897 	.word	0x08004897
 8004834:	080048ab 	.word	0x080048ab
 8004838:	080048ab 	.word	0x080048ab
 800483c:	080048ab 	.word	0x080048ab
 8004840:	080048ab 	.word	0x080048ab
 8004844:	080048ab 	.word	0x080048ab
 8004848:	080048ab 	.word	0x080048ab
 800484c:	080048ab 	.word	0x080048ab
 8004850:	080048b3 	.word	0x080048b3
 8004854:	080048ab 	.word	0x080048ab
 8004858:	080048ab 	.word	0x080048ab
 800485c:	080048ab 	.word	0x080048ab
 8004860:	080048ab 	.word	0x080048ab
 8004864:	080048ab 	.word	0x080048ab
 8004868:	080048ab 	.word	0x080048ab
 800486c:	080048ab 	.word	0x080048ab
 8004870:	080048b3 	.word	0x080048b3
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004874:	4bab      	ldr	r3, [pc, #684]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004878:	4aaa      	ldr	r2, [pc, #680]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800487a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800487e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004880:	e018      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004882:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004886:	3308      	adds	r3, #8
 8004888:	4618      	mov	r0, r3
 800488a:	f000 fab7 	bl	8004dfc <RCCEx_PLL2_Config>
 800488e:	4603      	mov	r3, r0
 8004890:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004894:	e00e      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004896:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800489a:	3330      	adds	r3, #48	@ 0x30
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fb45 	bl	8004f2c <RCCEx_PLL3_Config>
 80048a2:	4603      	mov	r3, r0
 80048a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80048a8:	e004      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80048b0:	e000      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 80048b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048b4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10d      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80048bc:	4b99      	ldr	r3, [pc, #612]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80048be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048c2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80048c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80048ce:	4a95      	ldr	r2, [pc, #596]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80048d0:	430b      	orrs	r3, r1
 80048d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80048d6:	e003      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80048dc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80048e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80048ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048ee:	2300      	movs	r3, #0
 80048f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048f2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80048f6:	460b      	mov	r3, r1
 80048f8:	4313      	orrs	r3, r2
 80048fa:	d04e      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80048fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004900:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004904:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004908:	d02e      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 800490a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800490e:	d827      	bhi.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004910:	2bc0      	cmp	r3, #192	@ 0xc0
 8004912:	d02b      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8004914:	2bc0      	cmp	r3, #192	@ 0xc0
 8004916:	d823      	bhi.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004918:	2b80      	cmp	r3, #128	@ 0x80
 800491a:	d017      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 800491c:	2b80      	cmp	r3, #128	@ 0x80
 800491e:	d81f      	bhi.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8004924:	2b40      	cmp	r3, #64	@ 0x40
 8004926:	d007      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8004928:	e01a      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800492a:	4b7e      	ldr	r3, [pc, #504]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800492c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492e:	4a7d      	ldr	r2, [pc, #500]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004930:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004934:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004936:	e01a      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004938:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800493c:	3308      	adds	r3, #8
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fa5c 	bl	8004dfc <RCCEx_PLL2_Config>
 8004944:	4603      	mov	r3, r0
 8004946:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800494a:	e010      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800494c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004950:	3330      	adds	r3, #48	@ 0x30
 8004952:	4618      	mov	r0, r3
 8004954:	f000 faea 	bl	8004f2c <RCCEx_PLL3_Config>
 8004958:	4603      	mov	r3, r0
 800495a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800495e:	e006      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004966:	e002      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004968:	bf00      	nop
 800496a:	e000      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800496c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800496e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10d      	bne.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004976:	4b6b      	ldr	r3, [pc, #428]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800497c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004980:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004984:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004988:	4a66      	ldr	r2, [pc, #408]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800498a:	430b      	orrs	r3, r1
 800498c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004990:	e003      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004992:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004996:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800499a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800499e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80049a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80049a8:	2300      	movs	r3, #0
 80049aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80049ac:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80049b0:	460b      	mov	r3, r1
 80049b2:	4313      	orrs	r3, r2
 80049b4:	d055      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80049b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049ba:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80049be:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80049c2:	d031      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 80049c4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80049c8:	d82a      	bhi.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80049ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049ce:	d02d      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 80049d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049d4:	d824      	bhi.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80049d6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80049da:	d029      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 80049dc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80049e0:	d81e      	bhi.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80049e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049e6:	d011      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 80049e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ec:	d818      	bhi.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d020      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 80049f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049f6:	d113      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049fc:	3308      	adds	r3, #8
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 f9fc 	bl	8004dfc <RCCEx_PLL2_Config>
 8004a04:	4603      	mov	r3, r0
 8004a06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004a0a:	e014      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a10:	3330      	adds	r3, #48	@ 0x30
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 fa8a 	bl	8004f2c <RCCEx_PLL3_Config>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004a1e:	e00a      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004a26:	e006      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004a28:	bf00      	nop
 8004a2a:	e004      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004a2c:	bf00      	nop
 8004a2e:	e002      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004a30:	bf00      	nop
 8004a32:	e000      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10d      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8004a3e:	4b39      	ldr	r3, [pc, #228]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a44:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004a48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a4c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004a50:	4a34      	ldr	r2, [pc, #208]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004a52:	430b      	orrs	r3, r1
 8004a54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a58:	e003      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a5a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a5e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8004a62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a70:	2300      	movs	r3, #0
 8004a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a74:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	d058      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8004a7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a86:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004a8a:	d031      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8004a8c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004a90:	d82a      	bhi.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004a92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a96:	d02d      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004a98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a9c:	d824      	bhi.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004a9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004aa2:	d029      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8004aa4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004aa8:	d81e      	bhi.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004aaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aae:	d011      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8004ab0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ab4:	d818      	bhi.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d020      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8004aba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004abe:	d113      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ac0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 f998 	bl	8004dfc <RCCEx_PLL2_Config>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004ad2:	e014      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ad4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ad8:	3330      	adds	r3, #48	@ 0x30
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fa26 	bl	8004f2c <RCCEx_PLL3_Config>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004ae6:	e00a      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004aee:	e006      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004af0:	bf00      	nop
 8004af2:	e004      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004af4:	bf00      	nop
 8004af6:	e002      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004af8:	bf00      	nop
 8004afa:	e000      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004afe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d110      	bne.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8004b06:	4b07      	ldr	r3, [pc, #28]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b0c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004b10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b18:	4902      	ldr	r1, [pc, #8]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004b20:	e006      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8004b22:	bf00      	nop
 8004b24:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b28:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b2c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004b30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b38:	2100      	movs	r1, #0
 8004b3a:	6239      	str	r1, [r7, #32]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b42:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004b46:	460b      	mov	r3, r1
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	d055      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8004b4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004b54:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004b58:	d031      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8004b5a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004b5e:	d82a      	bhi.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004b60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b64:	d02d      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8004b66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b6a:	d824      	bhi.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004b6c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004b70:	d029      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8004b72:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004b76:	d81e      	bhi.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004b78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b7c:	d011      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8004b7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b82:	d818      	bhi.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d020      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8004b88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b8c:	d113      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b92:	3308      	adds	r3, #8
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 f931 	bl	8004dfc <RCCEx_PLL2_Config>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ba0:	e014      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ba2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ba6:	3330      	adds	r3, #48	@ 0x30
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 f9bf 	bl	8004f2c <RCCEx_PLL3_Config>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004bb4:	e00a      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004bbc:	e006      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004bbe:	bf00      	nop
 8004bc0:	e004      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004bc2:	bf00      	nop
 8004bc4:	e002      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004bc6:	bf00      	nop
 8004bc8:	e000      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004bca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bcc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10d      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8004bd4:	4b88      	ldr	r3, [pc, #544]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bda:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8004bde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004be2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004be6:	4984      	ldr	r1, [pc, #528]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004bee:	e003      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004bf4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004bf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c00:	2100      	movs	r1, #0
 8004c02:	61b9      	str	r1, [r7, #24]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	61fb      	str	r3, [r7, #28]
 8004c0a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4313      	orrs	r3, r2
 8004c12:	d03d      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004c14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c18:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d81c      	bhi.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8004c20:	a201      	add	r2, pc, #4	@ (adr r2, 8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8004c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c26:	bf00      	nop
 8004c28:	08004c63 	.word	0x08004c63
 8004c2c:	08004c39 	.word	0x08004c39
 8004c30:	08004c47 	.word	0x08004c47
 8004c34:	08004c63 	.word	0x08004c63
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c38:	4b6f      	ldr	r3, [pc, #444]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3c:	4a6e      	ldr	r2, [pc, #440]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004c3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c42:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004c44:	e00e      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c4a:	3308      	adds	r3, #8
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 f8d5 	bl	8004dfc <RCCEx_PLL2_Config>
 8004c52:	4603      	mov	r3, r0
 8004c54:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004c58:	e004      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004c60:	e000      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8004c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c64:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10d      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004c6c:	4b62      	ldr	r3, [pc, #392]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004c6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c72:	f023 0203 	bic.w	r2, r3, #3
 8004c76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c7a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004c7e:	495e      	ldr	r1, [pc, #376]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004c86:	e003      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c88:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c8c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c98:	2100      	movs	r1, #0
 8004c9a:	6139      	str	r1, [r7, #16]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	617b      	str	r3, [r7, #20]
 8004ca2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	d03a      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004cac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cb0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004cb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cb8:	d00e      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8004cba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cbe:	d815      	bhi.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d017      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8004cc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cc8:	d110      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cca:	4b4b      	ldr	r3, [pc, #300]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cce:	4a4a      	ldr	r2, [pc, #296]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cd4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004cd6:	e00e      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cdc:	3308      	adds	r3, #8
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 f88c 	bl	8004dfc <RCCEx_PLL2_Config>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004cea:	e004      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004cf2:	e000      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8004cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cf6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10d      	bne.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004cfe:	4b3e      	ldr	r3, [pc, #248]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d0c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004d10:	4939      	ldr	r1, [pc, #228]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8004d18:	e003      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d1e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	f003 0310 	and.w	r3, r3, #16
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	d038      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004d3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d42:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004d46:	2b30      	cmp	r3, #48	@ 0x30
 8004d48:	d01b      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8004d4a:	2b30      	cmp	r3, #48	@ 0x30
 8004d4c:	d815      	bhi.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8004d4e:	2b10      	cmp	r3, #16
 8004d50:	d002      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8004d52:	2b20      	cmp	r3, #32
 8004d54:	d007      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8004d56:	e010      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d58:	4b27      	ldr	r3, [pc, #156]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5c:	4a26      	ldr	r2, [pc, #152]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d62:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d64:	e00e      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d6a:	3330      	adds	r3, #48	@ 0x30
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 f8dd 	bl	8004f2c <RCCEx_PLL3_Config>
 8004d72:	4603      	mov	r3, r0
 8004d74:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004d78:	e004      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004d80:	e000      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8004d82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d84:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10d      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d92:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004d96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d9a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004d9e:	4916      	ldr	r1, [pc, #88]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004da6:	e003      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004dac:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004db0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db8:	2100      	movs	r1, #0
 8004dba:	6039      	str	r1, [r7, #0]
 8004dbc:	f003 0308 	and.w	r3, r3, #8
 8004dc0:	607b      	str	r3, [r7, #4]
 8004dc2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	d00c      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8004dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004dce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004dd2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004dd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dda:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8004dde:	4906      	ldr	r1, [pc, #24]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8004de6:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8004df0:	46bd      	mov	sp, r7
 8004df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004df6:	bf00      	nop
 8004df8:	44020c00 	.word	0x44020c00

08004dfc <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8004e04:	4b48      	ldr	r3, [pc, #288]	@ (8004f28 <RCCEx_PLL2_Config+0x12c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a47      	ldr	r2, [pc, #284]	@ (8004f28 <RCCEx_PLL2_Config+0x12c>)
 8004e0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e0e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e10:	f7fc f9ce 	bl	80011b0 <HAL_GetTick>
 8004e14:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e16:	e008      	b.n	8004e2a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e18:	f7fc f9ca 	bl	80011b0 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d901      	bls.n	8004e2a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e07a      	b.n	8004f20 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e2a:	4b3f      	ldr	r3, [pc, #252]	@ (8004f28 <RCCEx_PLL2_Config+0x12c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1f0      	bne.n	8004e18 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004e36:	4b3c      	ldr	r3, [pc, #240]	@ (8004f28 <RCCEx_PLL2_Config+0x12c>)
 8004e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e3e:	f023 0303 	bic.w	r3, r3, #3
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6811      	ldr	r1, [r2, #0]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6852      	ldr	r2, [r2, #4]
 8004e4a:	0212      	lsls	r2, r2, #8
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	4936      	ldr	r1, [pc, #216]	@ (8004f28 <RCCEx_PLL2_Config+0x12c>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	025b      	lsls	r3, r3, #9
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	041b      	lsls	r3, r3, #16
 8004e72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	061b      	lsls	r3, r3, #24
 8004e80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e84:	4928      	ldr	r1, [pc, #160]	@ (8004f28 <RCCEx_PLL2_Config+0x12c>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004e8a:	4b27      	ldr	r3, [pc, #156]	@ (8004f28 <RCCEx_PLL2_Config+0x12c>)
 8004e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8e:	f023 020c 	bic.w	r2, r3, #12
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	4924      	ldr	r1, [pc, #144]	@ (8004f28 <RCCEx_PLL2_Config+0x12c>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8004e9c:	4b22      	ldr	r3, [pc, #136]	@ (8004f28 <RCCEx_PLL2_Config+0x12c>)
 8004e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea0:	f023 0220 	bic.w	r2, r3, #32
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	491f      	ldr	r1, [pc, #124]	@ (8004f28 <RCCEx_PLL2_Config+0x12c>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004eae:	4b1e      	ldr	r3, [pc, #120]	@ (8004f28 <RCCEx_PLL2_Config+0x12c>)
 8004eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb6:	491c      	ldr	r1, [pc, #112]	@ (8004f28 <RCCEx_PLL2_Config+0x12c>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8004ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8004f28 <RCCEx_PLL2_Config+0x12c>)
 8004ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec0:	4a19      	ldr	r2, [pc, #100]	@ (8004f28 <RCCEx_PLL2_Config+0x12c>)
 8004ec2:	f023 0310 	bic.w	r3, r3, #16
 8004ec6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8004ec8:	4b17      	ldr	r3, [pc, #92]	@ (8004f28 <RCCEx_PLL2_Config+0x12c>)
 8004eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ecc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ed0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	6a12      	ldr	r2, [r2, #32]
 8004ed8:	00d2      	lsls	r2, r2, #3
 8004eda:	4913      	ldr	r1, [pc, #76]	@ (8004f28 <RCCEx_PLL2_Config+0x12c>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8004ee0:	4b11      	ldr	r3, [pc, #68]	@ (8004f28 <RCCEx_PLL2_Config+0x12c>)
 8004ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee4:	4a10      	ldr	r2, [pc, #64]	@ (8004f28 <RCCEx_PLL2_Config+0x12c>)
 8004ee6:	f043 0310 	orr.w	r3, r3, #16
 8004eea:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8004eec:	4b0e      	ldr	r3, [pc, #56]	@ (8004f28 <RCCEx_PLL2_Config+0x12c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8004f28 <RCCEx_PLL2_Config+0x12c>)
 8004ef2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ef6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ef8:	f7fc f95a 	bl	80011b0 <HAL_GetTick>
 8004efc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004efe:	e008      	b.n	8004f12 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f00:	f7fc f956 	bl	80011b0 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d901      	bls.n	8004f12 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e006      	b.n	8004f20 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f12:	4b05      	ldr	r3, [pc, #20]	@ (8004f28 <RCCEx_PLL2_Config+0x12c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0f0      	beq.n	8004f00 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0

}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	44020c00 	.word	0x44020c00

08004f2c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8004f34:	4b48      	ldr	r3, [pc, #288]	@ (8005058 <RCCEx_PLL3_Config+0x12c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a47      	ldr	r2, [pc, #284]	@ (8005058 <RCCEx_PLL3_Config+0x12c>)
 8004f3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f3e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f40:	f7fc f936 	bl	80011b0 <HAL_GetTick>
 8004f44:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f46:	e008      	b.n	8004f5a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f48:	f7fc f932 	bl	80011b0 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e07a      	b.n	8005050 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f5a:	4b3f      	ldr	r3, [pc, #252]	@ (8005058 <RCCEx_PLL3_Config+0x12c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f0      	bne.n	8004f48 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8004f66:	4b3c      	ldr	r3, [pc, #240]	@ (8005058 <RCCEx_PLL3_Config+0x12c>)
 8004f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004f6e:	f023 0303 	bic.w	r3, r3, #3
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6811      	ldr	r1, [r2, #0]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6852      	ldr	r2, [r2, #4]
 8004f7a:	0212      	lsls	r2, r2, #8
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	4936      	ldr	r1, [pc, #216]	@ (8005058 <RCCEx_PLL3_Config+0x12c>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	630b      	str	r3, [r1, #48]	@ 0x30
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	025b      	lsls	r3, r3, #9
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	041b      	lsls	r3, r3, #16
 8004fa2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	061b      	lsls	r3, r3, #24
 8004fb0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004fb4:	4928      	ldr	r1, [pc, #160]	@ (8005058 <RCCEx_PLL3_Config+0x12c>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004fba:	4b27      	ldr	r3, [pc, #156]	@ (8005058 <RCCEx_PLL3_Config+0x12c>)
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fbe:	f023 020c 	bic.w	r2, r3, #12
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	4924      	ldr	r1, [pc, #144]	@ (8005058 <RCCEx_PLL3_Config+0x12c>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8004fcc:	4b22      	ldr	r3, [pc, #136]	@ (8005058 <RCCEx_PLL3_Config+0x12c>)
 8004fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd0:	f023 0220 	bic.w	r2, r3, #32
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	491f      	ldr	r1, [pc, #124]	@ (8005058 <RCCEx_PLL3_Config+0x12c>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8004fde:	4b1e      	ldr	r3, [pc, #120]	@ (8005058 <RCCEx_PLL3_Config+0x12c>)
 8004fe0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe6:	491c      	ldr	r1, [pc, #112]	@ (8005058 <RCCEx_PLL3_Config+0x12c>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8004fec:	4b1a      	ldr	r3, [pc, #104]	@ (8005058 <RCCEx_PLL3_Config+0x12c>)
 8004fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff0:	4a19      	ldr	r2, [pc, #100]	@ (8005058 <RCCEx_PLL3_Config+0x12c>)
 8004ff2:	f023 0310 	bic.w	r3, r3, #16
 8004ff6:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8004ff8:	4b17      	ldr	r3, [pc, #92]	@ (8005058 <RCCEx_PLL3_Config+0x12c>)
 8004ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ffc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005000:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6a12      	ldr	r2, [r2, #32]
 8005008:	00d2      	lsls	r2, r2, #3
 800500a:	4913      	ldr	r1, [pc, #76]	@ (8005058 <RCCEx_PLL3_Config+0x12c>)
 800500c:	4313      	orrs	r3, r2
 800500e:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8005010:	4b11      	ldr	r3, [pc, #68]	@ (8005058 <RCCEx_PLL3_Config+0x12c>)
 8005012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005014:	4a10      	ldr	r2, [pc, #64]	@ (8005058 <RCCEx_PLL3_Config+0x12c>)
 8005016:	f043 0310 	orr.w	r3, r3, #16
 800501a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800501c:	4b0e      	ldr	r3, [pc, #56]	@ (8005058 <RCCEx_PLL3_Config+0x12c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a0d      	ldr	r2, [pc, #52]	@ (8005058 <RCCEx_PLL3_Config+0x12c>)
 8005022:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005026:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005028:	f7fc f8c2 	bl	80011b0 <HAL_GetTick>
 800502c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800502e:	e008      	b.n	8005042 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005030:	f7fc f8be 	bl	80011b0 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e006      	b.n	8005050 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005042:	4b05      	ldr	r3, [pc, #20]	@ (8005058 <RCCEx_PLL3_Config+0x12c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d0f0      	beq.n	8005030 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	44020c00 	.word	0x44020c00

0800505c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e049      	b.n	8005102 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d106      	bne.n	8005088 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7fb ff5c 	bl	8000f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3304      	adds	r3, #4
 8005098:	4619      	mov	r1, r3
 800509a:	4610      	mov	r0, r2
 800509c:	f000 fac8 	bl	8005630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b082      	sub	sp, #8
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e049      	b.n	80051b0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d106      	bne.n	8005136 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f841 	bl	80051b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2202      	movs	r2, #2
 800513a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3304      	adds	r3, #4
 8005146:	4619      	mov	r1, r3
 8005148:	4610      	mov	r0, r2
 800514a:	f000 fa71 	bl	8005630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d101      	bne.n	80051ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051e6:	2302      	movs	r3, #2
 80051e8:	e0ff      	b.n	80053ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b14      	cmp	r3, #20
 80051f6:	f200 80f0 	bhi.w	80053da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80051fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005200 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005200:	08005255 	.word	0x08005255
 8005204:	080053db 	.word	0x080053db
 8005208:	080053db 	.word	0x080053db
 800520c:	080053db 	.word	0x080053db
 8005210:	08005295 	.word	0x08005295
 8005214:	080053db 	.word	0x080053db
 8005218:	080053db 	.word	0x080053db
 800521c:	080053db 	.word	0x080053db
 8005220:	080052d7 	.word	0x080052d7
 8005224:	080053db 	.word	0x080053db
 8005228:	080053db 	.word	0x080053db
 800522c:	080053db 	.word	0x080053db
 8005230:	08005317 	.word	0x08005317
 8005234:	080053db 	.word	0x080053db
 8005238:	080053db 	.word	0x080053db
 800523c:	080053db 	.word	0x080053db
 8005240:	08005359 	.word	0x08005359
 8005244:	080053db 	.word	0x080053db
 8005248:	080053db 	.word	0x080053db
 800524c:	080053db 	.word	0x080053db
 8005250:	08005399 	.word	0x08005399
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68b9      	ldr	r1, [r7, #8]
 800525a:	4618      	mov	r0, r3
 800525c:	f000 fb12 	bl	8005884 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699a      	ldr	r2, [r3, #24]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0208 	orr.w	r2, r2, #8
 800526e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699a      	ldr	r2, [r3, #24]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 0204 	bic.w	r2, r2, #4
 800527e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6999      	ldr	r1, [r3, #24]
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	691a      	ldr	r2, [r3, #16]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	619a      	str	r2, [r3, #24]
      break;
 8005292:	e0a5      	b.n	80053e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68b9      	ldr	r1, [r7, #8]
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fbb4 	bl	8005a08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699a      	ldr	r2, [r3, #24]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699a      	ldr	r2, [r3, #24]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6999      	ldr	r1, [r3, #24]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	021a      	lsls	r2, r3, #8
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	619a      	str	r2, [r3, #24]
      break;
 80052d4:	e084      	b.n	80053e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 fc43 	bl	8005b68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69da      	ldr	r2, [r3, #28]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f042 0208 	orr.w	r2, r2, #8
 80052f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	69da      	ldr	r2, [r3, #28]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0204 	bic.w	r2, r2, #4
 8005300:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69d9      	ldr	r1, [r3, #28]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	691a      	ldr	r2, [r3, #16]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	430a      	orrs	r2, r1
 8005312:	61da      	str	r2, [r3, #28]
      break;
 8005314:	e064      	b.n	80053e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68b9      	ldr	r1, [r7, #8]
 800531c:	4618      	mov	r0, r3
 800531e:	f000 fcd1 	bl	8005cc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69da      	ldr	r2, [r3, #28]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005330:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69da      	ldr	r2, [r3, #28]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005340:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69d9      	ldr	r1, [r3, #28]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	021a      	lsls	r2, r3, #8
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	61da      	str	r2, [r3, #28]
      break;
 8005356:	e043      	b.n	80053e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68b9      	ldr	r1, [r7, #8]
 800535e:	4618      	mov	r0, r3
 8005360:	f000 fd60 	bl	8005e24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0208 	orr.w	r2, r2, #8
 8005372:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0204 	bic.w	r2, r2, #4
 8005382:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	691a      	ldr	r2, [r3, #16]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005396:	e023      	b.n	80053e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fdc2 	bl	8005f28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053c2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	021a      	lsls	r2, r3, #8
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80053d8:	e002      	b.n	80053e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	75fb      	strb	r3, [r7, #23]
      break;
 80053de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop

080053f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005408:	2b01      	cmp	r3, #1
 800540a:	d101      	bne.n	8005410 <HAL_TIM_ConfigClockSource+0x1c>
 800540c:	2302      	movs	r3, #2
 800540e:	e0fe      	b.n	800560e <HAL_TIM_ConfigClockSource+0x21a>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800542e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005432:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800543a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800544c:	f000 80c9 	beq.w	80055e2 <HAL_TIM_ConfigClockSource+0x1ee>
 8005450:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005454:	f200 80ce 	bhi.w	80055f4 <HAL_TIM_ConfigClockSource+0x200>
 8005458:	4a6f      	ldr	r2, [pc, #444]	@ (8005618 <HAL_TIM_ConfigClockSource+0x224>)
 800545a:	4293      	cmp	r3, r2
 800545c:	f000 80c1 	beq.w	80055e2 <HAL_TIM_ConfigClockSource+0x1ee>
 8005460:	4a6d      	ldr	r2, [pc, #436]	@ (8005618 <HAL_TIM_ConfigClockSource+0x224>)
 8005462:	4293      	cmp	r3, r2
 8005464:	f200 80c6 	bhi.w	80055f4 <HAL_TIM_ConfigClockSource+0x200>
 8005468:	4a6c      	ldr	r2, [pc, #432]	@ (800561c <HAL_TIM_ConfigClockSource+0x228>)
 800546a:	4293      	cmp	r3, r2
 800546c:	f000 80b9 	beq.w	80055e2 <HAL_TIM_ConfigClockSource+0x1ee>
 8005470:	4a6a      	ldr	r2, [pc, #424]	@ (800561c <HAL_TIM_ConfigClockSource+0x228>)
 8005472:	4293      	cmp	r3, r2
 8005474:	f200 80be 	bhi.w	80055f4 <HAL_TIM_ConfigClockSource+0x200>
 8005478:	4a69      	ldr	r2, [pc, #420]	@ (8005620 <HAL_TIM_ConfigClockSource+0x22c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	f000 80b1 	beq.w	80055e2 <HAL_TIM_ConfigClockSource+0x1ee>
 8005480:	4a67      	ldr	r2, [pc, #412]	@ (8005620 <HAL_TIM_ConfigClockSource+0x22c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	f200 80b6 	bhi.w	80055f4 <HAL_TIM_ConfigClockSource+0x200>
 8005488:	4a66      	ldr	r2, [pc, #408]	@ (8005624 <HAL_TIM_ConfigClockSource+0x230>)
 800548a:	4293      	cmp	r3, r2
 800548c:	f000 80a9 	beq.w	80055e2 <HAL_TIM_ConfigClockSource+0x1ee>
 8005490:	4a64      	ldr	r2, [pc, #400]	@ (8005624 <HAL_TIM_ConfigClockSource+0x230>)
 8005492:	4293      	cmp	r3, r2
 8005494:	f200 80ae 	bhi.w	80055f4 <HAL_TIM_ConfigClockSource+0x200>
 8005498:	4a63      	ldr	r2, [pc, #396]	@ (8005628 <HAL_TIM_ConfigClockSource+0x234>)
 800549a:	4293      	cmp	r3, r2
 800549c:	f000 80a1 	beq.w	80055e2 <HAL_TIM_ConfigClockSource+0x1ee>
 80054a0:	4a61      	ldr	r2, [pc, #388]	@ (8005628 <HAL_TIM_ConfigClockSource+0x234>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	f200 80a6 	bhi.w	80055f4 <HAL_TIM_ConfigClockSource+0x200>
 80054a8:	4a60      	ldr	r2, [pc, #384]	@ (800562c <HAL_TIM_ConfigClockSource+0x238>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	f000 8099 	beq.w	80055e2 <HAL_TIM_ConfigClockSource+0x1ee>
 80054b0:	4a5e      	ldr	r2, [pc, #376]	@ (800562c <HAL_TIM_ConfigClockSource+0x238>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	f200 809e 	bhi.w	80055f4 <HAL_TIM_ConfigClockSource+0x200>
 80054b8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80054bc:	f000 8091 	beq.w	80055e2 <HAL_TIM_ConfigClockSource+0x1ee>
 80054c0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80054c4:	f200 8096 	bhi.w	80055f4 <HAL_TIM_ConfigClockSource+0x200>
 80054c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054cc:	f000 8089 	beq.w	80055e2 <HAL_TIM_ConfigClockSource+0x1ee>
 80054d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054d4:	f200 808e 	bhi.w	80055f4 <HAL_TIM_ConfigClockSource+0x200>
 80054d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054dc:	d03e      	beq.n	800555c <HAL_TIM_ConfigClockSource+0x168>
 80054de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054e2:	f200 8087 	bhi.w	80055f4 <HAL_TIM_ConfigClockSource+0x200>
 80054e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054ea:	f000 8086 	beq.w	80055fa <HAL_TIM_ConfigClockSource+0x206>
 80054ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054f2:	d87f      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x200>
 80054f4:	2b70      	cmp	r3, #112	@ 0x70
 80054f6:	d01a      	beq.n	800552e <HAL_TIM_ConfigClockSource+0x13a>
 80054f8:	2b70      	cmp	r3, #112	@ 0x70
 80054fa:	d87b      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x200>
 80054fc:	2b60      	cmp	r3, #96	@ 0x60
 80054fe:	d050      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005500:	2b60      	cmp	r3, #96	@ 0x60
 8005502:	d877      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x200>
 8005504:	2b50      	cmp	r3, #80	@ 0x50
 8005506:	d03c      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x18e>
 8005508:	2b50      	cmp	r3, #80	@ 0x50
 800550a:	d873      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x200>
 800550c:	2b40      	cmp	r3, #64	@ 0x40
 800550e:	d058      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x1ce>
 8005510:	2b40      	cmp	r3, #64	@ 0x40
 8005512:	d86f      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x200>
 8005514:	2b30      	cmp	r3, #48	@ 0x30
 8005516:	d064      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x1ee>
 8005518:	2b30      	cmp	r3, #48	@ 0x30
 800551a:	d86b      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x200>
 800551c:	2b20      	cmp	r3, #32
 800551e:	d060      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x1ee>
 8005520:	2b20      	cmp	r3, #32
 8005522:	d867      	bhi.n	80055f4 <HAL_TIM_ConfigClockSource+0x200>
 8005524:	2b00      	cmp	r3, #0
 8005526:	d05c      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x1ee>
 8005528:	2b10      	cmp	r3, #16
 800552a:	d05a      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x1ee>
 800552c:	e062      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800553e:	f000 fdf3 	bl	8006128 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005550:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	609a      	str	r2, [r3, #8]
      break;
 800555a:	e04f      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800556c:	f000 fddc 	bl	8006128 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800557e:	609a      	str	r2, [r3, #8]
      break;
 8005580:	e03c      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800558e:	461a      	mov	r2, r3
 8005590:	f000 fd4e 	bl	8006030 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2150      	movs	r1, #80	@ 0x50
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fda7 	bl	80060ee <TIM_ITRx_SetConfig>
      break;
 80055a0:	e02c      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ae:	461a      	mov	r2, r3
 80055b0:	f000 fd6d 	bl	800608e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2160      	movs	r1, #96	@ 0x60
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 fd97 	bl	80060ee <TIM_ITRx_SetConfig>
      break;
 80055c0:	e01c      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ce:	461a      	mov	r2, r3
 80055d0:	f000 fd2e 	bl	8006030 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2140      	movs	r1, #64	@ 0x40
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 fd87 	bl	80060ee <TIM_ITRx_SetConfig>
      break;
 80055e0:	e00c      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4619      	mov	r1, r3
 80055ec:	4610      	mov	r0, r2
 80055ee:	f000 fd7e 	bl	80060ee <TIM_ITRx_SetConfig>
      break;
 80055f2:	e003      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	73fb      	strb	r3, [r7, #15]
      break;
 80055f8:	e000      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x208>
      break;
 80055fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800560c:	7bfb      	ldrb	r3, [r7, #15]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	00100070 	.word	0x00100070
 800561c:	00100060 	.word	0x00100060
 8005620:	00100050 	.word	0x00100050
 8005624:	00100040 	.word	0x00100040
 8005628:	00100030 	.word	0x00100030
 800562c:	00100020 	.word	0x00100020

08005630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a7a      	ldr	r2, [pc, #488]	@ (800582c <TIM_Base_SetConfig+0x1fc>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d02b      	beq.n	80056a0 <TIM_Base_SetConfig+0x70>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a79      	ldr	r2, [pc, #484]	@ (8005830 <TIM_Base_SetConfig+0x200>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d027      	beq.n	80056a0 <TIM_Base_SetConfig+0x70>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005656:	d023      	beq.n	80056a0 <TIM_Base_SetConfig+0x70>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800565e:	d01f      	beq.n	80056a0 <TIM_Base_SetConfig+0x70>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a74      	ldr	r2, [pc, #464]	@ (8005834 <TIM_Base_SetConfig+0x204>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d01b      	beq.n	80056a0 <TIM_Base_SetConfig+0x70>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a73      	ldr	r2, [pc, #460]	@ (8005838 <TIM_Base_SetConfig+0x208>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d017      	beq.n	80056a0 <TIM_Base_SetConfig+0x70>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a72      	ldr	r2, [pc, #456]	@ (800583c <TIM_Base_SetConfig+0x20c>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d013      	beq.n	80056a0 <TIM_Base_SetConfig+0x70>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a71      	ldr	r2, [pc, #452]	@ (8005840 <TIM_Base_SetConfig+0x210>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d00f      	beq.n	80056a0 <TIM_Base_SetConfig+0x70>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a70      	ldr	r2, [pc, #448]	@ (8005844 <TIM_Base_SetConfig+0x214>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d00b      	beq.n	80056a0 <TIM_Base_SetConfig+0x70>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a6f      	ldr	r2, [pc, #444]	@ (8005848 <TIM_Base_SetConfig+0x218>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d007      	beq.n	80056a0 <TIM_Base_SetConfig+0x70>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a6e      	ldr	r2, [pc, #440]	@ (800584c <TIM_Base_SetConfig+0x21c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d003      	beq.n	80056a0 <TIM_Base_SetConfig+0x70>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a6d      	ldr	r2, [pc, #436]	@ (8005850 <TIM_Base_SetConfig+0x220>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d108      	bne.n	80056b2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a5d      	ldr	r2, [pc, #372]	@ (800582c <TIM_Base_SetConfig+0x1fc>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d05b      	beq.n	8005772 <TIM_Base_SetConfig+0x142>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a5c      	ldr	r2, [pc, #368]	@ (8005830 <TIM_Base_SetConfig+0x200>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d057      	beq.n	8005772 <TIM_Base_SetConfig+0x142>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056c8:	d053      	beq.n	8005772 <TIM_Base_SetConfig+0x142>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056d0:	d04f      	beq.n	8005772 <TIM_Base_SetConfig+0x142>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a57      	ldr	r2, [pc, #348]	@ (8005834 <TIM_Base_SetConfig+0x204>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d04b      	beq.n	8005772 <TIM_Base_SetConfig+0x142>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a56      	ldr	r2, [pc, #344]	@ (8005838 <TIM_Base_SetConfig+0x208>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d047      	beq.n	8005772 <TIM_Base_SetConfig+0x142>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a55      	ldr	r2, [pc, #340]	@ (800583c <TIM_Base_SetConfig+0x20c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d043      	beq.n	8005772 <TIM_Base_SetConfig+0x142>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a54      	ldr	r2, [pc, #336]	@ (8005840 <TIM_Base_SetConfig+0x210>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d03f      	beq.n	8005772 <TIM_Base_SetConfig+0x142>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a53      	ldr	r2, [pc, #332]	@ (8005844 <TIM_Base_SetConfig+0x214>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d03b      	beq.n	8005772 <TIM_Base_SetConfig+0x142>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a52      	ldr	r2, [pc, #328]	@ (8005848 <TIM_Base_SetConfig+0x218>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d037      	beq.n	8005772 <TIM_Base_SetConfig+0x142>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a51      	ldr	r2, [pc, #324]	@ (800584c <TIM_Base_SetConfig+0x21c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d033      	beq.n	8005772 <TIM_Base_SetConfig+0x142>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a50      	ldr	r2, [pc, #320]	@ (8005850 <TIM_Base_SetConfig+0x220>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d02f      	beq.n	8005772 <TIM_Base_SetConfig+0x142>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a4f      	ldr	r2, [pc, #316]	@ (8005854 <TIM_Base_SetConfig+0x224>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d02b      	beq.n	8005772 <TIM_Base_SetConfig+0x142>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a4e      	ldr	r2, [pc, #312]	@ (8005858 <TIM_Base_SetConfig+0x228>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d027      	beq.n	8005772 <TIM_Base_SetConfig+0x142>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a4d      	ldr	r2, [pc, #308]	@ (800585c <TIM_Base_SetConfig+0x22c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d023      	beq.n	8005772 <TIM_Base_SetConfig+0x142>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a4c      	ldr	r2, [pc, #304]	@ (8005860 <TIM_Base_SetConfig+0x230>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d01f      	beq.n	8005772 <TIM_Base_SetConfig+0x142>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a4b      	ldr	r2, [pc, #300]	@ (8005864 <TIM_Base_SetConfig+0x234>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d01b      	beq.n	8005772 <TIM_Base_SetConfig+0x142>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a4a      	ldr	r2, [pc, #296]	@ (8005868 <TIM_Base_SetConfig+0x238>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d017      	beq.n	8005772 <TIM_Base_SetConfig+0x142>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a49      	ldr	r2, [pc, #292]	@ (800586c <TIM_Base_SetConfig+0x23c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d013      	beq.n	8005772 <TIM_Base_SetConfig+0x142>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a48      	ldr	r2, [pc, #288]	@ (8005870 <TIM_Base_SetConfig+0x240>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00f      	beq.n	8005772 <TIM_Base_SetConfig+0x142>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a47      	ldr	r2, [pc, #284]	@ (8005874 <TIM_Base_SetConfig+0x244>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00b      	beq.n	8005772 <TIM_Base_SetConfig+0x142>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a46      	ldr	r2, [pc, #280]	@ (8005878 <TIM_Base_SetConfig+0x248>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d007      	beq.n	8005772 <TIM_Base_SetConfig+0x142>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a45      	ldr	r2, [pc, #276]	@ (800587c <TIM_Base_SetConfig+0x24c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d003      	beq.n	8005772 <TIM_Base_SetConfig+0x142>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a44      	ldr	r2, [pc, #272]	@ (8005880 <TIM_Base_SetConfig+0x250>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d108      	bne.n	8005784 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a20      	ldr	r2, [pc, #128]	@ (800582c <TIM_Base_SetConfig+0x1fc>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d023      	beq.n	80057f8 <TIM_Base_SetConfig+0x1c8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005830 <TIM_Base_SetConfig+0x200>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d01f      	beq.n	80057f8 <TIM_Base_SetConfig+0x1c8>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a24      	ldr	r2, [pc, #144]	@ (800584c <TIM_Base_SetConfig+0x21c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d01b      	beq.n	80057f8 <TIM_Base_SetConfig+0x1c8>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a23      	ldr	r2, [pc, #140]	@ (8005850 <TIM_Base_SetConfig+0x220>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d017      	beq.n	80057f8 <TIM_Base_SetConfig+0x1c8>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a28      	ldr	r2, [pc, #160]	@ (800586c <TIM_Base_SetConfig+0x23c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d013      	beq.n	80057f8 <TIM_Base_SetConfig+0x1c8>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a27      	ldr	r2, [pc, #156]	@ (8005870 <TIM_Base_SetConfig+0x240>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d00f      	beq.n	80057f8 <TIM_Base_SetConfig+0x1c8>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a26      	ldr	r2, [pc, #152]	@ (8005874 <TIM_Base_SetConfig+0x244>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d00b      	beq.n	80057f8 <TIM_Base_SetConfig+0x1c8>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a25      	ldr	r2, [pc, #148]	@ (8005878 <TIM_Base_SetConfig+0x248>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d007      	beq.n	80057f8 <TIM_Base_SetConfig+0x1c8>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a24      	ldr	r2, [pc, #144]	@ (800587c <TIM_Base_SetConfig+0x24c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d003      	beq.n	80057f8 <TIM_Base_SetConfig+0x1c8>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a23      	ldr	r2, [pc, #140]	@ (8005880 <TIM_Base_SetConfig+0x250>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d103      	bne.n	8005800 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	691a      	ldr	r2, [r3, #16]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b01      	cmp	r3, #1
 8005810:	d105      	bne.n	800581e <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	f023 0201 	bic.w	r2, r3, #1
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	611a      	str	r2, [r3, #16]
  }
}
 800581e:	bf00      	nop
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	40012c00 	.word	0x40012c00
 8005830:	50012c00 	.word	0x50012c00
 8005834:	40000400 	.word	0x40000400
 8005838:	50000400 	.word	0x50000400
 800583c:	40000800 	.word	0x40000800
 8005840:	50000800 	.word	0x50000800
 8005844:	40000c00 	.word	0x40000c00
 8005848:	50000c00 	.word	0x50000c00
 800584c:	40013400 	.word	0x40013400
 8005850:	50013400 	.word	0x50013400
 8005854:	40001800 	.word	0x40001800
 8005858:	50001800 	.word	0x50001800
 800585c:	40001c00 	.word	0x40001c00
 8005860:	50001c00 	.word	0x50001c00
 8005864:	40002000 	.word	0x40002000
 8005868:	50002000 	.word	0x50002000
 800586c:	40014000 	.word	0x40014000
 8005870:	50014000 	.word	0x50014000
 8005874:	40014400 	.word	0x40014400
 8005878:	50014400 	.word	0x50014400
 800587c:	40014800 	.word	0x40014800
 8005880:	50014800 	.word	0x50014800

08005884 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	f023 0201 	bic.w	r2, r3, #1
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 0303 	bic.w	r3, r3, #3
 80058be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f023 0302 	bic.w	r3, r3, #2
 80058d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	4313      	orrs	r3, r2
 80058da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a40      	ldr	r2, [pc, #256]	@ (80059e0 <TIM_OC1_SetConfig+0x15c>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d023      	beq.n	800592c <TIM_OC1_SetConfig+0xa8>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a3f      	ldr	r2, [pc, #252]	@ (80059e4 <TIM_OC1_SetConfig+0x160>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d01f      	beq.n	800592c <TIM_OC1_SetConfig+0xa8>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a3e      	ldr	r2, [pc, #248]	@ (80059e8 <TIM_OC1_SetConfig+0x164>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d01b      	beq.n	800592c <TIM_OC1_SetConfig+0xa8>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a3d      	ldr	r2, [pc, #244]	@ (80059ec <TIM_OC1_SetConfig+0x168>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d017      	beq.n	800592c <TIM_OC1_SetConfig+0xa8>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a3c      	ldr	r2, [pc, #240]	@ (80059f0 <TIM_OC1_SetConfig+0x16c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d013      	beq.n	800592c <TIM_OC1_SetConfig+0xa8>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a3b      	ldr	r2, [pc, #236]	@ (80059f4 <TIM_OC1_SetConfig+0x170>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d00f      	beq.n	800592c <TIM_OC1_SetConfig+0xa8>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a3a      	ldr	r2, [pc, #232]	@ (80059f8 <TIM_OC1_SetConfig+0x174>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d00b      	beq.n	800592c <TIM_OC1_SetConfig+0xa8>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a39      	ldr	r2, [pc, #228]	@ (80059fc <TIM_OC1_SetConfig+0x178>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d007      	beq.n	800592c <TIM_OC1_SetConfig+0xa8>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a38      	ldr	r2, [pc, #224]	@ (8005a00 <TIM_OC1_SetConfig+0x17c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d003      	beq.n	800592c <TIM_OC1_SetConfig+0xa8>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a37      	ldr	r2, [pc, #220]	@ (8005a04 <TIM_OC1_SetConfig+0x180>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d10c      	bne.n	8005946 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f023 0308 	bic.w	r3, r3, #8
 8005932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	4313      	orrs	r3, r2
 800593c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f023 0304 	bic.w	r3, r3, #4
 8005944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a25      	ldr	r2, [pc, #148]	@ (80059e0 <TIM_OC1_SetConfig+0x15c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d023      	beq.n	8005996 <TIM_OC1_SetConfig+0x112>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a24      	ldr	r2, [pc, #144]	@ (80059e4 <TIM_OC1_SetConfig+0x160>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d01f      	beq.n	8005996 <TIM_OC1_SetConfig+0x112>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a23      	ldr	r2, [pc, #140]	@ (80059e8 <TIM_OC1_SetConfig+0x164>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d01b      	beq.n	8005996 <TIM_OC1_SetConfig+0x112>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a22      	ldr	r2, [pc, #136]	@ (80059ec <TIM_OC1_SetConfig+0x168>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d017      	beq.n	8005996 <TIM_OC1_SetConfig+0x112>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a21      	ldr	r2, [pc, #132]	@ (80059f0 <TIM_OC1_SetConfig+0x16c>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d013      	beq.n	8005996 <TIM_OC1_SetConfig+0x112>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a20      	ldr	r2, [pc, #128]	@ (80059f4 <TIM_OC1_SetConfig+0x170>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d00f      	beq.n	8005996 <TIM_OC1_SetConfig+0x112>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a1f      	ldr	r2, [pc, #124]	@ (80059f8 <TIM_OC1_SetConfig+0x174>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d00b      	beq.n	8005996 <TIM_OC1_SetConfig+0x112>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a1e      	ldr	r2, [pc, #120]	@ (80059fc <TIM_OC1_SetConfig+0x178>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d007      	beq.n	8005996 <TIM_OC1_SetConfig+0x112>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a1d      	ldr	r2, [pc, #116]	@ (8005a00 <TIM_OC1_SetConfig+0x17c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d003      	beq.n	8005996 <TIM_OC1_SetConfig+0x112>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a1c      	ldr	r2, [pc, #112]	@ (8005a04 <TIM_OC1_SetConfig+0x180>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d111      	bne.n	80059ba <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800599c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	621a      	str	r2, [r3, #32]
}
 80059d4:	bf00      	nop
 80059d6:	371c      	adds	r7, #28
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	40012c00 	.word	0x40012c00
 80059e4:	50012c00 	.word	0x50012c00
 80059e8:	40013400 	.word	0x40013400
 80059ec:	50013400 	.word	0x50013400
 80059f0:	40014000 	.word	0x40014000
 80059f4:	50014000 	.word	0x50014000
 80059f8:	40014400 	.word	0x40014400
 80059fc:	50014400 	.word	0x50014400
 8005a00:	40014800 	.word	0x40014800
 8005a04:	50014800 	.word	0x50014800

08005a08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	f023 0210 	bic.w	r2, r3, #16
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	021b      	lsls	r3, r3, #8
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f023 0320 	bic.w	r3, r3, #32
 8005a56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a36      	ldr	r2, [pc, #216]	@ (8005b40 <TIM_OC2_SetConfig+0x138>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d00b      	beq.n	8005a84 <TIM_OC2_SetConfig+0x7c>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a35      	ldr	r2, [pc, #212]	@ (8005b44 <TIM_OC2_SetConfig+0x13c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d007      	beq.n	8005a84 <TIM_OC2_SetConfig+0x7c>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a34      	ldr	r2, [pc, #208]	@ (8005b48 <TIM_OC2_SetConfig+0x140>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d003      	beq.n	8005a84 <TIM_OC2_SetConfig+0x7c>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a33      	ldr	r2, [pc, #204]	@ (8005b4c <TIM_OC2_SetConfig+0x144>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d10d      	bne.n	8005aa0 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	011b      	lsls	r3, r3, #4
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a27      	ldr	r2, [pc, #156]	@ (8005b40 <TIM_OC2_SetConfig+0x138>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d023      	beq.n	8005af0 <TIM_OC2_SetConfig+0xe8>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a26      	ldr	r2, [pc, #152]	@ (8005b44 <TIM_OC2_SetConfig+0x13c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d01f      	beq.n	8005af0 <TIM_OC2_SetConfig+0xe8>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a25      	ldr	r2, [pc, #148]	@ (8005b48 <TIM_OC2_SetConfig+0x140>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d01b      	beq.n	8005af0 <TIM_OC2_SetConfig+0xe8>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a24      	ldr	r2, [pc, #144]	@ (8005b4c <TIM_OC2_SetConfig+0x144>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d017      	beq.n	8005af0 <TIM_OC2_SetConfig+0xe8>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a23      	ldr	r2, [pc, #140]	@ (8005b50 <TIM_OC2_SetConfig+0x148>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d013      	beq.n	8005af0 <TIM_OC2_SetConfig+0xe8>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a22      	ldr	r2, [pc, #136]	@ (8005b54 <TIM_OC2_SetConfig+0x14c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d00f      	beq.n	8005af0 <TIM_OC2_SetConfig+0xe8>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a21      	ldr	r2, [pc, #132]	@ (8005b58 <TIM_OC2_SetConfig+0x150>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d00b      	beq.n	8005af0 <TIM_OC2_SetConfig+0xe8>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a20      	ldr	r2, [pc, #128]	@ (8005b5c <TIM_OC2_SetConfig+0x154>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d007      	beq.n	8005af0 <TIM_OC2_SetConfig+0xe8>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a1f      	ldr	r2, [pc, #124]	@ (8005b60 <TIM_OC2_SetConfig+0x158>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d003      	beq.n	8005af0 <TIM_OC2_SetConfig+0xe8>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a1e      	ldr	r2, [pc, #120]	@ (8005b64 <TIM_OC2_SetConfig+0x15c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d113      	bne.n	8005b18 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005af6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005afe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	621a      	str	r2, [r3, #32]
}
 8005b32:	bf00      	nop
 8005b34:	371c      	adds	r7, #28
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	40012c00 	.word	0x40012c00
 8005b44:	50012c00 	.word	0x50012c00
 8005b48:	40013400 	.word	0x40013400
 8005b4c:	50013400 	.word	0x50013400
 8005b50:	40014000 	.word	0x40014000
 8005b54:	50014000 	.word	0x50014000
 8005b58:	40014400 	.word	0x40014400
 8005b5c:	50014400 	.word	0x50014400
 8005b60:	40014800 	.word	0x40014800
 8005b64:	50014800 	.word	0x50014800

08005b68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f023 0303 	bic.w	r3, r3, #3
 8005ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	021b      	lsls	r3, r3, #8
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a35      	ldr	r2, [pc, #212]	@ (8005c9c <TIM_OC3_SetConfig+0x134>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00b      	beq.n	8005be2 <TIM_OC3_SetConfig+0x7a>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a34      	ldr	r2, [pc, #208]	@ (8005ca0 <TIM_OC3_SetConfig+0x138>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d007      	beq.n	8005be2 <TIM_OC3_SetConfig+0x7a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a33      	ldr	r2, [pc, #204]	@ (8005ca4 <TIM_OC3_SetConfig+0x13c>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d003      	beq.n	8005be2 <TIM_OC3_SetConfig+0x7a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a32      	ldr	r2, [pc, #200]	@ (8005ca8 <TIM_OC3_SetConfig+0x140>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d10d      	bne.n	8005bfe <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005be8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	021b      	lsls	r3, r3, #8
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a26      	ldr	r2, [pc, #152]	@ (8005c9c <TIM_OC3_SetConfig+0x134>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d023      	beq.n	8005c4e <TIM_OC3_SetConfig+0xe6>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a25      	ldr	r2, [pc, #148]	@ (8005ca0 <TIM_OC3_SetConfig+0x138>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d01f      	beq.n	8005c4e <TIM_OC3_SetConfig+0xe6>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a24      	ldr	r2, [pc, #144]	@ (8005ca4 <TIM_OC3_SetConfig+0x13c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d01b      	beq.n	8005c4e <TIM_OC3_SetConfig+0xe6>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a23      	ldr	r2, [pc, #140]	@ (8005ca8 <TIM_OC3_SetConfig+0x140>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d017      	beq.n	8005c4e <TIM_OC3_SetConfig+0xe6>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a22      	ldr	r2, [pc, #136]	@ (8005cac <TIM_OC3_SetConfig+0x144>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d013      	beq.n	8005c4e <TIM_OC3_SetConfig+0xe6>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a21      	ldr	r2, [pc, #132]	@ (8005cb0 <TIM_OC3_SetConfig+0x148>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00f      	beq.n	8005c4e <TIM_OC3_SetConfig+0xe6>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a20      	ldr	r2, [pc, #128]	@ (8005cb4 <TIM_OC3_SetConfig+0x14c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d00b      	beq.n	8005c4e <TIM_OC3_SetConfig+0xe6>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a1f      	ldr	r2, [pc, #124]	@ (8005cb8 <TIM_OC3_SetConfig+0x150>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d007      	beq.n	8005c4e <TIM_OC3_SetConfig+0xe6>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a1e      	ldr	r2, [pc, #120]	@ (8005cbc <TIM_OC3_SetConfig+0x154>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d003      	beq.n	8005c4e <TIM_OC3_SetConfig+0xe6>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a1d      	ldr	r2, [pc, #116]	@ (8005cc0 <TIM_OC3_SetConfig+0x158>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d113      	bne.n	8005c76 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	011b      	lsls	r3, r3, #4
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	011b      	lsls	r3, r3, #4
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	621a      	str	r2, [r3, #32]
}
 8005c90:	bf00      	nop
 8005c92:	371c      	adds	r7, #28
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	40012c00 	.word	0x40012c00
 8005ca0:	50012c00 	.word	0x50012c00
 8005ca4:	40013400 	.word	0x40013400
 8005ca8:	50013400 	.word	0x50013400
 8005cac:	40014000 	.word	0x40014000
 8005cb0:	50014000 	.word	0x50014000
 8005cb4:	40014400 	.word	0x40014400
 8005cb8:	50014400 	.word	0x50014400
 8005cbc:	40014800 	.word	0x40014800
 8005cc0:	50014800 	.word	0x50014800

08005cc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b087      	sub	sp, #28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	021b      	lsls	r3, r3, #8
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	031b      	lsls	r3, r3, #12
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a36      	ldr	r2, [pc, #216]	@ (8005dfc <TIM_OC4_SetConfig+0x138>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d00b      	beq.n	8005d40 <TIM_OC4_SetConfig+0x7c>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a35      	ldr	r2, [pc, #212]	@ (8005e00 <TIM_OC4_SetConfig+0x13c>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d007      	beq.n	8005d40 <TIM_OC4_SetConfig+0x7c>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a34      	ldr	r2, [pc, #208]	@ (8005e04 <TIM_OC4_SetConfig+0x140>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d003      	beq.n	8005d40 <TIM_OC4_SetConfig+0x7c>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a33      	ldr	r2, [pc, #204]	@ (8005e08 <TIM_OC4_SetConfig+0x144>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d10d      	bne.n	8005d5c <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	031b      	lsls	r3, r3, #12
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a27      	ldr	r2, [pc, #156]	@ (8005dfc <TIM_OC4_SetConfig+0x138>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d023      	beq.n	8005dac <TIM_OC4_SetConfig+0xe8>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a26      	ldr	r2, [pc, #152]	@ (8005e00 <TIM_OC4_SetConfig+0x13c>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d01f      	beq.n	8005dac <TIM_OC4_SetConfig+0xe8>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a25      	ldr	r2, [pc, #148]	@ (8005e04 <TIM_OC4_SetConfig+0x140>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d01b      	beq.n	8005dac <TIM_OC4_SetConfig+0xe8>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a24      	ldr	r2, [pc, #144]	@ (8005e08 <TIM_OC4_SetConfig+0x144>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d017      	beq.n	8005dac <TIM_OC4_SetConfig+0xe8>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a23      	ldr	r2, [pc, #140]	@ (8005e0c <TIM_OC4_SetConfig+0x148>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d013      	beq.n	8005dac <TIM_OC4_SetConfig+0xe8>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a22      	ldr	r2, [pc, #136]	@ (8005e10 <TIM_OC4_SetConfig+0x14c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00f      	beq.n	8005dac <TIM_OC4_SetConfig+0xe8>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a21      	ldr	r2, [pc, #132]	@ (8005e14 <TIM_OC4_SetConfig+0x150>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d00b      	beq.n	8005dac <TIM_OC4_SetConfig+0xe8>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a20      	ldr	r2, [pc, #128]	@ (8005e18 <TIM_OC4_SetConfig+0x154>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d007      	beq.n	8005dac <TIM_OC4_SetConfig+0xe8>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a1f      	ldr	r2, [pc, #124]	@ (8005e1c <TIM_OC4_SetConfig+0x158>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d003      	beq.n	8005dac <TIM_OC4_SetConfig+0xe8>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a1e      	ldr	r2, [pc, #120]	@ (8005e20 <TIM_OC4_SetConfig+0x15c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d113      	bne.n	8005dd4 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005db2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005dba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	019b      	lsls	r3, r3, #6
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	019b      	lsls	r3, r3, #6
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	621a      	str	r2, [r3, #32]
}
 8005dee:	bf00      	nop
 8005df0:	371c      	adds	r7, #28
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	40012c00 	.word	0x40012c00
 8005e00:	50012c00 	.word	0x50012c00
 8005e04:	40013400 	.word	0x40013400
 8005e08:	50013400 	.word	0x50013400
 8005e0c:	40014000 	.word	0x40014000
 8005e10:	50014000 	.word	0x50014000
 8005e14:	40014400 	.word	0x40014400
 8005e18:	50014400 	.word	0x50014400
 8005e1c:	40014800 	.word	0x40014800
 8005e20:	50014800 	.word	0x50014800

08005e24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005e68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	041b      	lsls	r3, r3, #16
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a21      	ldr	r2, [pc, #132]	@ (8005f00 <TIM_OC5_SetConfig+0xdc>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d023      	beq.n	8005ec6 <TIM_OC5_SetConfig+0xa2>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a20      	ldr	r2, [pc, #128]	@ (8005f04 <TIM_OC5_SetConfig+0xe0>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d01f      	beq.n	8005ec6 <TIM_OC5_SetConfig+0xa2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a1f      	ldr	r2, [pc, #124]	@ (8005f08 <TIM_OC5_SetConfig+0xe4>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d01b      	beq.n	8005ec6 <TIM_OC5_SetConfig+0xa2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a1e      	ldr	r2, [pc, #120]	@ (8005f0c <TIM_OC5_SetConfig+0xe8>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d017      	beq.n	8005ec6 <TIM_OC5_SetConfig+0xa2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a1d      	ldr	r2, [pc, #116]	@ (8005f10 <TIM_OC5_SetConfig+0xec>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d013      	beq.n	8005ec6 <TIM_OC5_SetConfig+0xa2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8005f14 <TIM_OC5_SetConfig+0xf0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d00f      	beq.n	8005ec6 <TIM_OC5_SetConfig+0xa2>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a1b      	ldr	r2, [pc, #108]	@ (8005f18 <TIM_OC5_SetConfig+0xf4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d00b      	beq.n	8005ec6 <TIM_OC5_SetConfig+0xa2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a1a      	ldr	r2, [pc, #104]	@ (8005f1c <TIM_OC5_SetConfig+0xf8>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d007      	beq.n	8005ec6 <TIM_OC5_SetConfig+0xa2>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a19      	ldr	r2, [pc, #100]	@ (8005f20 <TIM_OC5_SetConfig+0xfc>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d003      	beq.n	8005ec6 <TIM_OC5_SetConfig+0xa2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a18      	ldr	r2, [pc, #96]	@ (8005f24 <TIM_OC5_SetConfig+0x100>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d109      	bne.n	8005eda <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ecc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	021b      	lsls	r3, r3, #8
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	621a      	str	r2, [r3, #32]
}
 8005ef4:	bf00      	nop
 8005ef6:	371c      	adds	r7, #28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	40012c00 	.word	0x40012c00
 8005f04:	50012c00 	.word	0x50012c00
 8005f08:	40013400 	.word	0x40013400
 8005f0c:	50013400 	.word	0x50013400
 8005f10:	40014000 	.word	0x40014000
 8005f14:	50014000 	.word	0x50014000
 8005f18:	40014400 	.word	0x40014400
 8005f1c:	50014400 	.word	0x50014400
 8005f20:	40014800 	.word	0x40014800
 8005f24:	50014800 	.word	0x50014800

08005f28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a1b      	ldr	r3, [r3, #32]
 8005f3c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	021b      	lsls	r3, r3, #8
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	051b      	lsls	r3, r3, #20
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a22      	ldr	r2, [pc, #136]	@ (8006008 <TIM_OC6_SetConfig+0xe0>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d023      	beq.n	8005fcc <TIM_OC6_SetConfig+0xa4>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a21      	ldr	r2, [pc, #132]	@ (800600c <TIM_OC6_SetConfig+0xe4>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d01f      	beq.n	8005fcc <TIM_OC6_SetConfig+0xa4>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a20      	ldr	r2, [pc, #128]	@ (8006010 <TIM_OC6_SetConfig+0xe8>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d01b      	beq.n	8005fcc <TIM_OC6_SetConfig+0xa4>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a1f      	ldr	r2, [pc, #124]	@ (8006014 <TIM_OC6_SetConfig+0xec>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d017      	beq.n	8005fcc <TIM_OC6_SetConfig+0xa4>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8006018 <TIM_OC6_SetConfig+0xf0>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d013      	beq.n	8005fcc <TIM_OC6_SetConfig+0xa4>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a1d      	ldr	r2, [pc, #116]	@ (800601c <TIM_OC6_SetConfig+0xf4>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d00f      	beq.n	8005fcc <TIM_OC6_SetConfig+0xa4>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a1c      	ldr	r2, [pc, #112]	@ (8006020 <TIM_OC6_SetConfig+0xf8>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d00b      	beq.n	8005fcc <TIM_OC6_SetConfig+0xa4>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8006024 <TIM_OC6_SetConfig+0xfc>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d007      	beq.n	8005fcc <TIM_OC6_SetConfig+0xa4>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a1a      	ldr	r2, [pc, #104]	@ (8006028 <TIM_OC6_SetConfig+0x100>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d003      	beq.n	8005fcc <TIM_OC6_SetConfig+0xa4>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a19      	ldr	r2, [pc, #100]	@ (800602c <TIM_OC6_SetConfig+0x104>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d109      	bne.n	8005fe0 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	029b      	lsls	r3, r3, #10
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	621a      	str	r2, [r3, #32]
}
 8005ffa:	bf00      	nop
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	40012c00 	.word	0x40012c00
 800600c:	50012c00 	.word	0x50012c00
 8006010:	40013400 	.word	0x40013400
 8006014:	50013400 	.word	0x50013400
 8006018:	40014000 	.word	0x40014000
 800601c:	50014000 	.word	0x50014000
 8006020:	40014400 	.word	0x40014400
 8006024:	50014400 	.word	0x50014400
 8006028:	40014800 	.word	0x40014800
 800602c:	50014800 	.word	0x50014800

08006030 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	f023 0201 	bic.w	r2, r3, #1
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800605a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	011b      	lsls	r3, r3, #4
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	4313      	orrs	r3, r2
 8006064:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f023 030a 	bic.w	r3, r3, #10
 800606c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	4313      	orrs	r3, r2
 8006074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	621a      	str	r2, [r3, #32]
}
 8006082:	bf00      	nop
 8006084:	371c      	adds	r7, #28
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800608e:	b480      	push	{r7}
 8006090:	b087      	sub	sp, #28
 8006092:	af00      	add	r7, sp, #0
 8006094:	60f8      	str	r0, [r7, #12]
 8006096:	60b9      	str	r1, [r7, #8]
 8006098:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6a1b      	ldr	r3, [r3, #32]
 80060a4:	f023 0210 	bic.w	r2, r3, #16
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	031b      	lsls	r3, r3, #12
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80060ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	621a      	str	r2, [r3, #32]
}
 80060e2:	bf00      	nop
 80060e4:	371c      	adds	r7, #28
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006104:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006108:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4313      	orrs	r3, r2
 8006110:	f043 0307 	orr.w	r3, r3, #7
 8006114:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	609a      	str	r2, [r3, #8]
}
 800611c:	bf00      	nop
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006142:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	021a      	lsls	r2, r3, #8
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	431a      	orrs	r2, r3
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	4313      	orrs	r3, r2
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	4313      	orrs	r3, r2
 8006154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	609a      	str	r2, [r3, #8]
}
 800615c:	bf00      	nop
 800615e:	371c      	adds	r7, #28
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006178:	2b01      	cmp	r3, #1
 800617a:	d101      	bne.n	8006180 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800617c:	2302      	movs	r3, #2
 800617e:	e0a1      	b.n	80062c4 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2202      	movs	r2, #2
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a4a      	ldr	r2, [pc, #296]	@ (80062d0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00e      	beq.n	80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a49      	ldr	r2, [pc, #292]	@ (80062d4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d009      	beq.n	80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a47      	ldr	r2, [pc, #284]	@ (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d004      	beq.n	80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a46      	ldr	r2, [pc, #280]	@ (80062dc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d108      	bne.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80061ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80061e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a34      	ldr	r2, [pc, #208]	@ (80062d0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d04a      	beq.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a33      	ldr	r2, [pc, #204]	@ (80062d4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d045      	beq.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006214:	d040      	beq.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800621e:	d03b      	beq.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a2e      	ldr	r2, [pc, #184]	@ (80062e0 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d036      	beq.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a2d      	ldr	r2, [pc, #180]	@ (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d031      	beq.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a2b      	ldr	r2, [pc, #172]	@ (80062e8 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d02c      	beq.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a2a      	ldr	r2, [pc, #168]	@ (80062ec <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d027      	beq.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a28      	ldr	r2, [pc, #160]	@ (80062f0 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d022      	beq.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a27      	ldr	r2, [pc, #156]	@ (80062f4 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d01d      	beq.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a1d      	ldr	r2, [pc, #116]	@ (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d018      	beq.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a1c      	ldr	r2, [pc, #112]	@ (80062dc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d013      	beq.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a20      	ldr	r2, [pc, #128]	@ (80062f8 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d00e      	beq.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a1f      	ldr	r2, [pc, #124]	@ (80062fc <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d009      	beq.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a1d      	ldr	r2, [pc, #116]	@ (8006300 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d004      	beq.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a1c      	ldr	r2, [pc, #112]	@ (8006304 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d10c      	bne.n	80062b2 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800629e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	40012c00 	.word	0x40012c00
 80062d4:	50012c00 	.word	0x50012c00
 80062d8:	40013400 	.word	0x40013400
 80062dc:	50013400 	.word	0x50013400
 80062e0:	40000400 	.word	0x40000400
 80062e4:	50000400 	.word	0x50000400
 80062e8:	40000800 	.word	0x40000800
 80062ec:	50000800 	.word	0x50000800
 80062f0:	40000c00 	.word	0x40000c00
 80062f4:	50000c00 	.word	0x50000c00
 80062f8:	40001800 	.word	0x40001800
 80062fc:	50001800 	.word	0x50001800
 8006300:	40014000 	.word	0x40014000
 8006304:	50014000 	.word	0x50014000

08006308 <memset>:
 8006308:	4402      	add	r2, r0
 800630a:	4603      	mov	r3, r0
 800630c:	4293      	cmp	r3, r2
 800630e:	d100      	bne.n	8006312 <memset+0xa>
 8006310:	4770      	bx	lr
 8006312:	f803 1b01 	strb.w	r1, [r3], #1
 8006316:	e7f9      	b.n	800630c <memset+0x4>

08006318 <__libc_init_array>:
 8006318:	b570      	push	{r4, r5, r6, lr}
 800631a:	4d0d      	ldr	r5, [pc, #52]	@ (8006350 <__libc_init_array+0x38>)
 800631c:	2600      	movs	r6, #0
 800631e:	4c0d      	ldr	r4, [pc, #52]	@ (8006354 <__libc_init_array+0x3c>)
 8006320:	1b64      	subs	r4, r4, r5
 8006322:	10a4      	asrs	r4, r4, #2
 8006324:	42a6      	cmp	r6, r4
 8006326:	d109      	bne.n	800633c <__libc_init_array+0x24>
 8006328:	4d0b      	ldr	r5, [pc, #44]	@ (8006358 <__libc_init_array+0x40>)
 800632a:	2600      	movs	r6, #0
 800632c:	4c0b      	ldr	r4, [pc, #44]	@ (800635c <__libc_init_array+0x44>)
 800632e:	f000 f817 	bl	8006360 <_init>
 8006332:	1b64      	subs	r4, r4, r5
 8006334:	10a4      	asrs	r4, r4, #2
 8006336:	42a6      	cmp	r6, r4
 8006338:	d105      	bne.n	8006346 <__libc_init_array+0x2e>
 800633a:	bd70      	pop	{r4, r5, r6, pc}
 800633c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006340:	3601      	adds	r6, #1
 8006342:	4798      	blx	r3
 8006344:	e7ee      	b.n	8006324 <__libc_init_array+0xc>
 8006346:	f855 3b04 	ldr.w	r3, [r5], #4
 800634a:	3601      	adds	r6, #1
 800634c:	4798      	blx	r3
 800634e:	e7f2      	b.n	8006336 <__libc_init_array+0x1e>
 8006350:	08006394 	.word	0x08006394
 8006354:	08006394 	.word	0x08006394
 8006358:	08006394 	.word	0x08006394
 800635c:	08006398 	.word	0x08006398

08006360 <_init>:
 8006360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006362:	bf00      	nop
 8006364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006366:	bc08      	pop	{r3}
 8006368:	469e      	mov	lr, r3
 800636a:	4770      	bx	lr

0800636c <_fini>:
 800636c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636e:	bf00      	nop
 8006370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006372:	bc08      	pop	{r3}
 8006374:	469e      	mov	lr, r3
 8006376:	4770      	bx	lr
