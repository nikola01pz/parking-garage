
parking-garage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ff4  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006240  08006240  00007240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006258  08006258  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006258  08006258  0000800c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006258  08006258  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006258  08006258  00007258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800625c  0800625c  0000725c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006260  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  0800626c  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  0800626c  000080cc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a6b  00000000  00000000  00008042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022d6  00000000  00000000  00019aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  0001bd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca4  00000000  00000000  0001cde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031ed0  00000000  00000000  0001da84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001709a  00000000  00000000  0004f954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013e7ec  00000000  00000000  000669ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a51da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044ec  00000000  00000000  001a5220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001a970c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000000c 	.word	0x2000000c
 8000268:	00000000 	.word	0x00000000
 800026c:	08006228 	.word	0x08006228

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000010 	.word	0x20000010
 8000288:	08006228 	.word	0x08006228

0800028c <MX_GPIO_Init>:
     PH1-OSC_OUT(PH1)   ------> RCC_OSC_OUT
     PA13(JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14(JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b08e      	sub	sp, #56	@ 0x38
 8000290:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000292:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
 80002a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002a2:	4b88      	ldr	r3, [pc, #544]	@ (80004c4 <MX_GPIO_Init+0x238>)
 80002a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002a8:	4a86      	ldr	r2, [pc, #536]	@ (80004c4 <MX_GPIO_Init+0x238>)
 80002aa:	f043 0310 	orr.w	r3, r3, #16
 80002ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80002b2:	4b84      	ldr	r3, [pc, #528]	@ (80004c4 <MX_GPIO_Init+0x238>)
 80002b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002b8:	f003 0310 	and.w	r3, r3, #16
 80002bc:	623b      	str	r3, [r7, #32]
 80002be:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002c0:	4b80      	ldr	r3, [pc, #512]	@ (80004c4 <MX_GPIO_Init+0x238>)
 80002c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002c6:	4a7f      	ldr	r2, [pc, #508]	@ (80004c4 <MX_GPIO_Init+0x238>)
 80002c8:	f043 0320 	orr.w	r3, r3, #32
 80002cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80002d0:	4b7c      	ldr	r3, [pc, #496]	@ (80004c4 <MX_GPIO_Init+0x238>)
 80002d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002d6:	f003 0320 	and.w	r3, r3, #32
 80002da:	61fb      	str	r3, [r7, #28]
 80002dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002de:	4b79      	ldr	r3, [pc, #484]	@ (80004c4 <MX_GPIO_Init+0x238>)
 80002e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002e4:	4a77      	ldr	r2, [pc, #476]	@ (80004c4 <MX_GPIO_Init+0x238>)
 80002e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80002ee:	4b75      	ldr	r3, [pc, #468]	@ (80004c4 <MX_GPIO_Init+0x238>)
 80002f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002f8:	61bb      	str	r3, [r7, #24]
 80002fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002fc:	4b71      	ldr	r3, [pc, #452]	@ (80004c4 <MX_GPIO_Init+0x238>)
 80002fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000302:	4a70      	ldr	r2, [pc, #448]	@ (80004c4 <MX_GPIO_Init+0x238>)
 8000304:	f043 0304 	orr.w	r3, r3, #4
 8000308:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800030c:	4b6d      	ldr	r3, [pc, #436]	@ (80004c4 <MX_GPIO_Init+0x238>)
 800030e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000312:	f003 0304 	and.w	r3, r3, #4
 8000316:	617b      	str	r3, [r7, #20]
 8000318:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031a:	4b6a      	ldr	r3, [pc, #424]	@ (80004c4 <MX_GPIO_Init+0x238>)
 800031c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000320:	4a68      	ldr	r2, [pc, #416]	@ (80004c4 <MX_GPIO_Init+0x238>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800032a:	4b66      	ldr	r3, [pc, #408]	@ (80004c4 <MX_GPIO_Init+0x238>)
 800032c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000330:	f003 0301 	and.w	r3, r3, #1
 8000334:	613b      	str	r3, [r7, #16]
 8000336:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000338:	4b62      	ldr	r3, [pc, #392]	@ (80004c4 <MX_GPIO_Init+0x238>)
 800033a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800033e:	4a61      	ldr	r2, [pc, #388]	@ (80004c4 <MX_GPIO_Init+0x238>)
 8000340:	f043 0302 	orr.w	r3, r3, #2
 8000344:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000348:	4b5e      	ldr	r3, [pc, #376]	@ (80004c4 <MX_GPIO_Init+0x238>)
 800034a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800034e:	f003 0302 	and.w	r3, r3, #2
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000356:	4b5b      	ldr	r3, [pc, #364]	@ (80004c4 <MX_GPIO_Init+0x238>)
 8000358:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800035c:	4a59      	ldr	r2, [pc, #356]	@ (80004c4 <MX_GPIO_Init+0x238>)
 800035e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000362:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000366:	4b57      	ldr	r3, [pc, #348]	@ (80004c4 <MX_GPIO_Init+0x238>)
 8000368:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800036c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000370:	60bb      	str	r3, [r7, #8]
 8000372:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000374:	4b53      	ldr	r3, [pc, #332]	@ (80004c4 <MX_GPIO_Init+0x238>)
 8000376:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800037a:	4a52      	ldr	r2, [pc, #328]	@ (80004c4 <MX_GPIO_Init+0x238>)
 800037c:	f043 0308 	orr.w	r3, r3, #8
 8000380:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000384:	4b4f      	ldr	r3, [pc, #316]	@ (80004c4 <MX_GPIO_Init+0x238>)
 8000386:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800038a:	f003 0308 	and.w	r3, r3, #8
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, P4_G_Pin|P4_R_Pin|P5_G_Pin|P3_G_Pin
 8000392:	2200      	movs	r2, #0
 8000394:	f249 4141 	movw	r1, #37953	@ 0x9441
 8000398:	484b      	ldr	r0, [pc, #300]	@ (80004c8 <MX_GPIO_Init+0x23c>)
 800039a:	f001 f977 	bl	800168c <HAL_GPIO_WritePin>
                          |P1_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(P7I2_R_GPIO_Port, P7I2_R_Pin, GPIO_PIN_RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	2101      	movs	r1, #1
 80003a2:	484a      	ldr	r0, [pc, #296]	@ (80004cc <MX_GPIO_Init+0x240>)
 80003a4:	f001 f972 	bl	800168c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, P3_R_Pin|P1_G_Pin|P6I1_R_Pin, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2149      	movs	r1, #73	@ 0x49
 80003ac:	4848      	ldr	r0, [pc, #288]	@ (80004d0 <MX_GPIO_Init+0x244>)
 80003ae:	f001 f96d 	bl	800168c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P2_R_Pin|P2_G_Pin, GPIO_PIN_RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	f240 4101 	movw	r1, #1025	@ 0x401
 80003b8:	4846      	ldr	r0, [pc, #280]	@ (80004d4 <MX_GPIO_Init+0x248>)
 80003ba:	f001 f967 	bl	800168c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, P5_R_Pin|P7I2_G_Pin|P6I1_G_Pin, GPIO_PIN_RESET);
 80003be:	2200      	movs	r2, #0
 80003c0:	f44f 610c 	mov.w	r1, #2240	@ 0x8c0
 80003c4:	4844      	ldr	r0, [pc, #272]	@ (80004d8 <MX_GPIO_Init+0x24c>)
 80003c6:	f001 f961 	bl	800168c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P4_G_Pin P4_R_Pin P5_G_Pin P3_G_Pin
                           P1_R_Pin */
  GPIO_InitStruct.Pin = P4_G_Pin|P4_R_Pin|P5_G_Pin|P3_G_Pin
 80003ca:	f249 4341 	movw	r3, #37953	@ 0x9441
 80003ce:	627b      	str	r3, [r7, #36]	@ 0x24
                          |P1_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d0:	2301      	movs	r3, #1
 80003d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d4:	2300      	movs	r3, #0
 80003d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d8:	2300      	movs	r3, #0
 80003da:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003e0:	4619      	mov	r1, r3
 80003e2:	4839      	ldr	r0, [pc, #228]	@ (80004c8 <MX_GPIO_Init+0x23c>)
 80003e4:	f000 ffdc 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : P4_Pin P5_Pin P6I1_Pin */
  GPIO_InitStruct.Pin = P4_Pin|P5_Pin|P6I1_Pin;
 80003e8:	2307      	movs	r3, #7
 80003ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ec:	2300      	movs	r3, #0
 80003ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	2300      	movs	r3, #0
 80003f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80003f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003f8:	4619      	mov	r1, r3
 80003fa:	4838      	ldr	r0, [pc, #224]	@ (80004dc <MX_GPIO_Init+0x250>)
 80003fc:	f000 ffd0 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : P7I2_R_Pin */
  GPIO_InitStruct.Pin = P7I2_R_Pin;
 8000400:	2301      	movs	r3, #1
 8000402:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000404:	2301      	movs	r3, #1
 8000406:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000408:	2300      	movs	r3, #0
 800040a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040c:	2300      	movs	r3, #0
 800040e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(P7I2_R_GPIO_Port, &GPIO_InitStruct);
 8000410:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000414:	4619      	mov	r1, r3
 8000416:	482d      	ldr	r0, [pc, #180]	@ (80004cc <MX_GPIO_Init+0x240>)
 8000418:	f000 ffc2 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : P3_R_Pin P1_G_Pin P6I1_R_Pin */
  GPIO_InitStruct.Pin = P3_R_Pin|P1_G_Pin|P6I1_R_Pin;
 800041c:	2349      	movs	r3, #73	@ 0x49
 800041e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000420:	2301      	movs	r3, #1
 8000422:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000424:	2300      	movs	r3, #0
 8000426:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000428:	2300      	movs	r3, #0
 800042a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800042c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000430:	4619      	mov	r1, r3
 8000432:	4827      	ldr	r0, [pc, #156]	@ (80004d0 <MX_GPIO_Init+0x244>)
 8000434:	f000 ffb4 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : P2_R_Pin P2_G_Pin */
  GPIO_InitStruct.Pin = P2_R_Pin|P2_G_Pin;
 8000438:	f240 4301 	movw	r3, #1025	@ 0x401
 800043c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043e:	2301      	movs	r3, #1
 8000440:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000442:	2300      	movs	r3, #0
 8000444:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000446:	2300      	movs	r3, #0
 8000448:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800044a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800044e:	4619      	mov	r1, r3
 8000450:	4820      	ldr	r0, [pc, #128]	@ (80004d4 <MX_GPIO_Init+0x248>)
 8000452:	f000 ffa5 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : P1_Pin */
  GPIO_InitStruct.Pin = P1_Pin;
 8000456:	2301      	movs	r3, #1
 8000458:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800045a:	2300      	movs	r3, #0
 800045c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045e:	2300      	movs	r3, #0
 8000460:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(P1_GPIO_Port, &GPIO_InitStruct);
 8000462:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000466:	4619      	mov	r1, r3
 8000468:	481d      	ldr	r0, [pc, #116]	@ (80004e0 <MX_GPIO_Init+0x254>)
 800046a:	f000 ff99 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : P7I2_Pin */
  GPIO_InitStruct.Pin = P7I2_Pin;
 800046e:	2310      	movs	r3, #16
 8000470:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000472:	2300      	movs	r3, #0
 8000474:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000476:	2300      	movs	r3, #0
 8000478:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(P7I2_GPIO_Port, &GPIO_InitStruct);
 800047a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800047e:	4619      	mov	r1, r3
 8000480:	4811      	ldr	r0, [pc, #68]	@ (80004c8 <MX_GPIO_Init+0x23c>)
 8000482:	f000 ff8d 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : P5_R_Pin P7I2_G_Pin P6I1_G_Pin */
  GPIO_InitStruct.Pin = P5_R_Pin|P7I2_G_Pin|P6I1_G_Pin;
 8000486:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800048a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048c:	2301      	movs	r3, #1
 800048e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	2300      	movs	r3, #0
 8000492:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000494:	2300      	movs	r3, #0
 8000496:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000498:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800049c:	4619      	mov	r1, r3
 800049e:	480e      	ldr	r0, [pc, #56]	@ (80004d8 <MX_GPIO_Init+0x24c>)
 80004a0:	f000 ff7e 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : P3_Pin P2_Pin */
  GPIO_InitStruct.Pin = P3_Pin|P2_Pin;
 80004a4:	2303      	movs	r3, #3
 80004a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004a8:	2300      	movs	r3, #0
 80004aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004b4:	4619      	mov	r1, r3
 80004b6:	4808      	ldr	r0, [pc, #32]	@ (80004d8 <MX_GPIO_Init+0x24c>)
 80004b8:	f000 ff72 	bl	80013a0 <HAL_GPIO_Init>

}
 80004bc:	bf00      	nop
 80004be:	3738      	adds	r7, #56	@ 0x38
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	44020c00 	.word	0x44020c00
 80004c8:	42021000 	.word	0x42021000
 80004cc:	42020800 	.word	0x42020800
 80004d0:	42020000 	.word	0x42020000
 80004d4:	42020400 	.word	0x42020400
 80004d8:	42020c00 	.word	0x42020c00
 80004dc:	42021400 	.word	0x42021400
 80004e0:	42021800 	.word	0x42021800

080004e4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af02      	add	r7, sp, #8
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	f023 030f 	bic.w	r3, r3, #15
 80004f4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	011b      	lsls	r3, r3, #4
 80004fa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	f043 030c 	orr.w	r3, r3, #12
 8000502:	b2db      	uxtb	r3, r3
 8000504:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8000506:	7bfb      	ldrb	r3, [r7, #15]
 8000508:	f043 0308 	orr.w	r3, r3, #8
 800050c:	b2db      	uxtb	r3, r3
 800050e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000510:	7bbb      	ldrb	r3, [r7, #14]
 8000512:	f043 030c 	orr.w	r3, r3, #12
 8000516:	b2db      	uxtb	r3, r3
 8000518:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 800051a:	7bbb      	ldrb	r3, [r7, #14]
 800051c:	f043 0308 	orr.w	r3, r3, #8
 8000520:	b2db      	uxtb	r3, r3
 8000522:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000524:	f107 0208 	add.w	r2, r7, #8
 8000528:	2364      	movs	r3, #100	@ 0x64
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2304      	movs	r3, #4
 800052e:	214e      	movs	r1, #78	@ 0x4e
 8000530:	4803      	ldr	r0, [pc, #12]	@ (8000540 <lcd_send_cmd+0x5c>)
 8000532:	f001 f95f 	bl	80017f4 <HAL_I2C_Master_Transmit>
}
 8000536:	bf00      	nop
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000028 	.word	0x20000028

08000544 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af02      	add	r7, sp, #8
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	f023 030f 	bic.w	r3, r3, #15
 8000554:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	011b      	lsls	r3, r3, #4
 800055a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	f043 030d 	orr.w	r3, r3, #13
 8000562:	b2db      	uxtb	r3, r3
 8000564:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	f043 0309 	orr.w	r3, r3, #9
 800056c:	b2db      	uxtb	r3, r3
 800056e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000570:	7bbb      	ldrb	r3, [r7, #14]
 8000572:	f043 030d 	orr.w	r3, r3, #13
 8000576:	b2db      	uxtb	r3, r3
 8000578:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 800057a:	7bbb      	ldrb	r3, [r7, #14]
 800057c:	f043 0309 	orr.w	r3, r3, #9
 8000580:	b2db      	uxtb	r3, r3
 8000582:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000584:	f107 0208 	add.w	r2, r7, #8
 8000588:	2364      	movs	r3, #100	@ 0x64
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2304      	movs	r3, #4
 800058e:	214e      	movs	r1, #78	@ 0x4e
 8000590:	4803      	ldr	r0, [pc, #12]	@ (80005a0 <lcd_send_data+0x5c>)
 8000592:	f001 f92f 	bl	80017f4 <HAL_I2C_Master_Transmit>
}
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000028 	.word	0x20000028

080005a4 <lcd_clear>:

void lcd_clear (void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80005aa:	2080      	movs	r0, #128	@ 0x80
 80005ac:	f7ff ff9a 	bl	80004e4 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	e005      	b.n	80005c2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80005b6:	2020      	movs	r0, #32
 80005b8:	f7ff ffc4 	bl	8000544 <lcd_send_data>
	for (int i=0; i<70; i++)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3301      	adds	r3, #1
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b45      	cmp	r3, #69	@ 0x45
 80005c6:	ddf6      	ble.n	80005b6 <lcd_clear+0x12>
	}
}
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80005d6:	2032      	movs	r0, #50	@ 0x32
 80005d8:	f000 fd5a 	bl	8001090 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005dc:	2030      	movs	r0, #48	@ 0x30
 80005de:	f7ff ff81 	bl	80004e4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80005e2:	2005      	movs	r0, #5
 80005e4:	f000 fd54 	bl	8001090 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005e8:	2030      	movs	r0, #48	@ 0x30
 80005ea:	f7ff ff7b 	bl	80004e4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80005ee:	2001      	movs	r0, #1
 80005f0:	f000 fd4e 	bl	8001090 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005f4:	2030      	movs	r0, #48	@ 0x30
 80005f6:	f7ff ff75 	bl	80004e4 <lcd_send_cmd>
	HAL_Delay(10);
 80005fa:	200a      	movs	r0, #10
 80005fc:	f000 fd48 	bl	8001090 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000600:	2020      	movs	r0, #32
 8000602:	f7ff ff6f 	bl	80004e4 <lcd_send_cmd>
	HAL_Delay(10);
 8000606:	200a      	movs	r0, #10
 8000608:	f000 fd42 	bl	8001090 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800060c:	2028      	movs	r0, #40	@ 0x28
 800060e:	f7ff ff69 	bl	80004e4 <lcd_send_cmd>
	HAL_Delay(1);
 8000612:	2001      	movs	r0, #1
 8000614:	f000 fd3c 	bl	8001090 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000618:	2008      	movs	r0, #8
 800061a:	f7ff ff63 	bl	80004e4 <lcd_send_cmd>
	HAL_Delay(1);
 800061e:	2001      	movs	r0, #1
 8000620:	f000 fd36 	bl	8001090 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000624:	2001      	movs	r0, #1
 8000626:	f7ff ff5d 	bl	80004e4 <lcd_send_cmd>
	HAL_Delay(1);
 800062a:	2001      	movs	r0, #1
 800062c:	f000 fd30 	bl	8001090 <HAL_Delay>
	HAL_Delay(1);
 8000630:	2001      	movs	r0, #1
 8000632:	f000 fd2d 	bl	8001090 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000636:	2006      	movs	r0, #6
 8000638:	f7ff ff54 	bl	80004e4 <lcd_send_cmd>
	HAL_Delay(1);
 800063c:	2001      	movs	r0, #1
 800063e:	f000 fd27 	bl	8001090 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000642:	200c      	movs	r0, #12
 8000644:	f7ff ff4e 	bl	80004e4 <lcd_send_cmd>
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}

0800064c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000654:	e006      	b.n	8000664 <lcd_send_string+0x18>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ff70 	bl	8000544 <lcd_send_data>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d1f4      	bne.n	8000656 <lcd_send_string+0xa>
}
 800066c:	bf00      	nop
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800067c:	4b1b      	ldr	r3, [pc, #108]	@ (80006ec <MX_I2C1_Init+0x74>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	@ (80006f0 <MX_I2C1_Init+0x78>)
 8000680:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 8000682:	4b1a      	ldr	r3, [pc, #104]	@ (80006ec <MX_I2C1_Init+0x74>)
 8000684:	4a1b      	ldr	r2, [pc, #108]	@ (80006f4 <MX_I2C1_Init+0x7c>)
 8000686:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000688:	4b18      	ldr	r3, [pc, #96]	@ (80006ec <MX_I2C1_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800068e:	4b17      	ldr	r3, [pc, #92]	@ (80006ec <MX_I2C1_Init+0x74>)
 8000690:	2201      	movs	r2, #1
 8000692:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000694:	4b15      	ldr	r3, [pc, #84]	@ (80006ec <MX_I2C1_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800069a:	4b14      	ldr	r3, [pc, #80]	@ (80006ec <MX_I2C1_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006a0:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <MX_I2C1_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a6:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <MX_I2C1_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <MX_I2C1_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b2:	480e      	ldr	r0, [pc, #56]	@ (80006ec <MX_I2C1_Init+0x74>)
 80006b4:	f001 f802 	bl	80016bc <HAL_I2C_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006be:	f000 fa45 	bl	8000b4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006c2:	2100      	movs	r1, #0
 80006c4:	4809      	ldr	r0, [pc, #36]	@ (80006ec <MX_I2C1_Init+0x74>)
 80006c6:	f001 fba3 	bl	8001e10 <HAL_I2CEx_ConfigAnalogFilter>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006d0:	f000 fa3c 	bl	8000b4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006d4:	2100      	movs	r1, #0
 80006d6:	4805      	ldr	r0, [pc, #20]	@ (80006ec <MX_I2C1_Init+0x74>)
 80006d8:	f001 fbe5 	bl	8001ea6 <HAL_I2CEx_ConfigDigitalFilter>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006e2:	f000 fa33 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000028 	.word	0x20000028
 80006f0:	40005400 	.word	0x40005400
 80006f4:	60808cd3 	.word	0x60808cd3

080006f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b0cc      	sub	sp, #304	@ 0x130
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000702:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000706:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000718:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800071c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000720:	4618      	mov	r0, r3
 8000722:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000726:	461a      	mov	r2, r3
 8000728:	2100      	movs	r1, #0
 800072a:	f005 fd51 	bl	80061d0 <memset>
  if(i2cHandle->Instance==I2C1)
 800072e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000732:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a33      	ldr	r2, [pc, #204]	@ (8000808 <HAL_I2C_MspInit+0x110>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d15e      	bne.n	80007fe <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000740:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000744:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000748:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800074c:	f04f 0300 	mov.w	r3, #0
 8000750:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000754:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000758:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800075c:	2200      	movs	r2, #0
 800075e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000762:	f107 0310 	add.w	r3, r7, #16
 8000766:	4618      	mov	r0, r3
 8000768:	f002 fb22 	bl	8002db0 <HAL_RCCEx_PeriphCLKConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8000772:	f000 f9eb 	bl	8000b4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	4b25      	ldr	r3, [pc, #148]	@ (800080c <HAL_I2C_MspInit+0x114>)
 8000778:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800077c:	4a23      	ldr	r2, [pc, #140]	@ (800080c <HAL_I2C_MspInit+0x114>)
 800077e:	f043 0302 	orr.w	r3, r3, #2
 8000782:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000786:	4b21      	ldr	r3, [pc, #132]	@ (800080c <HAL_I2C_MspInit+0x114>)
 8000788:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800078c:	f003 0202 	and.w	r2, r3, #2
 8000790:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000794:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800079e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80007a2:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = DISPLAY_SCL_Pin|DISPLAY_SDA_Pin;
 80007a4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007a8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ac:	2312      	movs	r3, #18
 80007ae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007be:	2304      	movs	r3, #4
 80007c0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80007c8:	4619      	mov	r1, r3
 80007ca:	4811      	ldr	r0, [pc, #68]	@ (8000810 <HAL_I2C_MspInit+0x118>)
 80007cc:	f000 fde8 	bl	80013a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007d0:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <HAL_I2C_MspInit+0x114>)
 80007d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80007d6:	4a0d      	ldr	r2, [pc, #52]	@ (800080c <HAL_I2C_MspInit+0x114>)
 80007d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007dc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80007e0:	4b0a      	ldr	r3, [pc, #40]	@ (800080c <HAL_I2C_MspInit+0x114>)
 80007e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80007e6:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80007ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80007ee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80007f8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80007fc:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007fe:	bf00      	nop
 8000800:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40005400 	.word	0x40005400
 800080c:	44020c00 	.word	0x44020c00
 8000810:	42020400 	.word	0x42020400

08000814 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END ICACHE_Init 1 */
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082a:	f000 fb73 	bl	8000f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082e:	f000 f91d 	bl	8000a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000832:	f7ff fd2b 	bl	800028c <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000836:	f7ff ffed 	bl	8000814 <MX_ICACHE_Init>
  MX_I2C1_Init();
 800083a:	f7ff ff1d 	bl	8000678 <MX_I2C1_Init>
  MX_TIM3_Init();
 800083e:	f000 fa3d 	bl	8000cbc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //LCD
  lcd_init();
 8000842:	f7ff fec6 	bl	80005d2 <lcd_init>
  lcd_clear();
 8000846:	f7ff fead 	bl	80005a4 <lcd_clear>
  HAL_Delay(50);
 800084a:	2032      	movs	r0, #50	@ 0x32
 800084c:	f000 fc20 	bl	8001090 <HAL_Delay>
  lcd_send_string("parking");
 8000850:	487e      	ldr	r0, [pc, #504]	@ (8000a4c <main+0x228>)
 8000852:	f7ff fefb 	bl	800064c <lcd_send_string>
  HAL_Delay(500);
 8000856:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800085a:	f000 fc19 	bl	8001090 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(10);
 800085e:	200a      	movs	r0, #10
 8000860:	f000 fc16 	bl	8001090 <HAL_Delay>
	int p1 = HAL_GPIO_ReadPin(GPIOG, P1_Pin);
 8000864:	2101      	movs	r1, #1
 8000866:	487a      	ldr	r0, [pc, #488]	@ (8000a50 <main+0x22c>)
 8000868:	f000 fef8 	bl	800165c <HAL_GPIO_ReadPin>
 800086c:	4603      	mov	r3, r0
 800086e:	61fb      	str	r3, [r7, #28]
	if(p1==1)
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d10a      	bne.n	800088c <main+0x68>
	{
		HAL_GPIO_WritePin(GPIOE, P1_R_Pin, 1);
 8000876:	2201      	movs	r2, #1
 8000878:	2101      	movs	r1, #1
 800087a:	4876      	ldr	r0, [pc, #472]	@ (8000a54 <main+0x230>)
 800087c:	f000 ff06 	bl	800168c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, P1_G_Pin, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	2108      	movs	r1, #8
 8000884:	4874      	ldr	r0, [pc, #464]	@ (8000a58 <main+0x234>)
 8000886:	f000 ff01 	bl	800168c <HAL_GPIO_WritePin>
 800088a:	e00c      	b.n	80008a6 <main+0x82>
	}
	else if(p1==0)
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d109      	bne.n	80008a6 <main+0x82>
	{
		HAL_GPIO_WritePin(GPIOA, P1_G_Pin, 1);
 8000892:	2201      	movs	r2, #1
 8000894:	2108      	movs	r1, #8
 8000896:	4870      	ldr	r0, [pc, #448]	@ (8000a58 <main+0x234>)
 8000898:	f000 fef8 	bl	800168c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P1_R_Pin, 0);
 800089c:	2200      	movs	r2, #0
 800089e:	2101      	movs	r1, #1
 80008a0:	486c      	ldr	r0, [pc, #432]	@ (8000a54 <main+0x230>)
 80008a2:	f000 fef3 	bl	800168c <HAL_GPIO_WritePin>
	}

	int p2 = HAL_GPIO_ReadPin(GPIOD, P2_Pin);
 80008a6:	2102      	movs	r1, #2
 80008a8:	486c      	ldr	r0, [pc, #432]	@ (8000a5c <main+0x238>)
 80008aa:	f000 fed7 	bl	800165c <HAL_GPIO_ReadPin>
 80008ae:	4603      	mov	r3, r0
 80008b0:	61bb      	str	r3, [r7, #24]
	if(p2==1)
 80008b2:	69bb      	ldr	r3, [r7, #24]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d10b      	bne.n	80008d0 <main+0xac>
	{
		HAL_GPIO_WritePin(GPIOB, P2_R_Pin, 1);
 80008b8:	2201      	movs	r2, #1
 80008ba:	2101      	movs	r1, #1
 80008bc:	4868      	ldr	r0, [pc, #416]	@ (8000a60 <main+0x23c>)
 80008be:	f000 fee5 	bl	800168c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, P2_G_Pin, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008c8:	4865      	ldr	r0, [pc, #404]	@ (8000a60 <main+0x23c>)
 80008ca:	f000 fedf 	bl	800168c <HAL_GPIO_WritePin>
 80008ce:	e00d      	b.n	80008ec <main+0xc8>
	}
	else if(p2==0)
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d10a      	bne.n	80008ec <main+0xc8>
	{
		HAL_GPIO_WritePin(GPIOB, P2_G_Pin, 1);
 80008d6:	2201      	movs	r2, #1
 80008d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008dc:	4860      	ldr	r0, [pc, #384]	@ (8000a60 <main+0x23c>)
 80008de:	f000 fed5 	bl	800168c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, P2_R_Pin, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2101      	movs	r1, #1
 80008e6:	485e      	ldr	r0, [pc, #376]	@ (8000a60 <main+0x23c>)
 80008e8:	f000 fed0 	bl	800168c <HAL_GPIO_WritePin>
	}

	int p3 = HAL_GPIO_ReadPin(GPIOD, P3_Pin);
 80008ec:	2101      	movs	r1, #1
 80008ee:	485b      	ldr	r0, [pc, #364]	@ (8000a5c <main+0x238>)
 80008f0:	f000 feb4 	bl	800165c <HAL_GPIO_ReadPin>
 80008f4:	4603      	mov	r3, r0
 80008f6:	617b      	str	r3, [r7, #20]
	if(p3==1)
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d10b      	bne.n	8000916 <main+0xf2>
	{
		HAL_GPIO_WritePin(GPIOA, P3_R_Pin, 1);
 80008fe:	2201      	movs	r2, #1
 8000900:	2101      	movs	r1, #1
 8000902:	4855      	ldr	r0, [pc, #340]	@ (8000a58 <main+0x234>)
 8000904:	f000 fec2 	bl	800168c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P3_G_Pin, 0);
 8000908:	2200      	movs	r2, #0
 800090a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800090e:	4851      	ldr	r0, [pc, #324]	@ (8000a54 <main+0x230>)
 8000910:	f000 febc 	bl	800168c <HAL_GPIO_WritePin>
 8000914:	e00d      	b.n	8000932 <main+0x10e>
	}
	else if(p3==0)
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d10a      	bne.n	8000932 <main+0x10e>
	{
		HAL_GPIO_WritePin(GPIOE, P3_G_Pin, 1);
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000922:	484c      	ldr	r0, [pc, #304]	@ (8000a54 <main+0x230>)
 8000924:	f000 feb2 	bl	800168c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, P3_R_Pin, 0);
 8000928:	2200      	movs	r2, #0
 800092a:	2101      	movs	r1, #1
 800092c:	484a      	ldr	r0, [pc, #296]	@ (8000a58 <main+0x234>)
 800092e:	f000 fead 	bl	800168c <HAL_GPIO_WritePin>
	}

	int p4 = HAL_GPIO_ReadPin(GPIOF, P4_Pin);
 8000932:	2101      	movs	r1, #1
 8000934:	484b      	ldr	r0, [pc, #300]	@ (8000a64 <main+0x240>)
 8000936:	f000 fe91 	bl	800165c <HAL_GPIO_ReadPin>
 800093a:	4603      	mov	r3, r0
 800093c:	613b      	str	r3, [r7, #16]
	if(p4==1)
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d10b      	bne.n	800095c <main+0x138>
	{
		HAL_GPIO_WritePin(GPIOE, P4_R_Pin, 1);
 8000944:	2201      	movs	r2, #1
 8000946:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800094a:	4842      	ldr	r0, [pc, #264]	@ (8000a54 <main+0x230>)
 800094c:	f000 fe9e 	bl	800168c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P4_G_Pin, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2140      	movs	r1, #64	@ 0x40
 8000954:	483f      	ldr	r0, [pc, #252]	@ (8000a54 <main+0x230>)
 8000956:	f000 fe99 	bl	800168c <HAL_GPIO_WritePin>
 800095a:	e00d      	b.n	8000978 <main+0x154>
	}
	else if(p4==0)
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d10a      	bne.n	8000978 <main+0x154>
	{
		HAL_GPIO_WritePin(GPIOE, P4_G_Pin, 1);
 8000962:	2201      	movs	r2, #1
 8000964:	2140      	movs	r1, #64	@ 0x40
 8000966:	483b      	ldr	r0, [pc, #236]	@ (8000a54 <main+0x230>)
 8000968:	f000 fe90 	bl	800168c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P4_R_Pin, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000972:	4838      	ldr	r0, [pc, #224]	@ (8000a54 <main+0x230>)
 8000974:	f000 fe8a 	bl	800168c <HAL_GPIO_WritePin>
	}

	int p5 = HAL_GPIO_ReadPin(GPIOF, P5_Pin);
 8000978:	2102      	movs	r1, #2
 800097a:	483a      	ldr	r0, [pc, #232]	@ (8000a64 <main+0x240>)
 800097c:	f000 fe6e 	bl	800165c <HAL_GPIO_ReadPin>
 8000980:	4603      	mov	r3, r0
 8000982:	60fb      	str	r3, [r7, #12]
	if(p5==1)
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d10c      	bne.n	80009a4 <main+0x180>
	{
		HAL_GPIO_WritePin(GPIOD, P5_R_Pin, 1);
 800098a:	2201      	movs	r2, #1
 800098c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000990:	4832      	ldr	r0, [pc, #200]	@ (8000a5c <main+0x238>)
 8000992:	f000 fe7b 	bl	800168c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P5_G_Pin, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800099c:	482d      	ldr	r0, [pc, #180]	@ (8000a54 <main+0x230>)
 800099e:	f000 fe75 	bl	800168c <HAL_GPIO_WritePin>
 80009a2:	e00e      	b.n	80009c2 <main+0x19e>
	}
	else if(p5==0)
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d10b      	bne.n	80009c2 <main+0x19e>
	{
		HAL_GPIO_WritePin(GPIOE, P5_G_Pin, 1);
 80009aa:	2201      	movs	r2, #1
 80009ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009b0:	4828      	ldr	r0, [pc, #160]	@ (8000a54 <main+0x230>)
 80009b2:	f000 fe6b 	bl	800168c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, P5_R_Pin, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009bc:	4827      	ldr	r0, [pc, #156]	@ (8000a5c <main+0x238>)
 80009be:	f000 fe65 	bl	800168c <HAL_GPIO_WritePin>
	}

	int p6i1 = HAL_GPIO_ReadPin(GPIOF, P6I1_Pin);
 80009c2:	2104      	movs	r1, #4
 80009c4:	4827      	ldr	r0, [pc, #156]	@ (8000a64 <main+0x240>)
 80009c6:	f000 fe49 	bl	800165c <HAL_GPIO_ReadPin>
 80009ca:	4603      	mov	r3, r0
 80009cc:	60bb      	str	r3, [r7, #8]
	if(p6i1==1)
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d10a      	bne.n	80009ea <main+0x1c6>
	{
		HAL_GPIO_WritePin(GPIOA, P6I1_R_Pin, 1);
 80009d4:	2201      	movs	r2, #1
 80009d6:	2140      	movs	r1, #64	@ 0x40
 80009d8:	481f      	ldr	r0, [pc, #124]	@ (8000a58 <main+0x234>)
 80009da:	f000 fe57 	bl	800168c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, P6I1_G_Pin, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2180      	movs	r1, #128	@ 0x80
 80009e2:	481e      	ldr	r0, [pc, #120]	@ (8000a5c <main+0x238>)
 80009e4:	f000 fe52 	bl	800168c <HAL_GPIO_WritePin>
 80009e8:	e00c      	b.n	8000a04 <main+0x1e0>
	}
	else if(p6i1==0)
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d109      	bne.n	8000a04 <main+0x1e0>
	{
		HAL_GPIO_WritePin(GPIOD, P6I1_G_Pin, 1);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2180      	movs	r1, #128	@ 0x80
 80009f4:	4819      	ldr	r0, [pc, #100]	@ (8000a5c <main+0x238>)
 80009f6:	f000 fe49 	bl	800168c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, P6I1_R_Pin, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2140      	movs	r1, #64	@ 0x40
 80009fe:	4816      	ldr	r0, [pc, #88]	@ (8000a58 <main+0x234>)
 8000a00:	f000 fe44 	bl	800168c <HAL_GPIO_WritePin>
	}

	int p7i2 = HAL_GPIO_ReadPin(GPIOE, P7I2_Pin);
 8000a04:	2110      	movs	r1, #16
 8000a06:	4813      	ldr	r0, [pc, #76]	@ (8000a54 <main+0x230>)
 8000a08:	f000 fe28 	bl	800165c <HAL_GPIO_ReadPin>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	607b      	str	r3, [r7, #4]
	if(p7i2==1)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d10a      	bne.n	8000a2c <main+0x208>
	{
		HAL_GPIO_WritePin(GPIOC, P7I2_R_Pin, 1);
 8000a16:	2201      	movs	r2, #1
 8000a18:	2101      	movs	r1, #1
 8000a1a:	4813      	ldr	r0, [pc, #76]	@ (8000a68 <main+0x244>)
 8000a1c:	f000 fe36 	bl	800168c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, P7I2_G_Pin, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2140      	movs	r1, #64	@ 0x40
 8000a24:	480d      	ldr	r0, [pc, #52]	@ (8000a5c <main+0x238>)
 8000a26:	f000 fe31 	bl	800168c <HAL_GPIO_WritePin>
 8000a2a:	e718      	b.n	800085e <main+0x3a>
	}
	else if(p7i2==0)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f47f af15 	bne.w	800085e <main+0x3a>
	{
		HAL_GPIO_WritePin(GPIOD, P7I2_G_Pin, 1);
 8000a34:	2201      	movs	r2, #1
 8000a36:	2140      	movs	r1, #64	@ 0x40
 8000a38:	4808      	ldr	r0, [pc, #32]	@ (8000a5c <main+0x238>)
 8000a3a:	f000 fe27 	bl	800168c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, P7I2_R_Pin, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2101      	movs	r1, #1
 8000a42:	4809      	ldr	r0, [pc, #36]	@ (8000a68 <main+0x244>)
 8000a44:	f000 fe22 	bl	800168c <HAL_GPIO_WritePin>
  {
 8000a48:	e709      	b.n	800085e <main+0x3a>
 8000a4a:	bf00      	nop
 8000a4c:	08006240 	.word	0x08006240
 8000a50:	42021800 	.word	0x42021800
 8000a54:	42021000 	.word	0x42021000
 8000a58:	42020000 	.word	0x42020000
 8000a5c:	42020c00 	.word	0x42020c00
 8000a60:	42020400 	.word	0x42020400
 8000a64:	42021400 	.word	0x42021400
 8000a68:	42020800 	.word	0x42020800

08000a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b09c      	sub	sp, #112	@ 0x70
 8000a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a72:	f107 0320 	add.w	r3, r7, #32
 8000a76:	2250      	movs	r2, #80	@ 0x50
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f005 fba8 	bl	80061d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a80:	f107 0308 	add.w	r3, r7, #8
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
 8000a90:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a92:	4b2c      	ldr	r3, [pc, #176]	@ (8000b44 <SystemClock_Config+0xd8>)
 8000a94:	691b      	ldr	r3, [r3, #16]
 8000a96:	4a2b      	ldr	r2, [pc, #172]	@ (8000b44 <SystemClock_Config+0xd8>)
 8000a98:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000a9c:	6113      	str	r3, [r2, #16]
 8000a9e:	4b29      	ldr	r3, [pc, #164]	@ (8000b44 <SystemClock_Config+0xd8>)
 8000aa0:	691b      	ldr	r3, [r3, #16]
 8000aa2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aaa:	bf00      	nop
 8000aac:	4b25      	ldr	r3, [pc, #148]	@ (8000b44 <SystemClock_Config+0xd8>)
 8000aae:	695b      	ldr	r3, [r3, #20]
 8000ab0:	f003 0308 	and.w	r3, r3, #8
 8000ab4:	2b08      	cmp	r3, #8
 8000ab6:	d1f9      	bne.n	8000aac <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000abc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000aca:	2304      	movs	r3, #4
 8000acc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8000ace:	23fa      	movs	r3, #250	@ 0xfa
 8000ad0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8000ade:	2304      	movs	r3, #4
 8000ae0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aea:	f107 0320 	add.w	r3, r7, #32
 8000aee:	4618      	mov	r0, r3
 8000af0:	f001 fa26 	bl	8001f40 <HAL_RCC_OscConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000afa:	f000 f827 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afe:	231f      	movs	r3, #31
 8000b00:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b02:	2303      	movs	r3, #3
 8000b04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b16:	f107 0308 	add.w	r3, r7, #8
 8000b1a:	2105      	movs	r1, #5
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f001 fe47 	bl	80027b0 <HAL_RCC_ClockConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b28:	f000 f810 	bl	8000b4c <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <SystemClock_Config+0xdc>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000b34:	4a04      	ldr	r2, [pc, #16]	@ (8000b48 <SystemClock_Config+0xdc>)
 8000b36:	f043 0320 	orr.w	r3, r3, #32
 8000b3a:	6013      	str	r3, [r2, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	3770      	adds	r7, #112	@ 0x70
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	44020800 	.word	0x44020800
 8000b48:	40022000 	.word	0x40022000

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <Error_Handler+0x8>

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b6a:	bf00      	nop
 8000b6c:	e7fd      	b.n	8000b6a <NMI_Handler+0x4>

08000b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b72:	bf00      	nop
 8000b74:	e7fd      	b.n	8000b72 <HardFault_Handler+0x4>

08000b76 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7a:	bf00      	nop
 8000b7c:	e7fd      	b.n	8000b7a <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	bf00      	nop
 8000b84:	e7fd      	b.n	8000b82 <BusFault_Handler+0x4>

08000b86 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8a:	bf00      	nop
 8000b8c:	e7fd      	b.n	8000b8a <UsageFault_Handler+0x4>

08000b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbc:	f000 fa48 	bl	8001050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bca:	4b35      	ldr	r3, [pc, #212]	@ (8000ca0 <SystemInit+0xdc>)
 8000bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bd0:	4a33      	ldr	r2, [pc, #204]	@ (8000ca0 <SystemInit+0xdc>)
 8000bd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bd6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000bda:	4b32      	ldr	r3, [pc, #200]	@ (8000ca4 <SystemInit+0xe0>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000be0:	4b30      	ldr	r3, [pc, #192]	@ (8000ca4 <SystemInit+0xe0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000be6:	4b2f      	ldr	r3, [pc, #188]	@ (8000ca4 <SystemInit+0xe0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000bec:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca4 <SystemInit+0xe0>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	492c      	ldr	r1, [pc, #176]	@ (8000ca4 <SystemInit+0xe0>)
 8000bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca8 <SystemInit+0xe4>)
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000bf8:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca4 <SystemInit+0xe0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000bfe:	4b29      	ldr	r3, [pc, #164]	@ (8000ca4 <SystemInit+0xe0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000c04:	4b27      	ldr	r3, [pc, #156]	@ (8000ca4 <SystemInit+0xe0>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000c0a:	4b26      	ldr	r3, [pc, #152]	@ (8000ca4 <SystemInit+0xe0>)
 8000c0c:	4a27      	ldr	r2, [pc, #156]	@ (8000cac <SystemInit+0xe8>)
 8000c0e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000c10:	4b24      	ldr	r3, [pc, #144]	@ (8000ca4 <SystemInit+0xe0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000c16:	4b23      	ldr	r3, [pc, #140]	@ (8000ca4 <SystemInit+0xe0>)
 8000c18:	4a24      	ldr	r2, [pc, #144]	@ (8000cac <SystemInit+0xe8>)
 8000c1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000c1c:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <SystemInit+0xe0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000c22:	4b20      	ldr	r3, [pc, #128]	@ (8000ca4 <SystemInit+0xe0>)
 8000c24:	4a21      	ldr	r2, [pc, #132]	@ (8000cac <SystemInit+0xe8>)
 8000c26:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000c28:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca4 <SystemInit+0xe0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca4 <SystemInit+0xe0>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca4 <SystemInit+0xe0>)
 8000c34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c38:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca4 <SystemInit+0xe0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c40:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <SystemInit+0xdc>)
 8000c42:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c46:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000c48:	4b19      	ldr	r3, [pc, #100]	@ (8000cb0 <SystemInit+0xec>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000c50:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000c58:	d003      	beq.n	8000c62 <SystemInit+0x9e>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000c60:	d117      	bne.n	8000c92 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000c62:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <SystemInit+0xec>)
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d005      	beq.n	8000c7a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000c6e:	4b10      	ldr	r3, [pc, #64]	@ (8000cb0 <SystemInit+0xec>)
 8000c70:	4a10      	ldr	r2, [pc, #64]	@ (8000cb4 <SystemInit+0xf0>)
 8000c72:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000c74:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <SystemInit+0xec>)
 8000c76:	4a10      	ldr	r2, [pc, #64]	@ (8000cb8 <SystemInit+0xf4>)
 8000c78:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb0 <SystemInit+0xec>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	4a0c      	ldr	r2, [pc, #48]	@ (8000cb0 <SystemInit+0xec>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000c86:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <SystemInit+0xec>)
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	4a09      	ldr	r2, [pc, #36]	@ (8000cb0 <SystemInit+0xec>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	61d3      	str	r3, [r2, #28]
  }
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00
 8000ca4:	44020c00 	.word	0x44020c00
 8000ca8:	eae2eae3 	.word	0xeae2eae3
 8000cac:	01010280 	.word	0x01010280
 8000cb0:	40022000 	.word	0x40022000
 8000cb4:	08192a3b 	.word	0x08192a3b
 8000cb8:	4c5d6e7f 	.word	0x4c5d6e7f

08000cbc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08e      	sub	sp, #56	@ 0x38
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cdc:	463b      	mov	r3, r7
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	611a      	str	r2, [r3, #16]
 8000cea:	615a      	str	r2, [r3, #20]
 8000cec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cee:	4b33      	ldr	r3, [pc, #204]	@ (8000dbc <MX_TIM3_Init+0x100>)
 8000cf0:	4a33      	ldr	r2, [pc, #204]	@ (8000dc0 <MX_TIM3_Init+0x104>)
 8000cf2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 8000cf4:	4b31      	ldr	r3, [pc, #196]	@ (8000dbc <MX_TIM3_Init+0x100>)
 8000cf6:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000cfa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfc:	4b2f      	ldr	r3, [pc, #188]	@ (8000dbc <MX_TIM3_Init+0x100>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000d02:	4b2e      	ldr	r3, [pc, #184]	@ (8000dbc <MX_TIM3_Init+0x100>)
 8000d04:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000d08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0a:	4b2c      	ldr	r3, [pc, #176]	@ (8000dbc <MX_TIM3_Init+0x100>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d10:	4b2a      	ldr	r3, [pc, #168]	@ (8000dbc <MX_TIM3_Init+0x100>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d16:	4829      	ldr	r0, [pc, #164]	@ (8000dbc <MX_TIM3_Init+0x100>)
 8000d18:	f004 f904 	bl	8004f24 <HAL_TIM_Base_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000d22:	f7ff ff13 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d2c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d30:	4619      	mov	r1, r3
 8000d32:	4822      	ldr	r0, [pc, #136]	@ (8000dbc <MX_TIM3_Init+0x100>)
 8000d34:	f004 fac2 	bl	80052bc <HAL_TIM_ConfigClockSource>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000d3e:	f7ff ff05 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d42:	481e      	ldr	r0, [pc, #120]	@ (8000dbc <MX_TIM3_Init+0x100>)
 8000d44:	f004 f945 	bl	8004fd2 <HAL_TIM_PWM_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000d4e:	f7ff fefd 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4816      	ldr	r0, [pc, #88]	@ (8000dbc <MX_TIM3_Init+0x100>)
 8000d62:	f005 f965 	bl	8006030 <HAL_TIMEx_MasterConfigSynchronization>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000d6c:	f7ff feee 	bl	8000b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d70:	2360      	movs	r3, #96	@ 0x60
 8000d72:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d80:	463b      	mov	r3, r7
 8000d82:	2200      	movs	r2, #0
 8000d84:	4619      	mov	r1, r3
 8000d86:	480d      	ldr	r0, [pc, #52]	@ (8000dbc <MX_TIM3_Init+0x100>)
 8000d88:	f004 f984 	bl	8005094 <HAL_TIM_PWM_ConfigChannel>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000d92:	f7ff fedb 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d96:	463b      	mov	r3, r7
 8000d98:	2204      	movs	r2, #4
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4807      	ldr	r0, [pc, #28]	@ (8000dbc <MX_TIM3_Init+0x100>)
 8000d9e:	f004 f979 	bl	8005094 <HAL_TIM_PWM_ConfigChannel>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000da8:	f7ff fed0 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dac:	4803      	ldr	r0, [pc, #12]	@ (8000dbc <MX_TIM3_Init+0x100>)
 8000dae:	f000 f82b 	bl	8000e08 <HAL_TIM_MspPostInit>

}
 8000db2:	bf00      	nop
 8000db4:	3738      	adds	r7, #56	@ 0x38
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	2000007c 	.word	0x2000007c
 8000dc0:	40000400 	.word	0x40000400

08000dc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0b      	ldr	r2, [pc, #44]	@ (8000e00 <HAL_TIM_Base_MspInit+0x3c>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d10e      	bne.n	8000df4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e04 <HAL_TIM_Base_MspInit+0x40>)
 8000dd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ddc:	4a09      	ldr	r2, [pc, #36]	@ (8000e04 <HAL_TIM_Base_MspInit+0x40>)
 8000dde:	f043 0302 	orr.w	r3, r3, #2
 8000de2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000de6:	4b07      	ldr	r3, [pc, #28]	@ (8000e04 <HAL_TIM_Base_MspInit+0x40>)
 8000de8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000dec:	f003 0302 	and.w	r3, r3, #2
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	40000400 	.word	0x40000400
 8000e04:	44020c00 	.word	0x44020c00

08000e08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	@ 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a22      	ldr	r2, [pc, #136]	@ (8000eb0 <HAL_TIM_MspPostInit+0xa8>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d13d      	bne.n	8000ea6 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	4b22      	ldr	r3, [pc, #136]	@ (8000eb4 <HAL_TIM_MspPostInit+0xac>)
 8000e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e30:	4a20      	ldr	r2, [pc, #128]	@ (8000eb4 <HAL_TIM_MspPostInit+0xac>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb4 <HAL_TIM_MspPostInit+0xac>)
 8000e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e48:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <HAL_TIM_MspPostInit+0xac>)
 8000e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e4e:	4a19      	ldr	r2, [pc, #100]	@ (8000eb4 <HAL_TIM_MspPostInit+0xac>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e58:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <HAL_TIM_MspPostInit+0xac>)
 8000e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = SERVO_EXIT_Pin;
 8000e66:	2380      	movs	r3, #128	@ 0x80
 8000e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e76:	2302      	movs	r3, #2
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SERVO_EXIT_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	480d      	ldr	r0, [pc, #52]	@ (8000eb8 <HAL_TIM_MspPostInit+0xb0>)
 8000e82:	f000 fa8d 	bl	80013a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SERVO_ENTER_Pin;
 8000e86:	2340      	movs	r3, #64	@ 0x40
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e96:	2302      	movs	r3, #2
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SERVO_ENTER_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4806      	ldr	r0, [pc, #24]	@ (8000ebc <HAL_TIM_MspPostInit+0xb4>)
 8000ea2:	f000 fa7d 	bl	80013a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ea6:	bf00      	nop
 8000ea8:	3728      	adds	r7, #40	@ 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40000400 	.word	0x40000400
 8000eb4:	44020c00 	.word	0x44020c00
 8000eb8:	42020000 	.word	0x42020000
 8000ebc:	42020800 	.word	0x42020800

08000ec0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ec0:	480d      	ldr	r0, [pc, #52]	@ (8000ef8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ec2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ec4:	f7ff fe7e 	bl	8000bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec8:	480c      	ldr	r0, [pc, #48]	@ (8000efc <LoopForever+0x6>)
  ldr r1, =_edata
 8000eca:	490d      	ldr	r1, [pc, #52]	@ (8000f00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f04 <LoopForever+0xe>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0a      	ldr	r2, [pc, #40]	@ (8000f08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee0:	4c0a      	ldr	r4, [pc, #40]	@ (8000f0c <LoopForever+0x16>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000eee:	f005 f977 	bl	80061e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ef2:	f7ff fc97 	bl	8000824 <main>

08000ef6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ef6:	e7fe      	b.n	8000ef6 <LoopForever>
  ldr   r0, =_estack
 8000ef8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f04:	08006260 	.word	0x08006260
  ldr r2, =_sbss
 8000f08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f0c:	200000cc 	.word	0x200000cc

08000f10 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <ADC1_IRQHandler>
	...

08000f14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f000 f96c 	bl	80011f6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000f1e:	f001 fdff 	bl	8002b20 <HAL_RCC_GetSysClockFreq>
 8000f22:	4602      	mov	r2, r0
 8000f24:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <HAL_Init+0x44>)
 8000f26:	6a1b      	ldr	r3, [r3, #32]
 8000f28:	f003 030f 	and.w	r3, r3, #15
 8000f2c:	490b      	ldr	r1, [pc, #44]	@ (8000f5c <HAL_Init+0x48>)
 8000f2e:	5ccb      	ldrb	r3, [r1, r3]
 8000f30:	fa22 f303 	lsr.w	r3, r2, r3
 8000f34:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <HAL_Init+0x4c>)
 8000f36:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000f38:	2004      	movs	r0, #4
 8000f3a:	f000 f9a3 	bl	8001284 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f3e:	200f      	movs	r0, #15
 8000f40:	f000 f810 	bl	8000f64 <HAL_InitTick>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e002      	b.n	8000f54 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4e:	f7ff fe03 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	44020c00 	.word	0x44020c00
 8000f5c:	08006248 	.word	0x08006248
 8000f60:	20000000 	.word	0x20000000

08000f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000f70:	4b33      	ldr	r3, [pc, #204]	@ (8001040 <HAL_InitTick+0xdc>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e05c      	b.n	8001036 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000f7c:	4b31      	ldr	r3, [pc, #196]	@ (8001044 <HAL_InitTick+0xe0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	2b04      	cmp	r3, #4
 8000f86:	d10c      	bne.n	8000fa2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000f88:	4b2f      	ldr	r3, [pc, #188]	@ (8001048 <HAL_InitTick+0xe4>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001040 <HAL_InitTick+0xdc>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4619      	mov	r1, r3
 8000f92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	e037      	b.n	8001012 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000fa2:	f000 f9c7 	bl	8001334 <HAL_SYSTICK_GetCLKSourceConfig>
 8000fa6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d023      	beq.n	8000ff6 <HAL_InitTick+0x92>
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d82d      	bhi.n	8001010 <HAL_InitTick+0xac>
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_InitTick+0x5e>
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d00d      	beq.n	8000fdc <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000fc0:	e026      	b.n	8001010 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000fc2:	4b21      	ldr	r3, [pc, #132]	@ (8001048 <HAL_InitTick+0xe4>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001040 <HAL_InitTick+0xdc>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000fd0:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd8:	60fb      	str	r3, [r7, #12]
        break;
 8000fda:	e01a      	b.n	8001012 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000fdc:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <HAL_InitTick+0xdc>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe6:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fea:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	60fb      	str	r3, [r7, #12]
        break;
 8000ff4:	e00d      	b.n	8001012 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000ff6:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <HAL_InitTick+0xdc>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001000:	fbb3 f3f2 	udiv	r3, r3, r2
 8001004:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001008:	fbb2 f3f3 	udiv	r3, r2, r3
 800100c:	60fb      	str	r3, [r7, #12]
        break;
 800100e:	e000      	b.n	8001012 <HAL_InitTick+0xae>
        break;
 8001010:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	f000 f914 	bl	8001240 <HAL_SYSTICK_Config>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e009      	b.n	8001036 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001022:	2200      	movs	r2, #0
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	f04f 30ff 	mov.w	r0, #4294967295
 800102a:	f000 f8ef 	bl	800120c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800102e:	4a07      	ldr	r2, [pc, #28]	@ (800104c <HAL_InitTick+0xe8>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000008 	.word	0x20000008
 8001044:	e000e010 	.word	0xe000e010
 8001048:	20000000 	.word	0x20000000
 800104c:	20000004 	.word	0x20000004

08001050 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001054:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <HAL_IncTick+0x20>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <HAL_IncTick+0x24>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <HAL_IncTick+0x24>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000008 	.word	0x20000008
 8001074:	200000c8 	.word	0x200000c8

08001078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return uwTick;
 800107c:	4b03      	ldr	r3, [pc, #12]	@ (800108c <HAL_GetTick+0x14>)
 800107e:	681b      	ldr	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	200000c8 	.word	0x200000c8

08001090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001098:	f7ff ffee 	bl	8001078 <HAL_GetTick>
 800109c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a8:	d005      	beq.n	80010b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010aa:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <HAL_Delay+0x44>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010b6:	bf00      	nop
 80010b8:	f7ff ffde 	bl	8001078 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d8f7      	bhi.n	80010b8 <HAL_Delay+0x28>
  {
  }
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000008 	.word	0x20000008

080010d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e8:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <__NVIC_SetPriorityGrouping+0x44>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010f4:	4013      	ands	r3, r2
 80010f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001100:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110a:	4a04      	ldr	r2, [pc, #16]	@ (800111c <__NVIC_SetPriorityGrouping+0x44>)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	60d3      	str	r3, [r2, #12]
}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001124:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <__NVIC_GetPriorityGrouping+0x18>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	f003 0307 	and.w	r3, r3, #7
}
 800112e:	4618      	mov	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001148:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114c:	2b00      	cmp	r3, #0
 800114e:	db0a      	blt.n	8001166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	490c      	ldr	r1, [pc, #48]	@ (8001188 <__NVIC_SetPriority+0x4c>)
 8001156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800115a:	0112      	lsls	r2, r2, #4
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	440b      	add	r3, r1
 8001160:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001164:	e00a      	b.n	800117c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4908      	ldr	r1, [pc, #32]	@ (800118c <__NVIC_SetPriority+0x50>)
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	3b04      	subs	r3, #4
 8001174:	0112      	lsls	r2, r2, #4
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	440b      	add	r3, r1
 800117a:	761a      	strb	r2, [r3, #24]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000e100 	.word	0xe000e100
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	@ 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f1c3 0307 	rsb	r3, r3, #7
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	bf28      	it	cs
 80011ae:	2304      	movcs	r3, #4
 80011b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3304      	adds	r3, #4
 80011b6:	2b06      	cmp	r3, #6
 80011b8:	d902      	bls.n	80011c0 <NVIC_EncodePriority+0x30>
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3b03      	subs	r3, #3
 80011be:	e000      	b.n	80011c2 <NVIC_EncodePriority+0x32>
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	f04f 32ff 	mov.w	r2, #4294967295
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43da      	mvns	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	401a      	ands	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d8:	f04f 31ff 	mov.w	r1, #4294967295
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	43d9      	mvns	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	4313      	orrs	r3, r2
         );
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3724      	adds	r7, #36	@ 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ff6a 	bl	80010d8 <__NVIC_SetPriorityGrouping>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800121a:	f7ff ff81 	bl	8001120 <__NVIC_GetPriorityGrouping>
 800121e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	68b9      	ldr	r1, [r7, #8]
 8001224:	6978      	ldr	r0, [r7, #20]
 8001226:	f7ff ffb3 	bl	8001190 <NVIC_EncodePriority>
 800122a:	4602      	mov	r2, r0
 800122c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001230:	4611      	mov	r1, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ff82 	bl	800113c <__NVIC_SetPriority>
}
 8001238:	bf00      	nop
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001250:	d301      	bcc.n	8001256 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001252:	2301      	movs	r3, #1
 8001254:	e00d      	b.n	8001272 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001256:	4a0a      	ldr	r2, [pc, #40]	@ (8001280 <HAL_SYSTICK_Config+0x40>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800125e:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <HAL_SYSTICK_Config+0x40>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_SYSTICK_Config+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a05      	ldr	r2, [pc, #20]	@ (8001280 <HAL_SYSTICK_Config+0x40>)
 800126a:	f043 0303 	orr.w	r3, r3, #3
 800126e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000e010 	.word	0xe000e010

08001284 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b04      	cmp	r3, #4
 8001290:	d844      	bhi.n	800131c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001292:	a201      	add	r2, pc, #4	@ (adr r2, 8001298 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001298:	080012bb 	.word	0x080012bb
 800129c:	080012d9 	.word	0x080012d9
 80012a0:	080012fb 	.word	0x080012fb
 80012a4:	0800131d 	.word	0x0800131d
 80012a8:	080012ad 	.word	0x080012ad
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80012ac:	4b1f      	ldr	r3, [pc, #124]	@ (800132c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a1e      	ldr	r2, [pc, #120]	@ (800132c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80012b2:	f043 0304 	orr.w	r3, r3, #4
 80012b6:	6013      	str	r3, [r2, #0]
      break;
 80012b8:	e031      	b.n	800131e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80012ba:	4b1c      	ldr	r3, [pc, #112]	@ (800132c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a1b      	ldr	r2, [pc, #108]	@ (800132c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80012c0:	f023 0304 	bic.w	r3, r3, #4
 80012c4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80012c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001330 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80012c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80012cc:	4a18      	ldr	r2, [pc, #96]	@ (8001330 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80012ce:	f023 030c 	bic.w	r3, r3, #12
 80012d2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80012d6:	e022      	b.n	800131e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80012d8:	4b14      	ldr	r3, [pc, #80]	@ (800132c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a13      	ldr	r2, [pc, #76]	@ (800132c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80012de:	f023 0304 	bic.w	r3, r3, #4
 80012e2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80012e4:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80012e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80012ea:	f023 030c 	bic.w	r3, r3, #12
 80012ee:	4a10      	ldr	r2, [pc, #64]	@ (8001330 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80012f8:	e011      	b.n	800131e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80012fa:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a0b      	ldr	r2, [pc, #44]	@ (800132c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001300:	f023 0304 	bic.w	r3, r3, #4
 8001304:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001306:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001308:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800130c:	f023 030c 	bic.w	r3, r3, #12
 8001310:	4a07      	ldr	r2, [pc, #28]	@ (8001330 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001312:	f043 0308 	orr.w	r3, r3, #8
 8001316:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800131a:	e000      	b.n	800131e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800131c:	bf00      	nop
  }
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000e010 	.word	0xe000e010
 8001330:	44020c00 	.word	0x44020c00

08001334 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800133a:	4b17      	ldr	r3, [pc, #92]	@ (8001398 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	2b00      	cmp	r3, #0
 8001344:	d002      	beq.n	800134c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001346:	2304      	movs	r3, #4
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	e01e      	b.n	800138a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 800134c:	4b13      	ldr	r3, [pc, #76]	@ (800139c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800134e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	2b08      	cmp	r3, #8
 800135c:	d00f      	beq.n	800137e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	2b08      	cmp	r3, #8
 8001362:	d80f      	bhi.n	8001384 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	2b04      	cmp	r3, #4
 800136e:	d003      	beq.n	8001378 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001370:	e008      	b.n	8001384 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
        break;
 8001376:	e008      	b.n	800138a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001378:	2301      	movs	r3, #1
 800137a:	607b      	str	r3, [r7, #4]
        break;
 800137c:	e005      	b.n	800138a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800137e:	2302      	movs	r3, #2
 8001380:	607b      	str	r3, [r7, #4]
        break;
 8001382:	e002      	b.n	800138a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
        break;
 8001388:	bf00      	nop
    }
  }
  return systick_source;
 800138a:	687b      	ldr	r3, [r7, #4]
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000e010 	.word	0xe000e010
 800139c:	44020c00 	.word	0x44020c00

080013a0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b087      	sub	sp, #28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80013ae:	e142      	b.n	8001636 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	2101      	movs	r1, #1
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	fa01 f303 	lsl.w	r3, r1, r3
 80013bc:	4013      	ands	r3, r2
 80013be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 8134 	beq.w	8001630 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0x38>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b12      	cmp	r3, #18
 80013d6:	d125      	bne.n	8001424 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	08da      	lsrs	r2, r3, #3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3208      	adds	r2, #8
 80013e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	220f      	movs	r2, #15
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	4013      	ands	r3, r2
 80013fa:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	f003 020f 	and.w	r2, r3, #15
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	4313      	orrs	r3, r2
 8001414:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	08da      	lsrs	r2, r3, #3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3208      	adds	r2, #8
 800141e:	6979      	ldr	r1, [r7, #20]
 8001420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	4013      	ands	r3, r2
 800143a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0203 	and.w	r2, r3, #3
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	4313      	orrs	r3, r2
 8001450:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d00b      	beq.n	8001478 <HAL_GPIO_Init+0xd8>
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d007      	beq.n	8001478 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800146c:	2b11      	cmp	r3, #17
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b12      	cmp	r3, #18
 8001476:	d130      	bne.n	80014da <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	2203      	movs	r2, #3
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	4013      	ands	r3, r2
 800148e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	4313      	orrs	r3, r2
 80014a0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ae:	2201      	movs	r2, #1
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	4013      	ands	r3, r2
 80014bc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	091b      	lsrs	r3, r3, #4
 80014c4:	f003 0201 	and.w	r2, r3, #1
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d109      	bne.n	80014fa <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d11b      	bne.n	800152a <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d017      	beq.n	800152a <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	2203      	movs	r2, #3
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	4013      	ands	r3, r2
 8001510:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	4313      	orrs	r3, r2
 8001522:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d07c      	beq.n	8001630 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001536:	4a47      	ldr	r2, [pc, #284]	@ (8001654 <HAL_GPIO_Init+0x2b4>)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	089b      	lsrs	r3, r3, #2
 800153c:	3318      	adds	r3, #24
 800153e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001542:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	220f      	movs	r2, #15
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	4013      	ands	r3, r2
 8001558:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	0a9a      	lsrs	r2, r3, #10
 800155e:	4b3e      	ldr	r3, [pc, #248]	@ (8001658 <HAL_GPIO_Init+0x2b8>)
 8001560:	4013      	ands	r3, r2
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	f002 0203 	and.w	r2, r2, #3
 8001568:	00d2      	lsls	r2, r2, #3
 800156a:	4093      	lsls	r3, r2
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	4313      	orrs	r3, r2
 8001570:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001572:	4938      	ldr	r1, [pc, #224]	@ (8001654 <HAL_GPIO_Init+0x2b4>)
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	089b      	lsrs	r3, r3, #2
 8001578:	3318      	adds	r3, #24
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001580:	4b34      	ldr	r3, [pc, #208]	@ (8001654 <HAL_GPIO_Init+0x2b4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	43db      	mvns	r3, r3
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	4013      	ands	r3, r2
 800158e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80015a4:	4a2b      	ldr	r2, [pc, #172]	@ (8001654 <HAL_GPIO_Init+0x2b4>)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80015aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001654 <HAL_GPIO_Init+0x2b4>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	4013      	ands	r3, r2
 80015b8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80015ce:	4a21      	ldr	r2, [pc, #132]	@ (8001654 <HAL_GPIO_Init+0x2b4>)
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80015d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001654 <HAL_GPIO_Init+0x2b4>)
 80015d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015da:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43db      	mvns	r3, r3
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	4013      	ands	r3, r2
 80015e4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80015fa:	4a16      	ldr	r2, [pc, #88]	@ (8001654 <HAL_GPIO_Init+0x2b4>)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001602:	4b14      	ldr	r3, [pc, #80]	@ (8001654 <HAL_GPIO_Init+0x2b4>)
 8001604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001608:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	43db      	mvns	r3, r3
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	4013      	ands	r3, r2
 8001612:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4313      	orrs	r3, r2
 8001626:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001628:	4a0a      	ldr	r2, [pc, #40]	@ (8001654 <HAL_GPIO_Init+0x2b4>)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	3301      	adds	r3, #1
 8001634:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	fa22 f303 	lsr.w	r3, r2, r3
 8001640:	2b00      	cmp	r3, #0
 8001642:	f47f aeb5 	bne.w	80013b0 <HAL_GPIO_Init+0x10>
  }
}
 8001646:	bf00      	nop
 8001648:	bf00      	nop
 800164a:	371c      	adds	r7, #28
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	44022000 	.word	0x44022000
 8001658:	002f7f7f 	.word	0x002f7f7f

0800165c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691a      	ldr	r2, [r3, #16]
 800166c:	887b      	ldrh	r3, [r7, #2]
 800166e:	4013      	ands	r3, r2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001674:	2301      	movs	r3, #1
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e001      	b.n	800167e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800167e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	807b      	strh	r3, [r7, #2]
 8001698:	4613      	mov	r3, r2
 800169a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800169c:	787b      	ldrb	r3, [r7, #1]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016a2:	887a      	ldrh	r2, [r7, #2]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016a8:	e002      	b.n	80016b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016aa:	887a      	ldrh	r2, [r7, #2]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e08d      	b.n	80017ea <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d106      	bne.n	80016e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff f808 	bl	80006f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2224      	movs	r2, #36	@ 0x24
 80016ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0201 	bic.w	r2, r2, #1
 80016fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800170c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800171c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d107      	bne.n	8001736 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	e006      	b.n	8001744 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001742:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d108      	bne.n	800175e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	e007      	b.n	800176e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800176c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800177c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001780:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001790:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691a      	ldr	r2, [r3, #16]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69d9      	ldr	r1, [r3, #28]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a1a      	ldr	r2, [r3, #32]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0201 	orr.w	r2, r2, #1
 80017ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2220      	movs	r2, #32
 80017d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af02      	add	r7, sp, #8
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	607a      	str	r2, [r7, #4]
 80017fe:	461a      	mov	r2, r3
 8001800:	460b      	mov	r3, r1
 8001802:	817b      	strh	r3, [r7, #10]
 8001804:	4613      	mov	r3, r2
 8001806:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b20      	cmp	r3, #32
 8001812:	f040 80da 	bne.w	80019ca <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800181c:	2b01      	cmp	r3, #1
 800181e:	d101      	bne.n	8001824 <HAL_I2C_Master_Transmit+0x30>
 8001820:	2302      	movs	r3, #2
 8001822:	e0d3      	b.n	80019cc <HAL_I2C_Master_Transmit+0x1d8>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800182c:	f7ff fc24 	bl	8001078 <HAL_GetTick>
 8001830:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2319      	movs	r3, #25
 8001838:	2201      	movs	r2, #1
 800183a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f000 f8f0 	bl	8001a24 <I2C_WaitOnFlagUntilTimeout>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e0be      	b.n	80019cc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2221      	movs	r2, #33	@ 0x21
 8001852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2210      	movs	r2, #16
 800185a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2200      	movs	r2, #0
 8001862:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	893a      	ldrh	r2, [r7, #8]
 800186e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800187a:	b29b      	uxth	r3, r3
 800187c:	2bff      	cmp	r3, #255	@ 0xff
 800187e:	d90e      	bls.n	800189e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	22ff      	movs	r2, #255	@ 0xff
 8001884:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800188a:	b2da      	uxtb	r2, r3
 800188c:	8979      	ldrh	r1, [r7, #10]
 800188e:	4b51      	ldr	r3, [pc, #324]	@ (80019d4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f000 fa88 	bl	8001dac <I2C_TransferConfig>
 800189c:	e06c      	b.n	8001978 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	8979      	ldrh	r1, [r7, #10]
 80018b0:	4b48      	ldr	r3, [pc, #288]	@ (80019d4 <HAL_I2C_Master_Transmit+0x1e0>)
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f000 fa77 	bl	8001dac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80018be:	e05b      	b.n	8001978 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	6a39      	ldr	r1, [r7, #32]
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f000 f906 	bl	8001ad6 <I2C_WaitOnTXISFlagUntilTimeout>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e07b      	b.n	80019cc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d8:	781a      	ldrb	r2, [r3, #0]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e4:	1c5a      	adds	r2, r3, #1
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	3b01      	subs	r3, #1
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018fc:	3b01      	subs	r3, #1
 80018fe:	b29a      	uxth	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001908:	b29b      	uxth	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d034      	beq.n	8001978 <HAL_I2C_Master_Transmit+0x184>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001912:	2b00      	cmp	r3, #0
 8001914:	d130      	bne.n	8001978 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	6a3b      	ldr	r3, [r7, #32]
 800191c:	2200      	movs	r2, #0
 800191e:	2180      	movs	r1, #128	@ 0x80
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 f87f 	bl	8001a24 <I2C_WaitOnFlagUntilTimeout>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e04d      	b.n	80019cc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001934:	b29b      	uxth	r3, r3
 8001936:	2bff      	cmp	r3, #255	@ 0xff
 8001938:	d90e      	bls.n	8001958 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	22ff      	movs	r2, #255	@ 0xff
 800193e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001944:	b2da      	uxtb	r2, r3
 8001946:	8979      	ldrh	r1, [r7, #10]
 8001948:	2300      	movs	r3, #0
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f000 fa2b 	bl	8001dac <I2C_TransferConfig>
 8001956:	e00f      	b.n	8001978 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800195c:	b29a      	uxth	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001966:	b2da      	uxtb	r2, r3
 8001968:	8979      	ldrh	r1, [r7, #10]
 800196a:	2300      	movs	r3, #0
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 fa1a 	bl	8001dac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800197c:	b29b      	uxth	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d19e      	bne.n	80018c0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	6a39      	ldr	r1, [r7, #32]
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f000 f8ec 	bl	8001b64 <I2C_WaitOnSTOPFlagUntilTimeout>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e01a      	b.n	80019cc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2220      	movs	r2, #32
 800199c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6859      	ldr	r1, [r3, #4]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <HAL_I2C_Master_Transmit+0x1e4>)
 80019aa:	400b      	ands	r3, r1
 80019ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2220      	movs	r2, #32
 80019b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e000      	b.n	80019cc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80019ca:	2302      	movs	r3, #2
  }
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	80002000 	.word	0x80002000
 80019d8:	fe00e800 	.word	0xfe00e800

080019dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d103      	bne.n	80019fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2200      	movs	r2, #0
 80019f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d007      	beq.n	8001a18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	699a      	ldr	r2, [r3, #24]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	619a      	str	r2, [r3, #24]
  }
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	4613      	mov	r3, r2
 8001a32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a34:	e03b      	b.n	8001aae <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	6839      	ldr	r1, [r7, #0]
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 f8d6 	bl	8001bec <I2C_IsErrorOccurred>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e041      	b.n	8001ace <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a50:	d02d      	beq.n	8001aae <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a52:	f7ff fb11 	bl	8001078 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d302      	bcc.n	8001a68 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d122      	bne.n	8001aae <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	699a      	ldr	r2, [r3, #24]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	4013      	ands	r3, r2
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	bf0c      	ite	eq
 8001a78:	2301      	moveq	r3, #1
 8001a7a:	2300      	movne	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d113      	bne.n	8001aae <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8a:	f043 0220 	orr.w	r2, r3, #32
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2220      	movs	r2, #32
 8001a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00f      	b.n	8001ace <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699a      	ldr	r2, [r3, #24]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	bf0c      	ite	eq
 8001abe:	2301      	moveq	r3, #1
 8001ac0:	2300      	movne	r3, #0
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d0b4      	beq.n	8001a36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b084      	sub	sp, #16
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ae2:	e033      	b.n	8001b4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	68b9      	ldr	r1, [r7, #8]
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 f87f 	bl	8001bec <I2C_IsErrorOccurred>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e031      	b.n	8001b5c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001afe:	d025      	beq.n	8001b4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b00:	f7ff faba 	bl	8001078 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d302      	bcc.n	8001b16 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d11a      	bne.n	8001b4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d013      	beq.n	8001b4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b28:	f043 0220 	orr.w	r2, r3, #32
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2220      	movs	r2, #32
 8001b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e007      	b.n	8001b5c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d1c4      	bne.n	8001ae4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b70:	e02f      	b.n	8001bd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f000 f838 	bl	8001bec <I2C_IsErrorOccurred>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e02d      	b.n	8001be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b86:	f7ff fa77 	bl	8001078 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d302      	bcc.n	8001b9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d11a      	bne.n	8001bd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	f003 0320 	and.w	r3, r3, #32
 8001ba6:	2b20      	cmp	r3, #32
 8001ba8:	d013      	beq.n	8001bd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bae:	f043 0220 	orr.w	r2, r3, #32
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2220      	movs	r2, #32
 8001bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e007      	b.n	8001be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	2b20      	cmp	r3, #32
 8001bde:	d1c8      	bne.n	8001b72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	@ 0x28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	f003 0310 	and.w	r3, r3, #16
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d068      	beq.n	8001cea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2210      	movs	r2, #16
 8001c1e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c20:	e049      	b.n	8001cb6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c28:	d045      	beq.n	8001cb6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c2a:	f7ff fa25 	bl	8001078 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d302      	bcc.n	8001c40 <I2C_IsErrorOccurred+0x54>
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d13a      	bne.n	8001cb6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c4a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001c52:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c62:	d121      	bne.n	8001ca8 <I2C_IsErrorOccurred+0xbc>
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001c6a:	d01d      	beq.n	8001ca8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001c6c:	7cfb      	ldrb	r3, [r7, #19]
 8001c6e:	2b20      	cmp	r3, #32
 8001c70:	d01a      	beq.n	8001ca8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c80:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c82:	f7ff f9f9 	bl	8001078 <HAL_GetTick>
 8001c86:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c88:	e00e      	b.n	8001ca8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c8a:	f7ff f9f5 	bl	8001078 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b19      	cmp	r3, #25
 8001c96:	d907      	bls.n	8001ca8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001c98:	6a3b      	ldr	r3, [r7, #32]
 8001c9a:	f043 0320 	orr.w	r3, r3, #32
 8001c9e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001ca6:	e006      	b.n	8001cb6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f003 0320 	and.w	r3, r3, #32
 8001cb2:	2b20      	cmp	r3, #32
 8001cb4:	d1e9      	bne.n	8001c8a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f003 0320 	and.w	r3, r3, #32
 8001cc0:	2b20      	cmp	r3, #32
 8001cc2:	d003      	beq.n	8001ccc <I2C_IsErrorOccurred+0xe0>
 8001cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0aa      	beq.n	8001c22 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d103      	bne.n	8001cdc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00b      	beq.n	8001d14 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00b      	beq.n	8001d36 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	f043 0308 	orr.w	r3, r3, #8
 8001d24:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00b      	beq.n	8001d58 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001d40:	6a3b      	ldr	r3, [r7, #32]
 8001d42:	f043 0302 	orr.w	r3, r3, #2
 8001d46:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001d58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d01c      	beq.n	8001d9a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f7ff fe3b 	bl	80019dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6859      	ldr	r1, [r3, #4]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b0d      	ldr	r3, [pc, #52]	@ (8001da8 <I2C_IsErrorOccurred+0x1bc>)
 8001d72:	400b      	ands	r3, r1
 8001d74:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2220      	movs	r2, #32
 8001d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3728      	adds	r7, #40	@ 0x28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	fe00e800 	.word	0xfe00e800

08001dac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	460b      	mov	r3, r1
 8001db8:	817b      	strh	r3, [r7, #10]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dbe:	897b      	ldrh	r3, [r7, #10]
 8001dc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001dc4:	7a7b      	ldrb	r3, [r7, #9]
 8001dc6:	041b      	lsls	r3, r3, #16
 8001dc8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dcc:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001dda:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	0d5b      	lsrs	r3, r3, #21
 8001de6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001dea:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <I2C_TransferConfig+0x60>)
 8001dec:	430b      	orrs	r3, r1
 8001dee:	43db      	mvns	r3, r3
 8001df0:	ea02 0103 	and.w	r1, r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001dfe:	bf00      	nop
 8001e00:	371c      	adds	r7, #28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	03ff63ff 	.word	0x03ff63ff

08001e10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b20      	cmp	r3, #32
 8001e24:	d138      	bne.n	8001e98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e032      	b.n	8001e9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2224      	movs	r2, #36	@ 0x24
 8001e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0201 	bic.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6819      	ldr	r1, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0201 	orr.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2220      	movs	r2, #32
 8001e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	e000      	b.n	8001e9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e98:	2302      	movs	r3, #2
  }
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b085      	sub	sp, #20
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b20      	cmp	r3, #32
 8001eba:	d139      	bne.n	8001f30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e033      	b.n	8001f32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2224      	movs	r2, #36	@ 0x24
 8001ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0201 	bic.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ef8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	021b      	lsls	r3, r3, #8
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	e000      	b.n	8001f32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f30:	2302      	movs	r3, #2
  }
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
	...

08001f40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d102      	bne.n	8001f54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	f000 bc28 	b.w	80027a4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f54:	4b94      	ldr	r3, [pc, #592]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	f003 0318 	and.w	r3, r3, #24
 8001f5c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001f5e:	4b92      	ldr	r3, [pc, #584]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 8001f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0310 	and.w	r3, r3, #16
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d05b      	beq.n	800202c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d005      	beq.n	8001f86 <HAL_RCC_OscConfig+0x46>
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	2b18      	cmp	r3, #24
 8001f7e:	d114      	bne.n	8001faa <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d111      	bne.n	8001faa <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d102      	bne.n	8001f94 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	f000 bc08 	b.w	80027a4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001f94:	4b84      	ldr	r3, [pc, #528]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	041b      	lsls	r3, r3, #16
 8001fa2:	4981      	ldr	r1, [pc, #516]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001fa8:	e040      	b.n	800202c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d023      	beq.n	8001ffa <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001fb2:	4b7d      	ldr	r3, [pc, #500]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a7c      	ldr	r2, [pc, #496]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 8001fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbe:	f7ff f85b 	bl	8001078 <HAL_GetTick>
 8001fc2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001fc6:	f7ff f857 	bl	8001078 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e3e5      	b.n	80027a4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001fd8:	4b73      	ldr	r3, [pc, #460]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001fe4:	4b70      	ldr	r3, [pc, #448]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	041b      	lsls	r3, r3, #16
 8001ff2:	496d      	ldr	r1, [pc, #436]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	618b      	str	r3, [r1, #24]
 8001ff8:	e018      	b.n	800202c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ffa:	4b6b      	ldr	r3, [pc, #428]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a6a      	ldr	r2, [pc, #424]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 8002000:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002006:	f7ff f837 	bl	8001078 <HAL_GetTick>
 800200a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800200e:	f7ff f833 	bl	8001078 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e3c1      	b.n	80027a4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002020:	4b61      	ldr	r3, [pc, #388]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f0      	bne.n	800200e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80a0 	beq.w	800217a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	2b10      	cmp	r3, #16
 800203e:	d005      	beq.n	800204c <HAL_RCC_OscConfig+0x10c>
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	2b18      	cmp	r3, #24
 8002044:	d109      	bne.n	800205a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	2b03      	cmp	r3, #3
 800204a:	d106      	bne.n	800205a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	f040 8092 	bne.w	800217a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e3a4      	b.n	80027a4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002062:	d106      	bne.n	8002072 <HAL_RCC_OscConfig+0x132>
 8002064:	4b50      	ldr	r3, [pc, #320]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a4f      	ldr	r2, [pc, #316]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 800206a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	e058      	b.n	8002124 <HAL_RCC_OscConfig+0x1e4>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d112      	bne.n	80020a0 <HAL_RCC_OscConfig+0x160>
 800207a:	4b4b      	ldr	r3, [pc, #300]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a4a      	ldr	r2, [pc, #296]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 8002080:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	4b48      	ldr	r3, [pc, #288]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a47      	ldr	r2, [pc, #284]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 800208c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	4b45      	ldr	r3, [pc, #276]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a44      	ldr	r2, [pc, #272]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 8002098:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e041      	b.n	8002124 <HAL_RCC_OscConfig+0x1e4>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020a8:	d112      	bne.n	80020d0 <HAL_RCC_OscConfig+0x190>
 80020aa:	4b3f      	ldr	r3, [pc, #252]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a3e      	ldr	r2, [pc, #248]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 80020b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	4b3c      	ldr	r3, [pc, #240]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a3b      	ldr	r2, [pc, #236]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 80020bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	4b39      	ldr	r3, [pc, #228]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a38      	ldr	r2, [pc, #224]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 80020c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	e029      	b.n	8002124 <HAL_RCC_OscConfig+0x1e4>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80020d8:	d112      	bne.n	8002100 <HAL_RCC_OscConfig+0x1c0>
 80020da:	4b33      	ldr	r3, [pc, #204]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a32      	ldr	r2, [pc, #200]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 80020e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	4b30      	ldr	r3, [pc, #192]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a2f      	ldr	r2, [pc, #188]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 80020ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	4b2d      	ldr	r3, [pc, #180]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a2c      	ldr	r2, [pc, #176]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 80020f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e011      	b.n	8002124 <HAL_RCC_OscConfig+0x1e4>
 8002100:	4b29      	ldr	r3, [pc, #164]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a28      	ldr	r2, [pc, #160]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 8002106:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	4b26      	ldr	r3, [pc, #152]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a25      	ldr	r2, [pc, #148]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 8002112:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	4b23      	ldr	r3, [pc, #140]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a22      	ldr	r2, [pc, #136]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 800211e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002122:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d013      	beq.n	8002154 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7fe ffa4 	bl	8001078 <HAL_GetTick>
 8002130:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002134:	f7fe ffa0 	bl	8001078 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	@ 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e32e      	b.n	80027a4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002146:	4b18      	ldr	r3, [pc, #96]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0x1f4>
 8002152:	e012      	b.n	800217a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002154:	f7fe ff90 	bl	8001078 <HAL_GetTick>
 8002158:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800215c:	f7fe ff8c 	bl	8001078 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b64      	cmp	r3, #100	@ 0x64
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e31a      	b.n	80027a4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800216e:	4b0e      	ldr	r3, [pc, #56]	@ (80021a8 <HAL_RCC_OscConfig+0x268>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 809a 	beq.w	80022bc <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d005      	beq.n	800219a <HAL_RCC_OscConfig+0x25a>
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	2b18      	cmp	r3, #24
 8002192:	d149      	bne.n	8002228 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d146      	bne.n	8002228 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d104      	bne.n	80021ac <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e2fe      	b.n	80027a4 <HAL_RCC_OscConfig+0x864>
 80021a6:	bf00      	nop
 80021a8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d11c      	bne.n	80021ec <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80021b2:	4b9a      	ldr	r3, [pc, #616]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0218 	and.w	r2, r3, #24
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d014      	beq.n	80021ec <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80021c2:	4b96      	ldr	r3, [pc, #600]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 0218 	bic.w	r2, r3, #24
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	4993      	ldr	r1, [pc, #588]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80021d4:	f000 fdd0 	bl	8002d78 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021d8:	4b91      	ldr	r3, [pc, #580]	@ (8002420 <HAL_RCC_OscConfig+0x4e0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe fec1 	bl	8000f64 <HAL_InitTick>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e2db      	b.n	80027a4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ec:	f7fe ff44 	bl	8001078 <HAL_GetTick>
 80021f0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80021f4:	f7fe ff40 	bl	8001078 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e2ce      	b.n	80027a4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002206:	4b85      	ldr	r3, [pc, #532]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002212:	4b82      	ldr	r3, [pc, #520]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	041b      	lsls	r3, r3, #16
 8002220:	497e      	ldr	r1, [pc, #504]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 8002222:	4313      	orrs	r3, r2
 8002224:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002226:	e049      	b.n	80022bc <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d02c      	beq.n	800228a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002230:	4b7a      	ldr	r3, [pc, #488]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f023 0218 	bic.w	r2, r3, #24
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	4977      	ldr	r1, [pc, #476]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 800223e:	4313      	orrs	r3, r2
 8002240:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002242:	4b76      	ldr	r3, [pc, #472]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a75      	ldr	r2, [pc, #468]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224e:	f7fe ff13 	bl	8001078 <HAL_GetTick>
 8002252:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002256:	f7fe ff0f 	bl	8001078 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e29d      	b.n	80027a4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002268:	4b6c      	ldr	r3, [pc, #432]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002274:	4b69      	ldr	r3, [pc, #420]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	041b      	lsls	r3, r3, #16
 8002282:	4966      	ldr	r1, [pc, #408]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 8002284:	4313      	orrs	r3, r2
 8002286:	610b      	str	r3, [r1, #16]
 8002288:	e018      	b.n	80022bc <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800228a:	4b64      	ldr	r3, [pc, #400]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a63      	ldr	r2, [pc, #396]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 8002290:	f023 0301 	bic.w	r3, r3, #1
 8002294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002296:	f7fe feef 	bl	8001078 <HAL_GetTick>
 800229a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800229e:	f7fe feeb 	bl	8001078 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e279      	b.n	80027a4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022b0:	4b5a      	ldr	r3, [pc, #360]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f0      	bne.n	800229e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d03c      	beq.n	8002342 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d01c      	beq.n	800230a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d0:	4b52      	ldr	r3, [pc, #328]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 80022d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022d6:	4a51      	ldr	r2, [pc, #324]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 80022d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80022dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e0:	f7fe feca 	bl	8001078 <HAL_GetTick>
 80022e4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80022e8:	f7fe fec6 	bl	8001078 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e254      	b.n	80027a4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80022fa:	4b48      	ldr	r3, [pc, #288]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 80022fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002300:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0ef      	beq.n	80022e8 <HAL_RCC_OscConfig+0x3a8>
 8002308:	e01b      	b.n	8002342 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800230a:	4b44      	ldr	r3, [pc, #272]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 800230c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002310:	4a42      	ldr	r2, [pc, #264]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 8002312:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002316:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231a:	f7fe fead 	bl	8001078 <HAL_GetTick>
 800231e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002322:	f7fe fea9 	bl	8001078 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e237      	b.n	80027a4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002334:	4b39      	ldr	r3, [pc, #228]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 8002336:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800233a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1ef      	bne.n	8002322 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 80d2 	beq.w	80024f4 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002350:	4b34      	ldr	r3, [pc, #208]	@ (8002424 <HAL_RCC_OscConfig+0x4e4>)
 8002352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d118      	bne.n	800238e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800235c:	4b31      	ldr	r3, [pc, #196]	@ (8002424 <HAL_RCC_OscConfig+0x4e4>)
 800235e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002360:	4a30      	ldr	r2, [pc, #192]	@ (8002424 <HAL_RCC_OscConfig+0x4e4>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002368:	f7fe fe86 	bl	8001078 <HAL_GetTick>
 800236c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002370:	f7fe fe82 	bl	8001078 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e210      	b.n	80027a4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002382:	4b28      	ldr	r3, [pc, #160]	@ (8002424 <HAL_RCC_OscConfig+0x4e4>)
 8002384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d108      	bne.n	80023a8 <HAL_RCC_OscConfig+0x468>
 8002396:	4b21      	ldr	r3, [pc, #132]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 8002398:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800239c:	4a1f      	ldr	r2, [pc, #124]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80023a6:	e074      	b.n	8002492 <HAL_RCC_OscConfig+0x552>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d118      	bne.n	80023e2 <HAL_RCC_OscConfig+0x4a2>
 80023b0:	4b1a      	ldr	r3, [pc, #104]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 80023b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023b6:	4a19      	ldr	r2, [pc, #100]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80023c0:	4b16      	ldr	r3, [pc, #88]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 80023c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023c6:	4a15      	ldr	r2, [pc, #84]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 80023c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80023d0:	4b12      	ldr	r3, [pc, #72]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 80023d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023d6:	4a11      	ldr	r2, [pc, #68]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 80023d8:	f023 0304 	bic.w	r3, r3, #4
 80023dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80023e0:	e057      	b.n	8002492 <HAL_RCC_OscConfig+0x552>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b05      	cmp	r3, #5
 80023e8:	d11e      	bne.n	8002428 <HAL_RCC_OscConfig+0x4e8>
 80023ea:	4b0c      	ldr	r3, [pc, #48]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 80023ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023f0:	4a0a      	ldr	r2, [pc, #40]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 80023f2:	f043 0304 	orr.w	r3, r3, #4
 80023f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80023fa:	4b08      	ldr	r3, [pc, #32]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 80023fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002400:	4a06      	ldr	r2, [pc, #24]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 8002402:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002406:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800240a:	4b04      	ldr	r3, [pc, #16]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 800240c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002410:	4a02      	ldr	r2, [pc, #8]	@ (800241c <HAL_RCC_OscConfig+0x4dc>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800241a:	e03a      	b.n	8002492 <HAL_RCC_OscConfig+0x552>
 800241c:	44020c00 	.word	0x44020c00
 8002420:	20000004 	.word	0x20000004
 8002424:	44020800 	.word	0x44020800
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b85      	cmp	r3, #133	@ 0x85
 800242e:	d118      	bne.n	8002462 <HAL_RCC_OscConfig+0x522>
 8002430:	4ba2      	ldr	r3, [pc, #648]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002432:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002436:	4aa1      	ldr	r2, [pc, #644]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002438:	f043 0304 	orr.w	r3, r3, #4
 800243c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002440:	4b9e      	ldr	r3, [pc, #632]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002442:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002446:	4a9d      	ldr	r2, [pc, #628]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002448:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800244c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002450:	4b9a      	ldr	r3, [pc, #616]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002456:	4a99      	ldr	r2, [pc, #612]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002460:	e017      	b.n	8002492 <HAL_RCC_OscConfig+0x552>
 8002462:	4b96      	ldr	r3, [pc, #600]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002468:	4a94      	ldr	r2, [pc, #592]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 800246a:	f023 0301 	bic.w	r3, r3, #1
 800246e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002472:	4b92      	ldr	r3, [pc, #584]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002474:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002478:	4a90      	ldr	r2, [pc, #576]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 800247a:	f023 0304 	bic.w	r3, r3, #4
 800247e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002482:	4b8e      	ldr	r3, [pc, #568]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002488:	4a8c      	ldr	r2, [pc, #560]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 800248a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800248e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d016      	beq.n	80024c8 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249a:	f7fe fded 	bl	8001078 <HAL_GetTick>
 800249e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024a0:	e00a      	b.n	80024b8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a2:	f7fe fde9 	bl	8001078 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e175      	b.n	80027a4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b8:	4b80      	ldr	r3, [pc, #512]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 80024ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0ed      	beq.n	80024a2 <HAL_RCC_OscConfig+0x562>
 80024c6:	e015      	b.n	80024f4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c8:	f7fe fdd6 	bl	8001078 <HAL_GetTick>
 80024cc:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024ce:	e00a      	b.n	80024e6 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d0:	f7fe fdd2 	bl	8001078 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e15e      	b.n	80027a4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024e6:	4b75      	ldr	r3, [pc, #468]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 80024e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1ed      	bne.n	80024d0 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0320 	and.w	r3, r3, #32
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d036      	beq.n	800256e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002504:	2b00      	cmp	r3, #0
 8002506:	d019      	beq.n	800253c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002508:	4b6c      	ldr	r3, [pc, #432]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a6b      	ldr	r2, [pc, #428]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 800250e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002512:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002514:	f7fe fdb0 	bl	8001078 <HAL_GetTick>
 8002518:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800251c:	f7fe fdac 	bl	8001078 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e13a      	b.n	80027a4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800252e:	4b63      	ldr	r3, [pc, #396]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x5dc>
 800253a:	e018      	b.n	800256e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800253c:	4b5f      	ldr	r3, [pc, #380]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a5e      	ldr	r2, [pc, #376]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002542:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002546:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002548:	f7fe fd96 	bl	8001078 <HAL_GetTick>
 800254c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002550:	f7fe fd92 	bl	8001078 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e120      	b.n	80027a4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002562:	4b56      	ldr	r3, [pc, #344]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 8115 	beq.w	80027a2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	2b18      	cmp	r3, #24
 800257c:	f000 80af 	beq.w	80026de <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002584:	2b02      	cmp	r3, #2
 8002586:	f040 8086 	bne.w	8002696 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800258a:	4b4c      	ldr	r3, [pc, #304]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a4b      	ldr	r2, [pc, #300]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002590:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002596:	f7fe fd6f 	bl	8001078 <HAL_GetTick>
 800259a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800259e:	f7fe fd6b 	bl	8001078 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e0f9      	b.n	80027a4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80025b0:	4b42      	ldr	r3, [pc, #264]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1f0      	bne.n	800259e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80025bc:	4b3f      	ldr	r3, [pc, #252]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 80025be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80025c4:	f023 0303 	bic.w	r3, r3, #3
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80025d0:	0212      	lsls	r2, r2, #8
 80025d2:	430a      	orrs	r2, r1
 80025d4:	4939      	ldr	r1, [pc, #228]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	628b      	str	r3, [r1, #40]	@ 0x28
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025de:	3b01      	subs	r3, #1
 80025e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e8:	3b01      	subs	r3, #1
 80025ea:	025b      	lsls	r3, r3, #9
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f4:	3b01      	subs	r3, #1
 80025f6:	041b      	lsls	r3, r3, #16
 80025f8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	3b01      	subs	r3, #1
 8002604:	061b      	lsls	r3, r3, #24
 8002606:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800260a:	492c      	ldr	r1, [pc, #176]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 800260c:	4313      	orrs	r3, r2
 800260e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002610:	4b2a      	ldr	r3, [pc, #168]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002614:	4a29      	ldr	r2, [pc, #164]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002616:	f023 0310 	bic.w	r3, r3, #16
 800261a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002620:	4a26      	ldr	r2, [pc, #152]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002626:	4b25      	ldr	r3, [pc, #148]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262a:	4a24      	ldr	r2, [pc, #144]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 800262c:	f043 0310 	orr.w	r3, r3, #16
 8002630:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002632:	4b22      	ldr	r3, [pc, #136]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002636:	f023 020c 	bic.w	r2, r3, #12
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263e:	491f      	ldr	r1, [pc, #124]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002640:	4313      	orrs	r3, r2
 8002642:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002644:	4b1d      	ldr	r3, [pc, #116]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002648:	f023 0220 	bic.w	r2, r3, #32
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002650:	491a      	ldr	r1, [pc, #104]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002652:	4313      	orrs	r3, r2
 8002654:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002656:	4b19      	ldr	r3, [pc, #100]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265a:	4a18      	ldr	r2, [pc, #96]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002660:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002662:	4b16      	ldr	r3, [pc, #88]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a15      	ldr	r2, [pc, #84]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002668:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800266c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266e:	f7fe fd03 	bl	8001078 <HAL_GetTick>
 8002672:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002676:	f7fe fcff 	bl	8001078 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e08d      	b.n	80027a4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002688:	4b0c      	ldr	r3, [pc, #48]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0f0      	beq.n	8002676 <HAL_RCC_OscConfig+0x736>
 8002694:	e085      	b.n	80027a2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002696:	4b09      	ldr	r3, [pc, #36]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a08      	ldr	r2, [pc, #32]	@ (80026bc <HAL_RCC_OscConfig+0x77c>)
 800269c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a2:	f7fe fce9 	bl	8001078 <HAL_GetTick>
 80026a6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80026a8:	e00a      	b.n	80026c0 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80026aa:	f7fe fce5 	bl	8001078 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d903      	bls.n	80026c0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e073      	b.n	80027a4 <HAL_RCC_OscConfig+0x864>
 80026bc:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80026c0:	4b3a      	ldr	r3, [pc, #232]	@ (80027ac <HAL_RCC_OscConfig+0x86c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1ee      	bne.n	80026aa <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80026cc:	4b37      	ldr	r3, [pc, #220]	@ (80027ac <HAL_RCC_OscConfig+0x86c>)
 80026ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d0:	4a36      	ldr	r2, [pc, #216]	@ (80027ac <HAL_RCC_OscConfig+0x86c>)
 80026d2:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80026d6:	f023 0303 	bic.w	r3, r3, #3
 80026da:	6293      	str	r3, [r2, #40]	@ 0x28
 80026dc:	e061      	b.n	80027a2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80026de:	4b33      	ldr	r3, [pc, #204]	@ (80027ac <HAL_RCC_OscConfig+0x86c>)
 80026e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80026e4:	4b31      	ldr	r3, [pc, #196]	@ (80027ac <HAL_RCC_OscConfig+0x86c>)
 80026e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026e8:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d031      	beq.n	8002756 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f003 0203 	and.w	r2, r3, #3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d12a      	bne.n	8002756 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	0a1b      	lsrs	r3, r3, #8
 8002704:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800270c:	429a      	cmp	r2, r3
 800270e:	d122      	bne.n	8002756 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800271a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800271c:	429a      	cmp	r2, r3
 800271e:	d11a      	bne.n	8002756 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	0a5b      	lsrs	r3, r3, #9
 8002724:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800272c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800272e:	429a      	cmp	r2, r3
 8002730:	d111      	bne.n	8002756 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	0c1b      	lsrs	r3, r3, #16
 8002736:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800273e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002740:	429a      	cmp	r2, r3
 8002742:	d108      	bne.n	8002756 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	0e1b      	lsrs	r3, r3, #24
 8002748:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002750:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002752:	429a      	cmp	r2, r3
 8002754:	d001      	beq.n	800275a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e024      	b.n	80027a4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800275a:	4b14      	ldr	r3, [pc, #80]	@ (80027ac <HAL_RCC_OscConfig+0x86c>)
 800275c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800275e:	08db      	lsrs	r3, r3, #3
 8002760:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002768:	429a      	cmp	r2, r3
 800276a:	d01a      	beq.n	80027a2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800276c:	4b0f      	ldr	r3, [pc, #60]	@ (80027ac <HAL_RCC_OscConfig+0x86c>)
 800276e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002770:	4a0e      	ldr	r2, [pc, #56]	@ (80027ac <HAL_RCC_OscConfig+0x86c>)
 8002772:	f023 0310 	bic.w	r3, r3, #16
 8002776:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002778:	f7fe fc7e 	bl	8001078 <HAL_GetTick>
 800277c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800277e:	bf00      	nop
 8002780:	f7fe fc7a 	bl	8001078 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	4293      	cmp	r3, r2
 800278a:	d0f9      	beq.n	8002780 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002790:	4a06      	ldr	r2, [pc, #24]	@ (80027ac <HAL_RCC_OscConfig+0x86c>)
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002796:	4b05      	ldr	r3, [pc, #20]	@ (80027ac <HAL_RCC_OscConfig+0x86c>)
 8002798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279a:	4a04      	ldr	r2, [pc, #16]	@ (80027ac <HAL_RCC_OscConfig+0x86c>)
 800279c:	f043 0310 	orr.w	r3, r3, #16
 80027a0:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3720      	adds	r7, #32
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	44020c00 	.word	0x44020c00

080027b0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e19e      	b.n	8002b02 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027c4:	4b83      	ldr	r3, [pc, #524]	@ (80029d4 <HAL_RCC_ClockConfig+0x224>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 030f 	and.w	r3, r3, #15
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d910      	bls.n	80027f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d2:	4b80      	ldr	r3, [pc, #512]	@ (80029d4 <HAL_RCC_ClockConfig+0x224>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 020f 	bic.w	r2, r3, #15
 80027da:	497e      	ldr	r1, [pc, #504]	@ (80029d4 <HAL_RCC_ClockConfig+0x224>)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	4b7c      	ldr	r3, [pc, #496]	@ (80029d4 <HAL_RCC_ClockConfig+0x224>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d001      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e186      	b.n	8002b02 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d012      	beq.n	8002826 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	695a      	ldr	r2, [r3, #20]
 8002804:	4b74      	ldr	r3, [pc, #464]	@ (80029d8 <HAL_RCC_ClockConfig+0x228>)
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	0a1b      	lsrs	r3, r3, #8
 800280a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800280e:	429a      	cmp	r2, r3
 8002810:	d909      	bls.n	8002826 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002812:	4b71      	ldr	r3, [pc, #452]	@ (80029d8 <HAL_RCC_ClockConfig+0x228>)
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	021b      	lsls	r3, r3, #8
 8002820:	496d      	ldr	r1, [pc, #436]	@ (80029d8 <HAL_RCC_ClockConfig+0x228>)
 8002822:	4313      	orrs	r3, r2
 8002824:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d012      	beq.n	8002858 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691a      	ldr	r2, [r3, #16]
 8002836:	4b68      	ldr	r3, [pc, #416]	@ (80029d8 <HAL_RCC_ClockConfig+0x228>)
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	091b      	lsrs	r3, r3, #4
 800283c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002840:	429a      	cmp	r2, r3
 8002842:	d909      	bls.n	8002858 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002844:	4b64      	ldr	r3, [pc, #400]	@ (80029d8 <HAL_RCC_ClockConfig+0x228>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	4961      	ldr	r1, [pc, #388]	@ (80029d8 <HAL_RCC_ClockConfig+0x228>)
 8002854:	4313      	orrs	r3, r2
 8002856:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d010      	beq.n	8002886 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	4b5b      	ldr	r3, [pc, #364]	@ (80029d8 <HAL_RCC_ClockConfig+0x228>)
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002870:	429a      	cmp	r2, r3
 8002872:	d908      	bls.n	8002886 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002874:	4b58      	ldr	r3, [pc, #352]	@ (80029d8 <HAL_RCC_ClockConfig+0x228>)
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4955      	ldr	r1, [pc, #340]	@ (80029d8 <HAL_RCC_ClockConfig+0x228>)
 8002882:	4313      	orrs	r3, r2
 8002884:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d010      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	4b50      	ldr	r3, [pc, #320]	@ (80029d8 <HAL_RCC_ClockConfig+0x228>)
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	429a      	cmp	r2, r3
 80028a0:	d908      	bls.n	80028b4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80028a2:	4b4d      	ldr	r3, [pc, #308]	@ (80029d8 <HAL_RCC_ClockConfig+0x228>)
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	f023 020f 	bic.w	r2, r3, #15
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	494a      	ldr	r1, [pc, #296]	@ (80029d8 <HAL_RCC_ClockConfig+0x228>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 8093 	beq.w	80029e8 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d107      	bne.n	80028da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80028ca:	4b43      	ldr	r3, [pc, #268]	@ (80029d8 <HAL_RCC_ClockConfig+0x228>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d121      	bne.n	800291a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e113      	b.n	8002b02 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d107      	bne.n	80028f2 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028e2:	4b3d      	ldr	r3, [pc, #244]	@ (80029d8 <HAL_RCC_ClockConfig+0x228>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d115      	bne.n	800291a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e107      	b.n	8002b02 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d107      	bne.n	800290a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80028fa:	4b37      	ldr	r3, [pc, #220]	@ (80029d8 <HAL_RCC_ClockConfig+0x228>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002902:	2b00      	cmp	r3, #0
 8002904:	d109      	bne.n	800291a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e0fb      	b.n	8002b02 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800290a:	4b33      	ldr	r3, [pc, #204]	@ (80029d8 <HAL_RCC_ClockConfig+0x228>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e0f3      	b.n	8002b02 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800291a:	4b2f      	ldr	r3, [pc, #188]	@ (80029d8 <HAL_RCC_ClockConfig+0x228>)
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f023 0203 	bic.w	r2, r3, #3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	492c      	ldr	r1, [pc, #176]	@ (80029d8 <HAL_RCC_ClockConfig+0x228>)
 8002928:	4313      	orrs	r3, r2
 800292a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800292c:	f7fe fba4 	bl	8001078 <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b03      	cmp	r3, #3
 8002938:	d112      	bne.n	8002960 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800293a:	e00a      	b.n	8002952 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800293c:	f7fe fb9c 	bl	8001078 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e0d7      	b.n	8002b02 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002952:	4b21      	ldr	r3, [pc, #132]	@ (80029d8 <HAL_RCC_ClockConfig+0x228>)
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	f003 0318 	and.w	r3, r3, #24
 800295a:	2b18      	cmp	r3, #24
 800295c:	d1ee      	bne.n	800293c <HAL_RCC_ClockConfig+0x18c>
 800295e:	e043      	b.n	80029e8 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b02      	cmp	r3, #2
 8002966:	d112      	bne.n	800298e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002968:	e00a      	b.n	8002980 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800296a:	f7fe fb85 	bl	8001078 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002978:	4293      	cmp	r3, r2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e0c0      	b.n	8002b02 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002980:	4b15      	ldr	r3, [pc, #84]	@ (80029d8 <HAL_RCC_ClockConfig+0x228>)
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	f003 0318 	and.w	r3, r3, #24
 8002988:	2b10      	cmp	r3, #16
 800298a:	d1ee      	bne.n	800296a <HAL_RCC_ClockConfig+0x1ba>
 800298c:	e02c      	b.n	80029e8 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d122      	bne.n	80029dc <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002996:	e00a      	b.n	80029ae <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002998:	f7fe fb6e 	bl	8001078 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e0a9      	b.n	8002b02 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80029ae:	4b0a      	ldr	r3, [pc, #40]	@ (80029d8 <HAL_RCC_ClockConfig+0x228>)
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	f003 0318 	and.w	r3, r3, #24
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d1ee      	bne.n	8002998 <HAL_RCC_ClockConfig+0x1e8>
 80029ba:	e015      	b.n	80029e8 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80029bc:	f7fe fb5c 	bl	8001078 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d906      	bls.n	80029dc <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e097      	b.n	8002b02 <HAL_RCC_ClockConfig+0x352>
 80029d2:	bf00      	nop
 80029d4:	40022000 	.word	0x40022000
 80029d8:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80029dc:	4b4b      	ldr	r3, [pc, #300]	@ (8002b0c <HAL_RCC_ClockConfig+0x35c>)
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	f003 0318 	and.w	r3, r3, #24
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1e9      	bne.n	80029bc <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d010      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	4b44      	ldr	r3, [pc, #272]	@ (8002b0c <HAL_RCC_ClockConfig+0x35c>)
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d208      	bcs.n	8002a16 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002a04:	4b41      	ldr	r3, [pc, #260]	@ (8002b0c <HAL_RCC_ClockConfig+0x35c>)
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	f023 020f 	bic.w	r2, r3, #15
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	493e      	ldr	r1, [pc, #248]	@ (8002b0c <HAL_RCC_ClockConfig+0x35c>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a16:	4b3e      	ldr	r3, [pc, #248]	@ (8002b10 <HAL_RCC_ClockConfig+0x360>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d210      	bcs.n	8002a46 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a24:	4b3a      	ldr	r3, [pc, #232]	@ (8002b10 <HAL_RCC_ClockConfig+0x360>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f023 020f 	bic.w	r2, r3, #15
 8002a2c:	4938      	ldr	r1, [pc, #224]	@ (8002b10 <HAL_RCC_ClockConfig+0x360>)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a34:	4b36      	ldr	r3, [pc, #216]	@ (8002b10 <HAL_RCC_ClockConfig+0x360>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d001      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e05d      	b.n	8002b02 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d010      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	4b2d      	ldr	r3, [pc, #180]	@ (8002b0c <HAL_RCC_ClockConfig+0x35c>)
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d208      	bcs.n	8002a74 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002a62:	4b2a      	ldr	r3, [pc, #168]	@ (8002b0c <HAL_RCC_ClockConfig+0x35c>)
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	4927      	ldr	r1, [pc, #156]	@ (8002b0c <HAL_RCC_ClockConfig+0x35c>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d012      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	4b21      	ldr	r3, [pc, #132]	@ (8002b0c <HAL_RCC_ClockConfig+0x35c>)
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d209      	bcs.n	8002aa6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002a92:	4b1e      	ldr	r3, [pc, #120]	@ (8002b0c <HAL_RCC_ClockConfig+0x35c>)
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	491a      	ldr	r1, [pc, #104]	@ (8002b0c <HAL_RCC_ClockConfig+0x35c>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d012      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695a      	ldr	r2, [r3, #20]
 8002ab6:	4b15      	ldr	r3, [pc, #84]	@ (8002b0c <HAL_RCC_ClockConfig+0x35c>)
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	0a1b      	lsrs	r3, r3, #8
 8002abc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d209      	bcs.n	8002ad8 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002ac4:	4b11      	ldr	r3, [pc, #68]	@ (8002b0c <HAL_RCC_ClockConfig+0x35c>)
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	021b      	lsls	r3, r3, #8
 8002ad2:	490e      	ldr	r1, [pc, #56]	@ (8002b0c <HAL_RCC_ClockConfig+0x35c>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002ad8:	f000 f822 	bl	8002b20 <HAL_RCC_GetSysClockFreq>
 8002adc:	4602      	mov	r2, r0
 8002ade:	4b0b      	ldr	r3, [pc, #44]	@ (8002b0c <HAL_RCC_ClockConfig+0x35c>)
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	490b      	ldr	r1, [pc, #44]	@ (8002b14 <HAL_RCC_ClockConfig+0x364>)
 8002ae8:	5ccb      	ldrb	r3, [r1, r3]
 8002aea:	fa22 f303 	lsr.w	r3, r2, r3
 8002aee:	4a0a      	ldr	r2, [pc, #40]	@ (8002b18 <HAL_RCC_ClockConfig+0x368>)
 8002af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002af2:	4b0a      	ldr	r3, [pc, #40]	@ (8002b1c <HAL_RCC_ClockConfig+0x36c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fe fa34 	bl	8000f64 <HAL_InitTick>
 8002afc:	4603      	mov	r3, r0
 8002afe:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002b00:	7afb      	ldrb	r3, [r7, #11]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	44020c00 	.word	0x44020c00
 8002b10:	40022000 	.word	0x40022000
 8002b14:	08006248 	.word	0x08006248
 8002b18:	20000000 	.word	0x20000000
 8002b1c:	20000004 	.word	0x20000004

08002b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	@ 0x24
 8002b24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002b26:	4b8c      	ldr	r3, [pc, #560]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f003 0318 	and.w	r3, r3, #24
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d102      	bne.n	8002b38 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002b32:	4b8a      	ldr	r3, [pc, #552]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x23c>)
 8002b34:	61fb      	str	r3, [r7, #28]
 8002b36:	e107      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b38:	4b87      	ldr	r3, [pc, #540]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	f003 0318 	and.w	r3, r3, #24
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d112      	bne.n	8002b6a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002b44:	4b84      	ldr	r3, [pc, #528]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0320 	and.w	r3, r3, #32
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d009      	beq.n	8002b64 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002b50:	4b81      	ldr	r3, [pc, #516]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	08db      	lsrs	r3, r3, #3
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	4a81      	ldr	r2, [pc, #516]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x240>)
 8002b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	e0f1      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002b64:	4b7e      	ldr	r3, [pc, #504]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x240>)
 8002b66:	61fb      	str	r3, [r7, #28]
 8002b68:	e0ee      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b6a:	4b7b      	ldr	r3, [pc, #492]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f003 0318 	and.w	r3, r3, #24
 8002b72:	2b10      	cmp	r3, #16
 8002b74:	d102      	bne.n	8002b7c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b76:	4b7b      	ldr	r3, [pc, #492]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x244>)
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	e0e5      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b7c:	4b76      	ldr	r3, [pc, #472]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	f003 0318 	and.w	r3, r3, #24
 8002b84:	2b18      	cmp	r3, #24
 8002b86:	f040 80dd 	bne.w	8002d44 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002b8a:	4b73      	ldr	r3, [pc, #460]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002b94:	4b70      	ldr	r3, [pc, #448]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b98:	0a1b      	lsrs	r3, r3, #8
 8002b9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b9e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002ba0:	4b6d      	ldr	r3, [pc, #436]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba4:	091b      	lsrs	r3, r3, #4
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002bac:	4b6a      	ldr	r3, [pc, #424]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002bb0:	08db      	lsrs	r3, r3, #3
 8002bb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	fb02 f303 	mul.w	r3, r2, r3
 8002bbc:	ee07 3a90 	vmov	s15, r3
 8002bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bc4:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 80b7 	beq.w	8002d3e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d003      	beq.n	8002bde <HAL_RCC_GetSysClockFreq+0xbe>
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d056      	beq.n	8002c8a <HAL_RCC_GetSysClockFreq+0x16a>
 8002bdc:	e077      	b.n	8002cce <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002bde:	4b5e      	ldr	r3, [pc, #376]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d02d      	beq.n	8002c46 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002bea:	4b5b      	ldr	r3, [pc, #364]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	08db      	lsrs	r3, r3, #3
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	4a5a      	ldr	r2, [pc, #360]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x240>)
 8002bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfa:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	ee07 3a90 	vmov	s15, r3
 8002c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	ee07 3a90 	vmov	s15, r3
 8002c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c14:	4b50      	ldr	r3, [pc, #320]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c1c:	ee07 3a90 	vmov	s15, r3
 8002c20:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c24:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c28:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002d68 <HAL_RCC_GetSysClockFreq+0x248>
 8002c2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c30:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c38:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c40:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002c44:	e065      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	ee07 3a90 	vmov	s15, r3
 8002c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c50:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002d6c <HAL_RCC_GetSysClockFreq+0x24c>
 8002c54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c58:	4b3f      	ldr	r3, [pc, #252]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c60:	ee07 3a90 	vmov	s15, r3
 8002c64:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c68:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c6c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002d68 <HAL_RCC_GetSysClockFreq+0x248>
 8002c70:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c74:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c84:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002c88:	e043      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	ee07 3a90 	vmov	s15, r3
 8002c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c94:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002d70 <HAL_RCC_GetSysClockFreq+0x250>
 8002c98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c9c:	4b2e      	ldr	r3, [pc, #184]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ca4:	ee07 3a90 	vmov	s15, r3
 8002ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cac:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cb0:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002d68 <HAL_RCC_GetSysClockFreq+0x248>
 8002cb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002cb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc8:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002ccc:	e021      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	ee07 3a90 	vmov	s15, r3
 8002cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cd8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002d74 <HAL_RCC_GetSysClockFreq+0x254>
 8002cdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ce8:	ee07 3a90 	vmov	s15, r3
 8002cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cf0:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cf4:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002d68 <HAL_RCC_GetSysClockFreq+0x248>
 8002cf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002cfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d04:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d0c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002d10:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002d12:	4b11      	ldr	r3, [pc, #68]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d16:	0a5b      	lsrs	r3, r3, #9
 8002d18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	ee07 3a90 	vmov	s15, r3
 8002d26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d2a:	edd7 6a06 	vldr	s13, [r7, #24]
 8002d2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d36:	ee17 3a90 	vmov	r3, s15
 8002d3a:	61fb      	str	r3, [r7, #28]
 8002d3c:	e004      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
 8002d42:	e001      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002d44:	4b06      	ldr	r3, [pc, #24]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x240>)
 8002d46:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002d48:	69fb      	ldr	r3, [r7, #28]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3724      	adds	r7, #36	@ 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	44020c00 	.word	0x44020c00
 8002d5c:	003d0900 	.word	0x003d0900
 8002d60:	03d09000 	.word	0x03d09000
 8002d64:	007a1200 	.word	0x007a1200
 8002d68:	46000000 	.word	0x46000000
 8002d6c:	4c742400 	.word	0x4c742400
 8002d70:	4af42400 	.word	0x4af42400
 8002d74:	4a742400 	.word	0x4a742400

08002d78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002d7c:	f7ff fed0 	bl	8002b20 <HAL_RCC_GetSysClockFreq>
 8002d80:	4602      	mov	r2, r0
 8002d82:	4b08      	ldr	r3, [pc, #32]	@ (8002da4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002d84:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002d86:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002d8a:	4907      	ldr	r1, [pc, #28]	@ (8002da8 <HAL_RCC_GetHCLKFreq+0x30>)
 8002d8c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002d8e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002d92:	fa22 f303 	lsr.w	r3, r2, r3
 8002d96:	4a05      	ldr	r2, [pc, #20]	@ (8002dac <HAL_RCC_GetHCLKFreq+0x34>)
 8002d98:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002d9a:	4b04      	ldr	r3, [pc, #16]	@ (8002dac <HAL_RCC_GetHCLKFreq+0x34>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	44020c00 	.word	0x44020c00
 8002da8:	08006248 	.word	0x08006248
 8002dac:	20000000 	.word	0x20000000

08002db0 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002db4:	b0d8      	sub	sp, #352	@ 0x160
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002dc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd0:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8002dd4:	2500      	movs	r5, #0
 8002dd6:	ea54 0305 	orrs.w	r3, r4, r5
 8002dda:	d00b      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002ddc:	4bcd      	ldr	r3, [pc, #820]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002dde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002de2:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8002de6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dec:	4ac9      	ldr	r2, [pc, #804]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002dee:	430b      	orrs	r3, r1
 8002df0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002df4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfc:	f002 0801 	and.w	r8, r2, #1
 8002e00:	f04f 0900 	mov.w	r9, #0
 8002e04:	ea58 0309 	orrs.w	r3, r8, r9
 8002e08:	d042      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002e0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e10:	2b05      	cmp	r3, #5
 8002e12:	d823      	bhi.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0xac>
 8002e14:	a201      	add	r2, pc, #4	@ (adr r2, 8002e1c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1a:	bf00      	nop
 8002e1c:	08002e65 	.word	0x08002e65
 8002e20:	08002e35 	.word	0x08002e35
 8002e24:	08002e49 	.word	0x08002e49
 8002e28:	08002e65 	.word	0x08002e65
 8002e2c:	08002e65 	.word	0x08002e65
 8002e30:	08002e65 	.word	0x08002e65
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002e38:	3308      	adds	r3, #8
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f001 ff42 	bl	8004cc4 <RCCEx_PLL2_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8002e46:	e00e      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002e4c:	3330      	adds	r3, #48	@ 0x30
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f001 ffd0 	bl	8004df4 <RCCEx_PLL3_Config>
 8002e54:	4603      	mov	r3, r0
 8002e56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8002e5a:	e004      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8002e62:	e000      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8002e64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e66:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10c      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002e6e:	4ba9      	ldr	r3, [pc, #676]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002e70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002e74:	f023 0107 	bic.w	r1, r3, #7
 8002e78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7e:	4aa5      	ldr	r2, [pc, #660]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002e80:	430b      	orrs	r3, r1
 8002e82:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002e86:	e003      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e88:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002e8c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e98:	f002 0a02 	and.w	sl, r2, #2
 8002e9c:	f04f 0b00 	mov.w	fp, #0
 8002ea0:	ea5a 030b 	orrs.w	r3, sl, fp
 8002ea4:	f000 8088 	beq.w	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002ea8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eae:	2b28      	cmp	r3, #40	@ 0x28
 8002eb0:	d868      	bhi.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb8:	08002f8d 	.word	0x08002f8d
 8002ebc:	08002f85 	.word	0x08002f85
 8002ec0:	08002f85 	.word	0x08002f85
 8002ec4:	08002f85 	.word	0x08002f85
 8002ec8:	08002f85 	.word	0x08002f85
 8002ecc:	08002f85 	.word	0x08002f85
 8002ed0:	08002f85 	.word	0x08002f85
 8002ed4:	08002f85 	.word	0x08002f85
 8002ed8:	08002f5d 	.word	0x08002f5d
 8002edc:	08002f85 	.word	0x08002f85
 8002ee0:	08002f85 	.word	0x08002f85
 8002ee4:	08002f85 	.word	0x08002f85
 8002ee8:	08002f85 	.word	0x08002f85
 8002eec:	08002f85 	.word	0x08002f85
 8002ef0:	08002f85 	.word	0x08002f85
 8002ef4:	08002f85 	.word	0x08002f85
 8002ef8:	08002f71 	.word	0x08002f71
 8002efc:	08002f85 	.word	0x08002f85
 8002f00:	08002f85 	.word	0x08002f85
 8002f04:	08002f85 	.word	0x08002f85
 8002f08:	08002f85 	.word	0x08002f85
 8002f0c:	08002f85 	.word	0x08002f85
 8002f10:	08002f85 	.word	0x08002f85
 8002f14:	08002f85 	.word	0x08002f85
 8002f18:	08002f8d 	.word	0x08002f8d
 8002f1c:	08002f85 	.word	0x08002f85
 8002f20:	08002f85 	.word	0x08002f85
 8002f24:	08002f85 	.word	0x08002f85
 8002f28:	08002f85 	.word	0x08002f85
 8002f2c:	08002f85 	.word	0x08002f85
 8002f30:	08002f85 	.word	0x08002f85
 8002f34:	08002f85 	.word	0x08002f85
 8002f38:	08002f8d 	.word	0x08002f8d
 8002f3c:	08002f85 	.word	0x08002f85
 8002f40:	08002f85 	.word	0x08002f85
 8002f44:	08002f85 	.word	0x08002f85
 8002f48:	08002f85 	.word	0x08002f85
 8002f4c:	08002f85 	.word	0x08002f85
 8002f50:	08002f85 	.word	0x08002f85
 8002f54:	08002f85 	.word	0x08002f85
 8002f58:	08002f8d 	.word	0x08002f8d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f60:	3308      	adds	r3, #8
 8002f62:	4618      	mov	r0, r3
 8002f64:	f001 feae 	bl	8004cc4 <RCCEx_PLL2_Config>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8002f6e:	e00e      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f74:	3330      	adds	r3, #48	@ 0x30
 8002f76:	4618      	mov	r0, r3
 8002f78:	f001 ff3c 	bl	8004df4 <RCCEx_PLL3_Config>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8002f82:	e004      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8002f8a:	e000      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8002f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f8e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10c      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002f96:	4b5f      	ldr	r3, [pc, #380]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002f98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002f9c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002fa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fa6:	4a5b      	ldr	r2, [pc, #364]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002fae:	e003      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8002fb4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc0:	f002 0304 	and.w	r3, r2, #4
 8002fc4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8002fce:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	d04e      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002fd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002fdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fde:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002fe2:	d02c      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8002fe4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002fe8:	d825      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002fea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fee:	d028      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002ff0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ff4:	d81f      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002ff6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ff8:	d025      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002ffa:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ffc:	d81b      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002ffe:	2b80      	cmp	r3, #128	@ 0x80
 8003000:	d00f      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8003002:	2b80      	cmp	r3, #128	@ 0x80
 8003004:	d817      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003006:	2b00      	cmp	r3, #0
 8003008:	d01f      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800300a:	2b40      	cmp	r3, #64	@ 0x40
 800300c:	d113      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800300e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003012:	3308      	adds	r3, #8
 8003014:	4618      	mov	r0, r3
 8003016:	f001 fe55 	bl	8004cc4 <RCCEx_PLL2_Config>
 800301a:	4603      	mov	r3, r0
 800301c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8003020:	e014      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003022:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003026:	3330      	adds	r3, #48	@ 0x30
 8003028:	4618      	mov	r0, r3
 800302a:	f001 fee3 	bl	8004df4 <RCCEx_PLL3_Config>
 800302e:	4603      	mov	r3, r0
 8003030:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8003034:	e00a      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800303c:	e006      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800303e:	bf00      	nop
 8003040:	e004      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003042:	bf00      	nop
 8003044:	e002      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003046:	bf00      	nop
 8003048:	e000      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800304a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800304c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10c      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003054:	4b2f      	ldr	r3, [pc, #188]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003056:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800305a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800305e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003062:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003064:	4a2b      	ldr	r2, [pc, #172]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003066:	430b      	orrs	r3, r1
 8003068:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800306c:	e003      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800306e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003072:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003076:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800307a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307e:	f002 0308 	and.w	r3, r2, #8
 8003082:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003086:	2300      	movs	r3, #0
 8003088:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800308c:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8003090:	460b      	mov	r3, r1
 8003092:	4313      	orrs	r3, r2
 8003094:	d056      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8003096:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800309a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800309c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80030a0:	d031      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80030a2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80030a6:	d82a      	bhi.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80030a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030ac:	d02d      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80030ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030b2:	d824      	bhi.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80030b4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80030b8:	d029      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80030ba:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80030be:	d81e      	bhi.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80030c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030c4:	d011      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80030c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ca:	d818      	bhi.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d023      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80030d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030d4:	d113      	bne.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030da:	3308      	adds	r3, #8
 80030dc:	4618      	mov	r0, r3
 80030de:	f001 fdf1 	bl	8004cc4 <RCCEx_PLL2_Config>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80030e8:	e017      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80030ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030ee:	3330      	adds	r3, #48	@ 0x30
 80030f0:	4618      	mov	r0, r3
 80030f2:	f001 fe7f 	bl	8004df4 <RCCEx_PLL3_Config>
 80030f6:	4603      	mov	r3, r0
 80030f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80030fc:	e00d      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003104:	e009      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003106:	bf00      	nop
 8003108:	e007      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800310a:	bf00      	nop
 800310c:	e005      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800310e:	bf00      	nop
 8003110:	e003      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003112:	bf00      	nop
 8003114:	44020c00 	.word	0x44020c00
        break;
 8003118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800311a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10c      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003122:	4bbb      	ldr	r3, [pc, #748]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003124:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003128:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800312c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003130:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003132:	4ab7      	ldr	r2, [pc, #732]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003134:	430b      	orrs	r3, r1
 8003136:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800313a:	e003      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800313c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003140:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003144:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314c:	f002 0310 	and.w	r3, r2, #16
 8003150:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003154:	2300      	movs	r3, #0
 8003156:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800315a:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 800315e:	460b      	mov	r3, r1
 8003160:	4313      	orrs	r3, r2
 8003162:	d053      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8003164:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003168:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800316a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800316e:	d031      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003170:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003174:	d82a      	bhi.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003176:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800317a:	d02d      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800317c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003180:	d824      	bhi.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003182:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003186:	d029      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003188:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800318c:	d81e      	bhi.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800318e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003192:	d011      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003194:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003198:	d818      	bhi.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800319a:	2b00      	cmp	r3, #0
 800319c:	d020      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800319e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031a2:	d113      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80031a8:	3308      	adds	r3, #8
 80031aa:	4618      	mov	r0, r3
 80031ac:	f001 fd8a 	bl	8004cc4 <RCCEx_PLL2_Config>
 80031b0:	4603      	mov	r3, r0
 80031b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80031b6:	e014      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80031b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80031bc:	3330      	adds	r3, #48	@ 0x30
 80031be:	4618      	mov	r0, r3
 80031c0:	f001 fe18 	bl	8004df4 <RCCEx_PLL3_Config>
 80031c4:	4603      	mov	r3, r0
 80031c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80031ca:	e00a      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80031d2:	e006      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80031d4:	bf00      	nop
 80031d6:	e004      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80031d8:	bf00      	nop
 80031da:	e002      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80031dc:	bf00      	nop
 80031de:	e000      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80031e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10c      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80031ea:	4b89      	ldr	r3, [pc, #548]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80031ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80031f0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80031f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80031f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031fa:	4a85      	ldr	r2, [pc, #532]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80031fc:	430b      	orrs	r3, r1
 80031fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003202:	e003      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003204:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003208:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800320c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003214:	f002 0320 	and.w	r3, r2, #32
 8003218:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800321c:	2300      	movs	r3, #0
 800321e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8003222:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8003226:	460b      	mov	r3, r1
 8003228:	4313      	orrs	r3, r2
 800322a:	d053      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 800322c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003232:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003236:	d031      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8003238:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800323c:	d82a      	bhi.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800323e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003242:	d02d      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003244:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003248:	d824      	bhi.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800324a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800324e:	d029      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003250:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003254:	d81e      	bhi.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003256:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800325a:	d011      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800325c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003260:	d818      	bhi.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003262:	2b00      	cmp	r3, #0
 8003264:	d020      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8003266:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800326a:	d113      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800326c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003270:	3308      	adds	r3, #8
 8003272:	4618      	mov	r0, r3
 8003274:	f001 fd26 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003278:	4603      	mov	r3, r0
 800327a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800327e:	e014      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003280:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003284:	3330      	adds	r3, #48	@ 0x30
 8003286:	4618      	mov	r0, r3
 8003288:	f001 fdb4 	bl	8004df4 <RCCEx_PLL3_Config>
 800328c:	4603      	mov	r3, r0
 800328e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8003292:	e00a      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800329a:	e006      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800329c:	bf00      	nop
 800329e:	e004      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80032a0:	bf00      	nop
 80032a2:	e002      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80032a4:	bf00      	nop
 80032a6:	e000      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80032a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10c      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80032b2:	4b57      	ldr	r3, [pc, #348]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80032b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80032b8:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 80032bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c2:	4a53      	ldr	r2, [pc, #332]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80032c4:	430b      	orrs	r3, r1
 80032c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80032ca:	e003      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032cc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80032d0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80032d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032dc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80032e0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80032e4:	2300      	movs	r3, #0
 80032e6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80032ea:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 80032ee:	460b      	mov	r3, r1
 80032f0:	4313      	orrs	r3, r2
 80032f2:	d053      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80032f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032fa:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80032fe:	d031      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8003300:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003304:	d82a      	bhi.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003306:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800330a:	d02d      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800330c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003310:	d824      	bhi.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003312:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003316:	d029      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003318:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800331c:	d81e      	bhi.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800331e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003322:	d011      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003324:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003328:	d818      	bhi.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800332a:	2b00      	cmp	r3, #0
 800332c:	d020      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800332e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003332:	d113      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003334:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003338:	3308      	adds	r3, #8
 800333a:	4618      	mov	r0, r3
 800333c:	f001 fcc2 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003340:	4603      	mov	r3, r0
 8003342:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8003346:	e014      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003348:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800334c:	3330      	adds	r3, #48	@ 0x30
 800334e:	4618      	mov	r0, r3
 8003350:	f001 fd50 	bl	8004df4 <RCCEx_PLL3_Config>
 8003354:	4603      	mov	r3, r0
 8003356:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800335a:	e00a      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003362:	e006      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003364:	bf00      	nop
 8003366:	e004      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003368:	bf00      	nop
 800336a:	e002      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800336c:	bf00      	nop
 800336e:	e000      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003372:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10c      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800337a:	4b25      	ldr	r3, [pc, #148]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800337c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003380:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8003384:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800338a:	4a21      	ldr	r2, [pc, #132]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800338c:	430b      	orrs	r3, r1
 800338e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003392:	e003      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003394:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003398:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800339c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80033a8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80033ac:	2300      	movs	r3, #0
 80033ae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80033b2:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 80033b6:	460b      	mov	r3, r1
 80033b8:	4313      	orrs	r3, r2
 80033ba:	d055      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 80033bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033c2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80033c6:	d033      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x680>
 80033c8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80033cc:	d82c      	bhi.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80033ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033d2:	d02f      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80033d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033d8:	d826      	bhi.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80033da:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80033de:	d02b      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80033e0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80033e4:	d820      	bhi.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80033e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033ea:	d013      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80033ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033f0:	d81a      	bhi.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d022      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80033f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033fa:	d115      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003400:	3308      	adds	r3, #8
 8003402:	4618      	mov	r0, r3
 8003404:	f001 fc5e 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003408:	4603      	mov	r3, r0
 800340a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800340e:	e016      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003410:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003414:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003418:	3330      	adds	r3, #48	@ 0x30
 800341a:	4618      	mov	r0, r3
 800341c:	f001 fcea 	bl	8004df4 <RCCEx_PLL3_Config>
 8003420:	4603      	mov	r3, r0
 8003422:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8003426:	e00a      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800342e:	e006      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003430:	bf00      	nop
 8003432:	e004      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003434:	bf00      	nop
 8003436:	e002      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003438:	bf00      	nop
 800343a:	e000      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800343c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800343e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10c      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8003446:	4bbb      	ldr	r3, [pc, #748]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003448:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800344c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003450:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003454:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003456:	4ab7      	ldr	r2, [pc, #732]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003458:	430b      	orrs	r3, r1
 800345a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800345e:	e003      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003460:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003464:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8003468:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003470:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8003474:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003478:	2300      	movs	r3, #0
 800347a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800347e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8003482:	460b      	mov	r3, r1
 8003484:	4313      	orrs	r3, r2
 8003486:	d053      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8003488:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800348c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800348e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003492:	d031      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003494:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003498:	d82a      	bhi.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800349a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800349e:	d02d      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80034a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034a4:	d824      	bhi.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80034a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80034aa:	d029      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x750>
 80034ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80034b0:	d81e      	bhi.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80034b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034b6:	d011      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80034b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034bc:	d818      	bhi.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d020      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x754>
 80034c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034c6:	d113      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034cc:	3308      	adds	r3, #8
 80034ce:	4618      	mov	r0, r3
 80034d0:	f001 fbf8 	bl	8004cc4 <RCCEx_PLL2_Config>
 80034d4:	4603      	mov	r3, r0
 80034d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80034da:	e014      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80034dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034e0:	3330      	adds	r3, #48	@ 0x30
 80034e2:	4618      	mov	r0, r3
 80034e4:	f001 fc86 	bl	8004df4 <RCCEx_PLL3_Config>
 80034e8:	4603      	mov	r3, r0
 80034ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80034ee:	e00a      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80034f6:	e006      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80034f8:	bf00      	nop
 80034fa:	e004      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80034fc:	bf00      	nop
 80034fe:	e002      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003500:	bf00      	nop
 8003502:	e000      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003506:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10c      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800350e:	4b89      	ldr	r3, [pc, #548]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003510:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003514:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003518:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800351c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800351e:	4a85      	ldr	r2, [pc, #532]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003520:	430b      	orrs	r3, r1
 8003522:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003526:	e003      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003528:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800352c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8003530:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003538:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800353c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003540:	2300      	movs	r3, #0
 8003542:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003546:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800354a:	460b      	mov	r3, r1
 800354c:	4313      	orrs	r3, r2
 800354e:	d055      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8003550:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003554:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003558:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800355c:	d031      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x812>
 800355e:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8003562:	d82a      	bhi.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003564:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003568:	d02d      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800356a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800356e:	d824      	bhi.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003570:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003574:	d029      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8003576:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800357a:	d81e      	bhi.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800357c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003580:	d011      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8003582:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003586:	d818      	bhi.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003588:	2b00      	cmp	r3, #0
 800358a:	d020      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800358c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003590:	d113      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003592:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003596:	3308      	adds	r3, #8
 8003598:	4618      	mov	r0, r3
 800359a:	f001 fb93 	bl	8004cc4 <RCCEx_PLL2_Config>
 800359e:	4603      	mov	r3, r0
 80035a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80035a4:	e014      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80035a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035aa:	3330      	adds	r3, #48	@ 0x30
 80035ac:	4618      	mov	r0, r3
 80035ae:	f001 fc21 	bl	8004df4 <RCCEx_PLL3_Config>
 80035b2:	4603      	mov	r3, r0
 80035b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80035b8:	e00a      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80035c0:	e006      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80035c2:	bf00      	nop
 80035c4:	e004      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80035c6:	bf00      	nop
 80035c8:	e002      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80035ca:	bf00      	nop
 80035cc:	e000      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80035ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035d0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10d      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80035d8:	4b56      	ldr	r3, [pc, #344]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80035da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80035de:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 80035e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035ea:	4a52      	ldr	r2, [pc, #328]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80035ec:	430b      	orrs	r3, r1
 80035ee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80035f2:	e003      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80035f8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80035fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003604:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003608:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800360c:	2300      	movs	r3, #0
 800360e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003612:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003616:	460b      	mov	r3, r1
 8003618:	4313      	orrs	r3, r2
 800361a:	d044      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 800361c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003620:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003624:	2b05      	cmp	r3, #5
 8003626:	d823      	bhi.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8003628:	a201      	add	r2, pc, #4	@ (adr r2, 8003630 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800362a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362e:	bf00      	nop
 8003630:	08003679 	.word	0x08003679
 8003634:	08003649 	.word	0x08003649
 8003638:	0800365d 	.word	0x0800365d
 800363c:	08003679 	.word	0x08003679
 8003640:	08003679 	.word	0x08003679
 8003644:	08003679 	.word	0x08003679
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003648:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800364c:	3308      	adds	r3, #8
 800364e:	4618      	mov	r0, r3
 8003650:	f001 fb38 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800365a:	e00e      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800365c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003660:	3330      	adds	r3, #48	@ 0x30
 8003662:	4618      	mov	r0, r3
 8003664:	f001 fbc6 	bl	8004df4 <RCCEx_PLL3_Config>
 8003668:	4603      	mov	r3, r0
 800366a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800366e:	e004      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003676:	e000      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8003678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800367a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10d      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8003682:	4b2c      	ldr	r3, [pc, #176]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003684:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003688:	f023 0107 	bic.w	r1, r3, #7
 800368c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003690:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003694:	4a27      	ldr	r2, [pc, #156]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003696:	430b      	orrs	r3, r1
 8003698:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800369c:	e003      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80036a2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80036a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ae:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80036b2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80036b6:	2300      	movs	r3, #0
 80036b8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80036bc:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80036c0:	460b      	mov	r3, r1
 80036c2:	4313      	orrs	r3, r2
 80036c4:	d04f      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80036c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ce:	2b50      	cmp	r3, #80	@ 0x50
 80036d0:	d029      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80036d2:	2b50      	cmp	r3, #80	@ 0x50
 80036d4:	d823      	bhi.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80036d6:	2b40      	cmp	r3, #64	@ 0x40
 80036d8:	d027      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80036da:	2b40      	cmp	r3, #64	@ 0x40
 80036dc:	d81f      	bhi.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80036de:	2b30      	cmp	r3, #48	@ 0x30
 80036e0:	d025      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80036e2:	2b30      	cmp	r3, #48	@ 0x30
 80036e4:	d81b      	bhi.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	d00f      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80036ea:	2b20      	cmp	r3, #32
 80036ec:	d817      	bhi.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d022      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80036f2:	2b10      	cmp	r3, #16
 80036f4:	d113      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036fa:	3308      	adds	r3, #8
 80036fc:	4618      	mov	r0, r3
 80036fe:	f001 fae1 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003708:	e017      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800370a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800370e:	3330      	adds	r3, #48	@ 0x30
 8003710:	4618      	mov	r0, r3
 8003712:	f001 fb6f 	bl	8004df4 <RCCEx_PLL3_Config>
 8003716:	4603      	mov	r3, r0
 8003718:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800371c:	e00d      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003724:	e009      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003726:	bf00      	nop
 8003728:	e007      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800372a:	bf00      	nop
 800372c:	e005      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800372e:	bf00      	nop
 8003730:	e003      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8003732:	bf00      	nop
 8003734:	44020c00 	.word	0x44020c00
        break;
 8003738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800373a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10d      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8003742:	4baf      	ldr	r3, [pc, #700]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003744:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003748:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800374c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003754:	4aaa      	ldr	r2, [pc, #680]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003756:	430b      	orrs	r3, r1
 8003758:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800375c:	e003      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003762:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003766:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800376a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003772:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003776:	2300      	movs	r3, #0
 8003778:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800377c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003780:	460b      	mov	r3, r1
 8003782:	4313      	orrs	r3, r2
 8003784:	d055      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003786:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800378a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800378e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003792:	d031      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8003794:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003798:	d82a      	bhi.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800379a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800379e:	d02d      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80037a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037a4:	d824      	bhi.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80037a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037aa:	d029      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80037ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037b0:	d81e      	bhi.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80037b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037b6:	d011      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 80037b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037bc:	d818      	bhi.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d020      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80037c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037c6:	d113      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037cc:	3308      	adds	r3, #8
 80037ce:	4618      	mov	r0, r3
 80037d0:	f001 fa78 	bl	8004cc4 <RCCEx_PLL2_Config>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80037da:	e014      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80037dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037e0:	3330      	adds	r3, #48	@ 0x30
 80037e2:	4618      	mov	r0, r3
 80037e4:	f001 fb06 	bl	8004df4 <RCCEx_PLL3_Config>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80037ee:	e00a      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80037f6:	e006      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80037f8:	bf00      	nop
 80037fa:	e004      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80037fc:	bf00      	nop
 80037fe:	e002      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003800:	bf00      	nop
 8003802:	e000      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003806:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10d      	bne.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800380e:	4b7c      	ldr	r3, [pc, #496]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003814:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003818:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800381c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003820:	4a77      	ldr	r2, [pc, #476]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003822:	430b      	orrs	r3, r1
 8003824:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003828:	e003      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800382e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003832:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800383e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003842:	2300      	movs	r3, #0
 8003844:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003848:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800384c:	460b      	mov	r3, r1
 800384e:	4313      	orrs	r3, r2
 8003850:	d03d      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003852:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800385a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800385e:	d01b      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003860:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003864:	d814      	bhi.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003866:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800386a:	d017      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800386c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003870:	d80e      	bhi.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003872:	2b00      	cmp	r3, #0
 8003874:	d014      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003876:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800387a:	d109      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800387c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003880:	3330      	adds	r3, #48	@ 0x30
 8003882:	4618      	mov	r0, r3
 8003884:	f001 fab6 	bl	8004df4 <RCCEx_PLL3_Config>
 8003888:	4603      	mov	r3, r0
 800388a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800388e:	e008      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003896:	e004      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003898:	bf00      	nop
 800389a:	e002      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800389c:	bf00      	nop
 800389e:	e000      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80038a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10d      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80038aa:	4b55      	ldr	r3, [pc, #340]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80038ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80038b0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80038b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038bc:	4a50      	ldr	r2, [pc, #320]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80038be:	430b      	orrs	r3, r1
 80038c0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80038c4:	e003      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80038ca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80038da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038de:	2300      	movs	r3, #0
 80038e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038e4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80038e8:	460b      	mov	r3, r1
 80038ea:	4313      	orrs	r3, r2
 80038ec:	d03d      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80038ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038f6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80038fa:	d01b      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 80038fc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003900:	d814      	bhi.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003902:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003906:	d017      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8003908:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800390c:	d80e      	bhi.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800390e:	2b00      	cmp	r3, #0
 8003910:	d014      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8003912:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003916:	d109      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003918:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800391c:	3330      	adds	r3, #48	@ 0x30
 800391e:	4618      	mov	r0, r3
 8003920:	f001 fa68 	bl	8004df4 <RCCEx_PLL3_Config>
 8003924:	4603      	mov	r3, r0
 8003926:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800392a:	e008      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003932:	e004      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003934:	bf00      	nop
 8003936:	e002      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003938:	bf00      	nop
 800393a:	e000      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800393c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800393e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10d      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003946:	4b2e      	ldr	r3, [pc, #184]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003948:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800394c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003950:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003954:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003958:	4a29      	ldr	r2, [pc, #164]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800395a:	430b      	orrs	r3, r1
 800395c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003960:	e003      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003962:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003966:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800396a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800396e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003972:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003976:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800397a:	2300      	movs	r3, #0
 800397c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003980:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003984:	460b      	mov	r3, r1
 8003986:	4313      	orrs	r3, r2
 8003988:	d040      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800398a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800398e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003992:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003996:	d01b      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003998:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800399c:	d814      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800399e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039a2:	d017      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80039a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039a8:	d80e      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d014      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80039ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039b2:	d109      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039b8:	3330      	adds	r3, #48	@ 0x30
 80039ba:	4618      	mov	r0, r3
 80039bc:	f001 fa1a 	bl	8004df4 <RCCEx_PLL3_Config>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 80039c6:	e008      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80039ce:	e004      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80039d0:	bf00      	nop
 80039d2:	e002      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80039d4:	bf00      	nop
 80039d6:	e000      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80039d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d110      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80039e2:	4b07      	ldr	r3, [pc, #28]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80039e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80039e8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80039ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039f4:	4a02      	ldr	r2, [pc, #8]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80039f6:	430b      	orrs	r3, r1
 80039f8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80039fc:	e006      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80039fe:	bf00      	nop
 8003a00:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a04:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a08:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a14:	2100      	movs	r1, #0
 8003a16:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8003a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003a22:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	d03d      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8003a2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a34:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003a38:	d01b      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003a3a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003a3e:	d814      	bhi.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003a40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a44:	d017      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8003a46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a4a:	d80e      	bhi.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d014      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003a50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a54:	d109      	bne.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a5a:	3330      	adds	r3, #48	@ 0x30
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f001 f9c9 	bl	8004df4 <RCCEx_PLL3_Config>
 8003a62:	4603      	mov	r3, r0
 8003a64:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003a68:	e008      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003a70:	e004      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003a72:	bf00      	nop
 8003a74:	e002      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003a76:	bf00      	nop
 8003a78:	e000      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003a7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a7c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10d      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003a84:	4bbe      	ldr	r3, [pc, #760]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003a86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003a8a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003a8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a96:	4aba      	ldr	r2, [pc, #744]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003a9e:	e003      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003aa4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003aa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003ab4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003abe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	d035      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003ac8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003acc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003ad0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ad4:	d015      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8003ad6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ada:	d80e      	bhi.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d012      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003ae0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ae4:	d109      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ae6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003aea:	3330      	adds	r3, #48	@ 0x30
 8003aec:	4618      	mov	r0, r3
 8003aee:	f001 f981 	bl	8004df4 <RCCEx_PLL3_Config>
 8003af2:	4603      	mov	r3, r0
 8003af4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003af8:	e006      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003b00:	e002      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003b02:	bf00      	nop
 8003b04:	e000      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b08:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10d      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003b10:	4b9b      	ldr	r3, [pc, #620]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003b12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b16:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003b1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003b22:	4a97      	ldr	r2, [pc, #604]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003b24:	430b      	orrs	r3, r1
 8003b26:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003b2a:	e003      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b30:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003b34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8003b42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b46:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b4a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4313      	orrs	r3, r2
 8003b52:	d00e      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003b54:	4b8a      	ldr	r3, [pc, #552]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	4a89      	ldr	r2, [pc, #548]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003b5a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003b5e:	61d3      	str	r3, [r2, #28]
 8003b60:	4b87      	ldr	r3, [pc, #540]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003b62:	69d9      	ldr	r1, [r3, #28]
 8003b64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b68:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003b6c:	4a84      	ldr	r2, [pc, #528]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003b6e:	430b      	orrs	r3, r1
 8003b70:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003b7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b82:	2300      	movs	r3, #0
 8003b84:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003b88:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	d055      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003b92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003b9a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003b9e:	d031      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8003ba0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003ba4:	d82a      	bhi.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003ba6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003baa:	d02d      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003bac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bb0:	d824      	bhi.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003bb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bb6:	d029      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003bb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bbc:	d81e      	bhi.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003bbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc2:	d011      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8003bc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc8:	d818      	bhi.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d020      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003bce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bd2:	d113      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003bd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bd8:	3308      	adds	r3, #8
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f001 f872 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003be0:	4603      	mov	r3, r0
 8003be2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003be6:	e014      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003be8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bec:	3330      	adds	r3, #48	@ 0x30
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f001 f900 	bl	8004df4 <RCCEx_PLL3_Config>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003bfa:	e00a      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003c02:	e006      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003c04:	bf00      	nop
 8003c06:	e004      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003c08:	bf00      	nop
 8003c0a:	e002      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003c0c:	bf00      	nop
 8003c0e:	e000      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003c10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c12:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10d      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003c1a:	4b59      	ldr	r3, [pc, #356]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003c1c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003c20:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003c24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c2c:	4a54      	ldr	r2, [pc, #336]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003c2e:	430b      	orrs	r3, r1
 8003c30:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003c34:	e003      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c3a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c46:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c4e:	2300      	movs	r3, #0
 8003c50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c54:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	d055      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003c5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003c66:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003c6a:	d031      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8003c6c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003c70:	d82a      	bhi.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003c72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c76:	d02d      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8003c78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c7c:	d824      	bhi.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003c7e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c82:	d029      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8003c84:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c88:	d81e      	bhi.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003c8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c8e:	d011      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8003c90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c94:	d818      	bhi.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d020      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c9e:	d113      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ca0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ca4:	3308      	adds	r3, #8
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f001 f80c 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003cb2:	e014      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003cb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cb8:	3330      	adds	r3, #48	@ 0x30
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 f89a 	bl	8004df4 <RCCEx_PLL3_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003cc6:	e00a      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003cce:	e006      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003cd0:	bf00      	nop
 8003cd2:	e004      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003cd4:	bf00      	nop
 8003cd6:	e002      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003cd8:	bf00      	nop
 8003cda:	e000      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cde:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10d      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003ce6:	4b26      	ldr	r3, [pc, #152]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003ce8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003cec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003cf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cf4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003cf8:	4a21      	ldr	r2, [pc, #132]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003d00:	e003      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d02:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d06:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8003d0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d12:	2100      	movs	r1, #0
 8003d14:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8003d18:	f003 0320 	and.w	r3, r3, #32
 8003d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d24:	460b      	mov	r3, r1
 8003d26:	4313      	orrs	r3, r2
 8003d28:	d057      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8003d2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003d32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d36:	d033      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8003d38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d3c:	d82c      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003d3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d42:	d02f      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8003d44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d48:	d826      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003d4a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d4e:	d02b      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8003d50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d54:	d820      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003d56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d5a:	d013      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003d5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d60:	d81a      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d022      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8003d66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d6a:	d115      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d70:	3308      	adds	r3, #8
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 ffa6 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003d7e:	e016      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8003d80:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d88:	3330      	adds	r3, #48	@ 0x30
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f001 f832 	bl	8004df4 <RCCEx_PLL3_Config>
 8003d90:	4603      	mov	r3, r0
 8003d92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003d96:	e00a      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003d9e:	e006      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003da0:	bf00      	nop
 8003da2:	e004      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003da4:	bf00      	nop
 8003da6:	e002      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003da8:	bf00      	nop
 8003daa:	e000      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10d      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8003db6:	4bbb      	ldr	r3, [pc, #748]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003db8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003dbc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003dc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003dc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003dc8:	4ab6      	ldr	r2, [pc, #728]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003dca:	430b      	orrs	r3, r1
 8003dcc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003dd0:	e003      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003dd6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8003dda:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de2:	2100      	movs	r1, #0
 8003de4:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8003de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003df0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003df4:	460b      	mov	r3, r1
 8003df6:	4313      	orrs	r3, r2
 8003df8:	d055      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8003dfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003dfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e02:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8003e06:	d031      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003e08:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8003e0c:	d82a      	bhi.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003e0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e12:	d02d      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8003e14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e18:	d824      	bhi.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003e1a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e1e:	d029      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8003e20:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e24:	d81e      	bhi.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003e26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e2a:	d011      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8003e2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e30:	d818      	bhi.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d020      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8003e36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e3a:	d113      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e40:	3308      	adds	r3, #8
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 ff3e 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003e4e:	e014      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e54:	3330      	adds	r3, #48	@ 0x30
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 ffcc 	bl	8004df4 <RCCEx_PLL3_Config>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003e62:	e00a      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003e6a:	e006      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003e6c:	bf00      	nop
 8003e6e:	e004      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003e70:	bf00      	nop
 8003e72:	e002      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003e74:	bf00      	nop
 8003e76:	e000      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e7a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10d      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8003e82:	4b88      	ldr	r3, [pc, #544]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003e84:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003e88:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8003e8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e94:	4a83      	ldr	r2, [pc, #524]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003e96:	430b      	orrs	r3, r1
 8003e98:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003e9c:	e003      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ea2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8003ea6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eae:	2100      	movs	r1, #0
 8003eb0:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8003eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ebc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	d055      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8003ec6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003eca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ece:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003ed2:	d031      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8003ed4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003ed8:	d82a      	bhi.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003eda:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ede:	d02d      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8003ee0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ee4:	d824      	bhi.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003ee6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003eea:	d029      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8003eec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ef0:	d81e      	bhi.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003ef2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ef6:	d011      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8003ef8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003efc:	d818      	bhi.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d020      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8003f02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f06:	d113      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f0c:	3308      	adds	r3, #8
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fed8 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003f14:	4603      	mov	r3, r0
 8003f16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8003f1a:	e014      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f20:	3330      	adds	r3, #48	@ 0x30
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 ff66 	bl	8004df4 <RCCEx_PLL3_Config>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8003f2e:	e00a      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003f36:	e006      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003f38:	bf00      	nop
 8003f3a:	e004      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003f3c:	bf00      	nop
 8003f3e:	e002      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003f40:	bf00      	nop
 8003f42:	e000      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f46:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10d      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8003f4e:	4b55      	ldr	r3, [pc, #340]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003f50:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003f54:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003f58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f60:	4a50      	ldr	r2, [pc, #320]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003f62:	430b      	orrs	r3, r1
 8003f64:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003f68:	e003      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f6e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8003f72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8003f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f88:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	d055      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8003f92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f96:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003f9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f9e:	d031      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8003fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fa4:	d82a      	bhi.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003faa:	d02d      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8003fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fb0:	d824      	bhi.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003fb2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003fb6:	d029      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8003fb8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003fbc:	d81e      	bhi.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003fbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fc2:	d011      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8003fc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fc8:	d818      	bhi.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d020      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8003fce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fd2:	d113      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003fd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fd8:	3308      	adds	r3, #8
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fe72 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8003fe6:	e014      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003fe8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fec:	3330      	adds	r3, #48	@ 0x30
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 ff00 	bl	8004df4 <RCCEx_PLL3_Config>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8003ffa:	e00a      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004002:	e006      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004004:	bf00      	nop
 8004006:	e004      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004008:	bf00      	nop
 800400a:	e002      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800400c:	bf00      	nop
 800400e:	e000      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004012:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10d      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800401a:	4b22      	ldr	r3, [pc, #136]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800401c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004020:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004024:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004028:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800402c:	4a1d      	ldr	r2, [pc, #116]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800402e:	430b      	orrs	r3, r1
 8004030:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004034:	e003      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004036:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800403a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800403e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004046:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800404a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800404e:	2300      	movs	r3, #0
 8004050:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004054:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004058:	460b      	mov	r3, r1
 800405a:	4313      	orrs	r3, r2
 800405c:	d055      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800405e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004062:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004066:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800406a:	d035      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 800406c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004070:	d82e      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004072:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004076:	d031      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8004078:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800407c:	d828      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800407e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004082:	d01b      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8004084:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004088:	d822      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800408e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004092:	d009      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8004094:	e01c      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004096:	4b03      	ldr	r3, [pc, #12]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409a:	4a02      	ldr	r2, [pc, #8]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800409c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040a0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80040a2:	e01c      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x132e>
 80040a4:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040ac:	3308      	adds	r3, #8
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 fe08 	bl	8004cc4 <RCCEx_PLL2_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80040ba:	e010      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040c0:	3330      	adds	r3, #48	@ 0x30
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fe96 	bl	8004df4 <RCCEx_PLL3_Config>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80040ce:	e006      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80040d6:	e002      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80040d8:	bf00      	nop
 80040da:	e000      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80040dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10d      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80040e6:	4bc3      	ldr	r3, [pc, #780]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80040e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80040ec:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80040f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80040f8:	4abe      	ldr	r2, [pc, #760]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80040fa:	430b      	orrs	r3, r1
 80040fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004100:	e003      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004102:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004106:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800410a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800410e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004112:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004116:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800411a:	2300      	movs	r3, #0
 800411c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004120:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004124:	460b      	mov	r3, r1
 8004126:	4313      	orrs	r3, r2
 8004128:	d051      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800412a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800412e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004132:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004136:	d033      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004138:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800413c:	d82c      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800413e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004142:	d02d      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004144:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004148:	d826      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800414a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800414e:	d019      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8004150:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004154:	d820      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800415a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800415e:	d007      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8004160:	e01a      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004162:	4ba4      	ldr	r3, [pc, #656]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004166:	4aa3      	ldr	r2, [pc, #652]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004168:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800416c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800416e:	e018      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004170:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004174:	3308      	adds	r3, #8
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fda4 	bl	8004cc4 <RCCEx_PLL2_Config>
 800417c:	4603      	mov	r3, r0
 800417e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004182:	e00e      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004184:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004188:	3330      	adds	r3, #48	@ 0x30
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fe32 	bl	8004df4 <RCCEx_PLL3_Config>
 8004190:	4603      	mov	r3, r0
 8004192:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004196:	e004      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800419e:	e000      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 80041a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10d      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80041aa:	4b92      	ldr	r3, [pc, #584]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80041ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80041b0:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 80041b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041b8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80041bc:	4a8d      	ldr	r2, [pc, #564]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80041be:	430b      	orrs	r3, r1
 80041c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80041c4:	e003      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80041ca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80041ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80041da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041dc:	2300      	movs	r3, #0
 80041de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041e0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80041e4:	460b      	mov	r3, r1
 80041e6:	4313      	orrs	r3, r2
 80041e8:	d032      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80041ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80041f2:	2b05      	cmp	r3, #5
 80041f4:	d80f      	bhi.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	d211      	bcs.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d911      	bls.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d109      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004202:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004206:	3308      	adds	r3, #8
 8004208:	4618      	mov	r0, r3
 800420a:	f000 fd5b 	bl	8004cc4 <RCCEx_PLL2_Config>
 800420e:	4603      	mov	r3, r0
 8004210:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004214:	e006      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800421c:	e002      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800421e:	bf00      	nop
 8004220:	e000      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8004222:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004224:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10d      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800422c:	4b71      	ldr	r3, [pc, #452]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800422e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004232:	f023 0107 	bic.w	r1, r3, #7
 8004236:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800423a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800423e:	4a6d      	ldr	r2, [pc, #436]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004240:	430b      	orrs	r3, r1
 8004242:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004246:	e003      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004248:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800424c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004250:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004258:	2100      	movs	r1, #0
 800425a:	6739      	str	r1, [r7, #112]	@ 0x70
 800425c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004260:	677b      	str	r3, [r7, #116]	@ 0x74
 8004262:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004266:	460b      	mov	r3, r1
 8004268:	4313      	orrs	r3, r2
 800426a:	d024      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800426c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004270:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8004278:	2b08      	cmp	r3, #8
 800427a:	d005      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004282:	e002      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004284:	bf00      	nop
 8004286:	e000      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800428a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10d      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004292:	4b58      	ldr	r3, [pc, #352]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004294:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004298:	f023 0108 	bic.w	r1, r3, #8
 800429c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80042a4:	4a53      	ldr	r2, [pc, #332]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80042a6:	430b      	orrs	r3, r1
 80042a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80042ac:	e003      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80042b2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80042c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042c4:	2300      	movs	r3, #0
 80042c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042c8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80042cc:	460b      	mov	r3, r1
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f000 80b9 	beq.w	8004446 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80042d4:	4b48      	ldr	r3, [pc, #288]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80042d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d8:	4a47      	ldr	r2, [pc, #284]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042e0:	f7fc feca 	bl	8001078 <HAL_GetTick>
 80042e4:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80042e8:	e00b      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ea:	f7fc fec5 	bl	8001078 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d903      	bls.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004300:	e005      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004302:	4b3d      	ldr	r3, [pc, #244]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8004304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0ed      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800430e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004312:	2b00      	cmp	r3, #0
 8004314:	f040 8093 	bne.w	800443e <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004318:	4b36      	ldr	r3, [pc, #216]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800431a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800431e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004322:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004326:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800432a:	2b00      	cmp	r3, #0
 800432c:	d023      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800432e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004332:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8004336:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800433a:	4293      	cmp	r3, r2
 800433c:	d01b      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800433e:	4b2d      	ldr	r3, [pc, #180]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004340:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004344:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004348:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800434c:	4b29      	ldr	r3, [pc, #164]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800434e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004352:	4a28      	ldr	r2, [pc, #160]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004358:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800435c:	4b25      	ldr	r3, [pc, #148]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800435e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004362:	4a24      	ldr	r2, [pc, #144]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004368:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800436c:	4a21      	ldr	r2, [pc, #132]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800436e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004372:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004376:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d019      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004382:	f7fc fe79 	bl	8001078 <HAL_GetTick>
 8004386:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800438a:	e00d      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800438c:	f7fc fe74 	bl	8001078 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004396:	1ad2      	subs	r2, r2, r3
 8004398:	f241 3388 	movw	r3, #5000	@ 0x1388
 800439c:	429a      	cmp	r2, r3
 800439e:	d903      	bls.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 80043a6:	e006      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043a8:	4b12      	ldr	r3, [pc, #72]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80043aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0ea      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 80043b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d13a      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80043be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043c2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80043c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043ce:	d115      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x164c>
 80043d0:	4b08      	ldr	r3, [pc, #32]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80043d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043dc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80043e6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80043ea:	4a02      	ldr	r2, [pc, #8]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80043ec:	430b      	orrs	r3, r1
 80043ee:	61d3      	str	r3, [r2, #28]
 80043f0:	e00a      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80043f2:	bf00      	nop
 80043f4:	44020c00 	.word	0x44020c00
 80043f8:	44020800 	.word	0x44020800
 80043fc:	4b9f      	ldr	r3, [pc, #636]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	4a9e      	ldr	r2, [pc, #632]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004402:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004406:	61d3      	str	r3, [r2, #28]
 8004408:	4b9c      	ldr	r3, [pc, #624]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800440a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800440e:	4a9b      	ldr	r2, [pc, #620]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004410:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004414:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004418:	4b98      	ldr	r3, [pc, #608]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800441a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 800441e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004422:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8004426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800442a:	4a94      	ldr	r2, [pc, #592]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800442c:	430b      	orrs	r3, r1
 800442e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004432:	e008      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004434:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004438:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 800443c:	e003      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004442:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004446:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004452:	663b      	str	r3, [r7, #96]	@ 0x60
 8004454:	2300      	movs	r3, #0
 8004456:	667b      	str	r3, [r7, #100]	@ 0x64
 8004458:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800445c:	460b      	mov	r3, r1
 800445e:	4313      	orrs	r3, r2
 8004460:	d035      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004462:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004466:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800446a:	2b30      	cmp	r3, #48	@ 0x30
 800446c:	d014      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800446e:	2b30      	cmp	r3, #48	@ 0x30
 8004470:	d80e      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8004472:	2b20      	cmp	r3, #32
 8004474:	d012      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8004476:	2b20      	cmp	r3, #32
 8004478:	d80a      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800447a:	2b00      	cmp	r3, #0
 800447c:	d010      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800447e:	2b10      	cmp	r3, #16
 8004480:	d106      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004482:	4b7e      	ldr	r3, [pc, #504]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004486:	4a7d      	ldr	r2, [pc, #500]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800448c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800448e:	e008      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004496:	e004      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004498:	bf00      	nop
 800449a:	e002      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800449c:	bf00      	nop
 800449e:	e000      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80044a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10d      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80044aa:	4b74      	ldr	r3, [pc, #464]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80044ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80044b0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80044b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044b8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80044bc:	4a6f      	ldr	r2, [pc, #444]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80044be:	430b      	orrs	r3, r1
 80044c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80044c4:	e003      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80044ca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80044ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d6:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80044da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044dc:	2300      	movs	r3, #0
 80044de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044e0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80044e4:	460b      	mov	r3, r1
 80044e6:	4313      	orrs	r3, r2
 80044e8:	d033      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80044ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044ee:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80044f6:	2b40      	cmp	r3, #64	@ 0x40
 80044f8:	d007      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80044fa:	e010      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044fc:	4b5f      	ldr	r3, [pc, #380]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80044fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004500:	4a5e      	ldr	r2, [pc, #376]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004506:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004508:	e00d      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800450a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800450e:	3308      	adds	r3, #8
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fbd7 	bl	8004cc4 <RCCEx_PLL2_Config>
 8004516:	4603      	mov	r3, r0
 8004518:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800451c:	e003      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004524:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004526:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10d      	bne.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800452e:	4b53      	ldr	r3, [pc, #332]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004530:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004534:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004538:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800453c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004540:	4a4e      	ldr	r2, [pc, #312]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004542:	430b      	orrs	r3, r1
 8004544:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004548:	e003      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800454a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800454e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004552:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800455e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004560:	2300      	movs	r3, #0
 8004562:	657b      	str	r3, [r7, #84]	@ 0x54
 8004564:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004568:	460b      	mov	r3, r1
 800456a:	4313      	orrs	r3, r2
 800456c:	d033      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800456e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004572:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800457a:	2b80      	cmp	r3, #128	@ 0x80
 800457c:	d007      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800457e:	e010      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004580:	4b3e      	ldr	r3, [pc, #248]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004584:	4a3d      	ldr	r2, [pc, #244]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800458a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800458c:	e00d      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800458e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004592:	3308      	adds	r3, #8
 8004594:	4618      	mov	r0, r3
 8004596:	f000 fb95 	bl	8004cc4 <RCCEx_PLL2_Config>
 800459a:	4603      	mov	r3, r0
 800459c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80045a0:	e003      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80045a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10d      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80045b2:	4b32      	ldr	r3, [pc, #200]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80045b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80045b8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80045bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045c0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80045c4:	4a2d      	ldr	r2, [pc, #180]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80045c6:	430b      	orrs	r3, r1
 80045c8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80045cc:	e003      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80045d2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80045d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045de:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80045e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045e4:	2300      	movs	r3, #0
 80045e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045e8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80045ec:	460b      	mov	r3, r1
 80045ee:	4313      	orrs	r3, r2
 80045f0:	d04a      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80045f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d827      	bhi.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80045fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004604 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8004600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004604:	08004619 	.word	0x08004619
 8004608:	08004627 	.word	0x08004627
 800460c:	0800463b 	.word	0x0800463b
 8004610:	08004657 	.word	0x08004657
 8004614:	08004657 	.word	0x08004657
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004618:	4b18      	ldr	r3, [pc, #96]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800461a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461c:	4a17      	ldr	r2, [pc, #92]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800461e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004622:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004624:	e018      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004626:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800462a:	3308      	adds	r3, #8
 800462c:	4618      	mov	r0, r3
 800462e:	f000 fb49 	bl	8004cc4 <RCCEx_PLL2_Config>
 8004632:	4603      	mov	r3, r0
 8004634:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004638:	e00e      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800463a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800463e:	3330      	adds	r3, #48	@ 0x30
 8004640:	4618      	mov	r0, r3
 8004642:	f000 fbd7 	bl	8004df4 <RCCEx_PLL3_Config>
 8004646:	4603      	mov	r3, r0
 8004648:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800464c:	e004      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004654:	e000      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8004656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004658:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10f      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004660:	4b06      	ldr	r3, [pc, #24]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004666:	f023 0107 	bic.w	r1, r3, #7
 800466a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800466e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004672:	4a02      	ldr	r2, [pc, #8]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004674:	430b      	orrs	r3, r1
 8004676:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800467a:	e005      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 800467c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004680:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004684:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004688:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800468c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004690:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004694:	643b      	str	r3, [r7, #64]	@ 0x40
 8004696:	2300      	movs	r3, #0
 8004698:	647b      	str	r3, [r7, #68]	@ 0x44
 800469a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800469e:	460b      	mov	r3, r1
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f000 8081 	beq.w	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80046a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80046ae:	2b20      	cmp	r3, #32
 80046b0:	d85f      	bhi.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 80046b2:	a201      	add	r2, pc, #4	@ (adr r2, 80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 80046b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b8:	0800473d 	.word	0x0800473d
 80046bc:	08004773 	.word	0x08004773
 80046c0:	08004773 	.word	0x08004773
 80046c4:	08004773 	.word	0x08004773
 80046c8:	08004773 	.word	0x08004773
 80046cc:	08004773 	.word	0x08004773
 80046d0:	08004773 	.word	0x08004773
 80046d4:	08004773 	.word	0x08004773
 80046d8:	0800474b 	.word	0x0800474b
 80046dc:	08004773 	.word	0x08004773
 80046e0:	08004773 	.word	0x08004773
 80046e4:	08004773 	.word	0x08004773
 80046e8:	08004773 	.word	0x08004773
 80046ec:	08004773 	.word	0x08004773
 80046f0:	08004773 	.word	0x08004773
 80046f4:	08004773 	.word	0x08004773
 80046f8:	0800475f 	.word	0x0800475f
 80046fc:	08004773 	.word	0x08004773
 8004700:	08004773 	.word	0x08004773
 8004704:	08004773 	.word	0x08004773
 8004708:	08004773 	.word	0x08004773
 800470c:	08004773 	.word	0x08004773
 8004710:	08004773 	.word	0x08004773
 8004714:	08004773 	.word	0x08004773
 8004718:	0800477b 	.word	0x0800477b
 800471c:	08004773 	.word	0x08004773
 8004720:	08004773 	.word	0x08004773
 8004724:	08004773 	.word	0x08004773
 8004728:	08004773 	.word	0x08004773
 800472c:	08004773 	.word	0x08004773
 8004730:	08004773 	.word	0x08004773
 8004734:	08004773 	.word	0x08004773
 8004738:	0800477b 	.word	0x0800477b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800473c:	4bab      	ldr	r3, [pc, #684]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800473e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004740:	4aaa      	ldr	r2, [pc, #680]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004742:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004746:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004748:	e018      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800474a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800474e:	3308      	adds	r3, #8
 8004750:	4618      	mov	r0, r3
 8004752:	f000 fab7 	bl	8004cc4 <RCCEx_PLL2_Config>
 8004756:	4603      	mov	r3, r0
 8004758:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800475c:	e00e      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800475e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004762:	3330      	adds	r3, #48	@ 0x30
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fb45 	bl	8004df4 <RCCEx_PLL3_Config>
 800476a:	4603      	mov	r3, r0
 800476c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004770:	e004      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004778:	e000      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800477a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800477c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10d      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004784:	4b99      	ldr	r3, [pc, #612]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800478a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800478e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004792:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004796:	4a95      	ldr	r2, [pc, #596]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004798:	430b      	orrs	r3, r1
 800479a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800479e:	e003      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80047a4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80047a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80047b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047b6:	2300      	movs	r3, #0
 80047b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047ba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80047be:	460b      	mov	r3, r1
 80047c0:	4313      	orrs	r3, r2
 80047c2:	d04e      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80047c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80047cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047d0:	d02e      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 80047d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047d6:	d827      	bhi.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80047d8:	2bc0      	cmp	r3, #192	@ 0xc0
 80047da:	d02b      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 80047dc:	2bc0      	cmp	r3, #192	@ 0xc0
 80047de:	d823      	bhi.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80047e0:	2b80      	cmp	r3, #128	@ 0x80
 80047e2:	d017      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 80047e4:	2b80      	cmp	r3, #128	@ 0x80
 80047e6:	d81f      	bhi.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 80047ec:	2b40      	cmp	r3, #64	@ 0x40
 80047ee:	d007      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 80047f0:	e01a      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047f2:	4b7e      	ldr	r3, [pc, #504]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80047f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f6:	4a7d      	ldr	r2, [pc, #500]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80047f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047fc:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80047fe:	e01a      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004800:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004804:	3308      	adds	r3, #8
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fa5c 	bl	8004cc4 <RCCEx_PLL2_Config>
 800480c:	4603      	mov	r3, r0
 800480e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004812:	e010      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004814:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004818:	3330      	adds	r3, #48	@ 0x30
 800481a:	4618      	mov	r0, r3
 800481c:	f000 faea 	bl	8004df4 <RCCEx_PLL3_Config>
 8004820:	4603      	mov	r3, r0
 8004822:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004826:	e006      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800482e:	e002      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004830:	bf00      	nop
 8004832:	e000      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004834:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004836:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10d      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800483e:	4b6b      	ldr	r3, [pc, #428]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004844:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004848:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800484c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004850:	4a66      	ldr	r2, [pc, #408]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004852:	430b      	orrs	r3, r1
 8004854:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004858:	e003      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800485a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800485e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004862:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800486e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004870:	2300      	movs	r3, #0
 8004872:	637b      	str	r3, [r7, #52]	@ 0x34
 8004874:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004878:	460b      	mov	r3, r1
 800487a:	4313      	orrs	r3, r2
 800487c:	d055      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800487e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004882:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004886:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800488a:	d031      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 800488c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004890:	d82a      	bhi.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004892:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004896:	d02d      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8004898:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800489c:	d824      	bhi.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800489e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80048a2:	d029      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 80048a4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80048a8:	d81e      	bhi.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80048aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ae:	d011      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 80048b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048b4:	d818      	bhi.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d020      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 80048ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048be:	d113      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048c4:	3308      	adds	r3, #8
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 f9fc 	bl	8004cc4 <RCCEx_PLL2_Config>
 80048cc:	4603      	mov	r3, r0
 80048ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80048d2:	e014      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048d8:	3330      	adds	r3, #48	@ 0x30
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fa8a 	bl	8004df4 <RCCEx_PLL3_Config>
 80048e0:	4603      	mov	r3, r0
 80048e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80048e6:	e00a      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80048ee:	e006      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80048f0:	bf00      	nop
 80048f2:	e004      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80048f4:	bf00      	nop
 80048f6:	e002      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80048f8:	bf00      	nop
 80048fa:	e000      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80048fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10d      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8004906:	4b39      	ldr	r3, [pc, #228]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800490c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004910:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004914:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004918:	4a34      	ldr	r2, [pc, #208]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800491a:	430b      	orrs	r3, r1
 800491c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004920:	e003      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004922:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004926:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800492a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800492e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004932:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004936:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004938:	2300      	movs	r3, #0
 800493a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800493c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004940:	460b      	mov	r3, r1
 8004942:	4313      	orrs	r3, r2
 8004944:	d058      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8004946:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800494a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800494e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004952:	d031      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8004954:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004958:	d82a      	bhi.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800495a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800495e:	d02d      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004960:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004964:	d824      	bhi.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004966:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800496a:	d029      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 800496c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004970:	d81e      	bhi.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004972:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004976:	d011      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8004978:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800497c:	d818      	bhi.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800497e:	2b00      	cmp	r3, #0
 8004980:	d020      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8004982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004986:	d113      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004988:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800498c:	3308      	adds	r3, #8
 800498e:	4618      	mov	r0, r3
 8004990:	f000 f998 	bl	8004cc4 <RCCEx_PLL2_Config>
 8004994:	4603      	mov	r3, r0
 8004996:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800499a:	e014      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800499c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049a0:	3330      	adds	r3, #48	@ 0x30
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fa26 	bl	8004df4 <RCCEx_PLL3_Config>
 80049a8:	4603      	mov	r3, r0
 80049aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80049ae:	e00a      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80049b6:	e006      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80049b8:	bf00      	nop
 80049ba:	e004      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80049bc:	bf00      	nop
 80049be:	e002      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80049c0:	bf00      	nop
 80049c2:	e000      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80049c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d110      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 80049ce:	4b07      	ldr	r3, [pc, #28]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80049d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049d4:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80049d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049e0:	4902      	ldr	r1, [pc, #8]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80049e8:	e006      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 80049ea:	bf00      	nop
 80049ec:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80049f4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80049f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a00:	2100      	movs	r1, #0
 8004a02:	6239      	str	r1, [r7, #32]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a0a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4313      	orrs	r3, r2
 8004a12:	d055      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8004a14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a1c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004a20:	d031      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8004a22:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004a26:	d82a      	bhi.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004a28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a2c:	d02d      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8004a2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a32:	d824      	bhi.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004a34:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004a38:	d029      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8004a3a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004a3e:	d81e      	bhi.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a44:	d011      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8004a46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a4a:	d818      	bhi.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d020      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8004a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a54:	d113      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a5a:	3308      	adds	r3, #8
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 f931 	bl	8004cc4 <RCCEx_PLL2_Config>
 8004a62:	4603      	mov	r3, r0
 8004a64:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004a68:	e014      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a6e:	3330      	adds	r3, #48	@ 0x30
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 f9bf 	bl	8004df4 <RCCEx_PLL3_Config>
 8004a76:	4603      	mov	r3, r0
 8004a78:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004a7c:	e00a      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004a84:	e006      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004a86:	bf00      	nop
 8004a88:	e004      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004a8a:	bf00      	nop
 8004a8c:	e002      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004a8e:	bf00      	nop
 8004a90:	e000      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004a92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a94:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10d      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8004a9c:	4b88      	ldr	r3, [pc, #544]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004aa2:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8004aa6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004aaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004aae:	4984      	ldr	r1, [pc, #528]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004ab6:	e003      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004abc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004ac0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac8:	2100      	movs	r1, #0
 8004aca:	61b9      	str	r1, [r7, #24]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	61fb      	str	r3, [r7, #28]
 8004ad2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	d03d      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004adc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ae0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004ae4:	2b03      	cmp	r3, #3
 8004ae6:	d81c      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8004ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8004aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aee:	bf00      	nop
 8004af0:	08004b2b 	.word	0x08004b2b
 8004af4:	08004b01 	.word	0x08004b01
 8004af8:	08004b0f 	.word	0x08004b0f
 8004afc:	08004b2b 	.word	0x08004b2b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b00:	4b6f      	ldr	r3, [pc, #444]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b04:	4a6e      	ldr	r2, [pc, #440]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004b06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b0a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004b0c:	e00e      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b12:	3308      	adds	r3, #8
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 f8d5 	bl	8004cc4 <RCCEx_PLL2_Config>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004b20:	e004      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004b28:	e000      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8004b2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b2c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10d      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004b34:	4b62      	ldr	r3, [pc, #392]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004b36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b3a:	f023 0203 	bic.w	r2, r3, #3
 8004b3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b42:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004b46:	495e      	ldr	r1, [pc, #376]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004b4e:	e003      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b50:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b54:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b60:	2100      	movs	r1, #0
 8004b62:	6139      	str	r1, [r7, #16]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4313      	orrs	r3, r2
 8004b72:	d03a      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004b74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b78:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b80:	d00e      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8004b82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b86:	d815      	bhi.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d017      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8004b8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b90:	d110      	bne.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b92:	4b4b      	ldr	r3, [pc, #300]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b96:	4a4a      	ldr	r2, [pc, #296]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004b98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b9c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004b9e:	e00e      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ba0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ba4:	3308      	adds	r3, #8
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 f88c 	bl	8004cc4 <RCCEx_PLL2_Config>
 8004bac:	4603      	mov	r3, r0
 8004bae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004bb2:	e004      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004bba:	e000      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8004bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bbe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10d      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004bc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004bcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bd4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004bd8:	4939      	ldr	r1, [pc, #228]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8004be0:	e003      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004be6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004bea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	f003 0310 	and.w	r3, r3, #16
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004c00:	460b      	mov	r3, r1
 8004c02:	4313      	orrs	r3, r2
 8004c04:	d038      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004c06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c0a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004c0e:	2b30      	cmp	r3, #48	@ 0x30
 8004c10:	d01b      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8004c12:	2b30      	cmp	r3, #48	@ 0x30
 8004c14:	d815      	bhi.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8004c16:	2b10      	cmp	r3, #16
 8004c18:	d002      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8004c1a:	2b20      	cmp	r3, #32
 8004c1c:	d007      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8004c1e:	e010      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c20:	4b27      	ldr	r3, [pc, #156]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c24:	4a26      	ldr	r2, [pc, #152]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004c26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c2a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004c2c:	e00e      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c32:	3330      	adds	r3, #48	@ 0x30
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 f8dd 	bl	8004df4 <RCCEx_PLL3_Config>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004c40:	e004      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004c48:	e000      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8004c4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c4c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10d      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004c54:	4b1a      	ldr	r3, [pc, #104]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004c56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c5a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c62:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004c66:	4916      	ldr	r1, [pc, #88]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004c6e:	e003      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c70:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c74:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c80:	2100      	movs	r1, #0
 8004c82:	6039      	str	r1, [r7, #0]
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	607b      	str	r3, [r7, #4]
 8004c8a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004c8e:	460b      	mov	r3, r1
 8004c90:	4313      	orrs	r3, r2
 8004c92:	d00c      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8004c94:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004c96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ca2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8004ca6:	4906      	ldr	r1, [pc, #24]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8004cae:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cbe:	bf00      	nop
 8004cc0:	44020c00 	.word	0x44020c00

08004cc4 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8004ccc:	4b48      	ldr	r3, [pc, #288]	@ (8004df0 <RCCEx_PLL2_Config+0x12c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a47      	ldr	r2, [pc, #284]	@ (8004df0 <RCCEx_PLL2_Config+0x12c>)
 8004cd2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004cd6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004cd8:	f7fc f9ce 	bl	8001078 <HAL_GetTick>
 8004cdc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cde:	e008      	b.n	8004cf2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ce0:	f7fc f9ca 	bl	8001078 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e07a      	b.n	8004de8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cf2:	4b3f      	ldr	r3, [pc, #252]	@ (8004df0 <RCCEx_PLL2_Config+0x12c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1f0      	bne.n	8004ce0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004cfe:	4b3c      	ldr	r3, [pc, #240]	@ (8004df0 <RCCEx_PLL2_Config+0x12c>)
 8004d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d02:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004d06:	f023 0303 	bic.w	r3, r3, #3
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	6811      	ldr	r1, [r2, #0]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6852      	ldr	r2, [r2, #4]
 8004d12:	0212      	lsls	r2, r2, #8
 8004d14:	430a      	orrs	r2, r1
 8004d16:	4936      	ldr	r1, [pc, #216]	@ (8004df0 <RCCEx_PLL2_Config+0x12c>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	3b01      	subs	r3, #1
 8004d22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	025b      	lsls	r3, r3, #9
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	431a      	orrs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	041b      	lsls	r3, r3, #16
 8004d3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	3b01      	subs	r3, #1
 8004d46:	061b      	lsls	r3, r3, #24
 8004d48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d4c:	4928      	ldr	r1, [pc, #160]	@ (8004df0 <RCCEx_PLL2_Config+0x12c>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004d52:	4b27      	ldr	r3, [pc, #156]	@ (8004df0 <RCCEx_PLL2_Config+0x12c>)
 8004d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d56:	f023 020c 	bic.w	r2, r3, #12
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	4924      	ldr	r1, [pc, #144]	@ (8004df0 <RCCEx_PLL2_Config+0x12c>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8004d64:	4b22      	ldr	r3, [pc, #136]	@ (8004df0 <RCCEx_PLL2_Config+0x12c>)
 8004d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d68:	f023 0220 	bic.w	r2, r3, #32
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	491f      	ldr	r1, [pc, #124]	@ (8004df0 <RCCEx_PLL2_Config+0x12c>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004d76:	4b1e      	ldr	r3, [pc, #120]	@ (8004df0 <RCCEx_PLL2_Config+0x12c>)
 8004d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7e:	491c      	ldr	r1, [pc, #112]	@ (8004df0 <RCCEx_PLL2_Config+0x12c>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8004d84:	4b1a      	ldr	r3, [pc, #104]	@ (8004df0 <RCCEx_PLL2_Config+0x12c>)
 8004d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d88:	4a19      	ldr	r2, [pc, #100]	@ (8004df0 <RCCEx_PLL2_Config+0x12c>)
 8004d8a:	f023 0310 	bic.w	r3, r3, #16
 8004d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8004d90:	4b17      	ldr	r3, [pc, #92]	@ (8004df0 <RCCEx_PLL2_Config+0x12c>)
 8004d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d94:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d98:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	6a12      	ldr	r2, [r2, #32]
 8004da0:	00d2      	lsls	r2, r2, #3
 8004da2:	4913      	ldr	r1, [pc, #76]	@ (8004df0 <RCCEx_PLL2_Config+0x12c>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8004da8:	4b11      	ldr	r3, [pc, #68]	@ (8004df0 <RCCEx_PLL2_Config+0x12c>)
 8004daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dac:	4a10      	ldr	r2, [pc, #64]	@ (8004df0 <RCCEx_PLL2_Config+0x12c>)
 8004dae:	f043 0310 	orr.w	r3, r3, #16
 8004db2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8004db4:	4b0e      	ldr	r3, [pc, #56]	@ (8004df0 <RCCEx_PLL2_Config+0x12c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a0d      	ldr	r2, [pc, #52]	@ (8004df0 <RCCEx_PLL2_Config+0x12c>)
 8004dba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004dbe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004dc0:	f7fc f95a 	bl	8001078 <HAL_GetTick>
 8004dc4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004dc6:	e008      	b.n	8004dda <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004dc8:	f7fc f956 	bl	8001078 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e006      	b.n	8004de8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004dda:	4b05      	ldr	r3, [pc, #20]	@ (8004df0 <RCCEx_PLL2_Config+0x12c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0f0      	beq.n	8004dc8 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8004de6:	2300      	movs	r3, #0

}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	44020c00 	.word	0x44020c00

08004df4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8004dfc:	4b48      	ldr	r3, [pc, #288]	@ (8004f20 <RCCEx_PLL3_Config+0x12c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a47      	ldr	r2, [pc, #284]	@ (8004f20 <RCCEx_PLL3_Config+0x12c>)
 8004e02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e06:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e08:	f7fc f936 	bl	8001078 <HAL_GetTick>
 8004e0c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e0e:	e008      	b.n	8004e22 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e10:	f7fc f932 	bl	8001078 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e07a      	b.n	8004f18 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e22:	4b3f      	ldr	r3, [pc, #252]	@ (8004f20 <RCCEx_PLL3_Config+0x12c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1f0      	bne.n	8004e10 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8004e2e:	4b3c      	ldr	r3, [pc, #240]	@ (8004f20 <RCCEx_PLL3_Config+0x12c>)
 8004e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e32:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e36:	f023 0303 	bic.w	r3, r3, #3
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6811      	ldr	r1, [r2, #0]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6852      	ldr	r2, [r2, #4]
 8004e42:	0212      	lsls	r2, r2, #8
 8004e44:	430a      	orrs	r2, r1
 8004e46:	4936      	ldr	r1, [pc, #216]	@ (8004f20 <RCCEx_PLL3_Config+0x12c>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	630b      	str	r3, [r1, #48]	@ 0x30
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	3b01      	subs	r3, #1
 8004e52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	025b      	lsls	r3, r3, #9
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	041b      	lsls	r3, r3, #16
 8004e6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	061b      	lsls	r3, r3, #24
 8004e78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e7c:	4928      	ldr	r1, [pc, #160]	@ (8004f20 <RCCEx_PLL3_Config+0x12c>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e82:	4b27      	ldr	r3, [pc, #156]	@ (8004f20 <RCCEx_PLL3_Config+0x12c>)
 8004e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e86:	f023 020c 	bic.w	r2, r3, #12
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	4924      	ldr	r1, [pc, #144]	@ (8004f20 <RCCEx_PLL3_Config+0x12c>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8004e94:	4b22      	ldr	r3, [pc, #136]	@ (8004f20 <RCCEx_PLL3_Config+0x12c>)
 8004e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e98:	f023 0220 	bic.w	r2, r3, #32
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	491f      	ldr	r1, [pc, #124]	@ (8004f20 <RCCEx_PLL3_Config+0x12c>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8004ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8004f20 <RCCEx_PLL3_Config+0x12c>)
 8004ea8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eae:	491c      	ldr	r1, [pc, #112]	@ (8004f20 <RCCEx_PLL3_Config+0x12c>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8004eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8004f20 <RCCEx_PLL3_Config+0x12c>)
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb8:	4a19      	ldr	r2, [pc, #100]	@ (8004f20 <RCCEx_PLL3_Config+0x12c>)
 8004eba:	f023 0310 	bic.w	r3, r3, #16
 8004ebe:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8004ec0:	4b17      	ldr	r3, [pc, #92]	@ (8004f20 <RCCEx_PLL3_Config+0x12c>)
 8004ec2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ec4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ec8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6a12      	ldr	r2, [r2, #32]
 8004ed0:	00d2      	lsls	r2, r2, #3
 8004ed2:	4913      	ldr	r1, [pc, #76]	@ (8004f20 <RCCEx_PLL3_Config+0x12c>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8004ed8:	4b11      	ldr	r3, [pc, #68]	@ (8004f20 <RCCEx_PLL3_Config+0x12c>)
 8004eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004edc:	4a10      	ldr	r2, [pc, #64]	@ (8004f20 <RCCEx_PLL3_Config+0x12c>)
 8004ede:	f043 0310 	orr.w	r3, r3, #16
 8004ee2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8004ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8004f20 <RCCEx_PLL3_Config+0x12c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8004f20 <RCCEx_PLL3_Config+0x12c>)
 8004eea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ef0:	f7fc f8c2 	bl	8001078 <HAL_GetTick>
 8004ef4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ef6:	e008      	b.n	8004f0a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ef8:	f7fc f8be 	bl	8001078 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e006      	b.n	8004f18 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f0a:	4b05      	ldr	r3, [pc, #20]	@ (8004f20 <RCCEx_PLL3_Config+0x12c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0f0      	beq.n	8004ef8 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	44020c00 	.word	0x44020c00

08004f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e049      	b.n	8004fca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d106      	bne.n	8004f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7fb ff3a 	bl	8000dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3304      	adds	r3, #4
 8004f60:	4619      	mov	r1, r3
 8004f62:	4610      	mov	r0, r2
 8004f64:	f000 fac8 	bl	80054f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b082      	sub	sp, #8
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e049      	b.n	8005078 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d106      	bne.n	8004ffe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f841 	bl	8005080 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2202      	movs	r2, #2
 8005002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3304      	adds	r3, #4
 800500e:	4619      	mov	r1, r3
 8005010:	4610      	mov	r0, r2
 8005012:	f000 fa71 	bl	80054f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050a0:	2300      	movs	r3, #0
 80050a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d101      	bne.n	80050b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050ae:	2302      	movs	r3, #2
 80050b0:	e0ff      	b.n	80052b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b14      	cmp	r3, #20
 80050be:	f200 80f0 	bhi.w	80052a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80050c2:	a201      	add	r2, pc, #4	@ (adr r2, 80050c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c8:	0800511d 	.word	0x0800511d
 80050cc:	080052a3 	.word	0x080052a3
 80050d0:	080052a3 	.word	0x080052a3
 80050d4:	080052a3 	.word	0x080052a3
 80050d8:	0800515d 	.word	0x0800515d
 80050dc:	080052a3 	.word	0x080052a3
 80050e0:	080052a3 	.word	0x080052a3
 80050e4:	080052a3 	.word	0x080052a3
 80050e8:	0800519f 	.word	0x0800519f
 80050ec:	080052a3 	.word	0x080052a3
 80050f0:	080052a3 	.word	0x080052a3
 80050f4:	080052a3 	.word	0x080052a3
 80050f8:	080051df 	.word	0x080051df
 80050fc:	080052a3 	.word	0x080052a3
 8005100:	080052a3 	.word	0x080052a3
 8005104:	080052a3 	.word	0x080052a3
 8005108:	08005221 	.word	0x08005221
 800510c:	080052a3 	.word	0x080052a3
 8005110:	080052a3 	.word	0x080052a3
 8005114:	080052a3 	.word	0x080052a3
 8005118:	08005261 	.word	0x08005261
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68b9      	ldr	r1, [r7, #8]
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fb12 	bl	800574c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699a      	ldr	r2, [r3, #24]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f042 0208 	orr.w	r2, r2, #8
 8005136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699a      	ldr	r2, [r3, #24]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0204 	bic.w	r2, r2, #4
 8005146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6999      	ldr	r1, [r3, #24]
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	691a      	ldr	r2, [r3, #16]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	619a      	str	r2, [r3, #24]
      break;
 800515a:	e0a5      	b.n	80052a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68b9      	ldr	r1, [r7, #8]
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fbb4 	bl	80058d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699a      	ldr	r2, [r3, #24]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005176:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	699a      	ldr	r2, [r3, #24]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6999      	ldr	r1, [r3, #24]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	021a      	lsls	r2, r3, #8
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	619a      	str	r2, [r3, #24]
      break;
 800519c:	e084      	b.n	80052a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68b9      	ldr	r1, [r7, #8]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fc43 	bl	8005a30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0208 	orr.w	r2, r2, #8
 80051b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69da      	ldr	r2, [r3, #28]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0204 	bic.w	r2, r2, #4
 80051c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69d9      	ldr	r1, [r3, #28]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	691a      	ldr	r2, [r3, #16]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	61da      	str	r2, [r3, #28]
      break;
 80051dc:	e064      	b.n	80052a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68b9      	ldr	r1, [r7, #8]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 fcd1 	bl	8005b8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69da      	ldr	r2, [r3, #28]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69da      	ldr	r2, [r3, #28]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005208:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69d9      	ldr	r1, [r3, #28]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	021a      	lsls	r2, r3, #8
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	61da      	str	r2, [r3, #28]
      break;
 800521e:	e043      	b.n	80052a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68b9      	ldr	r1, [r7, #8]
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fd60 	bl	8005cec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0208 	orr.w	r2, r2, #8
 800523a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0204 	bic.w	r2, r2, #4
 800524a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	691a      	ldr	r2, [r3, #16]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800525e:	e023      	b.n	80052a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68b9      	ldr	r1, [r7, #8]
 8005266:	4618      	mov	r0, r3
 8005268:	f000 fdc2 	bl	8005df0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800527a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800528a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	021a      	lsls	r2, r3, #8
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	430a      	orrs	r2, r1
 800529e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80052a0:	e002      	b.n	80052a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	75fb      	strb	r3, [r7, #23]
      break;
 80052a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop

080052bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d101      	bne.n	80052d8 <HAL_TIM_ConfigClockSource+0x1c>
 80052d4:	2302      	movs	r3, #2
 80052d6:	e0fe      	b.n	80054d6 <HAL_TIM_ConfigClockSource+0x21a>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80052f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80052fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005302:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005314:	f000 80c9 	beq.w	80054aa <HAL_TIM_ConfigClockSource+0x1ee>
 8005318:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800531c:	f200 80ce 	bhi.w	80054bc <HAL_TIM_ConfigClockSource+0x200>
 8005320:	4a6f      	ldr	r2, [pc, #444]	@ (80054e0 <HAL_TIM_ConfigClockSource+0x224>)
 8005322:	4293      	cmp	r3, r2
 8005324:	f000 80c1 	beq.w	80054aa <HAL_TIM_ConfigClockSource+0x1ee>
 8005328:	4a6d      	ldr	r2, [pc, #436]	@ (80054e0 <HAL_TIM_ConfigClockSource+0x224>)
 800532a:	4293      	cmp	r3, r2
 800532c:	f200 80c6 	bhi.w	80054bc <HAL_TIM_ConfigClockSource+0x200>
 8005330:	4a6c      	ldr	r2, [pc, #432]	@ (80054e4 <HAL_TIM_ConfigClockSource+0x228>)
 8005332:	4293      	cmp	r3, r2
 8005334:	f000 80b9 	beq.w	80054aa <HAL_TIM_ConfigClockSource+0x1ee>
 8005338:	4a6a      	ldr	r2, [pc, #424]	@ (80054e4 <HAL_TIM_ConfigClockSource+0x228>)
 800533a:	4293      	cmp	r3, r2
 800533c:	f200 80be 	bhi.w	80054bc <HAL_TIM_ConfigClockSource+0x200>
 8005340:	4a69      	ldr	r2, [pc, #420]	@ (80054e8 <HAL_TIM_ConfigClockSource+0x22c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	f000 80b1 	beq.w	80054aa <HAL_TIM_ConfigClockSource+0x1ee>
 8005348:	4a67      	ldr	r2, [pc, #412]	@ (80054e8 <HAL_TIM_ConfigClockSource+0x22c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	f200 80b6 	bhi.w	80054bc <HAL_TIM_ConfigClockSource+0x200>
 8005350:	4a66      	ldr	r2, [pc, #408]	@ (80054ec <HAL_TIM_ConfigClockSource+0x230>)
 8005352:	4293      	cmp	r3, r2
 8005354:	f000 80a9 	beq.w	80054aa <HAL_TIM_ConfigClockSource+0x1ee>
 8005358:	4a64      	ldr	r2, [pc, #400]	@ (80054ec <HAL_TIM_ConfigClockSource+0x230>)
 800535a:	4293      	cmp	r3, r2
 800535c:	f200 80ae 	bhi.w	80054bc <HAL_TIM_ConfigClockSource+0x200>
 8005360:	4a63      	ldr	r2, [pc, #396]	@ (80054f0 <HAL_TIM_ConfigClockSource+0x234>)
 8005362:	4293      	cmp	r3, r2
 8005364:	f000 80a1 	beq.w	80054aa <HAL_TIM_ConfigClockSource+0x1ee>
 8005368:	4a61      	ldr	r2, [pc, #388]	@ (80054f0 <HAL_TIM_ConfigClockSource+0x234>)
 800536a:	4293      	cmp	r3, r2
 800536c:	f200 80a6 	bhi.w	80054bc <HAL_TIM_ConfigClockSource+0x200>
 8005370:	4a60      	ldr	r2, [pc, #384]	@ (80054f4 <HAL_TIM_ConfigClockSource+0x238>)
 8005372:	4293      	cmp	r3, r2
 8005374:	f000 8099 	beq.w	80054aa <HAL_TIM_ConfigClockSource+0x1ee>
 8005378:	4a5e      	ldr	r2, [pc, #376]	@ (80054f4 <HAL_TIM_ConfigClockSource+0x238>)
 800537a:	4293      	cmp	r3, r2
 800537c:	f200 809e 	bhi.w	80054bc <HAL_TIM_ConfigClockSource+0x200>
 8005380:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005384:	f000 8091 	beq.w	80054aa <HAL_TIM_ConfigClockSource+0x1ee>
 8005388:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800538c:	f200 8096 	bhi.w	80054bc <HAL_TIM_ConfigClockSource+0x200>
 8005390:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005394:	f000 8089 	beq.w	80054aa <HAL_TIM_ConfigClockSource+0x1ee>
 8005398:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800539c:	f200 808e 	bhi.w	80054bc <HAL_TIM_ConfigClockSource+0x200>
 80053a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053a4:	d03e      	beq.n	8005424 <HAL_TIM_ConfigClockSource+0x168>
 80053a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053aa:	f200 8087 	bhi.w	80054bc <HAL_TIM_ConfigClockSource+0x200>
 80053ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053b2:	f000 8086 	beq.w	80054c2 <HAL_TIM_ConfigClockSource+0x206>
 80053b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ba:	d87f      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x200>
 80053bc:	2b70      	cmp	r3, #112	@ 0x70
 80053be:	d01a      	beq.n	80053f6 <HAL_TIM_ConfigClockSource+0x13a>
 80053c0:	2b70      	cmp	r3, #112	@ 0x70
 80053c2:	d87b      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x200>
 80053c4:	2b60      	cmp	r3, #96	@ 0x60
 80053c6:	d050      	beq.n	800546a <HAL_TIM_ConfigClockSource+0x1ae>
 80053c8:	2b60      	cmp	r3, #96	@ 0x60
 80053ca:	d877      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x200>
 80053cc:	2b50      	cmp	r3, #80	@ 0x50
 80053ce:	d03c      	beq.n	800544a <HAL_TIM_ConfigClockSource+0x18e>
 80053d0:	2b50      	cmp	r3, #80	@ 0x50
 80053d2:	d873      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x200>
 80053d4:	2b40      	cmp	r3, #64	@ 0x40
 80053d6:	d058      	beq.n	800548a <HAL_TIM_ConfigClockSource+0x1ce>
 80053d8:	2b40      	cmp	r3, #64	@ 0x40
 80053da:	d86f      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x200>
 80053dc:	2b30      	cmp	r3, #48	@ 0x30
 80053de:	d064      	beq.n	80054aa <HAL_TIM_ConfigClockSource+0x1ee>
 80053e0:	2b30      	cmp	r3, #48	@ 0x30
 80053e2:	d86b      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x200>
 80053e4:	2b20      	cmp	r3, #32
 80053e6:	d060      	beq.n	80054aa <HAL_TIM_ConfigClockSource+0x1ee>
 80053e8:	2b20      	cmp	r3, #32
 80053ea:	d867      	bhi.n	80054bc <HAL_TIM_ConfigClockSource+0x200>
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d05c      	beq.n	80054aa <HAL_TIM_ConfigClockSource+0x1ee>
 80053f0:	2b10      	cmp	r3, #16
 80053f2:	d05a      	beq.n	80054aa <HAL_TIM_ConfigClockSource+0x1ee>
 80053f4:	e062      	b.n	80054bc <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005406:	f000 fdf3 	bl	8005ff0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005418:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	609a      	str	r2, [r3, #8]
      break;
 8005422:	e04f      	b.n	80054c4 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005434:	f000 fddc 	bl	8005ff0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689a      	ldr	r2, [r3, #8]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005446:	609a      	str	r2, [r3, #8]
      break;
 8005448:	e03c      	b.n	80054c4 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005456:	461a      	mov	r2, r3
 8005458:	f000 fd4e 	bl	8005ef8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2150      	movs	r1, #80	@ 0x50
 8005462:	4618      	mov	r0, r3
 8005464:	f000 fda7 	bl	8005fb6 <TIM_ITRx_SetConfig>
      break;
 8005468:	e02c      	b.n	80054c4 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005476:	461a      	mov	r2, r3
 8005478:	f000 fd6d 	bl	8005f56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2160      	movs	r1, #96	@ 0x60
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fd97 	bl	8005fb6 <TIM_ITRx_SetConfig>
      break;
 8005488:	e01c      	b.n	80054c4 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005496:	461a      	mov	r2, r3
 8005498:	f000 fd2e 	bl	8005ef8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2140      	movs	r1, #64	@ 0x40
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 fd87 	bl	8005fb6 <TIM_ITRx_SetConfig>
      break;
 80054a8:	e00c      	b.n	80054c4 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4619      	mov	r1, r3
 80054b4:	4610      	mov	r0, r2
 80054b6:	f000 fd7e 	bl	8005fb6 <TIM_ITRx_SetConfig>
      break;
 80054ba:	e003      	b.n	80054c4 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	73fb      	strb	r3, [r7, #15]
      break;
 80054c0:	e000      	b.n	80054c4 <HAL_TIM_ConfigClockSource+0x208>
      break;
 80054c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	00100070 	.word	0x00100070
 80054e4:	00100060 	.word	0x00100060
 80054e8:	00100050 	.word	0x00100050
 80054ec:	00100040 	.word	0x00100040
 80054f0:	00100030 	.word	0x00100030
 80054f4:	00100020 	.word	0x00100020

080054f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a7a      	ldr	r2, [pc, #488]	@ (80056f4 <TIM_Base_SetConfig+0x1fc>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d02b      	beq.n	8005568 <TIM_Base_SetConfig+0x70>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a79      	ldr	r2, [pc, #484]	@ (80056f8 <TIM_Base_SetConfig+0x200>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d027      	beq.n	8005568 <TIM_Base_SetConfig+0x70>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800551e:	d023      	beq.n	8005568 <TIM_Base_SetConfig+0x70>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005526:	d01f      	beq.n	8005568 <TIM_Base_SetConfig+0x70>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a74      	ldr	r2, [pc, #464]	@ (80056fc <TIM_Base_SetConfig+0x204>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d01b      	beq.n	8005568 <TIM_Base_SetConfig+0x70>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a73      	ldr	r2, [pc, #460]	@ (8005700 <TIM_Base_SetConfig+0x208>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d017      	beq.n	8005568 <TIM_Base_SetConfig+0x70>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a72      	ldr	r2, [pc, #456]	@ (8005704 <TIM_Base_SetConfig+0x20c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d013      	beq.n	8005568 <TIM_Base_SetConfig+0x70>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a71      	ldr	r2, [pc, #452]	@ (8005708 <TIM_Base_SetConfig+0x210>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d00f      	beq.n	8005568 <TIM_Base_SetConfig+0x70>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a70      	ldr	r2, [pc, #448]	@ (800570c <TIM_Base_SetConfig+0x214>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d00b      	beq.n	8005568 <TIM_Base_SetConfig+0x70>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a6f      	ldr	r2, [pc, #444]	@ (8005710 <TIM_Base_SetConfig+0x218>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d007      	beq.n	8005568 <TIM_Base_SetConfig+0x70>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a6e      	ldr	r2, [pc, #440]	@ (8005714 <TIM_Base_SetConfig+0x21c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d003      	beq.n	8005568 <TIM_Base_SetConfig+0x70>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a6d      	ldr	r2, [pc, #436]	@ (8005718 <TIM_Base_SetConfig+0x220>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d108      	bne.n	800557a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800556e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a5d      	ldr	r2, [pc, #372]	@ (80056f4 <TIM_Base_SetConfig+0x1fc>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d05b      	beq.n	800563a <TIM_Base_SetConfig+0x142>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a5c      	ldr	r2, [pc, #368]	@ (80056f8 <TIM_Base_SetConfig+0x200>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d057      	beq.n	800563a <TIM_Base_SetConfig+0x142>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005590:	d053      	beq.n	800563a <TIM_Base_SetConfig+0x142>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005598:	d04f      	beq.n	800563a <TIM_Base_SetConfig+0x142>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a57      	ldr	r2, [pc, #348]	@ (80056fc <TIM_Base_SetConfig+0x204>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d04b      	beq.n	800563a <TIM_Base_SetConfig+0x142>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a56      	ldr	r2, [pc, #344]	@ (8005700 <TIM_Base_SetConfig+0x208>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d047      	beq.n	800563a <TIM_Base_SetConfig+0x142>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a55      	ldr	r2, [pc, #340]	@ (8005704 <TIM_Base_SetConfig+0x20c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d043      	beq.n	800563a <TIM_Base_SetConfig+0x142>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a54      	ldr	r2, [pc, #336]	@ (8005708 <TIM_Base_SetConfig+0x210>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d03f      	beq.n	800563a <TIM_Base_SetConfig+0x142>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a53      	ldr	r2, [pc, #332]	@ (800570c <TIM_Base_SetConfig+0x214>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d03b      	beq.n	800563a <TIM_Base_SetConfig+0x142>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a52      	ldr	r2, [pc, #328]	@ (8005710 <TIM_Base_SetConfig+0x218>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d037      	beq.n	800563a <TIM_Base_SetConfig+0x142>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a51      	ldr	r2, [pc, #324]	@ (8005714 <TIM_Base_SetConfig+0x21c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d033      	beq.n	800563a <TIM_Base_SetConfig+0x142>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a50      	ldr	r2, [pc, #320]	@ (8005718 <TIM_Base_SetConfig+0x220>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d02f      	beq.n	800563a <TIM_Base_SetConfig+0x142>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a4f      	ldr	r2, [pc, #316]	@ (800571c <TIM_Base_SetConfig+0x224>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d02b      	beq.n	800563a <TIM_Base_SetConfig+0x142>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a4e      	ldr	r2, [pc, #312]	@ (8005720 <TIM_Base_SetConfig+0x228>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d027      	beq.n	800563a <TIM_Base_SetConfig+0x142>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a4d      	ldr	r2, [pc, #308]	@ (8005724 <TIM_Base_SetConfig+0x22c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d023      	beq.n	800563a <TIM_Base_SetConfig+0x142>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a4c      	ldr	r2, [pc, #304]	@ (8005728 <TIM_Base_SetConfig+0x230>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d01f      	beq.n	800563a <TIM_Base_SetConfig+0x142>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a4b      	ldr	r2, [pc, #300]	@ (800572c <TIM_Base_SetConfig+0x234>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d01b      	beq.n	800563a <TIM_Base_SetConfig+0x142>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a4a      	ldr	r2, [pc, #296]	@ (8005730 <TIM_Base_SetConfig+0x238>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d017      	beq.n	800563a <TIM_Base_SetConfig+0x142>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a49      	ldr	r2, [pc, #292]	@ (8005734 <TIM_Base_SetConfig+0x23c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d013      	beq.n	800563a <TIM_Base_SetConfig+0x142>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a48      	ldr	r2, [pc, #288]	@ (8005738 <TIM_Base_SetConfig+0x240>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d00f      	beq.n	800563a <TIM_Base_SetConfig+0x142>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a47      	ldr	r2, [pc, #284]	@ (800573c <TIM_Base_SetConfig+0x244>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d00b      	beq.n	800563a <TIM_Base_SetConfig+0x142>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a46      	ldr	r2, [pc, #280]	@ (8005740 <TIM_Base_SetConfig+0x248>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d007      	beq.n	800563a <TIM_Base_SetConfig+0x142>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a45      	ldr	r2, [pc, #276]	@ (8005744 <TIM_Base_SetConfig+0x24c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d003      	beq.n	800563a <TIM_Base_SetConfig+0x142>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a44      	ldr	r2, [pc, #272]	@ (8005748 <TIM_Base_SetConfig+0x250>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d108      	bne.n	800564c <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	4313      	orrs	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a20      	ldr	r2, [pc, #128]	@ (80056f4 <TIM_Base_SetConfig+0x1fc>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d023      	beq.n	80056c0 <TIM_Base_SetConfig+0x1c8>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a1f      	ldr	r2, [pc, #124]	@ (80056f8 <TIM_Base_SetConfig+0x200>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d01f      	beq.n	80056c0 <TIM_Base_SetConfig+0x1c8>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a24      	ldr	r2, [pc, #144]	@ (8005714 <TIM_Base_SetConfig+0x21c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d01b      	beq.n	80056c0 <TIM_Base_SetConfig+0x1c8>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a23      	ldr	r2, [pc, #140]	@ (8005718 <TIM_Base_SetConfig+0x220>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d017      	beq.n	80056c0 <TIM_Base_SetConfig+0x1c8>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a28      	ldr	r2, [pc, #160]	@ (8005734 <TIM_Base_SetConfig+0x23c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d013      	beq.n	80056c0 <TIM_Base_SetConfig+0x1c8>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a27      	ldr	r2, [pc, #156]	@ (8005738 <TIM_Base_SetConfig+0x240>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d00f      	beq.n	80056c0 <TIM_Base_SetConfig+0x1c8>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a26      	ldr	r2, [pc, #152]	@ (800573c <TIM_Base_SetConfig+0x244>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00b      	beq.n	80056c0 <TIM_Base_SetConfig+0x1c8>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a25      	ldr	r2, [pc, #148]	@ (8005740 <TIM_Base_SetConfig+0x248>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d007      	beq.n	80056c0 <TIM_Base_SetConfig+0x1c8>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a24      	ldr	r2, [pc, #144]	@ (8005744 <TIM_Base_SetConfig+0x24c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d003      	beq.n	80056c0 <TIM_Base_SetConfig+0x1c8>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a23      	ldr	r2, [pc, #140]	@ (8005748 <TIM_Base_SetConfig+0x250>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d103      	bne.n	80056c8 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	691a      	ldr	r2, [r3, #16]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d105      	bne.n	80056e6 <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f023 0201 	bic.w	r2, r3, #1
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	611a      	str	r2, [r3, #16]
  }
}
 80056e6:	bf00      	nop
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	40012c00 	.word	0x40012c00
 80056f8:	50012c00 	.word	0x50012c00
 80056fc:	40000400 	.word	0x40000400
 8005700:	50000400 	.word	0x50000400
 8005704:	40000800 	.word	0x40000800
 8005708:	50000800 	.word	0x50000800
 800570c:	40000c00 	.word	0x40000c00
 8005710:	50000c00 	.word	0x50000c00
 8005714:	40013400 	.word	0x40013400
 8005718:	50013400 	.word	0x50013400
 800571c:	40001800 	.word	0x40001800
 8005720:	50001800 	.word	0x50001800
 8005724:	40001c00 	.word	0x40001c00
 8005728:	50001c00 	.word	0x50001c00
 800572c:	40002000 	.word	0x40002000
 8005730:	50002000 	.word	0x50002000
 8005734:	40014000 	.word	0x40014000
 8005738:	50014000 	.word	0x50014000
 800573c:	40014400 	.word	0x40014400
 8005740:	50014400 	.word	0x50014400
 8005744:	40014800 	.word	0x40014800
 8005748:	50014800 	.word	0x50014800

0800574c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	f023 0201 	bic.w	r2, r3, #1
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800577a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800577e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 0303 	bic.w	r3, r3, #3
 8005786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f023 0302 	bic.w	r3, r3, #2
 8005798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a40      	ldr	r2, [pc, #256]	@ (80058a8 <TIM_OC1_SetConfig+0x15c>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d023      	beq.n	80057f4 <TIM_OC1_SetConfig+0xa8>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a3f      	ldr	r2, [pc, #252]	@ (80058ac <TIM_OC1_SetConfig+0x160>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d01f      	beq.n	80057f4 <TIM_OC1_SetConfig+0xa8>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a3e      	ldr	r2, [pc, #248]	@ (80058b0 <TIM_OC1_SetConfig+0x164>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d01b      	beq.n	80057f4 <TIM_OC1_SetConfig+0xa8>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a3d      	ldr	r2, [pc, #244]	@ (80058b4 <TIM_OC1_SetConfig+0x168>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d017      	beq.n	80057f4 <TIM_OC1_SetConfig+0xa8>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a3c      	ldr	r2, [pc, #240]	@ (80058b8 <TIM_OC1_SetConfig+0x16c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d013      	beq.n	80057f4 <TIM_OC1_SetConfig+0xa8>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a3b      	ldr	r2, [pc, #236]	@ (80058bc <TIM_OC1_SetConfig+0x170>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00f      	beq.n	80057f4 <TIM_OC1_SetConfig+0xa8>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a3a      	ldr	r2, [pc, #232]	@ (80058c0 <TIM_OC1_SetConfig+0x174>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d00b      	beq.n	80057f4 <TIM_OC1_SetConfig+0xa8>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a39      	ldr	r2, [pc, #228]	@ (80058c4 <TIM_OC1_SetConfig+0x178>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d007      	beq.n	80057f4 <TIM_OC1_SetConfig+0xa8>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a38      	ldr	r2, [pc, #224]	@ (80058c8 <TIM_OC1_SetConfig+0x17c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d003      	beq.n	80057f4 <TIM_OC1_SetConfig+0xa8>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a37      	ldr	r2, [pc, #220]	@ (80058cc <TIM_OC1_SetConfig+0x180>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d10c      	bne.n	800580e <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f023 0308 	bic.w	r3, r3, #8
 80057fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	4313      	orrs	r3, r2
 8005804:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f023 0304 	bic.w	r3, r3, #4
 800580c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a25      	ldr	r2, [pc, #148]	@ (80058a8 <TIM_OC1_SetConfig+0x15c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d023      	beq.n	800585e <TIM_OC1_SetConfig+0x112>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a24      	ldr	r2, [pc, #144]	@ (80058ac <TIM_OC1_SetConfig+0x160>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d01f      	beq.n	800585e <TIM_OC1_SetConfig+0x112>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a23      	ldr	r2, [pc, #140]	@ (80058b0 <TIM_OC1_SetConfig+0x164>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d01b      	beq.n	800585e <TIM_OC1_SetConfig+0x112>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a22      	ldr	r2, [pc, #136]	@ (80058b4 <TIM_OC1_SetConfig+0x168>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d017      	beq.n	800585e <TIM_OC1_SetConfig+0x112>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a21      	ldr	r2, [pc, #132]	@ (80058b8 <TIM_OC1_SetConfig+0x16c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d013      	beq.n	800585e <TIM_OC1_SetConfig+0x112>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a20      	ldr	r2, [pc, #128]	@ (80058bc <TIM_OC1_SetConfig+0x170>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d00f      	beq.n	800585e <TIM_OC1_SetConfig+0x112>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a1f      	ldr	r2, [pc, #124]	@ (80058c0 <TIM_OC1_SetConfig+0x174>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d00b      	beq.n	800585e <TIM_OC1_SetConfig+0x112>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a1e      	ldr	r2, [pc, #120]	@ (80058c4 <TIM_OC1_SetConfig+0x178>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d007      	beq.n	800585e <TIM_OC1_SetConfig+0x112>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a1d      	ldr	r2, [pc, #116]	@ (80058c8 <TIM_OC1_SetConfig+0x17c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d003      	beq.n	800585e <TIM_OC1_SetConfig+0x112>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a1c      	ldr	r2, [pc, #112]	@ (80058cc <TIM_OC1_SetConfig+0x180>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d111      	bne.n	8005882 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800586c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	4313      	orrs	r3, r2
 8005876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	4313      	orrs	r3, r2
 8005880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	621a      	str	r2, [r3, #32]
}
 800589c:	bf00      	nop
 800589e:	371c      	adds	r7, #28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	40012c00 	.word	0x40012c00
 80058ac:	50012c00 	.word	0x50012c00
 80058b0:	40013400 	.word	0x40013400
 80058b4:	50013400 	.word	0x50013400
 80058b8:	40014000 	.word	0x40014000
 80058bc:	50014000 	.word	0x50014000
 80058c0:	40014400 	.word	0x40014400
 80058c4:	50014400 	.word	0x50014400
 80058c8:	40014800 	.word	0x40014800
 80058cc:	50014800 	.word	0x50014800

080058d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	f023 0210 	bic.w	r2, r3, #16
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800590a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	021b      	lsls	r3, r3, #8
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f023 0320 	bic.w	r3, r3, #32
 800591e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	011b      	lsls	r3, r3, #4
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4313      	orrs	r3, r2
 800592a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a36      	ldr	r2, [pc, #216]	@ (8005a08 <TIM_OC2_SetConfig+0x138>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d00b      	beq.n	800594c <TIM_OC2_SetConfig+0x7c>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a35      	ldr	r2, [pc, #212]	@ (8005a0c <TIM_OC2_SetConfig+0x13c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d007      	beq.n	800594c <TIM_OC2_SetConfig+0x7c>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a34      	ldr	r2, [pc, #208]	@ (8005a10 <TIM_OC2_SetConfig+0x140>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d003      	beq.n	800594c <TIM_OC2_SetConfig+0x7c>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a33      	ldr	r2, [pc, #204]	@ (8005a14 <TIM_OC2_SetConfig+0x144>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d10d      	bne.n	8005968 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	011b      	lsls	r3, r3, #4
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	4313      	orrs	r3, r2
 800595e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005966:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a27      	ldr	r2, [pc, #156]	@ (8005a08 <TIM_OC2_SetConfig+0x138>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d023      	beq.n	80059b8 <TIM_OC2_SetConfig+0xe8>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a26      	ldr	r2, [pc, #152]	@ (8005a0c <TIM_OC2_SetConfig+0x13c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d01f      	beq.n	80059b8 <TIM_OC2_SetConfig+0xe8>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a25      	ldr	r2, [pc, #148]	@ (8005a10 <TIM_OC2_SetConfig+0x140>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d01b      	beq.n	80059b8 <TIM_OC2_SetConfig+0xe8>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a24      	ldr	r2, [pc, #144]	@ (8005a14 <TIM_OC2_SetConfig+0x144>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d017      	beq.n	80059b8 <TIM_OC2_SetConfig+0xe8>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a23      	ldr	r2, [pc, #140]	@ (8005a18 <TIM_OC2_SetConfig+0x148>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d013      	beq.n	80059b8 <TIM_OC2_SetConfig+0xe8>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a22      	ldr	r2, [pc, #136]	@ (8005a1c <TIM_OC2_SetConfig+0x14c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00f      	beq.n	80059b8 <TIM_OC2_SetConfig+0xe8>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a21      	ldr	r2, [pc, #132]	@ (8005a20 <TIM_OC2_SetConfig+0x150>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00b      	beq.n	80059b8 <TIM_OC2_SetConfig+0xe8>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a20      	ldr	r2, [pc, #128]	@ (8005a24 <TIM_OC2_SetConfig+0x154>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d007      	beq.n	80059b8 <TIM_OC2_SetConfig+0xe8>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005a28 <TIM_OC2_SetConfig+0x158>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d003      	beq.n	80059b8 <TIM_OC2_SetConfig+0xe8>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a1e      	ldr	r2, [pc, #120]	@ (8005a2c <TIM_OC2_SetConfig+0x15c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d113      	bne.n	80059e0 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	621a      	str	r2, [r3, #32]
}
 80059fa:	bf00      	nop
 80059fc:	371c      	adds	r7, #28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	40012c00 	.word	0x40012c00
 8005a0c:	50012c00 	.word	0x50012c00
 8005a10:	40013400 	.word	0x40013400
 8005a14:	50013400 	.word	0x50013400
 8005a18:	40014000 	.word	0x40014000
 8005a1c:	50014000 	.word	0x50014000
 8005a20:	40014400 	.word	0x40014400
 8005a24:	50014400 	.word	0x50014400
 8005a28:	40014800 	.word	0x40014800
 8005a2c:	50014800 	.word	0x50014800

08005a30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0303 	bic.w	r3, r3, #3
 8005a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	021b      	lsls	r3, r3, #8
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a35      	ldr	r2, [pc, #212]	@ (8005b64 <TIM_OC3_SetConfig+0x134>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d00b      	beq.n	8005aaa <TIM_OC3_SetConfig+0x7a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a34      	ldr	r2, [pc, #208]	@ (8005b68 <TIM_OC3_SetConfig+0x138>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d007      	beq.n	8005aaa <TIM_OC3_SetConfig+0x7a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a33      	ldr	r2, [pc, #204]	@ (8005b6c <TIM_OC3_SetConfig+0x13c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d003      	beq.n	8005aaa <TIM_OC3_SetConfig+0x7a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a32      	ldr	r2, [pc, #200]	@ (8005b70 <TIM_OC3_SetConfig+0x140>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d10d      	bne.n	8005ac6 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ab0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	021b      	lsls	r3, r3, #8
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a26      	ldr	r2, [pc, #152]	@ (8005b64 <TIM_OC3_SetConfig+0x134>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d023      	beq.n	8005b16 <TIM_OC3_SetConfig+0xe6>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a25      	ldr	r2, [pc, #148]	@ (8005b68 <TIM_OC3_SetConfig+0x138>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d01f      	beq.n	8005b16 <TIM_OC3_SetConfig+0xe6>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a24      	ldr	r2, [pc, #144]	@ (8005b6c <TIM_OC3_SetConfig+0x13c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d01b      	beq.n	8005b16 <TIM_OC3_SetConfig+0xe6>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a23      	ldr	r2, [pc, #140]	@ (8005b70 <TIM_OC3_SetConfig+0x140>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d017      	beq.n	8005b16 <TIM_OC3_SetConfig+0xe6>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a22      	ldr	r2, [pc, #136]	@ (8005b74 <TIM_OC3_SetConfig+0x144>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d013      	beq.n	8005b16 <TIM_OC3_SetConfig+0xe6>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a21      	ldr	r2, [pc, #132]	@ (8005b78 <TIM_OC3_SetConfig+0x148>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d00f      	beq.n	8005b16 <TIM_OC3_SetConfig+0xe6>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a20      	ldr	r2, [pc, #128]	@ (8005b7c <TIM_OC3_SetConfig+0x14c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00b      	beq.n	8005b16 <TIM_OC3_SetConfig+0xe6>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a1f      	ldr	r2, [pc, #124]	@ (8005b80 <TIM_OC3_SetConfig+0x150>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d007      	beq.n	8005b16 <TIM_OC3_SetConfig+0xe6>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a1e      	ldr	r2, [pc, #120]	@ (8005b84 <TIM_OC3_SetConfig+0x154>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d003      	beq.n	8005b16 <TIM_OC3_SetConfig+0xe6>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a1d      	ldr	r2, [pc, #116]	@ (8005b88 <TIM_OC3_SetConfig+0x158>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d113      	bne.n	8005b3e <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	621a      	str	r2, [r3, #32]
}
 8005b58:	bf00      	nop
 8005b5a:	371c      	adds	r7, #28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	40012c00 	.word	0x40012c00
 8005b68:	50012c00 	.word	0x50012c00
 8005b6c:	40013400 	.word	0x40013400
 8005b70:	50013400 	.word	0x50013400
 8005b74:	40014000 	.word	0x40014000
 8005b78:	50014000 	.word	0x50014000
 8005b7c:	40014400 	.word	0x40014400
 8005b80:	50014400 	.word	0x50014400
 8005b84:	40014800 	.word	0x40014800
 8005b88:	50014800 	.word	0x50014800

08005b8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	021b      	lsls	r3, r3, #8
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	031b      	lsls	r3, r3, #12
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a36      	ldr	r2, [pc, #216]	@ (8005cc4 <TIM_OC4_SetConfig+0x138>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d00b      	beq.n	8005c08 <TIM_OC4_SetConfig+0x7c>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a35      	ldr	r2, [pc, #212]	@ (8005cc8 <TIM_OC4_SetConfig+0x13c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d007      	beq.n	8005c08 <TIM_OC4_SetConfig+0x7c>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a34      	ldr	r2, [pc, #208]	@ (8005ccc <TIM_OC4_SetConfig+0x140>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d003      	beq.n	8005c08 <TIM_OC4_SetConfig+0x7c>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a33      	ldr	r2, [pc, #204]	@ (8005cd0 <TIM_OC4_SetConfig+0x144>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d10d      	bne.n	8005c24 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	031b      	lsls	r3, r3, #12
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a27      	ldr	r2, [pc, #156]	@ (8005cc4 <TIM_OC4_SetConfig+0x138>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d023      	beq.n	8005c74 <TIM_OC4_SetConfig+0xe8>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a26      	ldr	r2, [pc, #152]	@ (8005cc8 <TIM_OC4_SetConfig+0x13c>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d01f      	beq.n	8005c74 <TIM_OC4_SetConfig+0xe8>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a25      	ldr	r2, [pc, #148]	@ (8005ccc <TIM_OC4_SetConfig+0x140>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d01b      	beq.n	8005c74 <TIM_OC4_SetConfig+0xe8>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a24      	ldr	r2, [pc, #144]	@ (8005cd0 <TIM_OC4_SetConfig+0x144>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d017      	beq.n	8005c74 <TIM_OC4_SetConfig+0xe8>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a23      	ldr	r2, [pc, #140]	@ (8005cd4 <TIM_OC4_SetConfig+0x148>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d013      	beq.n	8005c74 <TIM_OC4_SetConfig+0xe8>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a22      	ldr	r2, [pc, #136]	@ (8005cd8 <TIM_OC4_SetConfig+0x14c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d00f      	beq.n	8005c74 <TIM_OC4_SetConfig+0xe8>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a21      	ldr	r2, [pc, #132]	@ (8005cdc <TIM_OC4_SetConfig+0x150>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d00b      	beq.n	8005c74 <TIM_OC4_SetConfig+0xe8>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a20      	ldr	r2, [pc, #128]	@ (8005ce0 <TIM_OC4_SetConfig+0x154>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d007      	beq.n	8005c74 <TIM_OC4_SetConfig+0xe8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a1f      	ldr	r2, [pc, #124]	@ (8005ce4 <TIM_OC4_SetConfig+0x158>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d003      	beq.n	8005c74 <TIM_OC4_SetConfig+0xe8>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8005ce8 <TIM_OC4_SetConfig+0x15c>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d113      	bne.n	8005c9c <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c7a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c82:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	695b      	ldr	r3, [r3, #20]
 8005c88:	019b      	lsls	r3, r3, #6
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	019b      	lsls	r3, r3, #6
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	621a      	str	r2, [r3, #32]
}
 8005cb6:	bf00      	nop
 8005cb8:	371c      	adds	r7, #28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	40012c00 	.word	0x40012c00
 8005cc8:	50012c00 	.word	0x50012c00
 8005ccc:	40013400 	.word	0x40013400
 8005cd0:	50013400 	.word	0x50013400
 8005cd4:	40014000 	.word	0x40014000
 8005cd8:	50014000 	.word	0x50014000
 8005cdc:	40014400 	.word	0x40014400
 8005ce0:	50014400 	.word	0x50014400
 8005ce4:	40014800 	.word	0x40014800
 8005ce8:	50014800 	.word	0x50014800

08005cec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005d30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	041b      	lsls	r3, r3, #16
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a21      	ldr	r2, [pc, #132]	@ (8005dc8 <TIM_OC5_SetConfig+0xdc>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d023      	beq.n	8005d8e <TIM_OC5_SetConfig+0xa2>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a20      	ldr	r2, [pc, #128]	@ (8005dcc <TIM_OC5_SetConfig+0xe0>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d01f      	beq.n	8005d8e <TIM_OC5_SetConfig+0xa2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a1f      	ldr	r2, [pc, #124]	@ (8005dd0 <TIM_OC5_SetConfig+0xe4>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d01b      	beq.n	8005d8e <TIM_OC5_SetConfig+0xa2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a1e      	ldr	r2, [pc, #120]	@ (8005dd4 <TIM_OC5_SetConfig+0xe8>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d017      	beq.n	8005d8e <TIM_OC5_SetConfig+0xa2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a1d      	ldr	r2, [pc, #116]	@ (8005dd8 <TIM_OC5_SetConfig+0xec>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d013      	beq.n	8005d8e <TIM_OC5_SetConfig+0xa2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a1c      	ldr	r2, [pc, #112]	@ (8005ddc <TIM_OC5_SetConfig+0xf0>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00f      	beq.n	8005d8e <TIM_OC5_SetConfig+0xa2>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a1b      	ldr	r2, [pc, #108]	@ (8005de0 <TIM_OC5_SetConfig+0xf4>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d00b      	beq.n	8005d8e <TIM_OC5_SetConfig+0xa2>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a1a      	ldr	r2, [pc, #104]	@ (8005de4 <TIM_OC5_SetConfig+0xf8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d007      	beq.n	8005d8e <TIM_OC5_SetConfig+0xa2>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a19      	ldr	r2, [pc, #100]	@ (8005de8 <TIM_OC5_SetConfig+0xfc>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d003      	beq.n	8005d8e <TIM_OC5_SetConfig+0xa2>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a18      	ldr	r2, [pc, #96]	@ (8005dec <TIM_OC5_SetConfig+0x100>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d109      	bne.n	8005da2 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	021b      	lsls	r3, r3, #8
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	621a      	str	r2, [r3, #32]
}
 8005dbc:	bf00      	nop
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	40012c00 	.word	0x40012c00
 8005dcc:	50012c00 	.word	0x50012c00
 8005dd0:	40013400 	.word	0x40013400
 8005dd4:	50013400 	.word	0x50013400
 8005dd8:	40014000 	.word	0x40014000
 8005ddc:	50014000 	.word	0x50014000
 8005de0:	40014400 	.word	0x40014400
 8005de4:	50014400 	.word	0x50014400
 8005de8:	40014800 	.word	0x40014800
 8005dec:	50014800 	.word	0x50014800

08005df0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	021b      	lsls	r3, r3, #8
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	051b      	lsls	r3, r3, #20
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a22      	ldr	r2, [pc, #136]	@ (8005ed0 <TIM_OC6_SetConfig+0xe0>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d023      	beq.n	8005e94 <TIM_OC6_SetConfig+0xa4>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a21      	ldr	r2, [pc, #132]	@ (8005ed4 <TIM_OC6_SetConfig+0xe4>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d01f      	beq.n	8005e94 <TIM_OC6_SetConfig+0xa4>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a20      	ldr	r2, [pc, #128]	@ (8005ed8 <TIM_OC6_SetConfig+0xe8>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d01b      	beq.n	8005e94 <TIM_OC6_SetConfig+0xa4>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8005edc <TIM_OC6_SetConfig+0xec>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d017      	beq.n	8005e94 <TIM_OC6_SetConfig+0xa4>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a1e      	ldr	r2, [pc, #120]	@ (8005ee0 <TIM_OC6_SetConfig+0xf0>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d013      	beq.n	8005e94 <TIM_OC6_SetConfig+0xa4>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a1d      	ldr	r2, [pc, #116]	@ (8005ee4 <TIM_OC6_SetConfig+0xf4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d00f      	beq.n	8005e94 <TIM_OC6_SetConfig+0xa4>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a1c      	ldr	r2, [pc, #112]	@ (8005ee8 <TIM_OC6_SetConfig+0xf8>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00b      	beq.n	8005e94 <TIM_OC6_SetConfig+0xa4>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a1b      	ldr	r2, [pc, #108]	@ (8005eec <TIM_OC6_SetConfig+0xfc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d007      	beq.n	8005e94 <TIM_OC6_SetConfig+0xa4>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a1a      	ldr	r2, [pc, #104]	@ (8005ef0 <TIM_OC6_SetConfig+0x100>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d003      	beq.n	8005e94 <TIM_OC6_SetConfig+0xa4>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a19      	ldr	r2, [pc, #100]	@ (8005ef4 <TIM_OC6_SetConfig+0x104>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d109      	bne.n	8005ea8 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	029b      	lsls	r3, r3, #10
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	621a      	str	r2, [r3, #32]
}
 8005ec2:	bf00      	nop
 8005ec4:	371c      	adds	r7, #28
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	40012c00 	.word	0x40012c00
 8005ed4:	50012c00 	.word	0x50012c00
 8005ed8:	40013400 	.word	0x40013400
 8005edc:	50013400 	.word	0x50013400
 8005ee0:	40014000 	.word	0x40014000
 8005ee4:	50014000 	.word	0x50014000
 8005ee8:	40014400 	.word	0x40014400
 8005eec:	50014400 	.word	0x50014400
 8005ef0:	40014800 	.word	0x40014800
 8005ef4:	50014800 	.word	0x50014800

08005ef8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	f023 0201 	bic.w	r2, r3, #1
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	011b      	lsls	r3, r3, #4
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f023 030a 	bic.w	r3, r3, #10
 8005f34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	621a      	str	r2, [r3, #32]
}
 8005f4a:	bf00      	nop
 8005f4c:	371c      	adds	r7, #28
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b087      	sub	sp, #28
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	60b9      	str	r1, [r7, #8]
 8005f60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	f023 0210 	bic.w	r2, r3, #16
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	031b      	lsls	r3, r3, #12
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	011b      	lsls	r3, r3, #4
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	621a      	str	r2, [r3, #32]
}
 8005faa:	bf00      	nop
 8005fac:	371c      	adds	r7, #28
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b085      	sub	sp, #20
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005fcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	f043 0307 	orr.w	r3, r3, #7
 8005fdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	609a      	str	r2, [r3, #8]
}
 8005fe4:	bf00      	nop
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
 8005ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800600a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	021a      	lsls	r2, r3, #8
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	431a      	orrs	r2, r3
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4313      	orrs	r3, r2
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	4313      	orrs	r3, r2
 800601c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	609a      	str	r2, [r3, #8]
}
 8006024:	bf00      	nop
 8006026:	371c      	adds	r7, #28
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006040:	2b01      	cmp	r3, #1
 8006042:	d101      	bne.n	8006048 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006044:	2302      	movs	r3, #2
 8006046:	e0a1      	b.n	800618c <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a4a      	ldr	r2, [pc, #296]	@ (8006198 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d00e      	beq.n	8006090 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a49      	ldr	r2, [pc, #292]	@ (800619c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d009      	beq.n	8006090 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a47      	ldr	r2, [pc, #284]	@ (80061a0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d004      	beq.n	8006090 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a46      	ldr	r2, [pc, #280]	@ (80061a4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d108      	bne.n	80060a2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006096:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	4313      	orrs	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80060a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a34      	ldr	r2, [pc, #208]	@ (8006198 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d04a      	beq.n	8006160 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a33      	ldr	r2, [pc, #204]	@ (800619c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d045      	beq.n	8006160 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060dc:	d040      	beq.n	8006160 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060e6:	d03b      	beq.n	8006160 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a2e      	ldr	r2, [pc, #184]	@ (80061a8 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d036      	beq.n	8006160 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a2d      	ldr	r2, [pc, #180]	@ (80061ac <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d031      	beq.n	8006160 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a2b      	ldr	r2, [pc, #172]	@ (80061b0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d02c      	beq.n	8006160 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a2a      	ldr	r2, [pc, #168]	@ (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d027      	beq.n	8006160 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a28      	ldr	r2, [pc, #160]	@ (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d022      	beq.n	8006160 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a27      	ldr	r2, [pc, #156]	@ (80061bc <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d01d      	beq.n	8006160 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a1d      	ldr	r2, [pc, #116]	@ (80061a0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d018      	beq.n	8006160 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a1c      	ldr	r2, [pc, #112]	@ (80061a4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d013      	beq.n	8006160 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a20      	ldr	r2, [pc, #128]	@ (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d00e      	beq.n	8006160 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a1f      	ldr	r2, [pc, #124]	@ (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d009      	beq.n	8006160 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a1d      	ldr	r2, [pc, #116]	@ (80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d004      	beq.n	8006160 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a1c      	ldr	r2, [pc, #112]	@ (80061cc <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d10c      	bne.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006166:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	4313      	orrs	r3, r2
 8006170:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	40012c00 	.word	0x40012c00
 800619c:	50012c00 	.word	0x50012c00
 80061a0:	40013400 	.word	0x40013400
 80061a4:	50013400 	.word	0x50013400
 80061a8:	40000400 	.word	0x40000400
 80061ac:	50000400 	.word	0x50000400
 80061b0:	40000800 	.word	0x40000800
 80061b4:	50000800 	.word	0x50000800
 80061b8:	40000c00 	.word	0x40000c00
 80061bc:	50000c00 	.word	0x50000c00
 80061c0:	40001800 	.word	0x40001800
 80061c4:	50001800 	.word	0x50001800
 80061c8:	40014000 	.word	0x40014000
 80061cc:	50014000 	.word	0x50014000

080061d0 <memset>:
 80061d0:	4402      	add	r2, r0
 80061d2:	4603      	mov	r3, r0
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d100      	bne.n	80061da <memset+0xa>
 80061d8:	4770      	bx	lr
 80061da:	f803 1b01 	strb.w	r1, [r3], #1
 80061de:	e7f9      	b.n	80061d4 <memset+0x4>

080061e0 <__libc_init_array>:
 80061e0:	b570      	push	{r4, r5, r6, lr}
 80061e2:	4d0d      	ldr	r5, [pc, #52]	@ (8006218 <__libc_init_array+0x38>)
 80061e4:	2600      	movs	r6, #0
 80061e6:	4c0d      	ldr	r4, [pc, #52]	@ (800621c <__libc_init_array+0x3c>)
 80061e8:	1b64      	subs	r4, r4, r5
 80061ea:	10a4      	asrs	r4, r4, #2
 80061ec:	42a6      	cmp	r6, r4
 80061ee:	d109      	bne.n	8006204 <__libc_init_array+0x24>
 80061f0:	4d0b      	ldr	r5, [pc, #44]	@ (8006220 <__libc_init_array+0x40>)
 80061f2:	2600      	movs	r6, #0
 80061f4:	4c0b      	ldr	r4, [pc, #44]	@ (8006224 <__libc_init_array+0x44>)
 80061f6:	f000 f817 	bl	8006228 <_init>
 80061fa:	1b64      	subs	r4, r4, r5
 80061fc:	10a4      	asrs	r4, r4, #2
 80061fe:	42a6      	cmp	r6, r4
 8006200:	d105      	bne.n	800620e <__libc_init_array+0x2e>
 8006202:	bd70      	pop	{r4, r5, r6, pc}
 8006204:	f855 3b04 	ldr.w	r3, [r5], #4
 8006208:	3601      	adds	r6, #1
 800620a:	4798      	blx	r3
 800620c:	e7ee      	b.n	80061ec <__libc_init_array+0xc>
 800620e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006212:	3601      	adds	r6, #1
 8006214:	4798      	blx	r3
 8006216:	e7f2      	b.n	80061fe <__libc_init_array+0x1e>
 8006218:	08006258 	.word	0x08006258
 800621c:	08006258 	.word	0x08006258
 8006220:	08006258 	.word	0x08006258
 8006224:	0800625c 	.word	0x0800625c

08006228 <_init>:
 8006228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622a:	bf00      	nop
 800622c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800622e:	bc08      	pop	{r3}
 8006230:	469e      	mov	lr, r3
 8006232:	4770      	bx	lr

08006234 <_fini>:
 8006234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006236:	bf00      	nop
 8006238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800623a:	bc08      	pop	{r3}
 800623c:	469e      	mov	lr, r3
 800623e:	4770      	bx	lr
