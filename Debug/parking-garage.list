
parking-garage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c50  08000250  08000250  00001250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08009ea0  08009ea0  0000aea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fd0  08009fd0  0000b078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08009fd0  08009fd0  0000b078  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08009fd0  08009fd0  0000b078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fd0  08009fd0  0000afd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009fd4  08009fd4  0000afd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08009fd8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002db0  20000078  0800a050  0000b078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e28  0800a050  0000be28  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000b078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e378  00000000  00000000  0000b0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e82  00000000  00000000  00029426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a48  00000000  00000000  0002d2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001430  00000000  00000000  0002ecf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035250  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020ecc  00000000  00000000  00065370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014cfac  00000000  00000000  0008623c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d31e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007228  00000000  00000000  001d322c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001da454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000078 	.word	0x20000078
 800026c:	00000000 	.word	0x00000000
 8000270:	08009e88 	.word	0x08009e88

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	2000007c 	.word	0x2000007c
 800028c:	08009e88 	.word	0x08009e88

08000290 <MX_FREERTOS_Init>:
int check_main_capacity();
int check_disabled_capacity();
void update_availability();


void MX_FREERTOS_Init(void) {
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0

  rampControlTaskHandle = osThreadNew(StartRampControlTask, NULL, &rampControlTask_attributes);
 8000294:	4a08      	ldr	r2, [pc, #32]	@ (80002b8 <MX_FREERTOS_Init+0x28>)
 8000296:	2100      	movs	r1, #0
 8000298:	4808      	ldr	r0, [pc, #32]	@ (80002bc <MX_FREERTOS_Init+0x2c>)
 800029a:	f007 f837 	bl	800730c <osThreadNew>
 800029e:	4603      	mov	r3, r0
 80002a0:	4a07      	ldr	r2, [pc, #28]	@ (80002c0 <MX_FREERTOS_Init+0x30>)
 80002a2:	6013      	str	r3, [r2, #0]

  parkingControlTaskHandle = osThreadNew(StartParkingControlTask, NULL, &parkingControlTask_attributes);
 80002a4:	4a07      	ldr	r2, [pc, #28]	@ (80002c4 <MX_FREERTOS_Init+0x34>)
 80002a6:	2100      	movs	r1, #0
 80002a8:	4807      	ldr	r0, [pc, #28]	@ (80002c8 <MX_FREERTOS_Init+0x38>)
 80002aa:	f007 f82f 	bl	800730c <osThreadNew>
 80002ae:	4603      	mov	r3, r0
 80002b0:	4a06      	ldr	r2, [pc, #24]	@ (80002cc <MX_FREERTOS_Init+0x3c>)
 80002b2:	6013      	str	r3, [r2, #0]

}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	08009f38 	.word	0x08009f38
 80002bc:	080002d1 	.word	0x080002d1
 80002c0:	20000094 	.word	0x20000094
 80002c4:	08009f5c 	.word	0x08009f5c
 80002c8:	08000391 	.word	0x08000391
 80002cc:	20000098 	.word	0x20000098

080002d0 <StartRampControlTask>:

void StartRampControlTask(void *argument)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b088      	sub	sp, #32
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	HD44780_Init(2);
 80002d8:	2002      	movs	r0, #2
 80002da:	f000 fd57 	bl	8000d8c <HD44780_Init>
	HD44780_Clear();
 80002de:	f000 fdd9 	bl	8000e94 <HD44780_Clear>
	int updated = 1;
 80002e2:	2301      	movs	r3, #1
 80002e4:	61fb      	str	r3, [r7, #28]
	int total_capacity = 0;
 80002e6:	2300      	movs	r3, #0
 80002e8:	61bb      	str	r3, [r7, #24]
	int r1, old_r1 = 0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]
	int r2 = 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	613b      	str	r3, [r7, #16]

	for(;;)
	{

		r1 = HAL_GPIO_ReadPin(GPIOG, RAMP_ENTER_Pin);
 80002f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002f6:	4821      	ldr	r0, [pc, #132]	@ (800037c <StartRampControlTask+0xac>)
 80002f8:	f001 fd52 	bl	8001da0 <HAL_GPIO_ReadPin>
 80002fc:	4603      	mov	r3, r0
 80002fe:	60fb      	str	r3, [r7, #12]
		r2 = HAL_GPIO_ReadPin(GPIOB, RAMP_EXIT_Pin);
 8000300:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000304:	481e      	ldr	r0, [pc, #120]	@ (8000380 <StartRampControlTask+0xb0>)
 8000306:	f001 fd4b 	bl	8001da0 <HAL_GPIO_ReadPin>
 800030a:	4603      	mov	r3, r0
 800030c:	613b      	str	r3, [r7, #16]

		if(updated)
 800030e:	69fb      	ldr	r3, [r7, #28]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d003      	beq.n	800031c <StartRampControlTask+0x4c>
		{
			update_availability();
 8000314:	f000 f862 	bl	80003dc <update_availability>

			updated = 0;
 8000318:	2300      	movs	r3, #0
 800031a:	61fb      	str	r3, [r7, #28]
		}

		if((r1==1) && (old_r1 != r1))
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d119      	bne.n	8000356 <StartRampControlTask+0x86>
 8000322:	697a      	ldr	r2, [r7, #20]
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	429a      	cmp	r2, r3
 8000328:	d015      	beq.n	8000356 <StartRampControlTask+0x86>
		{
			if(total_capacity == 12)
 800032a:	69bb      	ldr	r3, [r7, #24]
 800032c:	2b0c      	cmp	r3, #12
 800032e:	d105      	bne.n	800033c <StartRampControlTask+0x6c>
			{
				HD44780_Clear();
 8000330:	f000 fdb0 	bl	8000e94 <HD44780_Clear>
				HD44780_PrintStr("Parking full");
 8000334:	4813      	ldr	r0, [pc, #76]	@ (8000384 <StartRampControlTask+0xb4>)
 8000336:	f000 fe35 	bl	8000fa4 <HD44780_PrintStr>
 800033a:	e00c      	b.n	8000356 <StartRampControlTask+0x86>
			} else
			{
				HD44780_Clear();
 800033c:	f000 fdaa 	bl	8000e94 <HD44780_Clear>
				HD44780_PrintStr("Welcome.");
 8000340:	4811      	ldr	r0, [pc, #68]	@ (8000388 <StartRampControlTask+0xb8>)
 8000342:	f000 fe2f 	bl	8000fa4 <HD44780_PrintStr>

				raise_ramp(TIM_CHANNEL_1);
 8000346:	2000      	movs	r0, #0
 8000348:	f000 fa72 	bl	8000830 <raise_ramp>
				total_capacity++;
 800034c:	69bb      	ldr	r3, [r7, #24]
 800034e:	3301      	adds	r3, #1
 8000350:	61bb      	str	r3, [r7, #24]
				updated = 1;
 8000352:	2301      	movs	r3, #1
 8000354:	61fb      	str	r3, [r7, #28]
			}
		}
		old_r1 = r1;
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	617b      	str	r3, [r7, #20]

		if(r2==1)
 800035a:	693b      	ldr	r3, [r7, #16]
 800035c:	2b01      	cmp	r3, #1
 800035e:	d1c8      	bne.n	80002f2 <StartRampControlTask+0x22>
		{
			HD44780_Clear();
 8000360:	f000 fd98 	bl	8000e94 <HD44780_Clear>
			HD44780_PrintStr("Goodbye.");
 8000364:	4809      	ldr	r0, [pc, #36]	@ (800038c <StartRampControlTask+0xbc>)
 8000366:	f000 fe1d 	bl	8000fa4 <HD44780_PrintStr>

			raise_ramp(TIM_CHANNEL_2);
 800036a:	2004      	movs	r0, #4
 800036c:	f000 fa60 	bl	8000830 <raise_ramp>
			total_capacity--;
 8000370:	69bb      	ldr	r3, [r7, #24]
 8000372:	3b01      	subs	r3, #1
 8000374:	61bb      	str	r3, [r7, #24]
			updated = 1;
 8000376:	2301      	movs	r3, #1
 8000378:	61fb      	str	r3, [r7, #28]
		r1 = HAL_GPIO_ReadPin(GPIOG, RAMP_ENTER_Pin);
 800037a:	e7ba      	b.n	80002f2 <StartRampControlTask+0x22>
 800037c:	42021800 	.word	0x42021800
 8000380:	42020400 	.word	0x42020400
 8000384:	08009ec4 	.word	0x08009ec4
 8000388:	08009ed4 	.word	0x08009ed4
 800038c:	08009ee0 	.word	0x08009ee0

08000390 <StartParkingControlTask>:
	}

}

void StartParkingControlTask(void *argument)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		osDelay(10);
 8000398:	200a      	movs	r0, #10
 800039a:	f007 f848 	bl	800742e <osDelay>
		int new_main_capacity = check_main_capacity();
 800039e:	f000 f89f 	bl	80004e0 <check_main_capacity>
 80003a2:	60f8      	str	r0, [r7, #12]
		if(new_main_capacity != main_capacity)
 80003a4:	4b0b      	ldr	r3, [pc, #44]	@ (80003d4 <StartParkingControlTask+0x44>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	68fa      	ldr	r2, [r7, #12]
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d004      	beq.n	80003b8 <StartParkingControlTask+0x28>
		{
			main_capacity = new_main_capacity;
 80003ae:	4a09      	ldr	r2, [pc, #36]	@ (80003d4 <StartParkingControlTask+0x44>)
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	6013      	str	r3, [r2, #0]
			update_availability();
 80003b4:	f000 f812 	bl	80003dc <update_availability>
		}

		int new_disabled_capacity = check_disabled_capacity();
 80003b8:	f000 f838 	bl	800042c <check_disabled_capacity>
 80003bc:	60b8      	str	r0, [r7, #8]
		if(new_disabled_capacity != disabled_capacity)
 80003be:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <StartParkingControlTask+0x48>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	68ba      	ldr	r2, [r7, #8]
 80003c4:	429a      	cmp	r2, r3
 80003c6:	d0e7      	beq.n	8000398 <StartParkingControlTask+0x8>
		{
			disabled_capacity = new_disabled_capacity;
 80003c8:	4a03      	ldr	r2, [pc, #12]	@ (80003d8 <StartParkingControlTask+0x48>)
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	6013      	str	r3, [r2, #0]
			update_availability();
 80003ce:	f000 f805 	bl	80003dc <update_availability>
	{
 80003d2:	e7e1      	b.n	8000398 <StartParkingControlTask+0x8>
 80003d4:	20000000 	.word	0x20000000
 80003d8:	20000004 	.word	0x20000004

080003dc <update_availability>:
	}

}

void update_availability()
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	snprintf(string_out, sizeof(string_out), "Main Lot: %d", main_capacity);
 80003e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000418 <update_availability+0x3c>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a0d      	ldr	r2, [pc, #52]	@ (800041c <update_availability+0x40>)
 80003e6:	2110      	movs	r1, #16
 80003e8:	480d      	ldr	r0, [pc, #52]	@ (8000420 <update_availability+0x44>)
 80003ea:	f009 f887 	bl	80094fc <sniprintf>
	HD44780_Clear();
 80003ee:	f000 fd51 	bl	8000e94 <HD44780_Clear>
	HD44780_PrintStr(string_out);
 80003f2:	480b      	ldr	r0, [pc, #44]	@ (8000420 <update_availability+0x44>)
 80003f4:	f000 fdd6 	bl	8000fa4 <HD44780_PrintStr>
	HD44780_SetCursor(0, 1);
 80003f8:	2101      	movs	r1, #1
 80003fa:	2000      	movs	r0, #0
 80003fc:	f000 fd60 	bl	8000ec0 <HD44780_SetCursor>
	snprintf(string_out, sizeof(string_out), "Disabled Lot: %d", disabled_capacity);
 8000400:	4b08      	ldr	r3, [pc, #32]	@ (8000424 <update_availability+0x48>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a08      	ldr	r2, [pc, #32]	@ (8000428 <update_availability+0x4c>)
 8000406:	2110      	movs	r1, #16
 8000408:	4805      	ldr	r0, [pc, #20]	@ (8000420 <update_availability+0x44>)
 800040a:	f009 f877 	bl	80094fc <sniprintf>
	HD44780_PrintStr(string_out);
 800040e:	4804      	ldr	r0, [pc, #16]	@ (8000420 <update_availability+0x44>)
 8000410:	f000 fdc8 	bl	8000fa4 <HD44780_PrintStr>
}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20000000 	.word	0x20000000
 800041c:	08009eec 	.word	0x08009eec
 8000420:	2000009c 	.word	0x2000009c
 8000424:	20000004 	.word	0x20000004
 8000428:	08009efc 	.word	0x08009efc

0800042c <check_disabled_capacity>:

int check_disabled_capacity()
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
	int capacity = 2;
 8000432:	2302      	movs	r3, #2
 8000434:	60fb      	str	r3, [r7, #12]
	int p11 = HAL_GPIO_ReadPin(GPIOG, P11_Pin);
 8000436:	2102      	movs	r1, #2
 8000438:	4826      	ldr	r0, [pc, #152]	@ (80004d4 <check_disabled_capacity+0xa8>)
 800043a:	f001 fcb1 	bl	8001da0 <HAL_GPIO_ReadPin>
 800043e:	4603      	mov	r3, r0
 8000440:	60bb      	str	r3, [r7, #8]
	if(p11==1)
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	2b01      	cmp	r3, #1
 8000446:	d10d      	bne.n	8000464 <check_disabled_capacity+0x38>
	{
		HAL_GPIO_WritePin(GPIOG, P11_R_Pin, 1);
 8000448:	2201      	movs	r2, #1
 800044a:	2101      	movs	r1, #1
 800044c:	4821      	ldr	r0, [pc, #132]	@ (80004d4 <check_disabled_capacity+0xa8>)
 800044e:	f001 fcbf 	bl	8001dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, P11_G_Pin, 0);
 8000452:	2200      	movs	r2, #0
 8000454:	2102      	movs	r1, #2
 8000456:	4820      	ldr	r0, [pc, #128]	@ (80004d8 <check_disabled_capacity+0xac>)
 8000458:	f001 fcba 	bl	8001dd0 <HAL_GPIO_WritePin>
		capacity--;
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	3b01      	subs	r3, #1
 8000460:	60fb      	str	r3, [r7, #12]
 8000462:	e00c      	b.n	800047e <check_disabled_capacity+0x52>
	}
	else if(p11==0)
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d109      	bne.n	800047e <check_disabled_capacity+0x52>
	{
		HAL_GPIO_WritePin(GPIOD, P11_G_Pin, 1);
 800046a:	2201      	movs	r2, #1
 800046c:	2102      	movs	r1, #2
 800046e:	481a      	ldr	r0, [pc, #104]	@ (80004d8 <check_disabled_capacity+0xac>)
 8000470:	f001 fcae 	bl	8001dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, P11_R_Pin, 0);
 8000474:	2200      	movs	r2, #0
 8000476:	2101      	movs	r1, #1
 8000478:	4816      	ldr	r0, [pc, #88]	@ (80004d4 <check_disabled_capacity+0xa8>)
 800047a:	f001 fca9 	bl	8001dd0 <HAL_GPIO_WritePin>
	}

	int p12 = HAL_GPIO_ReadPin(GPIOD, P12_Pin);
 800047e:	2101      	movs	r1, #1
 8000480:	4815      	ldr	r0, [pc, #84]	@ (80004d8 <check_disabled_capacity+0xac>)
 8000482:	f001 fc8d 	bl	8001da0 <HAL_GPIO_ReadPin>
 8000486:	4603      	mov	r3, r0
 8000488:	607b      	str	r3, [r7, #4]
	if(p12==1)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d10e      	bne.n	80004ae <check_disabled_capacity+0x82>
	{
		HAL_GPIO_WritePin(GPIOF, P12_R_Pin, 1);
 8000490:	2201      	movs	r2, #1
 8000492:	2180      	movs	r1, #128	@ 0x80
 8000494:	4811      	ldr	r0, [pc, #68]	@ (80004dc <check_disabled_capacity+0xb0>)
 8000496:	f001 fc9b 	bl	8001dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, P12_G_Pin, 0);
 800049a:	2200      	movs	r2, #0
 800049c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004a0:	480e      	ldr	r0, [pc, #56]	@ (80004dc <check_disabled_capacity+0xb0>)
 80004a2:	f001 fc95 	bl	8001dd0 <HAL_GPIO_WritePin>
		capacity--;
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	3b01      	subs	r3, #1
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	e00d      	b.n	80004ca <check_disabled_capacity+0x9e>
	}
	else if(p12==0)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d10a      	bne.n	80004ca <check_disabled_capacity+0x9e>
	{
		HAL_GPIO_WritePin(GPIOF, P12_G_Pin, 1);
 80004b4:	2201      	movs	r2, #1
 80004b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004ba:	4808      	ldr	r0, [pc, #32]	@ (80004dc <check_disabled_capacity+0xb0>)
 80004bc:	f001 fc88 	bl	8001dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, P12_R_Pin, 0);
 80004c0:	2200      	movs	r2, #0
 80004c2:	2180      	movs	r1, #128	@ 0x80
 80004c4:	4805      	ldr	r0, [pc, #20]	@ (80004dc <check_disabled_capacity+0xb0>)
 80004c6:	f001 fc83 	bl	8001dd0 <HAL_GPIO_WritePin>
	}

	return capacity;
 80004ca:	68fb      	ldr	r3, [r7, #12]
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	3710      	adds	r7, #16
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	42021800 	.word	0x42021800
 80004d8:	42020c00 	.word	0x42020c00
 80004dc:	42021400 	.word	0x42021400

080004e0 <check_main_capacity>:

int check_main_capacity()
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08c      	sub	sp, #48	@ 0x30
 80004e4:	af00      	add	r7, sp, #0
	int capacity = 10;
 80004e6:	230a      	movs	r3, #10
 80004e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	int p1 = HAL_GPIO_ReadPin(GPIOE, P1_Pin);
 80004ea:	2101      	movs	r1, #1
 80004ec:	48a8      	ldr	r0, [pc, #672]	@ (8000790 <check_main_capacity+0x2b0>)
 80004ee:	f001 fc57 	bl	8001da0 <HAL_GPIO_ReadPin>
 80004f2:	4603      	mov	r3, r0
 80004f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	if(p1==1)
 80004f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d10e      	bne.n	800051a <check_main_capacity+0x3a>
	{
		HAL_GPIO_WritePin(GPIOB, P1_R_Pin, 1);
 80004fc:	2201      	movs	r2, #1
 80004fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000502:	48a4      	ldr	r0, [pc, #656]	@ (8000794 <check_main_capacity+0x2b4>)
 8000504:	f001 fc64 	bl	8001dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, P1_G_Pin, 0);
 8000508:	2200      	movs	r2, #0
 800050a:	2108      	movs	r1, #8
 800050c:	48a2      	ldr	r0, [pc, #648]	@ (8000798 <check_main_capacity+0x2b8>)
 800050e:	f001 fc5f 	bl	8001dd0 <HAL_GPIO_WritePin>
		capacity--;
 8000512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000514:	3b01      	subs	r3, #1
 8000516:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000518:	e00d      	b.n	8000536 <check_main_capacity+0x56>
	}
	else if(p1==0)
 800051a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800051c:	2b00      	cmp	r3, #0
 800051e:	d10a      	bne.n	8000536 <check_main_capacity+0x56>
	{
		HAL_GPIO_WritePin(GPIOB, P1_R_Pin, 0);
 8000520:	2200      	movs	r2, #0
 8000522:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000526:	489b      	ldr	r0, [pc, #620]	@ (8000794 <check_main_capacity+0x2b4>)
 8000528:	f001 fc52 	bl	8001dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, P1_G_Pin, 1);
 800052c:	2201      	movs	r2, #1
 800052e:	2108      	movs	r1, #8
 8000530:	4899      	ldr	r0, [pc, #612]	@ (8000798 <check_main_capacity+0x2b8>)
 8000532:	f001 fc4d 	bl	8001dd0 <HAL_GPIO_WritePin>
	}

	int p2 = HAL_GPIO_ReadPin(GPIOB, P2_Pin);
 8000536:	2101      	movs	r1, #1
 8000538:	4896      	ldr	r0, [pc, #600]	@ (8000794 <check_main_capacity+0x2b4>)
 800053a:	f001 fc31 	bl	8001da0 <HAL_GPIO_ReadPin>
 800053e:	4603      	mov	r3, r0
 8000540:	627b      	str	r3, [r7, #36]	@ 0x24
	if(p2==1)
 8000542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000544:	2b01      	cmp	r3, #1
 8000546:	d10e      	bne.n	8000566 <check_main_capacity+0x86>
	{
		HAL_GPIO_WritePin(GPIOA, P2_R_Pin, 1);
 8000548:	2201      	movs	r2, #1
 800054a:	2101      	movs	r1, #1
 800054c:	4892      	ldr	r0, [pc, #584]	@ (8000798 <check_main_capacity+0x2b8>)
 800054e:	f001 fc3f 	bl	8001dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P2_G_Pin, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000558:	488d      	ldr	r0, [pc, #564]	@ (8000790 <check_main_capacity+0x2b0>)
 800055a:	f001 fc39 	bl	8001dd0 <HAL_GPIO_WritePin>
		capacity--;
 800055e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000560:	3b01      	subs	r3, #1
 8000562:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000564:	e00d      	b.n	8000582 <check_main_capacity+0xa2>
	}
	else if(p2==0)
 8000566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000568:	2b00      	cmp	r3, #0
 800056a:	d10a      	bne.n	8000582 <check_main_capacity+0xa2>
	{
		HAL_GPIO_WritePin(GPIOE, P2_G_Pin, 1);
 800056c:	2201      	movs	r2, #1
 800056e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000572:	4887      	ldr	r0, [pc, #540]	@ (8000790 <check_main_capacity+0x2b0>)
 8000574:	f001 fc2c 	bl	8001dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, P2_R_Pin, 0);
 8000578:	2200      	movs	r2, #0
 800057a:	2101      	movs	r1, #1
 800057c:	4886      	ldr	r0, [pc, #536]	@ (8000798 <check_main_capacity+0x2b8>)
 800057e:	f001 fc27 	bl	8001dd0 <HAL_GPIO_WritePin>
	}

	int p3 = HAL_GPIO_ReadPin(GPIOD, P3_Pin);
 8000582:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000586:	4885      	ldr	r0, [pc, #532]	@ (800079c <check_main_capacity+0x2bc>)
 8000588:	f001 fc0a 	bl	8001da0 <HAL_GPIO_ReadPin>
 800058c:	4603      	mov	r3, r0
 800058e:	623b      	str	r3, [r7, #32]
	if(p3==1)
 8000590:	6a3b      	ldr	r3, [r7, #32]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d10e      	bne.n	80005b4 <check_main_capacity+0xd4>
	{
		HAL_GPIO_WritePin(GPIOE, P3_R_Pin, 1);
 8000596:	2201      	movs	r2, #1
 8000598:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800059c:	487c      	ldr	r0, [pc, #496]	@ (8000790 <check_main_capacity+0x2b0>)
 800059e:	f001 fc17 	bl	8001dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P3_G_Pin, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2140      	movs	r1, #64	@ 0x40
 80005a6:	487a      	ldr	r0, [pc, #488]	@ (8000790 <check_main_capacity+0x2b0>)
 80005a8:	f001 fc12 	bl	8001dd0 <HAL_GPIO_WritePin>
		capacity--;
 80005ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005ae:	3b01      	subs	r3, #1
 80005b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80005b2:	e00d      	b.n	80005d0 <check_main_capacity+0xf0>
	}
	else if(p3==0)
 80005b4:	6a3b      	ldr	r3, [r7, #32]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d10a      	bne.n	80005d0 <check_main_capacity+0xf0>
	{
		HAL_GPIO_WritePin(GPIOE, P3_G_Pin, 1);
 80005ba:	2201      	movs	r2, #1
 80005bc:	2140      	movs	r1, #64	@ 0x40
 80005be:	4874      	ldr	r0, [pc, #464]	@ (8000790 <check_main_capacity+0x2b0>)
 80005c0:	f001 fc06 	bl	8001dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P3_R_Pin, 0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005ca:	4871      	ldr	r0, [pc, #452]	@ (8000790 <check_main_capacity+0x2b0>)
 80005cc:	f001 fc00 	bl	8001dd0 <HAL_GPIO_WritePin>
	}

	int p4 = HAL_GPIO_ReadPin(GPIOD, P4_Pin);
 80005d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005d4:	4871      	ldr	r0, [pc, #452]	@ (800079c <check_main_capacity+0x2bc>)
 80005d6:	f001 fbe3 	bl	8001da0 <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
 80005dc:	61fb      	str	r3, [r7, #28]
	if(p4==1)
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d10e      	bne.n	8000602 <check_main_capacity+0x122>
	{
		HAL_GPIO_WritePin(GPIOE, P4_R_Pin, 1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2180      	movs	r1, #128	@ 0x80
 80005e8:	4869      	ldr	r0, [pc, #420]	@ (8000790 <check_main_capacity+0x2b0>)
 80005ea:	f001 fbf1 	bl	8001dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P4_G_Pin, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005f4:	4866      	ldr	r0, [pc, #408]	@ (8000790 <check_main_capacity+0x2b0>)
 80005f6:	f001 fbeb 	bl	8001dd0 <HAL_GPIO_WritePin>
		capacity--;
 80005fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005fc:	3b01      	subs	r3, #1
 80005fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000600:	e00d      	b.n	800061e <check_main_capacity+0x13e>
	}
	else if(p4==0)
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d10a      	bne.n	800061e <check_main_capacity+0x13e>
	{
		HAL_GPIO_WritePin(GPIOE, P4_G_Pin, 1);
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800060e:	4860      	ldr	r0, [pc, #384]	@ (8000790 <check_main_capacity+0x2b0>)
 8000610:	f001 fbde 	bl	8001dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P4_R_Pin, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	2180      	movs	r1, #128	@ 0x80
 8000618:	485d      	ldr	r0, [pc, #372]	@ (8000790 <check_main_capacity+0x2b0>)
 800061a:	f001 fbd9 	bl	8001dd0 <HAL_GPIO_WritePin>
	}

	int p5 = HAL_GPIO_ReadPin(GPIOB, P5_Pin);
 800061e:	2104      	movs	r1, #4
 8000620:	485c      	ldr	r0, [pc, #368]	@ (8000794 <check_main_capacity+0x2b4>)
 8000622:	f001 fbbd 	bl	8001da0 <HAL_GPIO_ReadPin>
 8000626:	4603      	mov	r3, r0
 8000628:	61bb      	str	r3, [r7, #24]
	if(p5==1)
 800062a:	69bb      	ldr	r3, [r7, #24]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d10f      	bne.n	8000650 <check_main_capacity+0x170>
	{
		HAL_GPIO_WritePin(GPIOD, P5_R_Pin, 1);
 8000630:	2201      	movs	r2, #1
 8000632:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000636:	4859      	ldr	r0, [pc, #356]	@ (800079c <check_main_capacity+0x2bc>)
 8000638:	f001 fbca 	bl	8001dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P5_G_Pin, 0);
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000642:	4853      	ldr	r0, [pc, #332]	@ (8000790 <check_main_capacity+0x2b0>)
 8000644:	f001 fbc4 	bl	8001dd0 <HAL_GPIO_WritePin>
		capacity--;
 8000648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800064a:	3b01      	subs	r3, #1
 800064c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800064e:	e00e      	b.n	800066e <check_main_capacity+0x18e>
	}
	else if(p5==0)
 8000650:	69bb      	ldr	r3, [r7, #24]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d10b      	bne.n	800066e <check_main_capacity+0x18e>
	{
		HAL_GPIO_WritePin(GPIOE, P5_G_Pin, 1);
 8000656:	2201      	movs	r2, #1
 8000658:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800065c:	484c      	ldr	r0, [pc, #304]	@ (8000790 <check_main_capacity+0x2b0>)
 800065e:	f001 fbb7 	bl	8001dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, P5_R_Pin, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000668:	484c      	ldr	r0, [pc, #304]	@ (800079c <check_main_capacity+0x2bc>)
 800066a:	f001 fbb1 	bl	8001dd0 <HAL_GPIO_WritePin>
	}

	int p6 = HAL_GPIO_ReadPin(GPIOB, P6_Pin);
 800066e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000672:	4848      	ldr	r0, [pc, #288]	@ (8000794 <check_main_capacity+0x2b4>)
 8000674:	f001 fb94 	bl	8001da0 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	617b      	str	r3, [r7, #20]
	if(p6==1)
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d10e      	bne.n	80006a0 <check_main_capacity+0x1c0>
	{
		HAL_GPIO_WritePin(GPIOB, P6_R_Pin, 1);
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000688:	4842      	ldr	r0, [pc, #264]	@ (8000794 <check_main_capacity+0x2b4>)
 800068a:	f001 fba1 	bl	8001dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, P6_G_Pin, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2120      	movs	r1, #32
 8000692:	4841      	ldr	r0, [pc, #260]	@ (8000798 <check_main_capacity+0x2b8>)
 8000694:	f001 fb9c 	bl	8001dd0 <HAL_GPIO_WritePin>
		capacity--;
 8000698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800069a:	3b01      	subs	r3, #1
 800069c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800069e:	e00d      	b.n	80006bc <check_main_capacity+0x1dc>
	}
	else if(p6==0)
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d10a      	bne.n	80006bc <check_main_capacity+0x1dc>
	{
		HAL_GPIO_WritePin(GPIOA, P6_G_Pin, 1);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2120      	movs	r1, #32
 80006aa:	483b      	ldr	r0, [pc, #236]	@ (8000798 <check_main_capacity+0x2b8>)
 80006ac:	f001 fb90 	bl	8001dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, P6_R_Pin, 0);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006b6:	4837      	ldr	r0, [pc, #220]	@ (8000794 <check_main_capacity+0x2b4>)
 80006b8:	f001 fb8a 	bl	8001dd0 <HAL_GPIO_WritePin>
	}

	int p7 = HAL_GPIO_ReadPin(GPIOF, P7_Pin);
 80006bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006c0:	4837      	ldr	r0, [pc, #220]	@ (80007a0 <check_main_capacity+0x2c0>)
 80006c2:	f001 fb6d 	bl	8001da0 <HAL_GPIO_ReadPin>
 80006c6:	4603      	mov	r3, r0
 80006c8:	613b      	str	r3, [r7, #16]
	if(p7==1)
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d10e      	bne.n	80006ee <check_main_capacity+0x20e>
	{
		HAL_GPIO_WritePin(GPIOF, P7_R_Pin, 1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006d6:	4832      	ldr	r0, [pc, #200]	@ (80007a0 <check_main_capacity+0x2c0>)
 80006d8:	f001 fb7a 	bl	8001dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, P7_G_Pin, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2140      	movs	r1, #64	@ 0x40
 80006e0:	4830      	ldr	r0, [pc, #192]	@ (80007a4 <check_main_capacity+0x2c4>)
 80006e2:	f001 fb75 	bl	8001dd0 <HAL_GPIO_WritePin>
		capacity--;
 80006e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006e8:	3b01      	subs	r3, #1
 80006ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006ec:	e00d      	b.n	800070a <check_main_capacity+0x22a>
	}
	else if(p7==0)
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d10a      	bne.n	800070a <check_main_capacity+0x22a>
	{
		HAL_GPIO_WritePin(GPIOG, P7_G_Pin, 1);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2140      	movs	r1, #64	@ 0x40
 80006f8:	482a      	ldr	r0, [pc, #168]	@ (80007a4 <check_main_capacity+0x2c4>)
 80006fa:	f001 fb69 	bl	8001dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, P7_R_Pin, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000704:	4826      	ldr	r0, [pc, #152]	@ (80007a0 <check_main_capacity+0x2c0>)
 8000706:	f001 fb63 	bl	8001dd0 <HAL_GPIO_WritePin>
	}

	int p8 = HAL_GPIO_ReadPin(GPIOE, P8_Pin);
 800070a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800070e:	4820      	ldr	r0, [pc, #128]	@ (8000790 <check_main_capacity+0x2b0>)
 8000710:	f001 fb46 	bl	8001da0 <HAL_GPIO_ReadPin>
 8000714:	4603      	mov	r3, r0
 8000716:	60fb      	str	r3, [r7, #12]
	if(p8==1)
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d10f      	bne.n	800073e <check_main_capacity+0x25e>
	{
		HAL_GPIO_WritePin(GPIOE, P8_R_Pin, 1);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000724:	481a      	ldr	r0, [pc, #104]	@ (8000790 <check_main_capacity+0x2b0>)
 8000726:	f001 fb53 	bl	8001dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, P8_G_Pin, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000730:	481c      	ldr	r0, [pc, #112]	@ (80007a4 <check_main_capacity+0x2c4>)
 8000732:	f001 fb4d 	bl	8001dd0 <HAL_GPIO_WritePin>
		capacity--;
 8000736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000738:	3b01      	subs	r3, #1
 800073a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800073c:	e00e      	b.n	800075c <check_main_capacity+0x27c>
	}
	else if(p8==0)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d10b      	bne.n	800075c <check_main_capacity+0x27c>
	{
		HAL_GPIO_WritePin(GPIOG, P8_G_Pin, 1);
 8000744:	2201      	movs	r2, #1
 8000746:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800074a:	4816      	ldr	r0, [pc, #88]	@ (80007a4 <check_main_capacity+0x2c4>)
 800074c:	f001 fb40 	bl	8001dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P8_R_Pin, 0);
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000756:	480e      	ldr	r0, [pc, #56]	@ (8000790 <check_main_capacity+0x2b0>)
 8000758:	f001 fb3a 	bl	8001dd0 <HAL_GPIO_WritePin>
	}

	int p9 = HAL_GPIO_ReadPin(GPIOE, P9_Pin);
 800075c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000760:	480b      	ldr	r0, [pc, #44]	@ (8000790 <check_main_capacity+0x2b0>)
 8000762:	f001 fb1d 	bl	8001da0 <HAL_GPIO_ReadPin>
 8000766:	4603      	mov	r3, r0
 8000768:	60bb      	str	r3, [r7, #8]
	if(p9==1)
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d11b      	bne.n	80007a8 <check_main_capacity+0x2c8>
	{
		HAL_GPIO_WritePin(GPIOE, P9_R_Pin, 1);
 8000770:	2201      	movs	r2, #1
 8000772:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000776:	4806      	ldr	r0, [pc, #24]	@ (8000790 <check_main_capacity+0x2b0>)
 8000778:	f001 fb2a 	bl	8001dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, P9_G_Pin, 0);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000782:	4808      	ldr	r0, [pc, #32]	@ (80007a4 <check_main_capacity+0x2c4>)
 8000784:	f001 fb24 	bl	8001dd0 <HAL_GPIO_WritePin>
		capacity--;
 8000788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800078a:	3b01      	subs	r3, #1
 800078c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800078e:	e01a      	b.n	80007c6 <check_main_capacity+0x2e6>
 8000790:	42021000 	.word	0x42021000
 8000794:	42020400 	.word	0x42020400
 8000798:	42020000 	.word	0x42020000
 800079c:	42020c00 	.word	0x42020c00
 80007a0:	42021400 	.word	0x42021400
 80007a4:	42021800 	.word	0x42021800
	}
	else if(p9==0)
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d10b      	bne.n	80007c6 <check_main_capacity+0x2e6>
	{
		HAL_GPIO_WritePin(GPIOG, P9_G_Pin, 1);
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007b4:	481a      	ldr	r0, [pc, #104]	@ (8000820 <check_main_capacity+0x340>)
 80007b6:	f001 fb0b 	bl	8001dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P9_R_Pin, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007c0:	4818      	ldr	r0, [pc, #96]	@ (8000824 <check_main_capacity+0x344>)
 80007c2:	f001 fb05 	bl	8001dd0 <HAL_GPIO_WritePin>
	}

	int p10 = HAL_GPIO_ReadPin(GPIOF, P10_Pin);
 80007c6:	2108      	movs	r1, #8
 80007c8:	4817      	ldr	r0, [pc, #92]	@ (8000828 <check_main_capacity+0x348>)
 80007ca:	f001 fae9 	bl	8001da0 <HAL_GPIO_ReadPin>
 80007ce:	4603      	mov	r3, r0
 80007d0:	607b      	str	r3, [r7, #4]
	if(p10==1)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d10f      	bne.n	80007f8 <check_main_capacity+0x318>
	{
		HAL_GPIO_WritePin(GPIOD, P10_R_Pin, 1);
 80007d8:	2201      	movs	r2, #1
 80007da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007de:	4813      	ldr	r0, [pc, #76]	@ (800082c <check_main_capacity+0x34c>)
 80007e0:	f001 faf6 	bl	8001dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, P10_G_Pin, 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007ea:	4810      	ldr	r0, [pc, #64]	@ (800082c <check_main_capacity+0x34c>)
 80007ec:	f001 faf0 	bl	8001dd0 <HAL_GPIO_WritePin>
		capacity--;
 80007f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007f2:	3b01      	subs	r3, #1
 80007f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007f6:	e00e      	b.n	8000816 <check_main_capacity+0x336>
	}
	else if(p10==0)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10b      	bne.n	8000816 <check_main_capacity+0x336>
	{
		HAL_GPIO_WritePin(GPIOD, P10_G_Pin, 1);
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000804:	4809      	ldr	r0, [pc, #36]	@ (800082c <check_main_capacity+0x34c>)
 8000806:	f001 fae3 	bl	8001dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, P10_R_Pin, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000810:	4806      	ldr	r0, [pc, #24]	@ (800082c <check_main_capacity+0x34c>)
 8000812:	f001 fadd 	bl	8001dd0 <HAL_GPIO_WritePin>
	}

	return capacity;
 8000816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000818:	4618      	mov	r0, r3
 800081a:	3730      	adds	r7, #48	@ 0x30
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	42021800 	.word	0x42021800
 8000824:	42021000 	.word	0x42021000
 8000828:	42021400 	.word	0x42021400
 800082c:	42020c00 	.word	0x42020c00

08000830 <raise_ramp>:

void raise_ramp(char channel)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
	int x = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
	for(x=750; x>250; x=x-1)
 800083e:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	e031      	b.n	80008aa <raise_ramp+0x7a>
	{
		__HAL_TIM_SET_COMPARE(&htim3,channel, x);
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d104      	bne.n	8000856 <raise_ramp+0x26>
 800084c:	4b3a      	ldr	r3, [pc, #232]	@ (8000938 <raise_ramp+0x108>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	68fa      	ldr	r2, [r7, #12]
 8000852:	635a      	str	r2, [r3, #52]	@ 0x34
 8000854:	e023      	b.n	800089e <raise_ramp+0x6e>
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	2b04      	cmp	r3, #4
 800085a:	d104      	bne.n	8000866 <raise_ramp+0x36>
 800085c:	4b36      	ldr	r3, [pc, #216]	@ (8000938 <raise_ramp+0x108>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	6393      	str	r3, [r2, #56]	@ 0x38
 8000864:	e01b      	b.n	800089e <raise_ramp+0x6e>
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2b08      	cmp	r3, #8
 800086a:	d104      	bne.n	8000876 <raise_ramp+0x46>
 800086c:	4b32      	ldr	r3, [pc, #200]	@ (8000938 <raise_ramp+0x108>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000874:	e013      	b.n	800089e <raise_ramp+0x6e>
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	2b0c      	cmp	r3, #12
 800087a:	d104      	bne.n	8000886 <raise_ramp+0x56>
 800087c:	4b2e      	ldr	r3, [pc, #184]	@ (8000938 <raise_ramp+0x108>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	6413      	str	r3, [r2, #64]	@ 0x40
 8000884:	e00b      	b.n	800089e <raise_ramp+0x6e>
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	2b10      	cmp	r3, #16
 800088a:	d104      	bne.n	8000896 <raise_ramp+0x66>
 800088c:	4b2a      	ldr	r3, [pc, #168]	@ (8000938 <raise_ramp+0x108>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	6493      	str	r3, [r2, #72]	@ 0x48
 8000894:	e003      	b.n	800089e <raise_ramp+0x6e>
 8000896:	4b28      	ldr	r3, [pc, #160]	@ (8000938 <raise_ramp+0x108>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	64d3      	str	r3, [r2, #76]	@ 0x4c
		osDelay(5);
 800089e:	2005      	movs	r0, #5
 80008a0:	f006 fdc5 	bl	800742e <osDelay>
	for(x=750; x>250; x=x-1)
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	3b01      	subs	r3, #1
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	2bfa      	cmp	r3, #250	@ 0xfa
 80008ae:	dcca      	bgt.n	8000846 <raise_ramp+0x16>
	}
	osDelay(3000);
 80008b0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80008b4:	f006 fdbb 	bl	800742e <osDelay>
	for(x=250; x<750; x=x+1)
 80008b8:	23fa      	movs	r3, #250	@ 0xfa
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	e031      	b.n	8000922 <raise_ramp+0xf2>
	{
		__HAL_TIM_SET_COMPARE(&htim3,channel, x);
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d104      	bne.n	80008ce <raise_ramp+0x9e>
 80008c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <raise_ramp+0x108>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	68fa      	ldr	r2, [r7, #12]
 80008ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80008cc:	e023      	b.n	8000916 <raise_ramp+0xe6>
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	d104      	bne.n	80008de <raise_ramp+0xae>
 80008d4:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <raise_ramp+0x108>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	6393      	str	r3, [r2, #56]	@ 0x38
 80008dc:	e01b      	b.n	8000916 <raise_ramp+0xe6>
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2b08      	cmp	r3, #8
 80008e2:	d104      	bne.n	80008ee <raise_ramp+0xbe>
 80008e4:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <raise_ramp+0x108>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80008ec:	e013      	b.n	8000916 <raise_ramp+0xe6>
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	2b0c      	cmp	r3, #12
 80008f2:	d104      	bne.n	80008fe <raise_ramp+0xce>
 80008f4:	4b10      	ldr	r3, [pc, #64]	@ (8000938 <raise_ramp+0x108>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80008fc:	e00b      	b.n	8000916 <raise_ramp+0xe6>
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	2b10      	cmp	r3, #16
 8000902:	d104      	bne.n	800090e <raise_ramp+0xde>
 8000904:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <raise_ramp+0x108>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	6493      	str	r3, [r2, #72]	@ 0x48
 800090c:	e003      	b.n	8000916 <raise_ramp+0xe6>
 800090e:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <raise_ramp+0x108>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	64d3      	str	r3, [r2, #76]	@ 0x4c
		osDelay(5);
 8000916:	2005      	movs	r0, #5
 8000918:	f006 fd89 	bl	800742e <osDelay>
	for(x=250; x<750; x=x+1)
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	3301      	adds	r3, #1
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8000928:	4293      	cmp	r3, r2
 800092a:	ddc8      	ble.n	80008be <raise_ramp+0x8e>
	}

}
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000158 	.word	0x20000158

0800093c <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN(PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT(PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08e      	sub	sp, #56	@ 0x38
 8000940:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000952:	4b9c      	ldr	r3, [pc, #624]	@ (8000bc4 <MX_GPIO_Init+0x288>)
 8000954:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000958:	4a9a      	ldr	r2, [pc, #616]	@ (8000bc4 <MX_GPIO_Init+0x288>)
 800095a:	f043 0310 	orr.w	r3, r3, #16
 800095e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000962:	4b98      	ldr	r3, [pc, #608]	@ (8000bc4 <MX_GPIO_Init+0x288>)
 8000964:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000968:	f003 0310 	and.w	r3, r3, #16
 800096c:	623b      	str	r3, [r7, #32]
 800096e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000970:	4b94      	ldr	r3, [pc, #592]	@ (8000bc4 <MX_GPIO_Init+0x288>)
 8000972:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000976:	4a93      	ldr	r2, [pc, #588]	@ (8000bc4 <MX_GPIO_Init+0x288>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000980:	4b90      	ldr	r3, [pc, #576]	@ (8000bc4 <MX_GPIO_Init+0x288>)
 8000982:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	61fb      	str	r3, [r7, #28]
 800098c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098e:	4b8d      	ldr	r3, [pc, #564]	@ (8000bc4 <MX_GPIO_Init+0x288>)
 8000990:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000994:	4a8b      	ldr	r2, [pc, #556]	@ (8000bc4 <MX_GPIO_Init+0x288>)
 8000996:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800099a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800099e:	4b89      	ldr	r3, [pc, #548]	@ (8000bc4 <MX_GPIO_Init+0x288>)
 80009a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009a8:	61bb      	str	r3, [r7, #24]
 80009aa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b85      	ldr	r3, [pc, #532]	@ (8000bc4 <MX_GPIO_Init+0x288>)
 80009ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009b2:	4a84      	ldr	r2, [pc, #528]	@ (8000bc4 <MX_GPIO_Init+0x288>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009bc:	4b81      	ldr	r3, [pc, #516]	@ (8000bc4 <MX_GPIO_Init+0x288>)
 80009be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b7e      	ldr	r3, [pc, #504]	@ (8000bc4 <MX_GPIO_Init+0x288>)
 80009cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009d0:	4a7c      	ldr	r2, [pc, #496]	@ (8000bc4 <MX_GPIO_Init+0x288>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009da:	4b7a      	ldr	r3, [pc, #488]	@ (8000bc4 <MX_GPIO_Init+0x288>)
 80009dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e8:	4b76      	ldr	r3, [pc, #472]	@ (8000bc4 <MX_GPIO_Init+0x288>)
 80009ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009ee:	4a75      	ldr	r2, [pc, #468]	@ (8000bc4 <MX_GPIO_Init+0x288>)
 80009f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009f8:	4b72      	ldr	r3, [pc, #456]	@ (8000bc4 <MX_GPIO_Init+0x288>)
 80009fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	4b6f      	ldr	r3, [pc, #444]	@ (8000bc4 <MX_GPIO_Init+0x288>)
 8000a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a0c:	4a6d      	ldr	r2, [pc, #436]	@ (8000bc4 <MX_GPIO_Init+0x288>)
 8000a0e:	f043 0308 	orr.w	r3, r3, #8
 8000a12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a16:	4b6b      	ldr	r3, [pc, #428]	@ (8000bc4 <MX_GPIO_Init+0x288>)
 8000a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a1c:	f003 0308 	and.w	r3, r3, #8
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a24:	4b67      	ldr	r3, [pc, #412]	@ (8000bc4 <MX_GPIO_Init+0x288>)
 8000a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a2a:	4a66      	ldr	r2, [pc, #408]	@ (8000bc4 <MX_GPIO_Init+0x288>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a34:	4b63      	ldr	r3, [pc, #396]	@ (8000bc4 <MX_GPIO_Init+0x288>)
 8000a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, P3_G_Pin|P4_R_Pin|P5_G_Pin|P9_R_Pin
 8000a42:	2200      	movs	r2, #0
 8000a44:	f24b 71c0 	movw	r1, #47040	@ 0xb7c0
 8000a48:	485f      	ldr	r0, [pc, #380]	@ (8000bc8 <MX_GPIO_Init+0x28c>)
 8000a4a:	f001 f9c1 	bl	8001dd0 <HAL_GPIO_WritePin>
                          |P4_G_Pin|P3_R_Pin|P8_R_Pin|P2_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, P12_R_Pin|P12_G_Pin|P7_R_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 5194 	mov.w	r1, #4736	@ 0x1280
 8000a54:	485d      	ldr	r0, [pc, #372]	@ (8000bcc <MX_GPIO_Init+0x290>)
 8000a56:	f001 f9bb 	bl	8001dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, P2_R_Pin|P1_G_Pin|P6_G_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2129      	movs	r1, #41	@ 0x29
 8000a5e:	485c      	ldr	r0, [pc, #368]	@ (8000bd0 <MX_GPIO_Init+0x294>)
 8000a60:	f001 f9b6 	bl	8001dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, P11_R_Pin|P7_G_Pin|P9_G_Pin|P8_G_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f245 0141 	movw	r1, #20545	@ 0x5041
 8000a6a:	485a      	ldr	r0, [pc, #360]	@ (8000bd4 <MX_GPIO_Init+0x298>)
 8000a6c:	f001 f9b0 	bl	8001dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P1_R_Pin|P6_R_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000a76:	4858      	ldr	r0, [pc, #352]	@ (8000bd8 <MX_GPIO_Init+0x29c>)
 8000a78:	f001 f9aa 	bl	8001dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, P5_R_Pin|P10_G_Pin|P10_R_Pin|P11_G_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f24e 0102 	movw	r1, #57346	@ 0xe002
 8000a82:	4856      	ldr	r0, [pc, #344]	@ (8000bdc <MX_GPIO_Init+0x2a0>)
 8000a84:	f001 f9a4 	bl	8001dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P3_G_Pin P4_R_Pin P5_G_Pin P9_R_Pin
                           P4_G_Pin P3_R_Pin P8_R_Pin P2_G_Pin */
  GPIO_InitStruct.Pin = P3_G_Pin|P4_R_Pin|P5_G_Pin|P9_R_Pin
 8000a88:	f24b 73c0 	movw	r3, #47040	@ 0xb7c0
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |P4_G_Pin|P3_R_Pin|P8_R_Pin|P2_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4849      	ldr	r0, [pc, #292]	@ (8000bc8 <MX_GPIO_Init+0x28c>)
 8000aa2:	f001 f81f 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : P10_Pin P7_Pin */
  GPIO_InitStruct.Pin = P10_Pin|P7_Pin;
 8000aa6:	f242 0308 	movw	r3, #8200	@ 0x2008
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4844      	ldr	r0, [pc, #272]	@ (8000bcc <MX_GPIO_Init+0x290>)
 8000abc:	f001 f812 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : P12_R_Pin P12_G_Pin P7_R_Pin */
  GPIO_InitStruct.Pin = P12_R_Pin|P12_G_Pin|P7_R_Pin;
 8000ac0:	f44f 5394 	mov.w	r3, #4736	@ 0x1280
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	483c      	ldr	r0, [pc, #240]	@ (8000bcc <MX_GPIO_Init+0x290>)
 8000ada:	f001 f803 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : P2_R_Pin P1_G_Pin P6_G_Pin */
  GPIO_InitStruct.Pin = P2_R_Pin|P1_G_Pin|P6_G_Pin;
 8000ade:	2329      	movs	r3, #41	@ 0x29
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af2:	4619      	mov	r1, r3
 8000af4:	4836      	ldr	r0, [pc, #216]	@ (8000bd0 <MX_GPIO_Init+0x294>)
 8000af6:	f000 fff5 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : P2_Pin P5_Pin RAMP_EXIT_Pin P6_Pin */
  GPIO_InitStruct.Pin = P2_Pin|P5_Pin|RAMP_EXIT_Pin|P6_Pin;
 8000afa:	f241 1305 	movw	r3, #4357	@ 0x1105
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4832      	ldr	r0, [pc, #200]	@ (8000bd8 <MX_GPIO_Init+0x29c>)
 8000b10:	f000 ffe8 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : P11_R_Pin P7_G_Pin P9_G_Pin P8_G_Pin */
  GPIO_InitStruct.Pin = P11_R_Pin|P7_G_Pin|P9_G_Pin|P8_G_Pin;
 8000b14:	f245 0341 	movw	r3, #20545	@ 0x5041
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4829      	ldr	r0, [pc, #164]	@ (8000bd4 <MX_GPIO_Init+0x298>)
 8000b2e:	f000 ffd9 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : P11_Pin RAMP_ENTER_Pin */
  GPIO_InitStruct.Pin = P11_Pin|RAMP_ENTER_Pin;
 8000b32:	f240 4302 	movw	r3, #1026	@ 0x402
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b44:	4619      	mov	r1, r3
 8000b46:	4823      	ldr	r0, [pc, #140]	@ (8000bd4 <MX_GPIO_Init+0x298>)
 8000b48:	f000 ffcc 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : P9_Pin P8_Pin P1_Pin */
  GPIO_InitStruct.Pin = P9_Pin|P8_Pin|P1_Pin;
 8000b4c:	f644 0301 	movw	r3, #18433	@ 0x4801
 8000b50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4819      	ldr	r0, [pc, #100]	@ (8000bc8 <MX_GPIO_Init+0x28c>)
 8000b62:	f000 ffbf 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : P1_R_Pin P6_R_Pin */
  GPIO_InitStruct.Pin = P1_R_Pin|P6_R_Pin;
 8000b66:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4816      	ldr	r0, [pc, #88]	@ (8000bd8 <MX_GPIO_Init+0x29c>)
 8000b80:	f000 ffb0 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : P3_Pin P4_Pin P12_Pin */
  GPIO_InitStruct.Pin = P3_Pin|P4_Pin|P12_Pin;
 8000b84:	f641 0301 	movw	r3, #6145	@ 0x1801
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b96:	4619      	mov	r1, r3
 8000b98:	4810      	ldr	r0, [pc, #64]	@ (8000bdc <MX_GPIO_Init+0x2a0>)
 8000b9a:	f000 ffa3 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : P5_R_Pin P10_G_Pin P10_R_Pin P11_G_Pin */
  GPIO_InitStruct.Pin = P5_R_Pin|P10_G_Pin|P10_R_Pin|P11_G_Pin;
 8000b9e:	f24e 0302 	movw	r3, #57346	@ 0xe002
 8000ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4809      	ldr	r0, [pc, #36]	@ (8000bdc <MX_GPIO_Init+0x2a0>)
 8000bb8:	f000 ff94 	bl	8001ae4 <HAL_GPIO_Init>

}
 8000bbc:	bf00      	nop
 8000bbe:	3738      	adds	r7, #56	@ 0x38
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	44020c00 	.word	0x44020c00
 8000bc8:	42021000 	.word	0x42021000
 8000bcc:	42021400 	.word	0x42021400
 8000bd0:	42020000 	.word	0x42020000
 8000bd4:	42021800 	.word	0x42021800
 8000bd8:	42020400 	.word	0x42020400
 8000bdc:	42020c00 	.word	0x42020c00

08000be0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000be4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c54 <MX_I2C1_Init+0x74>)
 8000be6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c58 <MX_I2C1_Init+0x78>)
 8000be8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 8000bea:	4b1a      	ldr	r3, [pc, #104]	@ (8000c54 <MX_I2C1_Init+0x74>)
 8000bec:	4a1b      	ldr	r2, [pc, #108]	@ (8000c5c <MX_I2C1_Init+0x7c>)
 8000bee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bf0:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <MX_I2C1_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf6:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <MX_I2C1_Init+0x74>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bfc:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <MX_I2C1_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c02:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <MX_I2C1_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c08:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <MX_I2C1_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <MX_I2C1_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <MX_I2C1_Init+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c1a:	480e      	ldr	r0, [pc, #56]	@ (8000c54 <MX_I2C1_Init+0x74>)
 8000c1c:	f001 f8f0 	bl	8001e00 <HAL_I2C_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c26:	f000 fb51 	bl	80012cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4809      	ldr	r0, [pc, #36]	@ (8000c54 <MX_I2C1_Init+0x74>)
 8000c2e:	f001 fc91 	bl	8002554 <HAL_I2CEx_ConfigAnalogFilter>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c38:	f000 fb48 	bl	80012cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <MX_I2C1_Init+0x74>)
 8000c40:	f001 fcd3 	bl	80025ea <HAL_I2CEx_ConfigDigitalFilter>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c4a:	f000 fb3f 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200000ac 	.word	0x200000ac
 8000c58:	40005400 	.word	0x40005400
 8000c5c:	60808cd3 	.word	0x60808cd3

08000c60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b0cc      	sub	sp, #304	@ 0x130
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c6a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000c6e:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c84:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000c8e:	461a      	mov	r2, r3
 8000c90:	2100      	movs	r1, #0
 8000c92:	f008 fc69 	bl	8009568 <memset>
  if(i2cHandle->Instance==I2C1)
 8000c96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c9a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a33      	ldr	r2, [pc, #204]	@ (8000d70 <HAL_I2C_MspInit+0x110>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d15d      	bne.n	8000d64 <HAL_I2C_MspInit+0x104>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ca8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000cac:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000cb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cbc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000cc0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cca:	f107 0310 	add.w	r3, r7, #16
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f002 fc5e 	bl	8003590 <HAL_RCCEx_PeriphCLKConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8000cda:	f000 faf7 	bl	80012cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cde:	4b25      	ldr	r3, [pc, #148]	@ (8000d74 <HAL_I2C_MspInit+0x114>)
 8000ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ce4:	4a23      	ldr	r2, [pc, #140]	@ (8000d74 <HAL_I2C_MspInit+0x114>)
 8000ce6:	f043 0302 	orr.w	r3, r3, #2
 8000cea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cee:	4b21      	ldr	r3, [pc, #132]	@ (8000d74 <HAL_I2C_MspInit+0x114>)
 8000cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cf4:	f003 0202 	and.w	r2, r3, #2
 8000cf8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000cfc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000d06:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000d0a:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d0c:	23c0      	movs	r3, #192	@ 0xc0
 8000d0e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d12:	2312      	movs	r3, #18
 8000d14:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d24:	2304      	movs	r3, #4
 8000d26:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2a:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4811      	ldr	r0, [pc, #68]	@ (8000d78 <HAL_I2C_MspInit+0x118>)
 8000d32:	f000 fed7 	bl	8001ae4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d36:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <HAL_I2C_MspInit+0x114>)
 8000d38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d74 <HAL_I2C_MspInit+0x114>)
 8000d3e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d42:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000d46:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <HAL_I2C_MspInit+0x114>)
 8000d48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d4c:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8000d50:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000d54:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000d5e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000d62:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d64:	bf00      	nop
 8000d66:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40005400 	.word	0x40005400
 8000d74:	44020c00 	.word	0x44020c00
 8000d78:	42020400 	.word	0x42020400

08000d7c <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END ICACHE_Init 1 */
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000d96:	4a38      	ldr	r2, [pc, #224]	@ (8000e78 <HD44780_Init+0xec>)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000d9c:	4b37      	ldr	r3, [pc, #220]	@ (8000e7c <HD44780_Init+0xf0>)
 8000d9e:	2208      	movs	r2, #8
 8000da0:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000da2:	4b37      	ldr	r3, [pc, #220]	@ (8000e80 <HD44780_Init+0xf4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000da8:	4b33      	ldr	r3, [pc, #204]	@ (8000e78 <HD44780_Init+0xec>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d907      	bls.n	8000dc0 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000db0:	4b33      	ldr	r3, [pc, #204]	@ (8000e80 <HD44780_Init+0xf4>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	f043 0308 	orr.w	r3, r3, #8
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4b31      	ldr	r3, [pc, #196]	@ (8000e80 <HD44780_Init+0xf4>)
 8000dbc:	701a      	strb	r2, [r3, #0]
 8000dbe:	e006      	b.n	8000dce <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000dc0:	4b2f      	ldr	r3, [pc, #188]	@ (8000e80 <HD44780_Init+0xf4>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	f043 0304 	orr.w	r3, r3, #4
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4b2d      	ldr	r3, [pc, #180]	@ (8000e80 <HD44780_Init+0xf4>)
 8000dcc:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000dce:	f000 f987 	bl	80010e0 <DelayInit>
  HAL_Delay(50);
 8000dd2:	2032      	movs	r0, #50	@ 0x32
 8000dd4:	f000 fd2a 	bl	800182c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000dd8:	4b28      	ldr	r3, [pc, #160]	@ (8000e7c <HD44780_Init+0xf0>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 f945 	bl	800106c <ExpanderWrite>
  HAL_Delay(1000);
 8000de2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000de6:	f000 fd21 	bl	800182c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000dea:	2030      	movs	r0, #48	@ 0x30
 8000dec:	f000 f92c 	bl	8001048 <Write4Bits>
  DelayUS(4500);
 8000df0:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000df4:	f000 f99e 	bl	8001134 <DelayUS>

  Write4Bits(0x03 << 4);
 8000df8:	2030      	movs	r0, #48	@ 0x30
 8000dfa:	f000 f925 	bl	8001048 <Write4Bits>
  DelayUS(4500);
 8000dfe:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000e02:	f000 f997 	bl	8001134 <DelayUS>

  Write4Bits(0x03 << 4);
 8000e06:	2030      	movs	r0, #48	@ 0x30
 8000e08:	f000 f91e 	bl	8001048 <Write4Bits>
  DelayUS(4500);
 8000e0c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000e10:	f000 f990 	bl	8001134 <DelayUS>

  Write4Bits(0x02 << 4);
 8000e14:	2020      	movs	r0, #32
 8000e16:	f000 f917 	bl	8001048 <Write4Bits>
  DelayUS(100);
 8000e1a:	2064      	movs	r0, #100	@ 0x64
 8000e1c:	f000 f98a 	bl	8001134 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000e20:	4b17      	ldr	r3, [pc, #92]	@ (8000e80 <HD44780_Init+0xf4>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	f043 0320 	orr.w	r3, r3, #32
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f8cf 	bl	8000fce <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000e30:	4b14      	ldr	r3, [pc, #80]	@ (8000e84 <HD44780_Init+0xf8>)
 8000e32:	2204      	movs	r2, #4
 8000e34:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000e36:	f000 f875 	bl	8000f24 <HD44780_Display>
  HD44780_Clear();
 8000e3a:	f000 f82b 	bl	8000e94 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000e3e:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <HD44780_Init+0xfc>)
 8000e40:	2202      	movs	r2, #2
 8000e42:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000e44:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <HD44780_Init+0xfc>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f8bd 	bl	8000fce <SendCommand>
  DelayUS(4500);
 8000e54:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000e58:	f000 f96c 	bl	8001134 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000e5c:	490b      	ldr	r1, [pc, #44]	@ (8000e8c <HD44780_Init+0x100>)
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f000 f876 	bl	8000f50 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000e64:	490a      	ldr	r1, [pc, #40]	@ (8000e90 <HD44780_Init+0x104>)
 8000e66:	2001      	movs	r0, #1
 8000e68:	f000 f872 	bl	8000f50 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000e6c:	f000 f81d 	bl	8000eaa <HD44780_Home>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000103 	.word	0x20000103
 8000e7c:	20000104 	.word	0x20000104
 8000e80:	20000100 	.word	0x20000100
 8000e84:	20000101 	.word	0x20000101
 8000e88:	20000102 	.word	0x20000102
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	20000010 	.word	0x20000010

08000e94 <HD44780_Clear>:

void HD44780_Clear()
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f000 f898 	bl	8000fce <SendCommand>
  DelayUS(2000);
 8000e9e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ea2:	f000 f947 	bl	8001134 <DelayUS>
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HD44780_Home>:

void HD44780_Home()
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000eae:	2002      	movs	r0, #2
 8000eb0:	f000 f88d 	bl	8000fce <SendCommand>
  DelayUS(2000);
 8000eb4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000eb8:	f000 f93c 	bl	8001134 <DelayUS>
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b087      	sub	sp, #28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	460a      	mov	r2, r1
 8000eca:	71fb      	strb	r3, [r7, #7]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HD44780_SetCursor+0x5c>)
 8000ed2:	f107 0408 	add.w	r4, r7, #8
 8000ed6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ed8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000edc:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <HD44780_SetCursor+0x60>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	79ba      	ldrb	r2, [r7, #6]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d303      	bcc.n	8000eee <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <HD44780_SetCursor+0x60>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000eee:	79bb      	ldrb	r3, [r7, #6]
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	3318      	adds	r3, #24
 8000ef4:	443b      	add	r3, r7
 8000ef6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	4413      	add	r3, r2
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 f85e 	bl	8000fce <SendCommand>
}
 8000f12:	bf00      	nop
 8000f14:	371c      	adds	r7, #28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd90      	pop	{r4, r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	08009f10 	.word	0x08009f10
 8000f20:	20000103 	.word	0x20000103

08000f24 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000f28:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <HD44780_Display+0x28>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <HD44780_Display+0x28>)
 8000f34:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000f36:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <HD44780_Display+0x28>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	f043 0308 	orr.w	r3, r3, #8
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 f844 	bl	8000fce <SendCommand>
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000101 	.word	0x20000101

08000f50 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	b25b      	sxtb	r3, r3
 8000f6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f70:	b25b      	sxtb	r3, r3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 f82a 	bl	8000fce <SendCommand>
  for (int i=0; i<8; i++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	e009      	b.n	8000f94 <HD44780_CreateSpecialChar+0x44>
  {
    SendChar(charmap[i]);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	4413      	add	r3, r2
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 f82e 	bl	8000fea <SendChar>
  for (int i=0; i<8; i++)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	3301      	adds	r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2b07      	cmp	r3, #7
 8000f98:	ddf2      	ble.n	8000f80 <HD44780_CreateSpecialChar+0x30>
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000fac:	e006      	b.n	8000fbc <HD44780_PrintStr+0x18>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	1c5a      	adds	r2, r3, #1
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f817 	bl	8000fea <SendChar>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1f4      	bne.n	8000fae <HD44780_PrintStr+0xa>
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 f812 	bl	8001006 <Send>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <SendChar>:

static void SendChar(uint8_t ch)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 f804 	bl	8001006 <Send>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b084      	sub	sp, #16
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	460a      	mov	r2, r1
 8001010:	71fb      	strb	r3, [r7, #7]
 8001012:	4613      	mov	r3, r2
 8001014:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f023 030f 	bic.w	r3, r3, #15
 800101c:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	011b      	lsls	r3, r3, #4
 8001022:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	79bb      	ldrb	r3, [r7, #6]
 8001028:	4313      	orrs	r3, r2
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4618      	mov	r0, r3
 800102e:	f000 f80b 	bl	8001048 <Write4Bits>
  Write4Bits((lownib)|mode);
 8001032:	7bba      	ldrb	r2, [r7, #14]
 8001034:	79bb      	ldrb	r3, [r7, #6]
 8001036:	4313      	orrs	r3, r2
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f804 	bl	8001048 <Write4Bits>
}
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f809 	bl	800106c <ExpanderWrite>
  PulseEnable(value);
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f821 	bl	80010a4 <PulseEnable>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af02      	add	r7, sp, #8
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001076:	4b09      	ldr	r3, [pc, #36]	@ (800109c <ExpanderWrite+0x30>)
 8001078:	781a      	ldrb	r2, [r3, #0]
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	4313      	orrs	r3, r2
 800107e:	b2db      	uxtb	r3, r3
 8001080:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001082:	f107 020f 	add.w	r2, r7, #15
 8001086:	230a      	movs	r3, #10
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2301      	movs	r3, #1
 800108c:	214e      	movs	r1, #78	@ 0x4e
 800108e:	4804      	ldr	r0, [pc, #16]	@ (80010a0 <ExpanderWrite+0x34>)
 8001090:	f000 ff52 	bl	8001f38 <HAL_I2C_Master_Transmit>
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000104 	.word	0x20000104
 80010a0:	200000ac 	.word	0x200000ac

080010a4 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ffd8 	bl	800106c <ExpanderWrite>
  DelayUS(20);
 80010bc:	2014      	movs	r0, #20
 80010be:	f000 f839 	bl	8001134 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f023 0304 	bic.w	r3, r3, #4
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ffce 	bl	800106c <ExpanderWrite>
  DelayUS(20);
 80010d0:	2014      	movs	r0, #20
 80010d2:	f000 f82f 	bl	8001134 <DelayUS>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <DelayInit>:

static void DelayInit(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80010e4:	4b11      	ldr	r3, [pc, #68]	@ (800112c <DelayInit+0x4c>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	4a10      	ldr	r2, [pc, #64]	@ (800112c <DelayInit+0x4c>)
 80010ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80010ee:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80010f0:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <DelayInit+0x4c>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	4a0d      	ldr	r2, [pc, #52]	@ (800112c <DelayInit+0x4c>)
 80010f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010fa:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <DelayInit+0x50>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0b      	ldr	r2, [pc, #44]	@ (8001130 <DelayInit+0x50>)
 8001102:	f023 0301 	bic.w	r3, r3, #1
 8001106:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001108:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <DelayInit+0x50>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a08      	ldr	r2, [pc, #32]	@ (8001130 <DelayInit+0x50>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <DelayInit+0x50>)
 8001116:	2200      	movs	r2, #0
 8001118:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800111a:	bf00      	nop
  __ASM volatile ("NOP");
 800111c:	bf00      	nop
  __ASM volatile ("NOP");
 800111e:	bf00      	nop
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000edf0 	.word	0xe000edf0
 8001130:	e0001000 	.word	0xe0001000

08001134 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001134:	b480      	push	{r7}
 8001136:	b087      	sub	sp, #28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800113c:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <DelayUS+0x44>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0e      	ldr	r2, [pc, #56]	@ (800117c <DelayUS+0x48>)
 8001142:	fba2 2303 	umull	r2, r3, r2, r3
 8001146:	0c9a      	lsrs	r2, r3, #18
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	fb02 f303 	mul.w	r3, r2, r3
 800114e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001150:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <DelayUS+0x4c>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001156:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <DelayUS+0x4c>)
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	429a      	cmp	r2, r3
 8001166:	d8f6      	bhi.n	8001156 <DelayUS+0x22>
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	371c      	adds	r7, #28
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000018 	.word	0x20000018
 800117c:	431bde83 	.word	0x431bde83
 8001180:	e0001000 	.word	0xe0001000

08001184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001188:	f000 fb08 	bl	800179c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800118c:	f000 f81a 	bl	80011c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001190:	f7ff fbd4 	bl	800093c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001194:	f7ff fd24 	bl	8000be0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001198:	f000 f9f6 	bl	8001588 <MX_TIM3_Init>
  MX_ICACHE_Init();
 800119c:	f7ff fdee 	bl	8000d7c <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011a0:	2100      	movs	r1, #0
 80011a2:	4807      	ldr	r0, [pc, #28]	@ (80011c0 <main+0x3c>)
 80011a4:	f004 fc16 	bl	80059d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011a8:	2104      	movs	r1, #4
 80011aa:	4805      	ldr	r0, [pc, #20]	@ (80011c0 <main+0x3c>)
 80011ac:	f004 fc12 	bl	80059d4 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011b0:	f006 f85c 	bl	800726c <osKernelInitialize>

  /* Call init function for freertos objects (in app_freertos.c) */
  MX_FREERTOS_Init();
 80011b4:	f7ff f86c 	bl	8000290 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80011b8:	f006 f87e 	bl	80072b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <main+0x38>
 80011c0:	20000158 	.word	0x20000158

080011c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b09c      	sub	sp, #112	@ 0x70
 80011c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ca:	f107 0320 	add.w	r3, r7, #32
 80011ce:	2250      	movs	r2, #80	@ 0x50
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f008 f9c8 	bl	8009568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d8:	f107 0308 	add.w	r3, r7, #8
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
 80011e8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011ea:	4b2d      	ldr	r3, [pc, #180]	@ (80012a0 <SystemClock_Config+0xdc>)
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	4a2c      	ldr	r2, [pc, #176]	@ (80012a0 <SystemClock_Config+0xdc>)
 80011f0:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80011f4:	6113      	str	r3, [r2, #16]
 80011f6:	4b2a      	ldr	r3, [pc, #168]	@ (80012a0 <SystemClock_Config+0xdc>)
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001202:	bf00      	nop
 8001204:	4b26      	ldr	r3, [pc, #152]	@ (80012a0 <SystemClock_Config+0xdc>)
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	f003 0308 	and.w	r3, r3, #8
 800120c:	2b08      	cmp	r3, #8
 800120e:	d1f9      	bne.n	8001204 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8001210:	2310      	movs	r3, #16
 8001212:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8001214:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001218:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 800121a:	2320      	movs	r3, #32
 800121c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121e:	2302      	movs	r3, #2
 8001220:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8001222:	2302      	movs	r3, #2
 8001224:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001226:	2301      	movs	r3, #1
 8001228:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 800122a:	237d      	movs	r3, #125	@ 0x7d
 800122c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800122e:	2302      	movs	r3, #2
 8001230:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001232:	2302      	movs	r3, #2
 8001234:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001236:	2302      	movs	r3, #2
 8001238:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 800123a:	2308      	movs	r3, #8
 800123c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800123e:	2300      	movs	r3, #0
 8001240:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001246:	f107 0320 	add.w	r3, r7, #32
 800124a:	4618      	mov	r0, r3
 800124c:	f001 fa1a 	bl	8002684 <HAL_RCC_OscConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001256:	f000 f839 	bl	80012cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125a:	231f      	movs	r3, #31
 800125c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125e:	2303      	movs	r3, #3
 8001260:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	2105      	movs	r1, #5
 8001278:	4618      	mov	r0, r3
 800127a:	f001 fe3b 	bl	8002ef4 <HAL_RCC_ClockConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001284:	f000 f822 	bl	80012cc <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <SystemClock_Config+0xe0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001290:	4a04      	ldr	r2, [pc, #16]	@ (80012a4 <SystemClock_Config+0xe0>)
 8001292:	f043 0320 	orr.w	r3, r3, #32
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	3770      	adds	r7, #112	@ 0x70
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	44020800 	.word	0x44020800
 80012a4:	40022000 	.word	0x40022000

080012a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d101      	bne.n	80012be <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80012ba:	f000 fa97 	bl	80017ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40001000 	.word	0x40001000

080012cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d0:	b672      	cpsid	i
}
 80012d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <Error_Handler+0x8>

080012d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012dc:	2200      	movs	r2, #0
 80012de:	210f      	movs	r1, #15
 80012e0:	f06f 0001 	mvn.w	r0, #1
 80012e4:	f000 fb7e 	bl	80019e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08e      	sub	sp, #56	@ 0x38
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012f4:	4b33      	ldr	r3, [pc, #204]	@ (80013c4 <HAL_InitTick+0xd8>)
 80012f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80012fa:	4a32      	ldr	r2, [pc, #200]	@ (80013c4 <HAL_InitTick+0xd8>)
 80012fc:	f043 0310 	orr.w	r3, r3, #16
 8001300:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001304:	4b2f      	ldr	r3, [pc, #188]	@ (80013c4 <HAL_InitTick+0xd8>)
 8001306:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800130a:	f003 0310 	and.w	r3, r3, #16
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001312:	f107 020c 	add.w	r2, r7, #12
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f002 f8ff 	bl	8003520 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001328:	2b00      	cmp	r3, #0
 800132a:	d103      	bne.n	8001334 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800132c:	f002 f8e2 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 8001330:	6378      	str	r0, [r7, #52]	@ 0x34
 8001332:	e004      	b.n	800133e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001334:	f002 f8de 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 8001338:	4603      	mov	r3, r0
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 800133e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001340:	095b      	lsrs	r3, r3, #5
 8001342:	4a21      	ldr	r2, [pc, #132]	@ (80013c8 <HAL_InitTick+0xdc>)
 8001344:	fba2 2303 	umull	r2, r3, r2, r3
 8001348:	09db      	lsrs	r3, r3, #7
 800134a:	3b01      	subs	r3, #1
 800134c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800134e:	4b1f      	ldr	r3, [pc, #124]	@ (80013cc <HAL_InitTick+0xe0>)
 8001350:	4a1f      	ldr	r2, [pc, #124]	@ (80013d0 <HAL_InitTick+0xe4>)
 8001352:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 8001354:	4b1d      	ldr	r3, [pc, #116]	@ (80013cc <HAL_InitTick+0xe0>)
 8001356:	2263      	movs	r2, #99	@ 0x63
 8001358:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800135a:	4a1c      	ldr	r2, [pc, #112]	@ (80013cc <HAL_InitTick+0xe0>)
 800135c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800135e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001360:	4b1a      	ldr	r3, [pc, #104]	@ (80013cc <HAL_InitTick+0xe0>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001366:	4b19      	ldr	r3, [pc, #100]	@ (80013cc <HAL_InitTick+0xe0>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800136c:	4817      	ldr	r0, [pc, #92]	@ (80013cc <HAL_InitTick+0xe0>)
 800136e:	f004 f9c9 	bl	8005704 <HAL_TIM_Base_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001378:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800137c:	2b00      	cmp	r3, #0
 800137e:	d118      	bne.n	80013b2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001380:	4812      	ldr	r0, [pc, #72]	@ (80013cc <HAL_InitTick+0xe0>)
 8001382:	f004 fa17 	bl	80057b4 <HAL_TIM_Base_Start_IT>
 8001386:	4603      	mov	r3, r0
 8001388:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800138c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001390:	2b00      	cmp	r3, #0
 8001392:	d10e      	bne.n	80013b2 <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b0f      	cmp	r3, #15
 8001398:	d808      	bhi.n	80013ac <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 800139a:	2200      	movs	r2, #0
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	2031      	movs	r0, #49	@ 0x31
 80013a0:	f000 fb20 	bl	80019e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013a4:	4a0b      	ldr	r2, [pc, #44]	@ (80013d4 <HAL_InitTick+0xe8>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	e002      	b.n	80013b2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80013b2:	2031      	movs	r0, #49	@ 0x31
 80013b4:	f000 fb30 	bl	8001a18 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 80013b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3738      	adds	r7, #56	@ 0x38
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	44020c00 	.word	0x44020c00
 80013c8:	0a7c5ac5 	.word	0x0a7c5ac5
 80013cc:	20000108 	.word	0x20000108
 80013d0:	40001000 	.word	0x40001000
 80013d4:	2000001c 	.word	0x2000001c

080013d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <NMI_Handler+0x4>

080013e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <HardFault_Handler+0x4>

080013e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <MemManage_Handler+0x4>

080013f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <BusFault_Handler+0x4>

080013f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <UsageFault_Handler+0x4>

08001400 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001414:	4802      	ldr	r0, [pc, #8]	@ (8001420 <TIM6_IRQHandler+0x10>)
 8001416:	f004 fc3d 	bl	8005c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000108 	.word	0x20000108

08001424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800142c:	4a14      	ldr	r2, [pc, #80]	@ (8001480 <_sbrk+0x5c>)
 800142e:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <_sbrk+0x60>)
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001438:	4b13      	ldr	r3, [pc, #76]	@ (8001488 <_sbrk+0x64>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001440:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <_sbrk+0x64>)
 8001442:	4a12      	ldr	r2, [pc, #72]	@ (800148c <_sbrk+0x68>)
 8001444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001446:	4b10      	ldr	r3, [pc, #64]	@ (8001488 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	429a      	cmp	r2, r3
 8001452:	d207      	bcs.n	8001464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001454:	f008 f890 	bl	8009578 <__errno>
 8001458:	4603      	mov	r3, r0
 800145a:	220c      	movs	r2, #12
 800145c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
 8001462:	e009      	b.n	8001478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001464:	4b08      	ldr	r3, [pc, #32]	@ (8001488 <_sbrk+0x64>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146a:	4b07      	ldr	r3, [pc, #28]	@ (8001488 <_sbrk+0x64>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	4a05      	ldr	r2, [pc, #20]	@ (8001488 <_sbrk+0x64>)
 8001474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200a0000 	.word	0x200a0000
 8001484:	00000400 	.word	0x00000400
 8001488:	20000154 	.word	0x20000154
 800148c:	20002e28 	.word	0x20002e28

08001490 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001496:	4b35      	ldr	r3, [pc, #212]	@ (800156c <SystemInit+0xdc>)
 8001498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800149c:	4a33      	ldr	r2, [pc, #204]	@ (800156c <SystemInit+0xdc>)
 800149e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014a2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80014a6:	4b32      	ldr	r3, [pc, #200]	@ (8001570 <SystemInit+0xe0>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80014ac:	4b30      	ldr	r3, [pc, #192]	@ (8001570 <SystemInit+0xe0>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80014b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001570 <SystemInit+0xe0>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80014b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001570 <SystemInit+0xe0>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	492c      	ldr	r1, [pc, #176]	@ (8001570 <SystemInit+0xe0>)
 80014be:	4b2d      	ldr	r3, [pc, #180]	@ (8001574 <SystemInit+0xe4>)
 80014c0:	4013      	ands	r3, r2
 80014c2:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80014c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001570 <SystemInit+0xe0>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80014ca:	4b29      	ldr	r3, [pc, #164]	@ (8001570 <SystemInit+0xe0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80014d0:	4b27      	ldr	r3, [pc, #156]	@ (8001570 <SystemInit+0xe0>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80014d6:	4b26      	ldr	r3, [pc, #152]	@ (8001570 <SystemInit+0xe0>)
 80014d8:	4a27      	ldr	r2, [pc, #156]	@ (8001578 <SystemInit+0xe8>)
 80014da:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80014dc:	4b24      	ldr	r3, [pc, #144]	@ (8001570 <SystemInit+0xe0>)
 80014de:	2200      	movs	r2, #0
 80014e0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80014e2:	4b23      	ldr	r3, [pc, #140]	@ (8001570 <SystemInit+0xe0>)
 80014e4:	4a24      	ldr	r2, [pc, #144]	@ (8001578 <SystemInit+0xe8>)
 80014e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80014e8:	4b21      	ldr	r3, [pc, #132]	@ (8001570 <SystemInit+0xe0>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80014ee:	4b20      	ldr	r3, [pc, #128]	@ (8001570 <SystemInit+0xe0>)
 80014f0:	4a21      	ldr	r2, [pc, #132]	@ (8001578 <SystemInit+0xe8>)
 80014f2:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80014f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001570 <SystemInit+0xe0>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80014fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001570 <SystemInit+0xe0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001570 <SystemInit+0xe0>)
 8001500:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001504:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001506:	4b1a      	ldr	r3, [pc, #104]	@ (8001570 <SystemInit+0xe0>)
 8001508:	2200      	movs	r2, #0
 800150a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800150c:	4b17      	ldr	r3, [pc, #92]	@ (800156c <SystemInit+0xdc>)
 800150e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001512:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001514:	4b19      	ldr	r3, [pc, #100]	@ (800157c <SystemInit+0xec>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 800151c:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001524:	d003      	beq.n	800152e <SystemInit+0x9e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800152c:	d117      	bne.n	800155e <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800152e:	4b13      	ldr	r3, [pc, #76]	@ (800157c <SystemInit+0xec>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d005      	beq.n	8001546 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800153a:	4b10      	ldr	r3, [pc, #64]	@ (800157c <SystemInit+0xec>)
 800153c:	4a10      	ldr	r2, [pc, #64]	@ (8001580 <SystemInit+0xf0>)
 800153e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001540:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <SystemInit+0xec>)
 8001542:	4a10      	ldr	r2, [pc, #64]	@ (8001584 <SystemInit+0xf4>)
 8001544:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001546:	4b0d      	ldr	r3, [pc, #52]	@ (800157c <SystemInit+0xec>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	4a0c      	ldr	r2, [pc, #48]	@ (800157c <SystemInit+0xec>)
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001552:	4b0a      	ldr	r3, [pc, #40]	@ (800157c <SystemInit+0xec>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	4a09      	ldr	r2, [pc, #36]	@ (800157c <SystemInit+0xec>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	61d3      	str	r3, [r2, #28]
  }
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000ed00 	.word	0xe000ed00
 8001570:	44020c00 	.word	0x44020c00
 8001574:	eae2eae3 	.word	0xeae2eae3
 8001578:	01010280 	.word	0x01010280
 800157c:	40022000 	.word	0x40022000
 8001580:	08192a3b 	.word	0x08192a3b
 8001584:	4c5d6e7f 	.word	0x4c5d6e7f

08001588 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08e      	sub	sp, #56	@ 0x38
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a8:	463b      	mov	r3, r7
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]
 80015b6:	615a      	str	r2, [r3, #20]
 80015b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015ba:	4b33      	ldr	r3, [pc, #204]	@ (8001688 <MX_TIM3_Init+0x100>)
 80015bc:	4a33      	ldr	r2, [pc, #204]	@ (800168c <MX_TIM3_Init+0x104>)
 80015be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 80015c0:	4b31      	ldr	r3, [pc, #196]	@ (8001688 <MX_TIM3_Init+0x100>)
 80015c2:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80015c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001688 <MX_TIM3_Init+0x100>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80015ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001688 <MX_TIM3_Init+0x100>)
 80015d0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80015d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001688 <MX_TIM3_Init+0x100>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001688 <MX_TIM3_Init+0x100>)
 80015de:	2200      	movs	r2, #0
 80015e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015e2:	4829      	ldr	r0, [pc, #164]	@ (8001688 <MX_TIM3_Init+0x100>)
 80015e4:	f004 f88e 	bl	8005704 <HAL_TIM_Base_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80015ee:	f7ff fe6d 	bl	80012cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015fc:	4619      	mov	r1, r3
 80015fe:	4822      	ldr	r0, [pc, #136]	@ (8001688 <MX_TIM3_Init+0x100>)
 8001600:	f004 fdac 	bl	800615c <HAL_TIM_ConfigClockSource>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800160a:	f7ff fe5f 	bl	80012cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800160e:	481e      	ldr	r0, [pc, #120]	@ (8001688 <MX_TIM3_Init+0x100>)
 8001610:	f004 f97e 	bl	8005910 <HAL_TIM_PWM_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800161a:	f7ff fe57 	bl	80012cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001626:	f107 031c 	add.w	r3, r7, #28
 800162a:	4619      	mov	r1, r3
 800162c:	4816      	ldr	r0, [pc, #88]	@ (8001688 <MX_TIM3_Init+0x100>)
 800162e:	f005 fc9d 	bl	8006f6c <HAL_TIMEx_MasterConfigSynchronization>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001638:	f7ff fe48 	bl	80012cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800163c:	2360      	movs	r3, #96	@ 0x60
 800163e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001644:	2300      	movs	r3, #0
 8001646:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800164c:	463b      	mov	r3, r7
 800164e:	2200      	movs	r2, #0
 8001650:	4619      	mov	r1, r3
 8001652:	480d      	ldr	r0, [pc, #52]	@ (8001688 <MX_TIM3_Init+0x100>)
 8001654:	f004 fc6e 	bl	8005f34 <HAL_TIM_PWM_ConfigChannel>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800165e:	f7ff fe35 	bl	80012cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001662:	463b      	mov	r3, r7
 8001664:	2204      	movs	r2, #4
 8001666:	4619      	mov	r1, r3
 8001668:	4807      	ldr	r0, [pc, #28]	@ (8001688 <MX_TIM3_Init+0x100>)
 800166a:	f004 fc63 	bl	8005f34 <HAL_TIM_PWM_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001674:	f7ff fe2a 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001678:	4803      	ldr	r0, [pc, #12]	@ (8001688 <MX_TIM3_Init+0x100>)
 800167a:	f000 f82b 	bl	80016d4 <HAL_TIM_MspPostInit>

}
 800167e:	bf00      	nop
 8001680:	3738      	adds	r7, #56	@ 0x38
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000158 	.word	0x20000158
 800168c:	40000400 	.word	0x40000400

08001690 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0b      	ldr	r2, [pc, #44]	@ (80016cc <HAL_TIM_Base_MspInit+0x3c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d10e      	bne.n	80016c0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016a2:	4b0b      	ldr	r3, [pc, #44]	@ (80016d0 <HAL_TIM_Base_MspInit+0x40>)
 80016a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016a8:	4a09      	ldr	r2, [pc, #36]	@ (80016d0 <HAL_TIM_Base_MspInit+0x40>)
 80016aa:	f043 0302 	orr.w	r3, r3, #2
 80016ae:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80016b2:	4b07      	ldr	r3, [pc, #28]	@ (80016d0 <HAL_TIM_Base_MspInit+0x40>)
 80016b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	40000400 	.word	0x40000400
 80016d0:	44020c00 	.word	0x44020c00

080016d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a12      	ldr	r2, [pc, #72]	@ (800173c <HAL_TIM_MspPostInit+0x68>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d11e      	bne.n	8001734 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f6:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <HAL_TIM_MspPostInit+0x6c>)
 80016f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016fc:	4a10      	ldr	r2, [pc, #64]	@ (8001740 <HAL_TIM_MspPostInit+0x6c>)
 80016fe:	f043 0304 	orr.w	r3, r3, #4
 8001702:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001706:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <HAL_TIM_MspPostInit+0x6c>)
 8001708:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = SG_ENTER_Pin|SG_EXIT_Pin;
 8001714:	23c0      	movs	r3, #192	@ 0xc0
 8001716:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	2302      	movs	r3, #2
 800171a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001724:	2302      	movs	r3, #2
 8001726:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	4619      	mov	r1, r3
 800172e:	4805      	ldr	r0, [pc, #20]	@ (8001744 <HAL_TIM_MspPostInit+0x70>)
 8001730:	f000 f9d8 	bl	8001ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001734:	bf00      	nop
 8001736:	3720      	adds	r7, #32
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40000400 	.word	0x40000400
 8001740:	44020c00 	.word	0x44020c00
 8001744:	42020800 	.word	0x42020800

08001748 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001748:	480d      	ldr	r0, [pc, #52]	@ (8001780 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800174a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800174c:	f7ff fea0 	bl	8001490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001750:	480c      	ldr	r0, [pc, #48]	@ (8001784 <LoopForever+0x6>)
  ldr r1, =_edata
 8001752:	490d      	ldr	r1, [pc, #52]	@ (8001788 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001754:	4a0d      	ldr	r2, [pc, #52]	@ (800178c <LoopForever+0xe>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001758:	e002      	b.n	8001760 <LoopCopyDataInit>

0800175a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800175c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175e:	3304      	adds	r3, #4

08001760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001764:	d3f9      	bcc.n	800175a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001766:	4a0a      	ldr	r2, [pc, #40]	@ (8001790 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001768:	4c0a      	ldr	r4, [pc, #40]	@ (8001794 <LoopForever+0x16>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800176c:	e001      	b.n	8001772 <LoopFillZerobss>

0800176e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001770:	3204      	adds	r2, #4

08001772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001774:	d3fb      	bcc.n	800176e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001776:	f007 ff05 	bl	8009584 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800177a:	f7ff fd03 	bl	8001184 <main>

0800177e <LoopForever>:

LoopForever:
    b LoopForever
 800177e:	e7fe      	b.n	800177e <LoopForever>
  ldr   r0, =_estack
 8001780:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001788:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800178c:	08009fd8 	.word	0x08009fd8
  ldr r2, =_sbss
 8001790:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001794:	20002e28 	.word	0x20002e28

08001798 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <ADC1_IRQHandler>
	...

0800179c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a0:	2003      	movs	r0, #3
 80017a2:	f000 f914 	bl	80019ce <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80017a6:	f001 fd5d 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 80017aa:	4602      	mov	r2, r0
 80017ac:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <HAL_Init+0x44>)
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	f003 030f 	and.w	r3, r3, #15
 80017b4:	490b      	ldr	r1, [pc, #44]	@ (80017e4 <HAL_Init+0x48>)
 80017b6:	5ccb      	ldrb	r3, [r1, r3]
 80017b8:	fa22 f303 	lsr.w	r3, r2, r3
 80017bc:	4a0a      	ldr	r2, [pc, #40]	@ (80017e8 <HAL_Init+0x4c>)
 80017be:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80017c0:	2004      	movs	r0, #4
 80017c2:	f000 f937 	bl	8001a34 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017c6:	200f      	movs	r0, #15
 80017c8:	f7ff fd90 	bl	80012ec <HAL_InitTick>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e002      	b.n	80017dc <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017d6:	f7ff fd7f 	bl	80012d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	44020c00 	.word	0x44020c00
 80017e4:	08009f80 	.word	0x08009f80
 80017e8:	20000018 	.word	0x20000018

080017ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017f0:	4b06      	ldr	r3, [pc, #24]	@ (800180c <HAL_IncTick+0x20>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <HAL_IncTick+0x24>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	4a04      	ldr	r2, [pc, #16]	@ (8001810 <HAL_IncTick+0x24>)
 80017fe:	6013      	str	r3, [r2, #0]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000020 	.word	0x20000020
 8001810:	200001a4 	.word	0x200001a4

08001814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b03      	ldr	r3, [pc, #12]	@ (8001828 <HAL_GetTick+0x14>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	200001a4 	.word	0x200001a4

0800182c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001834:	f7ff ffee 	bl	8001814 <HAL_GetTick>
 8001838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001844:	d005      	beq.n	8001852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001846:	4b0a      	ldr	r3, [pc, #40]	@ (8001870 <HAL_Delay+0x44>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001852:	bf00      	nop
 8001854:	f7ff ffde 	bl	8001814 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	429a      	cmp	r2, r3
 8001862:	d8f7      	bhi.n	8001854 <HAL_Delay+0x28>
  {
  }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000020 	.word	0x20000020

08001874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001884:	4b0c      	ldr	r3, [pc, #48]	@ (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001890:	4013      	ands	r3, r2
 8001892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800189c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a6:	4a04      	ldr	r2, [pc, #16]	@ (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	60d3      	str	r3, [r2, #12]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c0:	4b04      	ldr	r3, [pc, #16]	@ (80018d4 <__NVIC_GetPriorityGrouping+0x18>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	0a1b      	lsrs	r3, r3, #8
 80018c6:	f003 0307 	and.w	r3, r3, #7
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	db0b      	blt.n	8001902 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ea:	88fb      	ldrh	r3, [r7, #6]
 80018ec:	f003 021f 	and.w	r2, r3, #31
 80018f0:	4907      	ldr	r1, [pc, #28]	@ (8001910 <__NVIC_EnableIRQ+0x38>)
 80018f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f6:	095b      	lsrs	r3, r3, #5
 80018f8:	2001      	movs	r0, #1
 80018fa:	fa00 f202 	lsl.w	r2, r0, r2
 80018fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000e100 	.word	0xe000e100

08001914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001920:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001924:	2b00      	cmp	r3, #0
 8001926:	db0a      	blt.n	800193e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	490c      	ldr	r1, [pc, #48]	@ (8001960 <__NVIC_SetPriority+0x4c>)
 800192e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001932:	0112      	lsls	r2, r2, #4
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	440b      	add	r3, r1
 8001938:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800193c:	e00a      	b.n	8001954 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4908      	ldr	r1, [pc, #32]	@ (8001964 <__NVIC_SetPriority+0x50>)
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	3b04      	subs	r3, #4
 800194c:	0112      	lsls	r2, r2, #4
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	440b      	add	r3, r1
 8001952:	761a      	strb	r2, [r3, #24]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000e100 	.word	0xe000e100
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	@ 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f1c3 0307 	rsb	r3, r3, #7
 8001982:	2b04      	cmp	r3, #4
 8001984:	bf28      	it	cs
 8001986:	2304      	movcs	r3, #4
 8001988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3304      	adds	r3, #4
 800198e:	2b06      	cmp	r3, #6
 8001990:	d902      	bls.n	8001998 <NVIC_EncodePriority+0x30>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3b03      	subs	r3, #3
 8001996:	e000      	b.n	800199a <NVIC_EncodePriority+0x32>
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	f04f 32ff 	mov.w	r2, #4294967295
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43da      	mvns	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	401a      	ands	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43d9      	mvns	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	4313      	orrs	r3, r2
         );
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3724      	adds	r7, #36	@ 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ff4c 	bl	8001874 <__NVIC_SetPriorityGrouping>
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019f2:	f7ff ff63 	bl	80018bc <__NVIC_GetPriorityGrouping>
 80019f6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	68b9      	ldr	r1, [r7, #8]
 80019fc:	6978      	ldr	r0, [r7, #20]
 80019fe:	f7ff ffb3 	bl	8001968 <NVIC_EncodePriority>
 8001a02:	4602      	mov	r2, r0
 8001a04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a08:	4611      	mov	r1, r2
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ff82 	bl	8001914 <__NVIC_SetPriority>
}
 8001a10:	bf00      	nop
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff ff56 	bl	80018d8 <__NVIC_EnableIRQ>
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d844      	bhi.n	8001acc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001a42:	a201      	add	r2, pc, #4	@ (adr r2, 8001a48 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a48:	08001a6b 	.word	0x08001a6b
 8001a4c:	08001a89 	.word	0x08001a89
 8001a50:	08001aab 	.word	0x08001aab
 8001a54:	08001acd 	.word	0x08001acd
 8001a58:	08001a5d 	.word	0x08001a5d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001adc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a1e      	ldr	r2, [pc, #120]	@ (8001adc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a62:	f043 0304 	orr.w	r3, r3, #4
 8001a66:	6013      	str	r3, [r2, #0]
      break;
 8001a68:	e031      	b.n	8001ace <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001adc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8001adc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a70:	f023 0304 	bic.w	r3, r3, #4
 8001a74:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001a76:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001a7c:	4a18      	ldr	r2, [pc, #96]	@ (8001ae0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a7e:	f023 030c 	bic.w	r3, r3, #12
 8001a82:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001a86:	e022      	b.n	8001ace <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001a88:	4b14      	ldr	r3, [pc, #80]	@ (8001adc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a13      	ldr	r2, [pc, #76]	@ (8001adc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a8e:	f023 0304 	bic.w	r3, r3, #4
 8001a92:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001a94:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001a9a:	f023 030c 	bic.w	r3, r3, #12
 8001a9e:	4a10      	ldr	r2, [pc, #64]	@ (8001ae0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001aa8:	e011      	b.n	8001ace <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a0b      	ldr	r2, [pc, #44]	@ (8001adc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ab0:	f023 0304 	bic.w	r3, r3, #4
 8001ab4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ab8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001abc:	f023 030c 	bic.w	r3, r3, #12
 8001ac0:	4a07      	ldr	r2, [pc, #28]	@ (8001ae0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ac2:	f043 0308 	orr.w	r3, r3, #8
 8001ac6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001aca:	e000      	b.n	8001ace <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001acc:	bf00      	nop
  }
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000e010 	.word	0xe000e010
 8001ae0:	44020c00 	.word	0x44020c00

08001ae4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001af2:	e142      	b.n	8001d7a <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	2101      	movs	r1, #1
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	fa01 f303 	lsl.w	r3, r1, r3
 8001b00:	4013      	ands	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 8134 	beq.w	8001d74 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d003      	beq.n	8001b1c <HAL_GPIO_Init+0x38>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b12      	cmp	r3, #18
 8001b1a:	d125      	bne.n	8001b68 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	08da      	lsrs	r2, r3, #3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3208      	adds	r2, #8
 8001b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b28:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	220f      	movs	r2, #15
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	f003 020f 	and.w	r2, r3, #15
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	08da      	lsrs	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3208      	adds	r2, #8
 8001b62:	6979      	ldr	r1, [r7, #20]
 8001b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0203 	and.w	r2, r3, #3
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d00b      	beq.n	8001bbc <HAL_GPIO_Init+0xd8>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d007      	beq.n	8001bbc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bb0:	2b11      	cmp	r3, #17
 8001bb2:	d003      	beq.n	8001bbc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b12      	cmp	r3, #18
 8001bba:	d130      	bne.n	8001c1e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	091b      	lsrs	r3, r3, #4
 8001c08:	f003 0201 	and.w	r2, r3, #1
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d109      	bne.n	8001c3e <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d11b      	bne.n	8001c6e <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d017      	beq.n	8001c6e <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	2203      	movs	r2, #3
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	4013      	ands	r3, r2
 8001c54:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d07c      	beq.n	8001d74 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001c7a:	4a47      	ldr	r2, [pc, #284]	@ (8001d98 <HAL_GPIO_Init+0x2b4>)
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	089b      	lsrs	r3, r3, #2
 8001c80:	3318      	adds	r3, #24
 8001c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c86:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	220f      	movs	r2, #15
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	0a9a      	lsrs	r2, r3, #10
 8001ca2:	4b3e      	ldr	r3, [pc, #248]	@ (8001d9c <HAL_GPIO_Init+0x2b8>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	f002 0203 	and.w	r2, r2, #3
 8001cac:	00d2      	lsls	r2, r2, #3
 8001cae:	4093      	lsls	r3, r2
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001cb6:	4938      	ldr	r1, [pc, #224]	@ (8001d98 <HAL_GPIO_Init+0x2b4>)
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	3318      	adds	r3, #24
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001cc4:	4b34      	ldr	r3, [pc, #208]	@ (8001d98 <HAL_GPIO_Init+0x2b4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001ce8:	4a2b      	ldr	r2, [pc, #172]	@ (8001d98 <HAL_GPIO_Init+0x2b4>)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001cee:	4b2a      	ldr	r3, [pc, #168]	@ (8001d98 <HAL_GPIO_Init+0x2b4>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001d12:	4a21      	ldr	r2, [pc, #132]	@ (8001d98 <HAL_GPIO_Init+0x2b4>)
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001d18:	4b1f      	ldr	r3, [pc, #124]	@ (8001d98 <HAL_GPIO_Init+0x2b4>)
 8001d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d1e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	4013      	ands	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001d3e:	4a16      	ldr	r2, [pc, #88]	@ (8001d98 <HAL_GPIO_Init+0x2b4>)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001d46:	4b14      	ldr	r3, [pc, #80]	@ (8001d98 <HAL_GPIO_Init+0x2b4>)
 8001d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d4c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	4013      	ands	r3, r2
 8001d56:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d98 <HAL_GPIO_Init+0x2b4>)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	3301      	adds	r3, #1
 8001d78:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	fa22 f303 	lsr.w	r3, r2, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f47f aeb5 	bne.w	8001af4 <HAL_GPIO_Init+0x10>
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	bf00      	nop
 8001d8e:	371c      	adds	r7, #28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	44022000 	.word	0x44022000
 8001d9c:	002f7f7f 	.word	0x002f7f7f

08001da0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	887b      	ldrh	r3, [r7, #2]
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001db8:	2301      	movs	r3, #1
 8001dba:	73fb      	strb	r3, [r7, #15]
 8001dbc:	e001      	b.n	8001dc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	807b      	strh	r3, [r7, #2]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001de0:	787b      	ldrb	r3, [r7, #1]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001de6:	887a      	ldrh	r2, [r7, #2]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dec:	e002      	b.n	8001df4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dee:	887a      	ldrh	r2, [r7, #2]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e08d      	b.n	8001f2e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d106      	bne.n	8001e2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7fe ff1a 	bl	8000c60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2224      	movs	r2, #36	@ 0x24
 8001e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0201 	bic.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d107      	bne.n	8001e7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	e006      	b.n	8001e88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001e86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d108      	bne.n	8001ea2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	e007      	b.n	8001eb2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001eb0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ec0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ec4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ed4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691a      	ldr	r2, [r3, #16]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69d9      	ldr	r1, [r3, #28]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1a      	ldr	r2, [r3, #32]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0201 	orr.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2220      	movs	r2, #32
 8001f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af02      	add	r7, sp, #8
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	607a      	str	r2, [r7, #4]
 8001f42:	461a      	mov	r2, r3
 8001f44:	460b      	mov	r3, r1
 8001f46:	817b      	strh	r3, [r7, #10]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b20      	cmp	r3, #32
 8001f56:	f040 80da 	bne.w	800210e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d101      	bne.n	8001f68 <HAL_I2C_Master_Transmit+0x30>
 8001f64:	2302      	movs	r3, #2
 8001f66:	e0d3      	b.n	8002110 <HAL_I2C_Master_Transmit+0x1d8>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f70:	f7ff fc50 	bl	8001814 <HAL_GetTick>
 8001f74:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	2319      	movs	r3, #25
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 f8f0 	bl	8002168 <I2C_WaitOnFlagUntilTimeout>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e0be      	b.n	8002110 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2221      	movs	r2, #33	@ 0x21
 8001f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2210      	movs	r2, #16
 8001f9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	893a      	ldrh	r2, [r7, #8]
 8001fb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	2bff      	cmp	r3, #255	@ 0xff
 8001fc2:	d90e      	bls.n	8001fe2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	22ff      	movs	r2, #255	@ 0xff
 8001fc8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	8979      	ldrh	r1, [r7, #10]
 8001fd2:	4b51      	ldr	r3, [pc, #324]	@ (8002118 <HAL_I2C_Master_Transmit+0x1e0>)
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 fa88 	bl	80024f0 <I2C_TransferConfig>
 8001fe0:	e06c      	b.n	80020bc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	8979      	ldrh	r1, [r7, #10]
 8001ff4:	4b48      	ldr	r3, [pc, #288]	@ (8002118 <HAL_I2C_Master_Transmit+0x1e0>)
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 fa77 	bl	80024f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002002:	e05b      	b.n	80020bc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	6a39      	ldr	r1, [r7, #32]
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f000 f906 	bl	800221a <I2C_WaitOnTXISFlagUntilTimeout>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e07b      	b.n	8002110 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201c:	781a      	ldrb	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002032:	b29b      	uxth	r3, r3
 8002034:	3b01      	subs	r3, #1
 8002036:	b29a      	uxth	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d034      	beq.n	80020bc <HAL_I2C_Master_Transmit+0x184>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002056:	2b00      	cmp	r3, #0
 8002058:	d130      	bne.n	80020bc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	2200      	movs	r2, #0
 8002062:	2180      	movs	r1, #128	@ 0x80
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 f87f 	bl	8002168 <I2C_WaitOnFlagUntilTimeout>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e04d      	b.n	8002110 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002078:	b29b      	uxth	r3, r3
 800207a:	2bff      	cmp	r3, #255	@ 0xff
 800207c:	d90e      	bls.n	800209c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	22ff      	movs	r2, #255	@ 0xff
 8002082:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002088:	b2da      	uxtb	r2, r3
 800208a:	8979      	ldrh	r1, [r7, #10]
 800208c:	2300      	movs	r3, #0
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f000 fa2b 	bl	80024f0 <I2C_TransferConfig>
 800209a:	e00f      	b.n	80020bc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	8979      	ldrh	r1, [r7, #10]
 80020ae:	2300      	movs	r3, #0
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 fa1a 	bl	80024f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d19e      	bne.n	8002004 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	6a39      	ldr	r1, [r7, #32]
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 f8ec 	bl	80022a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e01a      	b.n	8002110 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2220      	movs	r2, #32
 80020e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6859      	ldr	r1, [r3, #4]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4b0b      	ldr	r3, [pc, #44]	@ (800211c <HAL_I2C_Master_Transmit+0x1e4>)
 80020ee:	400b      	ands	r3, r1
 80020f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2220      	movs	r2, #32
 80020f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	e000      	b.n	8002110 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800210e:	2302      	movs	r3, #2
  }
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	80002000 	.word	0x80002000
 800211c:	fe00e800 	.word	0xfe00e800

08002120 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b02      	cmp	r3, #2
 8002134:	d103      	bne.n	800213e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2200      	movs	r2, #0
 800213c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b01      	cmp	r3, #1
 800214a:	d007      	beq.n	800215c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699a      	ldr	r2, [r3, #24]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	619a      	str	r2, [r3, #24]
  }
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	4613      	mov	r3, r2
 8002176:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002178:	e03b      	b.n	80021f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	6839      	ldr	r1, [r7, #0]
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 f8d6 	bl	8002330 <I2C_IsErrorOccurred>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e041      	b.n	8002212 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002194:	d02d      	beq.n	80021f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002196:	f7ff fb3d 	bl	8001814 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d302      	bcc.n	80021ac <I2C_WaitOnFlagUntilTimeout+0x44>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d122      	bne.n	80021f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	699a      	ldr	r2, [r3, #24]
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	4013      	ands	r3, r2
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	bf0c      	ite	eq
 80021bc:	2301      	moveq	r3, #1
 80021be:	2300      	movne	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d113      	bne.n	80021f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ce:	f043 0220 	orr.w	r2, r3, #32
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2220      	movs	r2, #32
 80021da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e00f      	b.n	8002212 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	699a      	ldr	r2, [r3, #24]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	4013      	ands	r3, r2
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	429a      	cmp	r2, r3
 8002200:	bf0c      	ite	eq
 8002202:	2301      	moveq	r3, #1
 8002204:	2300      	movne	r3, #0
 8002206:	b2db      	uxtb	r3, r3
 8002208:	461a      	mov	r2, r3
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	429a      	cmp	r2, r3
 800220e:	d0b4      	beq.n	800217a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b084      	sub	sp, #16
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002226:	e033      	b.n	8002290 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	68b9      	ldr	r1, [r7, #8]
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 f87f 	bl	8002330 <I2C_IsErrorOccurred>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e031      	b.n	80022a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002242:	d025      	beq.n	8002290 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002244:	f7ff fae6 	bl	8001814 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	429a      	cmp	r2, r3
 8002252:	d302      	bcc.n	800225a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d11a      	bne.n	8002290 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b02      	cmp	r3, #2
 8002266:	d013      	beq.n	8002290 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226c:	f043 0220 	orr.w	r2, r3, #32
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e007      	b.n	80022a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b02      	cmp	r3, #2
 800229c:	d1c4      	bne.n	8002228 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022b4:	e02f      	b.n	8002316 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	68b9      	ldr	r1, [r7, #8]
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 f838 	bl	8002330 <I2C_IsErrorOccurred>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e02d      	b.n	8002326 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ca:	f7ff faa3 	bl	8001814 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d302      	bcc.n	80022e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d11a      	bne.n	8002316 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	f003 0320 	and.w	r3, r3, #32
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	d013      	beq.n	8002316 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f2:	f043 0220 	orr.w	r2, r3, #32
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2220      	movs	r2, #32
 80022fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e007      	b.n	8002326 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f003 0320 	and.w	r3, r3, #32
 8002320:	2b20      	cmp	r3, #32
 8002322:	d1c8      	bne.n	80022b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	@ 0x28
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	f003 0310 	and.w	r3, r3, #16
 8002358:	2b00      	cmp	r3, #0
 800235a:	d068      	beq.n	800242e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2210      	movs	r2, #16
 8002362:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002364:	e049      	b.n	80023fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236c:	d045      	beq.n	80023fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800236e:	f7ff fa51 	bl	8001814 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	429a      	cmp	r2, r3
 800237c:	d302      	bcc.n	8002384 <I2C_IsErrorOccurred+0x54>
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d13a      	bne.n	80023fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800238e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002396:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023a6:	d121      	bne.n	80023ec <I2C_IsErrorOccurred+0xbc>
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023ae:	d01d      	beq.n	80023ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	2b20      	cmp	r3, #32
 80023b4:	d01a      	beq.n	80023ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80023c6:	f7ff fa25 	bl	8001814 <HAL_GetTick>
 80023ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023cc:	e00e      	b.n	80023ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80023ce:	f7ff fa21 	bl	8001814 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b19      	cmp	r3, #25
 80023da:	d907      	bls.n	80023ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	f043 0320 	orr.w	r3, r3, #32
 80023e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80023ea:	e006      	b.n	80023fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	f003 0320 	and.w	r3, r3, #32
 80023f6:	2b20      	cmp	r3, #32
 80023f8:	d1e9      	bne.n	80023ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f003 0320 	and.w	r3, r3, #32
 8002404:	2b20      	cmp	r3, #32
 8002406:	d003      	beq.n	8002410 <I2C_IsErrorOccurred+0xe0>
 8002408:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0aa      	beq.n	8002366 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002410:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002414:	2b00      	cmp	r3, #0
 8002416:	d103      	bne.n	8002420 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2220      	movs	r2, #32
 800241e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	f043 0304 	orr.w	r3, r3, #4
 8002426:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00b      	beq.n	8002458 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002450:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00b      	beq.n	800247a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	f043 0308 	orr.w	r3, r3, #8
 8002468:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002472:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00b      	beq.n	800249c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	f043 0302 	orr.w	r3, r3, #2
 800248a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002494:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800249c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d01c      	beq.n	80024de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f7ff fe3b 	bl	8002120 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6859      	ldr	r1, [r3, #4]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b0d      	ldr	r3, [pc, #52]	@ (80024ec <I2C_IsErrorOccurred+0x1bc>)
 80024b6:	400b      	ands	r3, r1
 80024b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	431a      	orrs	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2220      	movs	r2, #32
 80024ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80024de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3728      	adds	r7, #40	@ 0x28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	fe00e800 	.word	0xfe00e800

080024f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	607b      	str	r3, [r7, #4]
 80024fa:	460b      	mov	r3, r1
 80024fc:	817b      	strh	r3, [r7, #10]
 80024fe:	4613      	mov	r3, r2
 8002500:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002502:	897b      	ldrh	r3, [r7, #10]
 8002504:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002508:	7a7b      	ldrb	r3, [r7, #9]
 800250a:	041b      	lsls	r3, r3, #16
 800250c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002510:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	4313      	orrs	r3, r2
 800251a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800251e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	0d5b      	lsrs	r3, r3, #21
 800252a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800252e:	4b08      	ldr	r3, [pc, #32]	@ (8002550 <I2C_TransferConfig+0x60>)
 8002530:	430b      	orrs	r3, r1
 8002532:	43db      	mvns	r3, r3
 8002534:	ea02 0103 	and.w	r1, r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	430a      	orrs	r2, r1
 8002540:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002542:	bf00      	nop
 8002544:	371c      	adds	r7, #28
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	03ff63ff 	.word	0x03ff63ff

08002554 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b20      	cmp	r3, #32
 8002568:	d138      	bne.n	80025dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002574:	2302      	movs	r3, #2
 8002576:	e032      	b.n	80025de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2224      	movs	r2, #36	@ 0x24
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6819      	ldr	r1, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2220      	movs	r2, #32
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	e000      	b.n	80025de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025dc:	2302      	movs	r3, #2
  }
}
 80025de:	4618      	mov	r0, r3
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b085      	sub	sp, #20
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d139      	bne.n	8002674 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800260a:	2302      	movs	r3, #2
 800260c:	e033      	b.n	8002676 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2224      	movs	r2, #36	@ 0x24
 800261a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 0201 	bic.w	r2, r2, #1
 800262c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800263c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0201 	orr.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	e000      	b.n	8002676 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002674:	2302      	movs	r3, #2
  }
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d102      	bne.n	8002698 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	f000 bc28 	b.w	8002ee8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002698:	4b94      	ldr	r3, [pc, #592]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	f003 0318 	and.w	r3, r3, #24
 80026a0:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80026a2:	4b92      	ldr	r3, [pc, #584]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 80026a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0310 	and.w	r3, r3, #16
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d05b      	beq.n	8002770 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d005      	beq.n	80026ca <HAL_RCC_OscConfig+0x46>
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	2b18      	cmp	r3, #24
 80026c2:	d114      	bne.n	80026ee <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d111      	bne.n	80026ee <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d102      	bne.n	80026d8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	f000 bc08 	b.w	8002ee8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80026d8:	4b84      	ldr	r3, [pc, #528]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	041b      	lsls	r3, r3, #16
 80026e6:	4981      	ldr	r1, [pc, #516]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80026ec:	e040      	b.n	8002770 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d023      	beq.n	800273e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80026f6:	4b7d      	ldr	r3, [pc, #500]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a7c      	ldr	r2, [pc, #496]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 80026fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002702:	f7ff f887 	bl	8001814 <HAL_GetTick>
 8002706:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800270a:	f7ff f883 	bl	8001814 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e3e5      	b.n	8002ee8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800271c:	4b73      	ldr	r3, [pc, #460]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002728:	4b70      	ldr	r3, [pc, #448]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	041b      	lsls	r3, r3, #16
 8002736:	496d      	ldr	r1, [pc, #436]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 8002738:	4313      	orrs	r3, r2
 800273a:	618b      	str	r3, [r1, #24]
 800273c:	e018      	b.n	8002770 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800273e:	4b6b      	ldr	r3, [pc, #428]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a6a      	ldr	r2, [pc, #424]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 8002744:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274a:	f7ff f863 	bl	8001814 <HAL_GetTick>
 800274e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002752:	f7ff f85f 	bl	8001814 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e3c1      	b.n	8002ee8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002764:	4b61      	ldr	r3, [pc, #388]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1f0      	bne.n	8002752 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 80a0 	beq.w	80028be <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	2b10      	cmp	r3, #16
 8002782:	d005      	beq.n	8002790 <HAL_RCC_OscConfig+0x10c>
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	2b18      	cmp	r3, #24
 8002788:	d109      	bne.n	800279e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	2b03      	cmp	r3, #3
 800278e:	d106      	bne.n	800279e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	f040 8092 	bne.w	80028be <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e3a4      	b.n	8002ee8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027a6:	d106      	bne.n	80027b6 <HAL_RCC_OscConfig+0x132>
 80027a8:	4b50      	ldr	r3, [pc, #320]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a4f      	ldr	r2, [pc, #316]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 80027ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	e058      	b.n	8002868 <HAL_RCC_OscConfig+0x1e4>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d112      	bne.n	80027e4 <HAL_RCC_OscConfig+0x160>
 80027be:	4b4b      	ldr	r3, [pc, #300]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a4a      	ldr	r2, [pc, #296]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 80027c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	4b48      	ldr	r3, [pc, #288]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a47      	ldr	r2, [pc, #284]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 80027d0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	4b45      	ldr	r3, [pc, #276]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a44      	ldr	r2, [pc, #272]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 80027dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	e041      	b.n	8002868 <HAL_RCC_OscConfig+0x1e4>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027ec:	d112      	bne.n	8002814 <HAL_RCC_OscConfig+0x190>
 80027ee:	4b3f      	ldr	r3, [pc, #252]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a3e      	ldr	r2, [pc, #248]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 80027f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	4b3c      	ldr	r3, [pc, #240]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a3b      	ldr	r2, [pc, #236]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 8002800:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	4b39      	ldr	r3, [pc, #228]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a38      	ldr	r2, [pc, #224]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 800280c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	e029      	b.n	8002868 <HAL_RCC_OscConfig+0x1e4>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800281c:	d112      	bne.n	8002844 <HAL_RCC_OscConfig+0x1c0>
 800281e:	4b33      	ldr	r3, [pc, #204]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a32      	ldr	r2, [pc, #200]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 8002824:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	4b30      	ldr	r3, [pc, #192]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a2f      	ldr	r2, [pc, #188]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 8002830:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	4b2d      	ldr	r3, [pc, #180]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a2c      	ldr	r2, [pc, #176]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 800283c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	e011      	b.n	8002868 <HAL_RCC_OscConfig+0x1e4>
 8002844:	4b29      	ldr	r3, [pc, #164]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a28      	ldr	r2, [pc, #160]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 800284a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	4b26      	ldr	r3, [pc, #152]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a25      	ldr	r2, [pc, #148]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 8002856:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	4b23      	ldr	r3, [pc, #140]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a22      	ldr	r2, [pc, #136]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 8002862:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d013      	beq.n	8002898 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7fe ffd0 	bl	8001814 <HAL_GetTick>
 8002874:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002878:	f7fe ffcc 	bl	8001814 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b64      	cmp	r3, #100	@ 0x64
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e32e      	b.n	8002ee8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800288a:	4b18      	ldr	r3, [pc, #96]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0x1f4>
 8002896:	e012      	b.n	80028be <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe ffbc 	bl	8001814 <HAL_GetTick>
 800289c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80028a0:	f7fe ffb8 	bl	8001814 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b64      	cmp	r3, #100	@ 0x64
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e31a      	b.n	8002ee8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028b2:	4b0e      	ldr	r3, [pc, #56]	@ (80028ec <HAL_RCC_OscConfig+0x268>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 809a 	beq.w	8002a00 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <HAL_RCC_OscConfig+0x25a>
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	2b18      	cmp	r3, #24
 80028d6:	d149      	bne.n	800296c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d146      	bne.n	800296c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d104      	bne.n	80028f0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e2fe      	b.n	8002ee8 <HAL_RCC_OscConfig+0x864>
 80028ea:	bf00      	nop
 80028ec:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d11c      	bne.n	8002930 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80028f6:	4b9a      	ldr	r3, [pc, #616]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0218 	and.w	r2, r3, #24
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	429a      	cmp	r2, r3
 8002904:	d014      	beq.n	8002930 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002906:	4b96      	ldr	r3, [pc, #600]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 0218 	bic.w	r2, r3, #24
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	4993      	ldr	r1, [pc, #588]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002914:	4313      	orrs	r3, r2
 8002916:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002918:	f000 fdd0 	bl	80034bc <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800291c:	4b91      	ldr	r3, [pc, #580]	@ (8002b64 <HAL_RCC_OscConfig+0x4e0>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f7fe fce3 	bl	80012ec <HAL_InitTick>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e2db      	b.n	8002ee8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002930:	f7fe ff70 	bl	8001814 <HAL_GetTick>
 8002934:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002938:	f7fe ff6c 	bl	8001814 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e2ce      	b.n	8002ee8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800294a:	4b85      	ldr	r3, [pc, #532]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002956:	4b82      	ldr	r3, [pc, #520]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	041b      	lsls	r3, r3, #16
 8002964:	497e      	ldr	r1, [pc, #504]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002966:	4313      	orrs	r3, r2
 8002968:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800296a:	e049      	b.n	8002a00 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d02c      	beq.n	80029ce <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002974:	4b7a      	ldr	r3, [pc, #488]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f023 0218 	bic.w	r2, r3, #24
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	4977      	ldr	r1, [pc, #476]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002982:	4313      	orrs	r3, r2
 8002984:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002986:	4b76      	ldr	r3, [pc, #472]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a75      	ldr	r2, [pc, #468]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002992:	f7fe ff3f 	bl	8001814 <HAL_GetTick>
 8002996:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800299a:	f7fe ff3b 	bl	8001814 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e29d      	b.n	8002ee8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029ac:	4b6c      	ldr	r3, [pc, #432]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f0      	beq.n	800299a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80029b8:	4b69      	ldr	r3, [pc, #420]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	041b      	lsls	r3, r3, #16
 80029c6:	4966      	ldr	r1, [pc, #408]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	610b      	str	r3, [r1, #16]
 80029cc:	e018      	b.n	8002a00 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ce:	4b64      	ldr	r3, [pc, #400]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a63      	ldr	r2, [pc, #396]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 80029d4:	f023 0301 	bic.w	r3, r3, #1
 80029d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029da:	f7fe ff1b 	bl	8001814 <HAL_GetTick>
 80029de:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80029e2:	f7fe ff17 	bl	8001814 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e279      	b.n	8002ee8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029f4:	4b5a      	ldr	r3, [pc, #360]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1f0      	bne.n	80029e2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d03c      	beq.n	8002a86 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d01c      	beq.n	8002a4e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a14:	4b52      	ldr	r3, [pc, #328]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a1a:	4a51      	ldr	r2, [pc, #324]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002a1c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a24:	f7fe fef6 	bl	8001814 <HAL_GetTick>
 8002a28:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002a2c:	f7fe fef2 	bl	8001814 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e254      	b.n	8002ee8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002a3e:	4b48      	ldr	r3, [pc, #288]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002a40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0ef      	beq.n	8002a2c <HAL_RCC_OscConfig+0x3a8>
 8002a4c:	e01b      	b.n	8002a86 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a4e:	4b44      	ldr	r3, [pc, #272]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002a50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a54:	4a42      	ldr	r2, [pc, #264]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002a56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5e:	f7fe fed9 	bl	8001814 <HAL_GetTick>
 8002a62:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002a66:	f7fe fed5 	bl	8001814 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e237      	b.n	8002ee8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002a78:	4b39      	ldr	r3, [pc, #228]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002a7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1ef      	bne.n	8002a66 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80d2 	beq.w	8002c38 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002a94:	4b34      	ldr	r3, [pc, #208]	@ (8002b68 <HAL_RCC_OscConfig+0x4e4>)
 8002a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d118      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002aa0:	4b31      	ldr	r3, [pc, #196]	@ (8002b68 <HAL_RCC_OscConfig+0x4e4>)
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa4:	4a30      	ldr	r2, [pc, #192]	@ (8002b68 <HAL_RCC_OscConfig+0x4e4>)
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aac:	f7fe feb2 	bl	8001814 <HAL_GetTick>
 8002ab0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab4:	f7fe feae 	bl	8001814 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e210      	b.n	8002ee8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002ac6:	4b28      	ldr	r3, [pc, #160]	@ (8002b68 <HAL_RCC_OscConfig+0x4e4>)
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d108      	bne.n	8002aec <HAL_RCC_OscConfig+0x468>
 8002ada:	4b21      	ldr	r3, [pc, #132]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002adc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ae0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002aea:	e074      	b.n	8002bd6 <HAL_RCC_OscConfig+0x552>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d118      	bne.n	8002b26 <HAL_RCC_OscConfig+0x4a2>
 8002af4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002af6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002afa:	4a19      	ldr	r2, [pc, #100]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002afc:	f023 0301 	bic.w	r3, r3, #1
 8002b00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b04:	4b16      	ldr	r3, [pc, #88]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002b06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b0a:	4a15      	ldr	r2, [pc, #84]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002b0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b10:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b14:	4b12      	ldr	r3, [pc, #72]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002b16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b1a:	4a11      	ldr	r2, [pc, #68]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002b1c:	f023 0304 	bic.w	r3, r3, #4
 8002b20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b24:	e057      	b.n	8002bd6 <HAL_RCC_OscConfig+0x552>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b05      	cmp	r3, #5
 8002b2c:	d11e      	bne.n	8002b6c <HAL_RCC_OscConfig+0x4e8>
 8002b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002b30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b34:	4a0a      	ldr	r2, [pc, #40]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002b36:	f043 0304 	orr.w	r3, r3, #4
 8002b3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b3e:	4b08      	ldr	r3, [pc, #32]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002b40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b44:	4a06      	ldr	r2, [pc, #24]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002b46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b4e:	4b04      	ldr	r3, [pc, #16]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002b50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b54:	4a02      	ldr	r2, [pc, #8]	@ (8002b60 <HAL_RCC_OscConfig+0x4dc>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b5e:	e03a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x552>
 8002b60:	44020c00 	.word	0x44020c00
 8002b64:	2000001c 	.word	0x2000001c
 8002b68:	44020800 	.word	0x44020800
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b85      	cmp	r3, #133	@ 0x85
 8002b72:	d118      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x522>
 8002b74:	4ba2      	ldr	r3, [pc, #648]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002b76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b7a:	4aa1      	ldr	r2, [pc, #644]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002b7c:	f043 0304 	orr.w	r3, r3, #4
 8002b80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b84:	4b9e      	ldr	r3, [pc, #632]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002b86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b8a:	4a9d      	ldr	r2, [pc, #628]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002b8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b90:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b94:	4b9a      	ldr	r3, [pc, #616]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002b96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b9a:	4a99      	ldr	r2, [pc, #612]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ba4:	e017      	b.n	8002bd6 <HAL_RCC_OscConfig+0x552>
 8002ba6:	4b96      	ldr	r3, [pc, #600]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002ba8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bac:	4a94      	ldr	r2, [pc, #592]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002bae:	f023 0301 	bic.w	r3, r3, #1
 8002bb2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002bb6:	4b92      	ldr	r3, [pc, #584]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002bb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bbc:	4a90      	ldr	r2, [pc, #576]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002bbe:	f023 0304 	bic.w	r3, r3, #4
 8002bc2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002bc6:	4b8e      	ldr	r3, [pc, #568]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bcc:	4a8c      	ldr	r2, [pc, #560]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002bce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bd2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d016      	beq.n	8002c0c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bde:	f7fe fe19 	bl	8001814 <HAL_GetTick>
 8002be2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002be4:	e00a      	b.n	8002bfc <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be6:	f7fe fe15 	bl	8001814 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e175      	b.n	8002ee8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bfc:	4b80      	ldr	r3, [pc, #512]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002bfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0ed      	beq.n	8002be6 <HAL_RCC_OscConfig+0x562>
 8002c0a:	e015      	b.n	8002c38 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0c:	f7fe fe02 	bl	8001814 <HAL_GetTick>
 8002c10:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c12:	e00a      	b.n	8002c2a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c14:	f7fe fdfe 	bl	8001814 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e15e      	b.n	8002ee8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c2a:	4b75      	ldr	r3, [pc, #468]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002c2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1ed      	bne.n	8002c14 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0320 	and.w	r3, r3, #32
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d036      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d019      	beq.n	8002c80 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c4c:	4b6c      	ldr	r3, [pc, #432]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a6b      	ldr	r2, [pc, #428]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002c52:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c58:	f7fe fddc 	bl	8001814 <HAL_GetTick>
 8002c5c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002c60:	f7fe fdd8 	bl	8001814 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e13a      	b.n	8002ee8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002c72:	4b63      	ldr	r3, [pc, #396]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0x5dc>
 8002c7e:	e018      	b.n	8002cb2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c80:	4b5f      	ldr	r3, [pc, #380]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a5e      	ldr	r2, [pc, #376]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002c86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8c:	f7fe fdc2 	bl	8001814 <HAL_GetTick>
 8002c90:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002c94:	f7fe fdbe 	bl	8001814 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e120      	b.n	8002ee8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002ca6:	4b56      	ldr	r3, [pc, #344]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 8115 	beq.w	8002ee6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	2b18      	cmp	r3, #24
 8002cc0:	f000 80af 	beq.w	8002e22 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	f040 8086 	bne.w	8002dda <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002cce:	4b4c      	ldr	r3, [pc, #304]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a4b      	ldr	r2, [pc, #300]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002cd4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cda:	f7fe fd9b 	bl	8001814 <HAL_GetTick>
 8002cde:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002ce2:	f7fe fd97 	bl	8001814 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e0f9      	b.n	8002ee8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002cf4:	4b42      	ldr	r3, [pc, #264]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1f0      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002d00:	4b3f      	ldr	r3, [pc, #252]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d04:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002d08:	f023 0303 	bic.w	r3, r3, #3
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d14:	0212      	lsls	r2, r2, #8
 8002d16:	430a      	orrs	r2, r1
 8002d18:	4939      	ldr	r1, [pc, #228]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	628b      	str	r3, [r1, #40]	@ 0x28
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d22:	3b01      	subs	r3, #1
 8002d24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	025b      	lsls	r3, r3, #9
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	041b      	lsls	r3, r3, #16
 8002d3c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d46:	3b01      	subs	r3, #1
 8002d48:	061b      	lsls	r3, r3, #24
 8002d4a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002d4e:	492c      	ldr	r1, [pc, #176]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002d54:	4b2a      	ldr	r3, [pc, #168]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d58:	4a29      	ldr	r2, [pc, #164]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002d5a:	f023 0310 	bic.w	r3, r3, #16
 8002d5e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d64:	4a26      	ldr	r2, [pc, #152]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002d6a:	4b25      	ldr	r3, [pc, #148]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d6e:	4a24      	ldr	r2, [pc, #144]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002d70:	f043 0310 	orr.w	r3, r3, #16
 8002d74:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002d76:	4b22      	ldr	r3, [pc, #136]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7a:	f023 020c 	bic.w	r2, r3, #12
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d82:	491f      	ldr	r1, [pc, #124]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002d88:	4b1d      	ldr	r3, [pc, #116]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8c:	f023 0220 	bic.w	r2, r3, #32
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d94:	491a      	ldr	r1, [pc, #104]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d9a:	4b19      	ldr	r3, [pc, #100]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9e:	4a18      	ldr	r2, [pc, #96]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002da0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002da4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002da6:	4b16      	ldr	r3, [pc, #88]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a15      	ldr	r2, [pc, #84]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002dac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db2:	f7fe fd2f 	bl	8001814 <HAL_GetTick>
 8002db6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002dba:	f7fe fd2b 	bl	8001814 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e08d      	b.n	8002ee8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0x736>
 8002dd8:	e085      	b.n	8002ee6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002dda:	4b09      	ldr	r3, [pc, #36]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a08      	ldr	r2, [pc, #32]	@ (8002e00 <HAL_RCC_OscConfig+0x77c>)
 8002de0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002de4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de6:	f7fe fd15 	bl	8001814 <HAL_GetTick>
 8002dea:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002dec:	e00a      	b.n	8002e04 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002dee:	f7fe fd11 	bl	8001814 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d903      	bls.n	8002e04 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e073      	b.n	8002ee8 <HAL_RCC_OscConfig+0x864>
 8002e00:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002e04:	4b3a      	ldr	r3, [pc, #232]	@ (8002ef0 <HAL_RCC_OscConfig+0x86c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1ee      	bne.n	8002dee <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002e10:	4b37      	ldr	r3, [pc, #220]	@ (8002ef0 <HAL_RCC_OscConfig+0x86c>)
 8002e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e14:	4a36      	ldr	r2, [pc, #216]	@ (8002ef0 <HAL_RCC_OscConfig+0x86c>)
 8002e16:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002e1a:	f023 0303 	bic.w	r3, r3, #3
 8002e1e:	6293      	str	r3, [r2, #40]	@ 0x28
 8002e20:	e061      	b.n	8002ee6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002e22:	4b33      	ldr	r3, [pc, #204]	@ (8002ef0 <HAL_RCC_OscConfig+0x86c>)
 8002e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e26:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e28:	4b31      	ldr	r3, [pc, #196]	@ (8002ef0 <HAL_RCC_OscConfig+0x86c>)
 8002e2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e2c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d031      	beq.n	8002e9a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	f003 0203 	and.w	r2, r3, #3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d12a      	bne.n	8002e9a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	0a1b      	lsrs	r3, r3, #8
 8002e48:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d122      	bne.n	8002e9a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e5e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d11a      	bne.n	8002e9a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	0a5b      	lsrs	r3, r3, #9
 8002e68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e70:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d111      	bne.n	8002e9a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e82:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d108      	bne.n	8002e9a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	0e1b      	lsrs	r3, r3, #24
 8002e8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e94:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d001      	beq.n	8002e9e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e024      	b.n	8002ee8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002e9e:	4b14      	ldr	r3, [pc, #80]	@ (8002ef0 <HAL_RCC_OscConfig+0x86c>)
 8002ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea2:	08db      	lsrs	r3, r3, #3
 8002ea4:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d01a      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef0 <HAL_RCC_OscConfig+0x86c>)
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb4:	4a0e      	ldr	r2, [pc, #56]	@ (8002ef0 <HAL_RCC_OscConfig+0x86c>)
 8002eb6:	f023 0310 	bic.w	r3, r3, #16
 8002eba:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7fe fcaa 	bl	8001814 <HAL_GetTick>
 8002ec0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002ec2:	bf00      	nop
 8002ec4:	f7fe fca6 	bl	8001814 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d0f9      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ed4:	4a06      	ldr	r2, [pc, #24]	@ (8002ef0 <HAL_RCC_OscConfig+0x86c>)
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002eda:	4b05      	ldr	r3, [pc, #20]	@ (8002ef0 <HAL_RCC_OscConfig+0x86c>)
 8002edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ede:	4a04      	ldr	r2, [pc, #16]	@ (8002ef0 <HAL_RCC_OscConfig+0x86c>)
 8002ee0:	f043 0310 	orr.w	r3, r3, #16
 8002ee4:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3720      	adds	r7, #32
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	44020c00 	.word	0x44020c00

08002ef4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e19e      	b.n	8003246 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f08:	4b83      	ldr	r3, [pc, #524]	@ (8003118 <HAL_RCC_ClockConfig+0x224>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 030f 	and.w	r3, r3, #15
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d910      	bls.n	8002f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b80      	ldr	r3, [pc, #512]	@ (8003118 <HAL_RCC_ClockConfig+0x224>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 020f 	bic.w	r2, r3, #15
 8002f1e:	497e      	ldr	r1, [pc, #504]	@ (8003118 <HAL_RCC_ClockConfig+0x224>)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f26:	4b7c      	ldr	r3, [pc, #496]	@ (8003118 <HAL_RCC_ClockConfig+0x224>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d001      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e186      	b.n	8003246 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d012      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	695a      	ldr	r2, [r3, #20]
 8002f48:	4b74      	ldr	r3, [pc, #464]	@ (800311c <HAL_RCC_ClockConfig+0x228>)
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	0a1b      	lsrs	r3, r3, #8
 8002f4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d909      	bls.n	8002f6a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002f56:	4b71      	ldr	r3, [pc, #452]	@ (800311c <HAL_RCC_ClockConfig+0x228>)
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	021b      	lsls	r3, r3, #8
 8002f64:	496d      	ldr	r1, [pc, #436]	@ (800311c <HAL_RCC_ClockConfig+0x228>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d012      	beq.n	8002f9c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	4b68      	ldr	r3, [pc, #416]	@ (800311c <HAL_RCC_ClockConfig+0x228>)
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	091b      	lsrs	r3, r3, #4
 8002f80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d909      	bls.n	8002f9c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002f88:	4b64      	ldr	r3, [pc, #400]	@ (800311c <HAL_RCC_ClockConfig+0x228>)
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	4961      	ldr	r1, [pc, #388]	@ (800311c <HAL_RCC_ClockConfig+0x228>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d010      	beq.n	8002fca <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	4b5b      	ldr	r3, [pc, #364]	@ (800311c <HAL_RCC_ClockConfig+0x228>)
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d908      	bls.n	8002fca <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002fb8:	4b58      	ldr	r3, [pc, #352]	@ (800311c <HAL_RCC_ClockConfig+0x228>)
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	4955      	ldr	r1, [pc, #340]	@ (800311c <HAL_RCC_ClockConfig+0x228>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d010      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	4b50      	ldr	r3, [pc, #320]	@ (800311c <HAL_RCC_ClockConfig+0x228>)
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d908      	bls.n	8002ff8 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002fe6:	4b4d      	ldr	r3, [pc, #308]	@ (800311c <HAL_RCC_ClockConfig+0x228>)
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	f023 020f 	bic.w	r2, r3, #15
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	494a      	ldr	r1, [pc, #296]	@ (800311c <HAL_RCC_ClockConfig+0x228>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 8093 	beq.w	800312c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b03      	cmp	r3, #3
 800300c:	d107      	bne.n	800301e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800300e:	4b43      	ldr	r3, [pc, #268]	@ (800311c <HAL_RCC_ClockConfig+0x228>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d121      	bne.n	800305e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e113      	b.n	8003246 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d107      	bne.n	8003036 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003026:	4b3d      	ldr	r3, [pc, #244]	@ (800311c <HAL_RCC_ClockConfig+0x228>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d115      	bne.n	800305e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e107      	b.n	8003246 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d107      	bne.n	800304e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800303e:	4b37      	ldr	r3, [pc, #220]	@ (800311c <HAL_RCC_ClockConfig+0x228>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003046:	2b00      	cmp	r3, #0
 8003048:	d109      	bne.n	800305e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e0fb      	b.n	8003246 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800304e:	4b33      	ldr	r3, [pc, #204]	@ (800311c <HAL_RCC_ClockConfig+0x228>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e0f3      	b.n	8003246 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800305e:	4b2f      	ldr	r3, [pc, #188]	@ (800311c <HAL_RCC_ClockConfig+0x228>)
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f023 0203 	bic.w	r2, r3, #3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	492c      	ldr	r1, [pc, #176]	@ (800311c <HAL_RCC_ClockConfig+0x228>)
 800306c:	4313      	orrs	r3, r2
 800306e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003070:	f7fe fbd0 	bl	8001814 <HAL_GetTick>
 8003074:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b03      	cmp	r3, #3
 800307c:	d112      	bne.n	80030a4 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800307e:	e00a      	b.n	8003096 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003080:	f7fe fbc8 	bl	8001814 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e0d7      	b.n	8003246 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003096:	4b21      	ldr	r3, [pc, #132]	@ (800311c <HAL_RCC_ClockConfig+0x228>)
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f003 0318 	and.w	r3, r3, #24
 800309e:	2b18      	cmp	r3, #24
 80030a0:	d1ee      	bne.n	8003080 <HAL_RCC_ClockConfig+0x18c>
 80030a2:	e043      	b.n	800312c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d112      	bne.n	80030d2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030ac:	e00a      	b.n	80030c4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80030ae:	f7fe fbb1 	bl	8001814 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030bc:	4293      	cmp	r3, r2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e0c0      	b.n	8003246 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030c4:	4b15      	ldr	r3, [pc, #84]	@ (800311c <HAL_RCC_ClockConfig+0x228>)
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	f003 0318 	and.w	r3, r3, #24
 80030cc:	2b10      	cmp	r3, #16
 80030ce:	d1ee      	bne.n	80030ae <HAL_RCC_ClockConfig+0x1ba>
 80030d0:	e02c      	b.n	800312c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d122      	bne.n	8003120 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80030da:	e00a      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80030dc:	f7fe fb9a 	bl	8001814 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e0a9      	b.n	8003246 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80030f2:	4b0a      	ldr	r3, [pc, #40]	@ (800311c <HAL_RCC_ClockConfig+0x228>)
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	f003 0318 	and.w	r3, r3, #24
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d1ee      	bne.n	80030dc <HAL_RCC_ClockConfig+0x1e8>
 80030fe:	e015      	b.n	800312c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003100:	f7fe fb88 	bl	8001814 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800310e:	4293      	cmp	r3, r2
 8003110:	d906      	bls.n	8003120 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e097      	b.n	8003246 <HAL_RCC_ClockConfig+0x352>
 8003116:	bf00      	nop
 8003118:	40022000 	.word	0x40022000
 800311c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003120:	4b4b      	ldr	r3, [pc, #300]	@ (8003250 <HAL_RCC_ClockConfig+0x35c>)
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	f003 0318 	and.w	r3, r3, #24
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1e9      	bne.n	8003100 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d010      	beq.n	800315a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	4b44      	ldr	r3, [pc, #272]	@ (8003250 <HAL_RCC_ClockConfig+0x35c>)
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	429a      	cmp	r2, r3
 8003146:	d208      	bcs.n	800315a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003148:	4b41      	ldr	r3, [pc, #260]	@ (8003250 <HAL_RCC_ClockConfig+0x35c>)
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f023 020f 	bic.w	r2, r3, #15
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	493e      	ldr	r1, [pc, #248]	@ (8003250 <HAL_RCC_ClockConfig+0x35c>)
 8003156:	4313      	orrs	r3, r2
 8003158:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800315a:	4b3e      	ldr	r3, [pc, #248]	@ (8003254 <HAL_RCC_ClockConfig+0x360>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d210      	bcs.n	800318a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003168:	4b3a      	ldr	r3, [pc, #232]	@ (8003254 <HAL_RCC_ClockConfig+0x360>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f023 020f 	bic.w	r2, r3, #15
 8003170:	4938      	ldr	r1, [pc, #224]	@ (8003254 <HAL_RCC_ClockConfig+0x360>)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	4313      	orrs	r3, r2
 8003176:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003178:	4b36      	ldr	r3, [pc, #216]	@ (8003254 <HAL_RCC_ClockConfig+0x360>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 030f 	and.w	r3, r3, #15
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d001      	beq.n	800318a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e05d      	b.n	8003246 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b00      	cmp	r3, #0
 8003194:	d010      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	4b2d      	ldr	r3, [pc, #180]	@ (8003250 <HAL_RCC_ClockConfig+0x35c>)
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d208      	bcs.n	80031b8 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80031a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003250 <HAL_RCC_ClockConfig+0x35c>)
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	4927      	ldr	r1, [pc, #156]	@ (8003250 <HAL_RCC_ClockConfig+0x35c>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d012      	beq.n	80031ea <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	4b21      	ldr	r3, [pc, #132]	@ (8003250 <HAL_RCC_ClockConfig+0x35c>)
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d209      	bcs.n	80031ea <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80031d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003250 <HAL_RCC_ClockConfig+0x35c>)
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	491a      	ldr	r1, [pc, #104]	@ (8003250 <HAL_RCC_ClockConfig+0x35c>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d012      	beq.n	800321c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695a      	ldr	r2, [r3, #20]
 80031fa:	4b15      	ldr	r3, [pc, #84]	@ (8003250 <HAL_RCC_ClockConfig+0x35c>)
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	0a1b      	lsrs	r3, r3, #8
 8003200:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003204:	429a      	cmp	r2, r3
 8003206:	d209      	bcs.n	800321c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003208:	4b11      	ldr	r3, [pc, #68]	@ (8003250 <HAL_RCC_ClockConfig+0x35c>)
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	021b      	lsls	r3, r3, #8
 8003216:	490e      	ldr	r1, [pc, #56]	@ (8003250 <HAL_RCC_ClockConfig+0x35c>)
 8003218:	4313      	orrs	r3, r2
 800321a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800321c:	f000 f822 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 8003220:	4602      	mov	r2, r0
 8003222:	4b0b      	ldr	r3, [pc, #44]	@ (8003250 <HAL_RCC_ClockConfig+0x35c>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	490b      	ldr	r1, [pc, #44]	@ (8003258 <HAL_RCC_ClockConfig+0x364>)
 800322c:	5ccb      	ldrb	r3, [r1, r3]
 800322e:	fa22 f303 	lsr.w	r3, r2, r3
 8003232:	4a0a      	ldr	r2, [pc, #40]	@ (800325c <HAL_RCC_ClockConfig+0x368>)
 8003234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003236:	4b0a      	ldr	r3, [pc, #40]	@ (8003260 <HAL_RCC_ClockConfig+0x36c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe f856 	bl	80012ec <HAL_InitTick>
 8003240:	4603      	mov	r3, r0
 8003242:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003244:	7afb      	ldrb	r3, [r7, #11]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	44020c00 	.word	0x44020c00
 8003254:	40022000 	.word	0x40022000
 8003258:	08009f80 	.word	0x08009f80
 800325c:	20000018 	.word	0x20000018
 8003260:	2000001c 	.word	0x2000001c

08003264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003264:	b480      	push	{r7}
 8003266:	b089      	sub	sp, #36	@ 0x24
 8003268:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800326a:	4b8c      	ldr	r3, [pc, #560]	@ (800349c <HAL_RCC_GetSysClockFreq+0x238>)
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	f003 0318 	and.w	r3, r3, #24
 8003272:	2b08      	cmp	r3, #8
 8003274:	d102      	bne.n	800327c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003276:	4b8a      	ldr	r3, [pc, #552]	@ (80034a0 <HAL_RCC_GetSysClockFreq+0x23c>)
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	e107      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800327c:	4b87      	ldr	r3, [pc, #540]	@ (800349c <HAL_RCC_GetSysClockFreq+0x238>)
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	f003 0318 	and.w	r3, r3, #24
 8003284:	2b00      	cmp	r3, #0
 8003286:	d112      	bne.n	80032ae <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003288:	4b84      	ldr	r3, [pc, #528]	@ (800349c <HAL_RCC_GetSysClockFreq+0x238>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0320 	and.w	r3, r3, #32
 8003290:	2b00      	cmp	r3, #0
 8003292:	d009      	beq.n	80032a8 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003294:	4b81      	ldr	r3, [pc, #516]	@ (800349c <HAL_RCC_GetSysClockFreq+0x238>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	08db      	lsrs	r3, r3, #3
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	4a81      	ldr	r2, [pc, #516]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x240>)
 80032a0:	fa22 f303 	lsr.w	r3, r2, r3
 80032a4:	61fb      	str	r3, [r7, #28]
 80032a6:	e0f1      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80032a8:	4b7e      	ldr	r3, [pc, #504]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x240>)
 80032aa:	61fb      	str	r3, [r7, #28]
 80032ac:	e0ee      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032ae:	4b7b      	ldr	r3, [pc, #492]	@ (800349c <HAL_RCC_GetSysClockFreq+0x238>)
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f003 0318 	and.w	r3, r3, #24
 80032b6:	2b10      	cmp	r3, #16
 80032b8:	d102      	bne.n	80032c0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032ba:	4b7b      	ldr	r3, [pc, #492]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x244>)
 80032bc:	61fb      	str	r3, [r7, #28]
 80032be:	e0e5      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032c0:	4b76      	ldr	r3, [pc, #472]	@ (800349c <HAL_RCC_GetSysClockFreq+0x238>)
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	f003 0318 	and.w	r3, r3, #24
 80032c8:	2b18      	cmp	r3, #24
 80032ca:	f040 80dd 	bne.w	8003488 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80032ce:	4b73      	ldr	r3, [pc, #460]	@ (800349c <HAL_RCC_GetSysClockFreq+0x238>)
 80032d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80032d8:	4b70      	ldr	r3, [pc, #448]	@ (800349c <HAL_RCC_GetSysClockFreq+0x238>)
 80032da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032dc:	0a1b      	lsrs	r3, r3, #8
 80032de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032e2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80032e4:	4b6d      	ldr	r3, [pc, #436]	@ (800349c <HAL_RCC_GetSysClockFreq+0x238>)
 80032e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80032f0:	4b6a      	ldr	r3, [pc, #424]	@ (800349c <HAL_RCC_GetSysClockFreq+0x238>)
 80032f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80032f4:	08db      	lsrs	r3, r3, #3
 80032f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	fb02 f303 	mul.w	r3, r2, r3
 8003300:	ee07 3a90 	vmov	s15, r3
 8003304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003308:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 80b7 	beq.w	8003482 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d003      	beq.n	8003322 <HAL_RCC_GetSysClockFreq+0xbe>
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b03      	cmp	r3, #3
 800331e:	d056      	beq.n	80033ce <HAL_RCC_GetSysClockFreq+0x16a>
 8003320:	e077      	b.n	8003412 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003322:	4b5e      	ldr	r3, [pc, #376]	@ (800349c <HAL_RCC_GetSysClockFreq+0x238>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	2b00      	cmp	r3, #0
 800332c:	d02d      	beq.n	800338a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800332e:	4b5b      	ldr	r3, [pc, #364]	@ (800349c <HAL_RCC_GetSysClockFreq+0x238>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	08db      	lsrs	r3, r3, #3
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	4a5a      	ldr	r2, [pc, #360]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x240>)
 800333a:	fa22 f303 	lsr.w	r3, r2, r3
 800333e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	ee07 3a90 	vmov	s15, r3
 8003346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	ee07 3a90 	vmov	s15, r3
 8003350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003354:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003358:	4b50      	ldr	r3, [pc, #320]	@ (800349c <HAL_RCC_GetSysClockFreq+0x238>)
 800335a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800335c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003360:	ee07 3a90 	vmov	s15, r3
 8003364:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003368:	ed97 6a02 	vldr	s12, [r7, #8]
 800336c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80034ac <HAL_RCC_GetSysClockFreq+0x248>
 8003370:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003374:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003378:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800337c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003384:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003388:	e065      	b.n	8003456 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	ee07 3a90 	vmov	s15, r3
 8003390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003394:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80034b0 <HAL_RCC_GetSysClockFreq+0x24c>
 8003398:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800339c:	4b3f      	ldr	r3, [pc, #252]	@ (800349c <HAL_RCC_GetSysClockFreq+0x238>)
 800339e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a4:	ee07 3a90 	vmov	s15, r3
 80033a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80033ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80033b0:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80034ac <HAL_RCC_GetSysClockFreq+0x248>
 80033b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80033b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80033bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80033c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80033cc:	e043      	b.n	8003456 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	ee07 3a90 	vmov	s15, r3
 80033d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d8:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80034b4 <HAL_RCC_GetSysClockFreq+0x250>
 80033dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033e0:	4b2e      	ldr	r3, [pc, #184]	@ (800349c <HAL_RCC_GetSysClockFreq+0x238>)
 80033e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e8:	ee07 3a90 	vmov	s15, r3
 80033ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80033f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80033f4:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80034ac <HAL_RCC_GetSysClockFreq+0x248>
 80033f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80033fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003400:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003404:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003410:	e021      	b.n	8003456 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	ee07 3a90 	vmov	s15, r3
 8003418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800341c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80034b8 <HAL_RCC_GetSysClockFreq+0x254>
 8003420:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003424:	4b1d      	ldr	r3, [pc, #116]	@ (800349c <HAL_RCC_GetSysClockFreq+0x238>)
 8003426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800342c:	ee07 3a90 	vmov	s15, r3
 8003430:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003434:	ed97 6a02 	vldr	s12, [r7, #8]
 8003438:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80034ac <HAL_RCC_GetSysClockFreq+0x248>
 800343c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003440:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003444:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003448:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800344c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003450:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003454:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003456:	4b11      	ldr	r3, [pc, #68]	@ (800349c <HAL_RCC_GetSysClockFreq+0x238>)
 8003458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800345a:	0a5b      	lsrs	r3, r3, #9
 800345c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003460:	3301      	adds	r3, #1
 8003462:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800346e:	edd7 6a06 	vldr	s13, [r7, #24]
 8003472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800347a:	ee17 3a90 	vmov	r3, s15
 800347e:	61fb      	str	r3, [r7, #28]
 8003480:	e004      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
 8003486:	e001      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003488:	4b06      	ldr	r3, [pc, #24]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x240>)
 800348a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800348c:	69fb      	ldr	r3, [r7, #28]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3724      	adds	r7, #36	@ 0x24
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	44020c00 	.word	0x44020c00
 80034a0:	003d0900 	.word	0x003d0900
 80034a4:	03d09000 	.word	0x03d09000
 80034a8:	007a1200 	.word	0x007a1200
 80034ac:	46000000 	.word	0x46000000
 80034b0:	4c742400 	.word	0x4c742400
 80034b4:	4af42400 	.word	0x4af42400
 80034b8:	4a742400 	.word	0x4a742400

080034bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80034c0:	f7ff fed0 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 80034c4:	4602      	mov	r2, r0
 80034c6:	4b08      	ldr	r3, [pc, #32]	@ (80034e8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80034c8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80034ca:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80034ce:	4907      	ldr	r1, [pc, #28]	@ (80034ec <HAL_RCC_GetHCLKFreq+0x30>)
 80034d0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80034d2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80034d6:	fa22 f303 	lsr.w	r3, r2, r3
 80034da:	4a05      	ldr	r2, [pc, #20]	@ (80034f0 <HAL_RCC_GetHCLKFreq+0x34>)
 80034dc:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80034de:	4b04      	ldr	r3, [pc, #16]	@ (80034f0 <HAL_RCC_GetHCLKFreq+0x34>)
 80034e0:	681b      	ldr	r3, [r3, #0]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	44020c00 	.word	0x44020c00
 80034ec:	08009f80 	.word	0x08009f80
 80034f0:	20000018 	.word	0x20000018

080034f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80034f8:	f7ff ffe0 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4b06      	ldr	r3, [pc, #24]	@ (8003518 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	091b      	lsrs	r3, r3, #4
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	4904      	ldr	r1, [pc, #16]	@ (800351c <HAL_RCC_GetPCLK1Freq+0x28>)
 800350a:	5ccb      	ldrb	r3, [r1, r3]
 800350c:	f003 031f 	and.w	r3, r3, #31
 8003510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003514:	4618      	mov	r0, r3
 8003516:	bd80      	pop	{r7, pc}
 8003518:	44020c00 	.word	0x44020c00
 800351c:	08009f90 	.word	0x08009f90

08003520 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	221f      	movs	r2, #31
 800352e:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8003530:	4b15      	ldr	r3, [pc, #84]	@ (8003588 <HAL_RCC_GetClockConfig+0x68>)
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	f003 0203 	and.w	r2, r3, #3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 800353c:	4b12      	ldr	r3, [pc, #72]	@ (8003588 <HAL_RCC_GetClockConfig+0x68>)
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f003 020f 	and.w	r2, r3, #15
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	091b      	lsrs	r3, r3, #4
 800355a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	0a1b      	lsrs	r3, r3, #8
 8003566:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800356e:	4b07      	ldr	r3, [pc, #28]	@ (800358c <HAL_RCC_GetClockConfig+0x6c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 020f 	and.w	r2, r3, #15
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	601a      	str	r2, [r3, #0]
}
 800357a:	bf00      	nop
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	44020c00 	.word	0x44020c00
 800358c:	40022000 	.word	0x40022000

08003590 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003594:	b0d8      	sub	sp, #352	@ 0x160
 8003596:	af00      	add	r7, sp, #0
 8003598:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800359c:	2300      	movs	r3, #0
 800359e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035a2:	2300      	movs	r3, #0
 80035a4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80035a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b0:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80035b4:	2500      	movs	r5, #0
 80035b6:	ea54 0305 	orrs.w	r3, r4, r5
 80035ba:	d00b      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80035bc:	4bcd      	ldr	r3, [pc, #820]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80035be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035c2:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80035c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035cc:	4ac9      	ldr	r2, [pc, #804]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80035ce:	430b      	orrs	r3, r1
 80035d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035dc:	f002 0801 	and.w	r8, r2, #1
 80035e0:	f04f 0900 	mov.w	r9, #0
 80035e4:	ea58 0309 	orrs.w	r3, r8, r9
 80035e8:	d042      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80035ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f0:	2b05      	cmp	r3, #5
 80035f2:	d823      	bhi.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xac>
 80035f4:	a201      	add	r2, pc, #4	@ (adr r2, 80035fc <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80035f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fa:	bf00      	nop
 80035fc:	08003645 	.word	0x08003645
 8003600:	08003615 	.word	0x08003615
 8003604:	08003629 	.word	0x08003629
 8003608:	08003645 	.word	0x08003645
 800360c:	08003645 	.word	0x08003645
 8003610:	08003645 	.word	0x08003645
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003614:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003618:	3308      	adds	r3, #8
 800361a:	4618      	mov	r0, r3
 800361c:	f001 ff42 	bl	80054a4 <RCCEx_PLL2_Config>
 8003620:	4603      	mov	r3, r0
 8003622:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8003626:	e00e      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003628:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800362c:	3330      	adds	r3, #48	@ 0x30
 800362e:	4618      	mov	r0, r3
 8003630:	f001 ffd0 	bl	80055d4 <RCCEx_PLL3_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800363a:	e004      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003642:	e000      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8003644:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003646:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10c      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800364e:	4ba9      	ldr	r3, [pc, #676]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003650:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003654:	f023 0107 	bic.w	r1, r3, #7
 8003658:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800365c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800365e:	4aa5      	ldr	r2, [pc, #660]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003660:	430b      	orrs	r3, r1
 8003662:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003666:	e003      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003668:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800366c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003670:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003678:	f002 0a02 	and.w	sl, r2, #2
 800367c:	f04f 0b00 	mov.w	fp, #0
 8003680:	ea5a 030b 	orrs.w	r3, sl, fp
 8003684:	f000 8088 	beq.w	8003798 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003688:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800368c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800368e:	2b28      	cmp	r3, #40	@ 0x28
 8003690:	d868      	bhi.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003692:	a201      	add	r2, pc, #4	@ (adr r2, 8003698 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003698:	0800376d 	.word	0x0800376d
 800369c:	08003765 	.word	0x08003765
 80036a0:	08003765 	.word	0x08003765
 80036a4:	08003765 	.word	0x08003765
 80036a8:	08003765 	.word	0x08003765
 80036ac:	08003765 	.word	0x08003765
 80036b0:	08003765 	.word	0x08003765
 80036b4:	08003765 	.word	0x08003765
 80036b8:	0800373d 	.word	0x0800373d
 80036bc:	08003765 	.word	0x08003765
 80036c0:	08003765 	.word	0x08003765
 80036c4:	08003765 	.word	0x08003765
 80036c8:	08003765 	.word	0x08003765
 80036cc:	08003765 	.word	0x08003765
 80036d0:	08003765 	.word	0x08003765
 80036d4:	08003765 	.word	0x08003765
 80036d8:	08003751 	.word	0x08003751
 80036dc:	08003765 	.word	0x08003765
 80036e0:	08003765 	.word	0x08003765
 80036e4:	08003765 	.word	0x08003765
 80036e8:	08003765 	.word	0x08003765
 80036ec:	08003765 	.word	0x08003765
 80036f0:	08003765 	.word	0x08003765
 80036f4:	08003765 	.word	0x08003765
 80036f8:	0800376d 	.word	0x0800376d
 80036fc:	08003765 	.word	0x08003765
 8003700:	08003765 	.word	0x08003765
 8003704:	08003765 	.word	0x08003765
 8003708:	08003765 	.word	0x08003765
 800370c:	08003765 	.word	0x08003765
 8003710:	08003765 	.word	0x08003765
 8003714:	08003765 	.word	0x08003765
 8003718:	0800376d 	.word	0x0800376d
 800371c:	08003765 	.word	0x08003765
 8003720:	08003765 	.word	0x08003765
 8003724:	08003765 	.word	0x08003765
 8003728:	08003765 	.word	0x08003765
 800372c:	08003765 	.word	0x08003765
 8003730:	08003765 	.word	0x08003765
 8003734:	08003765 	.word	0x08003765
 8003738:	0800376d 	.word	0x0800376d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800373c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003740:	3308      	adds	r3, #8
 8003742:	4618      	mov	r0, r3
 8003744:	f001 feae 	bl	80054a4 <RCCEx_PLL2_Config>
 8003748:	4603      	mov	r3, r0
 800374a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800374e:	e00e      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003750:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003754:	3330      	adds	r3, #48	@ 0x30
 8003756:	4618      	mov	r0, r3
 8003758:	f001 ff3c 	bl	80055d4 <RCCEx_PLL3_Config>
 800375c:	4603      	mov	r3, r0
 800375e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8003762:	e004      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800376a:	e000      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 800376c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800376e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10c      	bne.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003776:	4b5f      	ldr	r3, [pc, #380]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003778:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800377c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003780:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003786:	4a5b      	ldr	r2, [pc, #364]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003788:	430b      	orrs	r3, r1
 800378a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800378e:	e003      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003790:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003794:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003798:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800379c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a0:	f002 0304 	and.w	r3, r2, #4
 80037a4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80037a8:	2300      	movs	r3, #0
 80037aa:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80037ae:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 80037b2:	460b      	mov	r3, r1
 80037b4:	4313      	orrs	r3, r2
 80037b6:	d04e      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80037b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037be:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80037c2:	d02c      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80037c4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80037c8:	d825      	bhi.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80037ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037ce:	d028      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80037d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037d4:	d81f      	bhi.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80037d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80037d8:	d025      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80037da:	2bc0      	cmp	r3, #192	@ 0xc0
 80037dc:	d81b      	bhi.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80037de:	2b80      	cmp	r3, #128	@ 0x80
 80037e0:	d00f      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80037e2:	2b80      	cmp	r3, #128	@ 0x80
 80037e4:	d817      	bhi.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d01f      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80037ea:	2b40      	cmp	r3, #64	@ 0x40
 80037ec:	d113      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037f2:	3308      	adds	r3, #8
 80037f4:	4618      	mov	r0, r3
 80037f6:	f001 fe55 	bl	80054a4 <RCCEx_PLL2_Config>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8003800:	e014      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003802:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003806:	3330      	adds	r3, #48	@ 0x30
 8003808:	4618      	mov	r0, r3
 800380a:	f001 fee3 	bl	80055d4 <RCCEx_PLL3_Config>
 800380e:	4603      	mov	r3, r0
 8003810:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8003814:	e00a      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800381c:	e006      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800381e:	bf00      	nop
 8003820:	e004      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003822:	bf00      	nop
 8003824:	e002      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003826:	bf00      	nop
 8003828:	e000      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800382a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800382c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10c      	bne.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003834:	4b2f      	ldr	r3, [pc, #188]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003836:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800383a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800383e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003842:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003844:	4a2b      	ldr	r2, [pc, #172]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003846:	430b      	orrs	r3, r1
 8003848:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800384c:	e003      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003852:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003856:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800385a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385e:	f002 0308 	and.w	r3, r2, #8
 8003862:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003866:	2300      	movs	r3, #0
 8003868:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800386c:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8003870:	460b      	mov	r3, r1
 8003872:	4313      	orrs	r3, r2
 8003874:	d056      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8003876:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800387a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800387c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003880:	d031      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8003882:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003886:	d82a      	bhi.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003888:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800388c:	d02d      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800388e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003892:	d824      	bhi.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003894:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003898:	d029      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800389a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800389e:	d81e      	bhi.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80038a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038a4:	d011      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80038a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038aa:	d818      	bhi.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d023      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80038b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038b4:	d113      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038ba:	3308      	adds	r3, #8
 80038bc:	4618      	mov	r0, r3
 80038be:	f001 fdf1 	bl	80054a4 <RCCEx_PLL2_Config>
 80038c2:	4603      	mov	r3, r0
 80038c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80038c8:	e017      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80038ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038ce:	3330      	adds	r3, #48	@ 0x30
 80038d0:	4618      	mov	r0, r3
 80038d2:	f001 fe7f 	bl	80055d4 <RCCEx_PLL3_Config>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80038dc:	e00d      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80038e4:	e009      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80038e6:	bf00      	nop
 80038e8:	e007      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80038ea:	bf00      	nop
 80038ec:	e005      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80038ee:	bf00      	nop
 80038f0:	e003      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80038f2:	bf00      	nop
 80038f4:	44020c00 	.word	0x44020c00
        break;
 80038f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10c      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003902:	4bbb      	ldr	r3, [pc, #748]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003904:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003908:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800390c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003910:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003912:	4ab7      	ldr	r2, [pc, #732]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003914:	430b      	orrs	r3, r1
 8003916:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800391a:	e003      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800391c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003920:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003924:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392c:	f002 0310 	and.w	r3, r2, #16
 8003930:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003934:	2300      	movs	r3, #0
 8003936:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800393a:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 800393e:	460b      	mov	r3, r1
 8003940:	4313      	orrs	r3, r2
 8003942:	d053      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8003944:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003948:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800394a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800394e:	d031      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003950:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003954:	d82a      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003956:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800395a:	d02d      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800395c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003960:	d824      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003962:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003966:	d029      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003968:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800396c:	d81e      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800396e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003972:	d011      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003974:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003978:	d818      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800397a:	2b00      	cmp	r3, #0
 800397c:	d020      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800397e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003982:	d113      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003984:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003988:	3308      	adds	r3, #8
 800398a:	4618      	mov	r0, r3
 800398c:	f001 fd8a 	bl	80054a4 <RCCEx_PLL2_Config>
 8003990:	4603      	mov	r3, r0
 8003992:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8003996:	e014      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003998:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800399c:	3330      	adds	r3, #48	@ 0x30
 800399e:	4618      	mov	r0, r3
 80039a0:	f001 fe18 	bl	80055d4 <RCCEx_PLL3_Config>
 80039a4:	4603      	mov	r3, r0
 80039a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80039aa:	e00a      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80039b2:	e006      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80039b4:	bf00      	nop
 80039b6:	e004      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80039b8:	bf00      	nop
 80039ba:	e002      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80039bc:	bf00      	nop
 80039be:	e000      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80039c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80039ca:	4b89      	ldr	r3, [pc, #548]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80039cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80039d0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80039d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039da:	4a85      	ldr	r2, [pc, #532]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80039dc:	430b      	orrs	r3, r1
 80039de:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80039e2:	e003      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80039e8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80039ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f4:	f002 0320 	and.w	r3, r2, #32
 80039f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80039fc:	2300      	movs	r3, #0
 80039fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8003a02:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8003a06:	460b      	mov	r3, r1
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	d053      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8003a0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a12:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003a16:	d031      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8003a18:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003a1c:	d82a      	bhi.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003a1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a22:	d02d      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003a24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a28:	d824      	bhi.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003a2a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003a2e:	d029      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003a30:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003a34:	d81e      	bhi.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003a36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a3a:	d011      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a40:	d818      	bhi.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d020      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8003a46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a4a:	d113      	bne.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a50:	3308      	adds	r3, #8
 8003a52:	4618      	mov	r0, r3
 8003a54:	f001 fd26 	bl	80054a4 <RCCEx_PLL2_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8003a5e:	e014      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a64:	3330      	adds	r3, #48	@ 0x30
 8003a66:	4618      	mov	r0, r3
 8003a68:	f001 fdb4 	bl	80055d4 <RCCEx_PLL3_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8003a72:	e00a      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003a7a:	e006      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003a7c:	bf00      	nop
 8003a7e:	e004      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003a80:	bf00      	nop
 8003a82:	e002      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003a84:	bf00      	nop
 8003a86:	e000      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a8a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10c      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8003a92:	4b57      	ldr	r3, [pc, #348]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003a94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003a98:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8003a9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa2:	4a53      	ldr	r2, [pc, #332]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003aaa:	e003      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ab0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ab4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003ac0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003aca:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	d053      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8003ad4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ada:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003ade:	d031      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8003ae0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003ae4:	d82a      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003ae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003aea:	d02d      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8003aec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003af0:	d824      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003af2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003af6:	d029      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003af8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003afc:	d81e      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003afe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b02:	d011      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003b04:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b08:	d818      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d020      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003b0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b12:	d113      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b18:	3308      	adds	r3, #8
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f001 fcc2 	bl	80054a4 <RCCEx_PLL2_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8003b26:	e014      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b2c:	3330      	adds	r3, #48	@ 0x30
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f001 fd50 	bl	80055d4 <RCCEx_PLL3_Config>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8003b3a:	e00a      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003b42:	e006      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003b44:	bf00      	nop
 8003b46:	e004      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003b48:	bf00      	nop
 8003b4a:	e002      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003b4c:	bf00      	nop
 8003b4e:	e000      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b52:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10c      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8003b5a:	4b25      	ldr	r3, [pc, #148]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003b5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003b60:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8003b64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b6a:	4a21      	ldr	r2, [pc, #132]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003b72:	e003      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b74:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b78:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b84:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003b88:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003b92:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8003b96:	460b      	mov	r3, r1
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	d055      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8003b9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ba0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ba2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003ba6:	d033      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8003ba8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003bac:	d82c      	bhi.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003bae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bb2:	d02f      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003bb4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bb8:	d826      	bhi.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003bba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003bbe:	d02b      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8003bc0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003bc4:	d820      	bhi.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003bc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bca:	d013      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003bcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bd0:	d81a      	bhi.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d022      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8003bd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bda:	d115      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003bdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003be0:	3308      	adds	r3, #8
 8003be2:	4618      	mov	r0, r3
 8003be4:	f001 fc5e 	bl	80054a4 <RCCEx_PLL2_Config>
 8003be8:	4603      	mov	r3, r0
 8003bea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8003bee:	e016      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003bf0:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003bf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bf8:	3330      	adds	r3, #48	@ 0x30
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f001 fcea 	bl	80055d4 <RCCEx_PLL3_Config>
 8003c00:	4603      	mov	r3, r0
 8003c02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8003c06:	e00a      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003c0e:	e006      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003c10:	bf00      	nop
 8003c12:	e004      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003c14:	bf00      	nop
 8003c16:	e002      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003c18:	bf00      	nop
 8003c1a:	e000      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003c1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10c      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8003c26:	4bbb      	ldr	r3, [pc, #748]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003c28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003c2c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003c30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c36:	4ab7      	ldr	r2, [pc, #732]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003c3e:	e003      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c40:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c44:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8003c48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c50:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8003c54:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003c5e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8003c62:	460b      	mov	r3, r1
 8003c64:	4313      	orrs	r3, r2
 8003c66:	d053      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8003c68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c6e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003c72:	d031      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003c74:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003c78:	d82a      	bhi.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003c7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c7e:	d02d      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003c80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c84:	d824      	bhi.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003c86:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c8a:	d029      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8003c8c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c90:	d81e      	bhi.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003c92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c96:	d011      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8003c98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c9c:	d818      	bhi.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d020      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8003ca2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ca6:	d113      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ca8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cac:	3308      	adds	r3, #8
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f001 fbf8 	bl	80054a4 <RCCEx_PLL2_Config>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8003cba:	e014      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003cbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cc0:	3330      	adds	r3, #48	@ 0x30
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f001 fc86 	bl	80055d4 <RCCEx_PLL3_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8003cce:	e00a      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003cd6:	e006      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003cd8:	bf00      	nop
 8003cda:	e004      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003cdc:	bf00      	nop
 8003cde:	e002      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003ce0:	bf00      	nop
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10c      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8003cee:	4b89      	ldr	r3, [pc, #548]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003cf4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003cf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cfe:	4a85      	ldr	r2, [pc, #532]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003d00:	430b      	orrs	r3, r1
 8003d02:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003d06:	e003      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d08:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d0c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8003d10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d18:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8003d1c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003d20:	2300      	movs	r3, #0
 8003d22:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003d26:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	d055      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8003d30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d38:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8003d3c:	d031      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8003d3e:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8003d42:	d82a      	bhi.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003d44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d48:	d02d      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8003d4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d4e:	d824      	bhi.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003d50:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003d54:	d029      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8003d56:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003d5a:	d81e      	bhi.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003d5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d60:	d011      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8003d62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d66:	d818      	bhi.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d020      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8003d6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d70:	d113      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d76:	3308      	adds	r3, #8
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f001 fb93 	bl	80054a4 <RCCEx_PLL2_Config>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003d84:	e014      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d86:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d8a:	3330      	adds	r3, #48	@ 0x30
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f001 fc21 	bl	80055d4 <RCCEx_PLL3_Config>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003d98:	e00a      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003da0:	e006      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003da2:	bf00      	nop
 8003da4:	e004      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003da6:	bf00      	nop
 8003da8:	e002      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003daa:	bf00      	nop
 8003dac:	e000      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003dae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10d      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8003db8:	4b56      	ldr	r3, [pc, #344]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003dba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003dbe:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8003dc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dca:	4a52      	ldr	r2, [pc, #328]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003dd2:	e003      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003dd8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8003ddc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003de8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003dec:	2300      	movs	r3, #0
 8003dee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003df2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003df6:	460b      	mov	r3, r1
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	d044      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8003dfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e04:	2b05      	cmp	r3, #5
 8003e06:	d823      	bhi.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8003e08:	a201      	add	r2, pc, #4	@ (adr r2, 8003e10 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0e:	bf00      	nop
 8003e10:	08003e59 	.word	0x08003e59
 8003e14:	08003e29 	.word	0x08003e29
 8003e18:	08003e3d 	.word	0x08003e3d
 8003e1c:	08003e59 	.word	0x08003e59
 8003e20:	08003e59 	.word	0x08003e59
 8003e24:	08003e59 	.word	0x08003e59
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e2c:	3308      	adds	r3, #8
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f001 fb38 	bl	80054a4 <RCCEx_PLL2_Config>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003e3a:	e00e      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e40:	3330      	adds	r3, #48	@ 0x30
 8003e42:	4618      	mov	r0, r3
 8003e44:	f001 fbc6 	bl	80055d4 <RCCEx_PLL3_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003e4e:	e004      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003e56:	e000      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8003e58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e5a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10d      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8003e62:	4b2c      	ldr	r3, [pc, #176]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003e64:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003e68:	f023 0107 	bic.w	r1, r3, #7
 8003e6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e74:	4a27      	ldr	r2, [pc, #156]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003e76:	430b      	orrs	r3, r1
 8003e78:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003e7c:	e003      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e82:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8003e86:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003e92:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003e96:	2300      	movs	r3, #0
 8003e98:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003e9c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	d04f      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8003ea6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eae:	2b50      	cmp	r3, #80	@ 0x50
 8003eb0:	d029      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003eb2:	2b50      	cmp	r3, #80	@ 0x50
 8003eb4:	d823      	bhi.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003eb6:	2b40      	cmp	r3, #64	@ 0x40
 8003eb8:	d027      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8003eba:	2b40      	cmp	r3, #64	@ 0x40
 8003ebc:	d81f      	bhi.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003ebe:	2b30      	cmp	r3, #48	@ 0x30
 8003ec0:	d025      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8003ec2:	2b30      	cmp	r3, #48	@ 0x30
 8003ec4:	d81b      	bhi.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	d00f      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003eca:	2b20      	cmp	r3, #32
 8003ecc:	d817      	bhi.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d022      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003ed2:	2b10      	cmp	r3, #16
 8003ed4:	d113      	bne.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ed6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003eda:	3308      	adds	r3, #8
 8003edc:	4618      	mov	r0, r3
 8003ede:	f001 fae1 	bl	80054a4 <RCCEx_PLL2_Config>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003ee8:	e017      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003eea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003eee:	3330      	adds	r3, #48	@ 0x30
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f001 fb6f 	bl	80055d4 <RCCEx_PLL3_Config>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003efc:	e00d      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003f04:	e009      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003f06:	bf00      	nop
 8003f08:	e007      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003f0a:	bf00      	nop
 8003f0c:	e005      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003f0e:	bf00      	nop
 8003f10:	e003      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8003f12:	bf00      	nop
 8003f14:	44020c00 	.word	0x44020c00
        break;
 8003f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10d      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8003f22:	4baf      	ldr	r3, [pc, #700]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003f24:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003f28:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003f2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f34:	4aaa      	ldr	r2, [pc, #680]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003f36:	430b      	orrs	r3, r1
 8003f38:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003f3c:	e003      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f42:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003f52:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003f56:	2300      	movs	r3, #0
 8003f58:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003f5c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003f60:	460b      	mov	r3, r1
 8003f62:	4313      	orrs	r3, r2
 8003f64:	d055      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003f66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f6e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003f72:	d031      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8003f74:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003f78:	d82a      	bhi.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003f7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f7e:	d02d      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003f80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f84:	d824      	bhi.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003f86:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f8a:	d029      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003f8c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f90:	d81e      	bhi.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003f92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f96:	d011      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8003f98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f9c:	d818      	bhi.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d020      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8003fa2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fa6:	d113      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003fa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fac:	3308      	adds	r3, #8
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f001 fa78 	bl	80054a4 <RCCEx_PLL2_Config>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003fba:	e014      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003fbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fc0:	3330      	adds	r3, #48	@ 0x30
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f001 fb06 	bl	80055d4 <RCCEx_PLL3_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003fce:	e00a      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003fd6:	e006      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003fd8:	bf00      	nop
 8003fda:	e004      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003fdc:	bf00      	nop
 8003fde:	e002      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003fe0:	bf00      	nop
 8003fe2:	e000      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fe6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10d      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003fee:	4b7c      	ldr	r3, [pc, #496]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ff4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003ff8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004000:	4a77      	ldr	r2, [pc, #476]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004002:	430b      	orrs	r3, r1
 8004004:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004008:	e003      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800400e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004012:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800401e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004022:	2300      	movs	r3, #0
 8004024:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004028:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800402c:	460b      	mov	r3, r1
 800402e:	4313      	orrs	r3, r2
 8004030:	d03d      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004032:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800403a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800403e:	d01b      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8004040:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004044:	d814      	bhi.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004046:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800404a:	d017      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800404c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004050:	d80e      	bhi.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004052:	2b00      	cmp	r3, #0
 8004054:	d014      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8004056:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800405a:	d109      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800405c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004060:	3330      	adds	r3, #48	@ 0x30
 8004062:	4618      	mov	r0, r3
 8004064:	f001 fab6 	bl	80055d4 <RCCEx_PLL3_Config>
 8004068:	4603      	mov	r3, r0
 800406a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800406e:	e008      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004076:	e004      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004078:	bf00      	nop
 800407a:	e002      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800407c:	bf00      	nop
 800407e:	e000      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004082:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10d      	bne.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800408a:	4b55      	ldr	r3, [pc, #340]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800408c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004090:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004094:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409c:	4a50      	ldr	r2, [pc, #320]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800409e:	430b      	orrs	r3, r1
 80040a0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80040a4:	e003      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80040aa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80040ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80040be:	2300      	movs	r3, #0
 80040c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040c4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80040c8:	460b      	mov	r3, r1
 80040ca:	4313      	orrs	r3, r2
 80040cc:	d03d      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80040ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040d6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80040da:	d01b      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 80040dc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80040e0:	d814      	bhi.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80040e2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80040e6:	d017      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80040e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80040ec:	d80e      	bhi.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d014      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80040f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040f6:	d109      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040fc:	3330      	adds	r3, #48	@ 0x30
 80040fe:	4618      	mov	r0, r3
 8004100:	f001 fa68 	bl	80055d4 <RCCEx_PLL3_Config>
 8004104:	4603      	mov	r3, r0
 8004106:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800410a:	e008      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004112:	e004      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004114:	bf00      	nop
 8004116:	e002      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004118:	bf00      	nop
 800411a:	e000      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800411c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800411e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10d      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004126:	4b2e      	ldr	r3, [pc, #184]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004128:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800412c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004130:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004134:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004138:	4a29      	ldr	r2, [pc, #164]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800413a:	430b      	orrs	r3, r1
 800413c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004140:	e003      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004142:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004146:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800414a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800414e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004152:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004156:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800415a:	2300      	movs	r3, #0
 800415c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004160:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004164:	460b      	mov	r3, r1
 8004166:	4313      	orrs	r3, r2
 8004168:	d040      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800416a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800416e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004172:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004176:	d01b      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8004178:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800417c:	d814      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800417e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004182:	d017      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004184:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004188:	d80e      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800418a:	2b00      	cmp	r3, #0
 800418c:	d014      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800418e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004192:	d109      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004194:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004198:	3330      	adds	r3, #48	@ 0x30
 800419a:	4618      	mov	r0, r3
 800419c:	f001 fa1a 	bl	80055d4 <RCCEx_PLL3_Config>
 80041a0:	4603      	mov	r3, r0
 80041a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 80041a6:	e008      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80041ae:	e004      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80041b0:	bf00      	nop
 80041b2:	e002      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80041b4:	bf00      	nop
 80041b6:	e000      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80041b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d110      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80041c2:	4b07      	ldr	r3, [pc, #28]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80041c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80041c8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80041cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041d4:	4a02      	ldr	r2, [pc, #8]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80041d6:	430b      	orrs	r3, r1
 80041d8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80041dc:	e006      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80041de:	bf00      	nop
 80041e0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80041e8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f4:	2100      	movs	r1, #0
 80041f6:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80041fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004202:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004206:	460b      	mov	r3, r1
 8004208:	4313      	orrs	r3, r2
 800420a:	d03d      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 800420c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004210:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004214:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004218:	d01b      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800421a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800421e:	d814      	bhi.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8004220:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004224:	d017      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8004226:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800422a:	d80e      	bhi.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800422c:	2b00      	cmp	r3, #0
 800422e:	d014      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8004230:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004234:	d109      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004236:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800423a:	3330      	adds	r3, #48	@ 0x30
 800423c:	4618      	mov	r0, r3
 800423e:	f001 f9c9 	bl	80055d4 <RCCEx_PLL3_Config>
 8004242:	4603      	mov	r3, r0
 8004244:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8004248:	e008      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004250:	e004      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004252:	bf00      	nop
 8004254:	e002      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004256:	bf00      	nop
 8004258:	e000      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800425a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800425c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10d      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004264:	4bbe      	ldr	r3, [pc, #760]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004266:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800426a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800426e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004272:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004276:	4aba      	ldr	r2, [pc, #744]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004278:	430b      	orrs	r3, r1
 800427a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800427e:	e003      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004280:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004284:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004288:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800428c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004290:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004294:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004298:	2300      	movs	r3, #0
 800429a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800429e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80042a2:	460b      	mov	r3, r1
 80042a4:	4313      	orrs	r3, r2
 80042a6:	d035      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80042a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80042b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042b4:	d015      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 80042b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042ba:	d80e      	bhi.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d012      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 80042c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042c4:	d109      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042ca:	3330      	adds	r3, #48	@ 0x30
 80042cc:	4618      	mov	r0, r3
 80042ce:	f001 f981 	bl	80055d4 <RCCEx_PLL3_Config>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80042d8:	e006      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80042e0:	e002      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80042e2:	bf00      	nop
 80042e4:	e000      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80042e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10d      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80042f0:	4b9b      	ldr	r3, [pc, #620]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80042f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80042f6:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80042fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004302:	4a97      	ldr	r2, [pc, #604]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004304:	430b      	orrs	r3, r1
 8004306:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800430a:	e003      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800430c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004310:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004314:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431c:	2100      	movs	r1, #0
 800431e:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8004322:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004326:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800432a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800432e:	460b      	mov	r3, r1
 8004330:	4313      	orrs	r3, r2
 8004332:	d00e      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004334:	4b8a      	ldr	r3, [pc, #552]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	4a89      	ldr	r2, [pc, #548]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800433a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800433e:	61d3      	str	r3, [r2, #28]
 8004340:	4b87      	ldr	r3, [pc, #540]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004342:	69d9      	ldr	r1, [r3, #28]
 8004344:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004348:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800434c:	4a84      	ldr	r2, [pc, #528]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800434e:	430b      	orrs	r3, r1
 8004350:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004352:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800435e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004362:	2300      	movs	r3, #0
 8004364:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004368:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800436c:	460b      	mov	r3, r1
 800436e:	4313      	orrs	r3, r2
 8004370:	d055      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004372:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004376:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800437a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800437e:	d031      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8004380:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004384:	d82a      	bhi.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800438a:	d02d      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800438c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004390:	d824      	bhi.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004392:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004396:	d029      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004398:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800439c:	d81e      	bhi.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800439e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043a2:	d011      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 80043a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043a8:	d818      	bhi.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d020      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80043ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043b2:	d113      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043b8:	3308      	adds	r3, #8
 80043ba:	4618      	mov	r0, r3
 80043bc:	f001 f872 	bl	80054a4 <RCCEx_PLL2_Config>
 80043c0:	4603      	mov	r3, r0
 80043c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80043c6:	e014      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043cc:	3330      	adds	r3, #48	@ 0x30
 80043ce:	4618      	mov	r0, r3
 80043d0:	f001 f900 	bl	80055d4 <RCCEx_PLL3_Config>
 80043d4:	4603      	mov	r3, r0
 80043d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80043da:	e00a      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80043e2:	e006      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80043e4:	bf00      	nop
 80043e6:	e004      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80043e8:	bf00      	nop
 80043ea:	e002      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80043ec:	bf00      	nop
 80043ee:	e000      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80043f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10d      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80043fa:	4b59      	ldr	r3, [pc, #356]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80043fc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004400:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004404:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004408:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800440c:	4a54      	ldr	r2, [pc, #336]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800440e:	430b      	orrs	r3, r1
 8004410:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004414:	e003      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004416:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800441a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800441e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004426:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800442a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800442e:	2300      	movs	r3, #0
 8004430:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004434:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004438:	460b      	mov	r3, r1
 800443a:	4313      	orrs	r3, r2
 800443c:	d055      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800443e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004442:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004446:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800444a:	d031      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 800444c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004450:	d82a      	bhi.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004452:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004456:	d02d      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8004458:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800445c:	d824      	bhi.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800445e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004462:	d029      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8004464:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004468:	d81e      	bhi.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800446a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800446e:	d011      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8004470:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004474:	d818      	bhi.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004476:	2b00      	cmp	r3, #0
 8004478:	d020      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800447a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800447e:	d113      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004480:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004484:	3308      	adds	r3, #8
 8004486:	4618      	mov	r0, r3
 8004488:	f001 f80c 	bl	80054a4 <RCCEx_PLL2_Config>
 800448c:	4603      	mov	r3, r0
 800448e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004492:	e014      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004494:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004498:	3330      	adds	r3, #48	@ 0x30
 800449a:	4618      	mov	r0, r3
 800449c:	f001 f89a 	bl	80055d4 <RCCEx_PLL3_Config>
 80044a0:	4603      	mov	r3, r0
 80044a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80044a6:	e00a      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80044ae:	e006      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80044b0:	bf00      	nop
 80044b2:	e004      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80044b4:	bf00      	nop
 80044b6:	e002      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80044b8:	bf00      	nop
 80044ba:	e000      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80044bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10d      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80044c6:	4b26      	ldr	r3, [pc, #152]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80044c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80044cc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80044d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80044d8:	4a21      	ldr	r2, [pc, #132]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80044da:	430b      	orrs	r3, r1
 80044dc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80044e0:	e003      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80044e6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80044ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f2:	2100      	movs	r1, #0
 80044f4:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004500:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004504:	460b      	mov	r3, r1
 8004506:	4313      	orrs	r3, r2
 8004508:	d057      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800450a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800450e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004512:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004516:	d033      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8004518:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800451c:	d82c      	bhi.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800451e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004522:	d02f      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8004524:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004528:	d826      	bhi.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800452a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800452e:	d02b      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8004530:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004534:	d820      	bhi.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004536:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800453a:	d013      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800453c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004540:	d81a      	bhi.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004542:	2b00      	cmp	r3, #0
 8004544:	d022      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8004546:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800454a:	d115      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800454c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004550:	3308      	adds	r3, #8
 8004552:	4618      	mov	r0, r3
 8004554:	f000 ffa6 	bl	80054a4 <RCCEx_PLL2_Config>
 8004558:	4603      	mov	r3, r0
 800455a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800455e:	e016      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8004560:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004564:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004568:	3330      	adds	r3, #48	@ 0x30
 800456a:	4618      	mov	r0, r3
 800456c:	f001 f832 	bl	80055d4 <RCCEx_PLL3_Config>
 8004570:	4603      	mov	r3, r0
 8004572:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004576:	e00a      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800457e:	e006      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004580:	bf00      	nop
 8004582:	e004      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004584:	bf00      	nop
 8004586:	e002      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004588:	bf00      	nop
 800458a:	e000      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800458c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800458e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10d      	bne.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8004596:	4bbb      	ldr	r3, [pc, #748]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004598:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800459c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80045a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80045a8:	4ab6      	ldr	r2, [pc, #728]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80045aa:	430b      	orrs	r3, r1
 80045ac:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80045b0:	e003      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80045b6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80045ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c2:	2100      	movs	r1, #0
 80045c4:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80045c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80045d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80045d4:	460b      	mov	r3, r1
 80045d6:	4313      	orrs	r3, r2
 80045d8:	d055      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80045da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80045e2:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80045e6:	d031      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80045e8:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80045ec:	d82a      	bhi.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80045ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045f2:	d02d      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80045f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045f8:	d824      	bhi.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80045fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045fe:	d029      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8004600:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004604:	d81e      	bhi.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004606:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800460a:	d011      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 800460c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004610:	d818      	bhi.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004612:	2b00      	cmp	r3, #0
 8004614:	d020      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8004616:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800461a:	d113      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800461c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004620:	3308      	adds	r3, #8
 8004622:	4618      	mov	r0, r3
 8004624:	f000 ff3e 	bl	80054a4 <RCCEx_PLL2_Config>
 8004628:	4603      	mov	r3, r0
 800462a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800462e:	e014      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004630:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004634:	3330      	adds	r3, #48	@ 0x30
 8004636:	4618      	mov	r0, r3
 8004638:	f000 ffcc 	bl	80055d4 <RCCEx_PLL3_Config>
 800463c:	4603      	mov	r3, r0
 800463e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004642:	e00a      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800464a:	e006      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800464c:	bf00      	nop
 800464e:	e004      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004650:	bf00      	nop
 8004652:	e002      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004654:	bf00      	nop
 8004656:	e000      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800465a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10d      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8004662:	4b88      	ldr	r3, [pc, #544]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004664:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004668:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 800466c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004670:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004674:	4a83      	ldr	r2, [pc, #524]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004676:	430b      	orrs	r3, r1
 8004678:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800467c:	e003      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800467e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004682:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8004686:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468e:	2100      	movs	r1, #0
 8004690:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8004694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004698:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800469c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80046a0:	460b      	mov	r3, r1
 80046a2:	4313      	orrs	r3, r2
 80046a4:	d055      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80046a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80046ae:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80046b2:	d031      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80046b4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80046b8:	d82a      	bhi.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80046ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046be:	d02d      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80046c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046c4:	d824      	bhi.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80046c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046ca:	d029      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80046cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046d0:	d81e      	bhi.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80046d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046d6:	d011      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80046d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046dc:	d818      	bhi.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d020      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80046e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046e6:	d113      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046ec:	3308      	adds	r3, #8
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fed8 	bl	80054a4 <RCCEx_PLL2_Config>
 80046f4:	4603      	mov	r3, r0
 80046f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80046fa:	e014      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80046fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004700:	3330      	adds	r3, #48	@ 0x30
 8004702:	4618      	mov	r0, r3
 8004704:	f000 ff66 	bl	80055d4 <RCCEx_PLL3_Config>
 8004708:	4603      	mov	r3, r0
 800470a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800470e:	e00a      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004716:	e006      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004718:	bf00      	nop
 800471a:	e004      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800471c:	bf00      	nop
 800471e:	e002      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004720:	bf00      	nop
 8004722:	e000      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004726:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10d      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800472e:	4b55      	ldr	r3, [pc, #340]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004730:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004734:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004738:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800473c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004740:	4a50      	ldr	r2, [pc, #320]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004742:	430b      	orrs	r3, r1
 8004744:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004748:	e003      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800474a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800474e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8004752:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475a:	2100      	movs	r1, #0
 800475c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8004760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004764:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004768:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800476c:	460b      	mov	r3, r1
 800476e:	4313      	orrs	r3, r2
 8004770:	d055      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8004772:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004776:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800477a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800477e:	d031      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8004780:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004784:	d82a      	bhi.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800478a:	d02d      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 800478c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004790:	d824      	bhi.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004792:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004796:	d029      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8004798:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800479c:	d81e      	bhi.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800479e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047a2:	d011      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80047a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047a8:	d818      	bhi.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d020      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80047ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047b2:	d113      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047b8:	3308      	adds	r3, #8
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fe72 	bl	80054a4 <RCCEx_PLL2_Config>
 80047c0:	4603      	mov	r3, r0
 80047c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80047c6:	e014      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047cc:	3330      	adds	r3, #48	@ 0x30
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 ff00 	bl	80055d4 <RCCEx_PLL3_Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80047da:	e00a      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80047e2:	e006      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80047e4:	bf00      	nop
 80047e6:	e004      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80047e8:	bf00      	nop
 80047ea:	e002      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80047ec:	bf00      	nop
 80047ee:	e000      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80047f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10d      	bne.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80047fa:	4b22      	ldr	r3, [pc, #136]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80047fc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004800:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004804:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004808:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800480c:	4a1d      	ldr	r2, [pc, #116]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800480e:	430b      	orrs	r3, r1
 8004810:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004814:	e003      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004816:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800481a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800481e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004826:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800482a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800482e:	2300      	movs	r3, #0
 8004830:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004834:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004838:	460b      	mov	r3, r1
 800483a:	4313      	orrs	r3, r2
 800483c:	d055      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800483e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004842:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004846:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800484a:	d035      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 800484c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004850:	d82e      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004852:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004856:	d031      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8004858:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800485c:	d828      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800485e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004862:	d01b      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8004864:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004868:	d822      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800486e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004872:	d009      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8004874:	e01c      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004876:	4b03      	ldr	r3, [pc, #12]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487a:	4a02      	ldr	r2, [pc, #8]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800487c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004880:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004882:	e01c      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8004884:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004888:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800488c:	3308      	adds	r3, #8
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fe08 	bl	80054a4 <RCCEx_PLL2_Config>
 8004894:	4603      	mov	r3, r0
 8004896:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800489a:	e010      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800489c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048a0:	3330      	adds	r3, #48	@ 0x30
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fe96 	bl	80055d4 <RCCEx_PLL3_Config>
 80048a8:	4603      	mov	r3, r0
 80048aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80048ae:	e006      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80048b6:	e002      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80048b8:	bf00      	nop
 80048ba:	e000      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80048bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10d      	bne.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80048c6:	4bc3      	ldr	r3, [pc, #780]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80048c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80048cc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80048d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80048d8:	4abe      	ldr	r2, [pc, #760]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80048da:	430b      	orrs	r3, r1
 80048dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80048e0:	e003      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80048e6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80048ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f2:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80048f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048fa:	2300      	movs	r3, #0
 80048fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004900:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004904:	460b      	mov	r3, r1
 8004906:	4313      	orrs	r3, r2
 8004908:	d051      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800490a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800490e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004912:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004916:	d033      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004918:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800491c:	d82c      	bhi.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800491e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004922:	d02d      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004924:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004928:	d826      	bhi.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800492a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800492e:	d019      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8004930:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004934:	d820      	bhi.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800493a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800493e:	d007      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8004940:	e01a      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004942:	4ba4      	ldr	r3, [pc, #656]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004946:	4aa3      	ldr	r2, [pc, #652]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800494c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800494e:	e018      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004950:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004954:	3308      	adds	r3, #8
 8004956:	4618      	mov	r0, r3
 8004958:	f000 fda4 	bl	80054a4 <RCCEx_PLL2_Config>
 800495c:	4603      	mov	r3, r0
 800495e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004962:	e00e      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004964:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004968:	3330      	adds	r3, #48	@ 0x30
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fe32 	bl	80055d4 <RCCEx_PLL3_Config>
 8004970:	4603      	mov	r3, r0
 8004972:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004976:	e004      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800497e:	e000      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8004980:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004982:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10d      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800498a:	4b92      	ldr	r3, [pc, #584]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800498c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004990:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8004994:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004998:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800499c:	4a8d      	ldr	r2, [pc, #564]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800499e:	430b      	orrs	r3, r1
 80049a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80049a4:	e003      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80049aa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80049ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80049ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049bc:	2300      	movs	r3, #0
 80049be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80049c0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80049c4:	460b      	mov	r3, r1
 80049c6:	4313      	orrs	r3, r2
 80049c8:	d032      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80049ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80049d2:	2b05      	cmp	r3, #5
 80049d4:	d80f      	bhi.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	d211      	bcs.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d911      	bls.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d109      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049e6:	3308      	adds	r3, #8
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 fd5b 	bl	80054a4 <RCCEx_PLL2_Config>
 80049ee:	4603      	mov	r3, r0
 80049f0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80049f4:	e006      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80049fc:	e002      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80049fe:	bf00      	nop
 8004a00:	e000      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8004a02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a04:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10d      	bne.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004a0c:	4b71      	ldr	r3, [pc, #452]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004a0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a12:	f023 0107 	bic.w	r1, r3, #7
 8004a16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a1a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004a1e:	4a6d      	ldr	r2, [pc, #436]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004a20:	430b      	orrs	r3, r1
 8004a22:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004a26:	e003      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a28:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a2c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004a30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a38:	2100      	movs	r1, #0
 8004a3a:	6739      	str	r1, [r7, #112]	@ 0x70
 8004a3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a40:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a42:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004a46:	460b      	mov	r3, r1
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	d024      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004a4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d005      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004a62:	e002      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004a64:	bf00      	nop
 8004a66:	e000      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a6a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10d      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004a72:	4b58      	ldr	r3, [pc, #352]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004a74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a78:	f023 0108 	bic.w	r1, r3, #8
 8004a7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a84:	4a53      	ldr	r2, [pc, #332]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004a86:	430b      	orrs	r3, r1
 8004a88:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004a8c:	e003      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a92:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004aa2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004aa8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004aac:	460b      	mov	r3, r1
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f000 80b9 	beq.w	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004ab4:	4b48      	ldr	r3, [pc, #288]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab8:	4a47      	ldr	r2, [pc, #284]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8004aba:	f043 0301 	orr.w	r3, r3, #1
 8004abe:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ac0:	f7fc fea8 	bl	8001814 <HAL_GetTick>
 8004ac4:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004ac8:	e00b      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aca:	f7fc fea3 	bl	8001814 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d903      	bls.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004ae0:	e005      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0ed      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8004aee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f040 8093 	bne.w	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004af8:	4b36      	ldr	r3, [pc, #216]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004afa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004afe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b02:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004b06:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d023      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8004b0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b12:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8004b16:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d01b      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b1e:	4b2d      	ldr	r3, [pc, #180]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004b20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b28:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b2c:	4b29      	ldr	r3, [pc, #164]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004b2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b32:	4a28      	ldr	r2, [pc, #160]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b38:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b3c:	4b25      	ldr	r3, [pc, #148]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004b3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b42:	4a24      	ldr	r2, [pc, #144]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004b44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b4c:	4a21      	ldr	r2, [pc, #132]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004b4e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004b52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b56:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d019      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b62:	f7fc fe57 	bl	8001814 <HAL_GetTick>
 8004b66:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b6a:	e00d      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b6c:	f7fc fe52 	bl	8001814 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004b76:	1ad2      	subs	r2, r2, r3
 8004b78:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d903      	bls.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8004b86:	e006      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b88:	4b12      	ldr	r3, [pc, #72]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004b8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0ea      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8004b96:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d13a      	bne.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004b9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ba2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8004ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004baa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bae:	d115      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8004bb0:	4b08      	ldr	r3, [pc, #32]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004bb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bbc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8004bc0:	091b      	lsrs	r3, r3, #4
 8004bc2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004bc6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004bca:	4a02      	ldr	r2, [pc, #8]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004bcc:	430b      	orrs	r3, r1
 8004bce:	61d3      	str	r3, [r2, #28]
 8004bd0:	e00a      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8004bd2:	bf00      	nop
 8004bd4:	44020c00 	.word	0x44020c00
 8004bd8:	44020800 	.word	0x44020800
 8004bdc:	4b9f      	ldr	r3, [pc, #636]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	4a9e      	ldr	r2, [pc, #632]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004be2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004be6:	61d3      	str	r3, [r2, #28]
 8004be8:	4b9c      	ldr	r3, [pc, #624]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004bea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bee:	4a9b      	ldr	r2, [pc, #620]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004bf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bf4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004bf8:	4b98      	ldr	r3, [pc, #608]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004bfa:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8004bfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c02:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8004c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c0a:	4a94      	ldr	r2, [pc, #592]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c12:	e008      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c14:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c18:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8004c1c:	e003      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c22:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004c32:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c34:	2300      	movs	r3, #0
 8004c36:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c38:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	d035      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004c42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c46:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004c4a:	2b30      	cmp	r3, #48	@ 0x30
 8004c4c:	d014      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8004c4e:	2b30      	cmp	r3, #48	@ 0x30
 8004c50:	d80e      	bhi.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8004c52:	2b20      	cmp	r3, #32
 8004c54:	d012      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8004c56:	2b20      	cmp	r3, #32
 8004c58:	d80a      	bhi.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d010      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8004c5e:	2b10      	cmp	r3, #16
 8004c60:	d106      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c62:	4b7e      	ldr	r3, [pc, #504]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c66:	4a7d      	ldr	r2, [pc, #500]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c6c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8004c6e:	e008      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004c76:	e004      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004c78:	bf00      	nop
 8004c7a:	e002      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004c7c:	bf00      	nop
 8004c7e:	e000      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004c80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c82:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10d      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004c8a:	4b74      	ldr	r3, [pc, #464]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004c8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c90:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004c94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c98:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004c9c:	4a6f      	ldr	r2, [pc, #444]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004c9e:	430b      	orrs	r3, r1
 8004ca0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004ca4:	e003      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004caa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004cae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb6:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004cba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cc0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	d033      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8004cca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cce:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8004cd6:	2b40      	cmp	r3, #64	@ 0x40
 8004cd8:	d007      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8004cda:	e010      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cdc:	4b5f      	ldr	r3, [pc, #380]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce0:	4a5e      	ldr	r2, [pc, #376]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004ce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ce6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004ce8:	e00d      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cee:	3308      	adds	r3, #8
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fbd7 	bl	80054a4 <RCCEx_PLL2_Config>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004cfc:	e003      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10d      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8004d0e:	4b53      	ldr	r3, [pc, #332]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004d10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d14:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004d18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d1c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004d20:	4a4e      	ldr	r2, [pc, #312]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004d22:	430b      	orrs	r3, r1
 8004d24:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004d28:	e003      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d2a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d2e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004d32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004d3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d40:	2300      	movs	r3, #0
 8004d42:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d44:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004d48:	460b      	mov	r3, r1
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	d033      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8004d4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d52:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8004d5a:	2b80      	cmp	r3, #128	@ 0x80
 8004d5c:	d007      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8004d5e:	e010      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d60:	4b3e      	ldr	r3, [pc, #248]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d64:	4a3d      	ldr	r2, [pc, #244]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004d66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d6a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004d6c:	e00d      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d72:	3308      	adds	r3, #8
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fb95 	bl	80054a4 <RCCEx_PLL2_Config>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004d80:	e003      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d8a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10d      	bne.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8004d92:	4b32      	ldr	r3, [pc, #200]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004d94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d98:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004d9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004da0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004da4:	4a2d      	ldr	r2, [pc, #180]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004da6:	430b      	orrs	r3, r1
 8004da8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004dac:	e003      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004db2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004db6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dc8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	d04a      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8004dd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d827      	bhi.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8004dde:	a201      	add	r2, pc, #4	@ (adr r2, 8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8004de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de4:	08004df9 	.word	0x08004df9
 8004de8:	08004e07 	.word	0x08004e07
 8004dec:	08004e1b 	.word	0x08004e1b
 8004df0:	08004e37 	.word	0x08004e37
 8004df4:	08004e37 	.word	0x08004e37
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004df8:	4b18      	ldr	r3, [pc, #96]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfc:	4a17      	ldr	r2, [pc, #92]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004dfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e02:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004e04:	e018      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e0a:	3308      	adds	r3, #8
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 fb49 	bl	80054a4 <RCCEx_PLL2_Config>
 8004e12:	4603      	mov	r3, r0
 8004e14:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004e18:	e00e      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e1e:	3330      	adds	r3, #48	@ 0x30
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 fbd7 	bl	80055d4 <RCCEx_PLL3_Config>
 8004e26:	4603      	mov	r3, r0
 8004e28:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004e2c:	e004      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004e34:	e000      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8004e36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e38:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10f      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004e40:	4b06      	ldr	r3, [pc, #24]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e46:	f023 0107 	bic.w	r1, r3, #7
 8004e4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e52:	4a02      	ldr	r2, [pc, #8]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004e54:	430b      	orrs	r3, r1
 8004e56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e5a:	e005      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8004e5c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e60:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e64:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004e68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e70:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004e74:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e76:	2300      	movs	r3, #0
 8004e78:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e7a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f000 8081 	beq.w	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8004e86:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e8e:	2b20      	cmp	r3, #32
 8004e90:	d85f      	bhi.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8004e92:	a201      	add	r2, pc, #4	@ (adr r2, 8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8004e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e98:	08004f1d 	.word	0x08004f1d
 8004e9c:	08004f53 	.word	0x08004f53
 8004ea0:	08004f53 	.word	0x08004f53
 8004ea4:	08004f53 	.word	0x08004f53
 8004ea8:	08004f53 	.word	0x08004f53
 8004eac:	08004f53 	.word	0x08004f53
 8004eb0:	08004f53 	.word	0x08004f53
 8004eb4:	08004f53 	.word	0x08004f53
 8004eb8:	08004f2b 	.word	0x08004f2b
 8004ebc:	08004f53 	.word	0x08004f53
 8004ec0:	08004f53 	.word	0x08004f53
 8004ec4:	08004f53 	.word	0x08004f53
 8004ec8:	08004f53 	.word	0x08004f53
 8004ecc:	08004f53 	.word	0x08004f53
 8004ed0:	08004f53 	.word	0x08004f53
 8004ed4:	08004f53 	.word	0x08004f53
 8004ed8:	08004f3f 	.word	0x08004f3f
 8004edc:	08004f53 	.word	0x08004f53
 8004ee0:	08004f53 	.word	0x08004f53
 8004ee4:	08004f53 	.word	0x08004f53
 8004ee8:	08004f53 	.word	0x08004f53
 8004eec:	08004f53 	.word	0x08004f53
 8004ef0:	08004f53 	.word	0x08004f53
 8004ef4:	08004f53 	.word	0x08004f53
 8004ef8:	08004f5b 	.word	0x08004f5b
 8004efc:	08004f53 	.word	0x08004f53
 8004f00:	08004f53 	.word	0x08004f53
 8004f04:	08004f53 	.word	0x08004f53
 8004f08:	08004f53 	.word	0x08004f53
 8004f0c:	08004f53 	.word	0x08004f53
 8004f10:	08004f53 	.word	0x08004f53
 8004f14:	08004f53 	.word	0x08004f53
 8004f18:	08004f5b 	.word	0x08004f5b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f1c:	4bab      	ldr	r3, [pc, #684]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f20:	4aaa      	ldr	r2, [pc, #680]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004f22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f26:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004f28:	e018      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f2e:	3308      	adds	r3, #8
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 fab7 	bl	80054a4 <RCCEx_PLL2_Config>
 8004f36:	4603      	mov	r3, r0
 8004f38:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004f3c:	e00e      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f42:	3330      	adds	r3, #48	@ 0x30
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fb45 	bl	80055d4 <RCCEx_PLL3_Config>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004f50:	e004      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004f58:	e000      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8004f5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f5c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10d      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004f64:	4b99      	ldr	r3, [pc, #612]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f6a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004f6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f76:	4a95      	ldr	r2, [pc, #596]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004f78:	430b      	orrs	r3, r1
 8004f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004f7e:	e003      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f80:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f84:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004f88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f90:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004f94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f96:	2300      	movs	r3, #0
 8004f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f9a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	d04e      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004fa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fa8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fb0:	d02e      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8004fb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fb6:	d827      	bhi.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004fb8:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fba:	d02b      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8004fbc:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fbe:	d823      	bhi.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004fc0:	2b80      	cmp	r3, #128	@ 0x80
 8004fc2:	d017      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8004fc4:	2b80      	cmp	r3, #128	@ 0x80
 8004fc6:	d81f      	bhi.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8004fcc:	2b40      	cmp	r3, #64	@ 0x40
 8004fce:	d007      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8004fd0:	e01a      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fd2:	4b7e      	ldr	r3, [pc, #504]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd6:	4a7d      	ldr	r2, [pc, #500]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fdc:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004fde:	e01a      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fe0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fe4:	3308      	adds	r3, #8
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fa5c 	bl	80054a4 <RCCEx_PLL2_Config>
 8004fec:	4603      	mov	r3, r0
 8004fee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004ff2:	e010      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ff4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ff8:	3330      	adds	r3, #48	@ 0x30
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 faea 	bl	80055d4 <RCCEx_PLL3_Config>
 8005000:	4603      	mov	r3, r0
 8005002:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005006:	e006      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800500e:	e002      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8005010:	bf00      	nop
 8005012:	e000      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8005014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005016:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10d      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800501e:	4b6b      	ldr	r3, [pc, #428]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005024:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005028:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800502c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005030:	4a66      	ldr	r2, [pc, #408]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005032:	430b      	orrs	r3, r1
 8005034:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005038:	e003      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800503a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800503e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8005042:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800504e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005050:	2300      	movs	r3, #0
 8005052:	637b      	str	r3, [r7, #52]	@ 0x34
 8005054:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005058:	460b      	mov	r3, r1
 800505a:	4313      	orrs	r3, r2
 800505c:	d055      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800505e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005062:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8005066:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800506a:	d031      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 800506c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005070:	d82a      	bhi.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005072:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005076:	d02d      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8005078:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800507c:	d824      	bhi.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800507e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005082:	d029      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8005084:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005088:	d81e      	bhi.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800508a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800508e:	d011      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8005090:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005094:	d818      	bhi.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005096:	2b00      	cmp	r3, #0
 8005098:	d020      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800509a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800509e:	d113      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050a4:	3308      	adds	r3, #8
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 f9fc 	bl	80054a4 <RCCEx_PLL2_Config>
 80050ac:	4603      	mov	r3, r0
 80050ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80050b2:	e014      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050b8:	3330      	adds	r3, #48	@ 0x30
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 fa8a 	bl	80055d4 <RCCEx_PLL3_Config>
 80050c0:	4603      	mov	r3, r0
 80050c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80050c6:	e00a      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80050ce:	e006      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80050d0:	bf00      	nop
 80050d2:	e004      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80050d4:	bf00      	nop
 80050d6:	e002      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80050d8:	bf00      	nop
 80050da:	e000      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80050dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10d      	bne.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80050e6:	4b39      	ldr	r3, [pc, #228]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80050e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050ec:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80050f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050f4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80050f8:	4a34      	ldr	r2, [pc, #208]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80050fa:	430b      	orrs	r3, r1
 80050fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005100:	e003      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005102:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005106:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800510a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800510e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005112:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005116:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005118:	2300      	movs	r3, #0
 800511a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800511c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005120:	460b      	mov	r3, r1
 8005122:	4313      	orrs	r3, r2
 8005124:	d058      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8005126:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800512a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800512e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005132:	d031      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8005134:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005138:	d82a      	bhi.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800513a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800513e:	d02d      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8005140:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005144:	d824      	bhi.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005146:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800514a:	d029      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 800514c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005150:	d81e      	bhi.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005152:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005156:	d011      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8005158:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800515c:	d818      	bhi.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800515e:	2b00      	cmp	r3, #0
 8005160:	d020      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8005162:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005166:	d113      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005168:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800516c:	3308      	adds	r3, #8
 800516e:	4618      	mov	r0, r3
 8005170:	f000 f998 	bl	80054a4 <RCCEx_PLL2_Config>
 8005174:	4603      	mov	r3, r0
 8005176:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800517a:	e014      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800517c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005180:	3330      	adds	r3, #48	@ 0x30
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fa26 	bl	80055d4 <RCCEx_PLL3_Config>
 8005188:	4603      	mov	r3, r0
 800518a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800518e:	e00a      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005196:	e006      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005198:	bf00      	nop
 800519a:	e004      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800519c:	bf00      	nop
 800519e:	e002      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80051a0:	bf00      	nop
 80051a2:	e000      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80051a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d110      	bne.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 80051ae:	4b07      	ldr	r3, [pc, #28]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80051b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051b4:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80051b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051c0:	4902      	ldr	r1, [pc, #8]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80051c8:	e006      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 80051ca:	bf00      	nop
 80051cc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051d4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80051d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e0:	2100      	movs	r1, #0
 80051e2:	6239      	str	r1, [r7, #32]
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80051ea:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80051ee:	460b      	mov	r3, r1
 80051f0:	4313      	orrs	r3, r2
 80051f2:	d055      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80051f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80051fc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005200:	d031      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8005202:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005206:	d82a      	bhi.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005208:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800520c:	d02d      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800520e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005212:	d824      	bhi.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005214:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005218:	d029      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800521a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800521e:	d81e      	bhi.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005224:	d011      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8005226:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800522a:	d818      	bhi.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800522c:	2b00      	cmp	r3, #0
 800522e:	d020      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8005230:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005234:	d113      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005236:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800523a:	3308      	adds	r3, #8
 800523c:	4618      	mov	r0, r3
 800523e:	f000 f931 	bl	80054a4 <RCCEx_PLL2_Config>
 8005242:	4603      	mov	r3, r0
 8005244:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005248:	e014      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800524a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800524e:	3330      	adds	r3, #48	@ 0x30
 8005250:	4618      	mov	r0, r3
 8005252:	f000 f9bf 	bl	80055d4 <RCCEx_PLL3_Config>
 8005256:	4603      	mov	r3, r0
 8005258:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800525c:	e00a      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005264:	e006      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005266:	bf00      	nop
 8005268:	e004      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800526a:	bf00      	nop
 800526c:	e002      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800526e:	bf00      	nop
 8005270:	e000      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005272:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005274:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10d      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800527c:	4b88      	ldr	r3, [pc, #544]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800527e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005282:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8005286:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800528a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800528e:	4984      	ldr	r1, [pc, #528]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005290:	4313      	orrs	r3, r2
 8005292:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005296:	e003      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005298:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800529c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80052a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a8:	2100      	movs	r1, #0
 80052aa:	61b9      	str	r1, [r7, #24]
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	61fb      	str	r3, [r7, #28]
 80052b2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80052b6:	460b      	mov	r3, r1
 80052b8:	4313      	orrs	r3, r2
 80052ba:	d03d      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80052bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80052c4:	2b03      	cmp	r3, #3
 80052c6:	d81c      	bhi.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 80052c8:	a201      	add	r2, pc, #4	@ (adr r2, 80052d0 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 80052ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ce:	bf00      	nop
 80052d0:	0800530b 	.word	0x0800530b
 80052d4:	080052e1 	.word	0x080052e1
 80052d8:	080052ef 	.word	0x080052ef
 80052dc:	0800530b 	.word	0x0800530b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052e0:	4b6f      	ldr	r3, [pc, #444]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80052e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e4:	4a6e      	ldr	r2, [pc, #440]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80052e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052ea:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80052ec:	e00e      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052f2:	3308      	adds	r3, #8
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 f8d5 	bl	80054a4 <RCCEx_PLL2_Config>
 80052fa:	4603      	mov	r3, r0
 80052fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8005300:	e004      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005308:	e000      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800530a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800530c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10d      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005314:	4b62      	ldr	r3, [pc, #392]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005316:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800531a:	f023 0203 	bic.w	r2, r3, #3
 800531e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005322:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005326:	495e      	ldr	r1, [pc, #376]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005328:	4313      	orrs	r3, r2
 800532a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800532e:	e003      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005330:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005334:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005338:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800533c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005340:	2100      	movs	r1, #0
 8005342:	6139      	str	r1, [r7, #16]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800534e:	460b      	mov	r3, r1
 8005350:	4313      	orrs	r3, r2
 8005352:	d03a      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005354:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005358:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800535c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005360:	d00e      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8005362:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005366:	d815      	bhi.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8005368:	2b00      	cmp	r3, #0
 800536a:	d017      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 800536c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005370:	d110      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005372:	4b4b      	ldr	r3, [pc, #300]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005376:	4a4a      	ldr	r2, [pc, #296]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800537c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800537e:	e00e      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005380:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005384:	3308      	adds	r3, #8
 8005386:	4618      	mov	r0, r3
 8005388:	f000 f88c 	bl	80054a4 <RCCEx_PLL2_Config>
 800538c:	4603      	mov	r3, r0
 800538e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005392:	e004      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800539a:	e000      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 800539c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800539e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10d      	bne.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80053a6:	4b3e      	ldr	r3, [pc, #248]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80053a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053b4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80053b8:	4939      	ldr	r1, [pc, #228]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80053c0:	e003      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80053c6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d2:	2100      	movs	r1, #0
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	f003 0310 	and.w	r3, r3, #16
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80053e0:	460b      	mov	r3, r1
 80053e2:	4313      	orrs	r3, r2
 80053e4:	d038      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80053e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80053ee:	2b30      	cmp	r3, #48	@ 0x30
 80053f0:	d01b      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 80053f2:	2b30      	cmp	r3, #48	@ 0x30
 80053f4:	d815      	bhi.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 80053f6:	2b10      	cmp	r3, #16
 80053f8:	d002      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 80053fa:	2b20      	cmp	r3, #32
 80053fc:	d007      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 80053fe:	e010      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005400:	4b27      	ldr	r3, [pc, #156]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005404:	4a26      	ldr	r2, [pc, #152]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005406:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800540a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800540c:	e00e      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800540e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005412:	3330      	adds	r3, #48	@ 0x30
 8005414:	4618      	mov	r0, r3
 8005416:	f000 f8dd 	bl	80055d4 <RCCEx_PLL3_Config>
 800541a:	4603      	mov	r3, r0
 800541c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005420:	e004      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005428:	e000      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800542a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800542c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10d      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005434:	4b1a      	ldr	r3, [pc, #104]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005436:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800543a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800543e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005442:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005446:	4916      	ldr	r1, [pc, #88]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005448:	4313      	orrs	r3, r2
 800544a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800544e:	e003      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005450:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005454:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005458:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800545c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005460:	2100      	movs	r1, #0
 8005462:	6039      	str	r1, [r7, #0]
 8005464:	f003 0308 	and.w	r3, r3, #8
 8005468:	607b      	str	r3, [r7, #4]
 800546a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800546e:	460b      	mov	r3, r1
 8005470:	4313      	orrs	r3, r2
 8005472:	d00c      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005474:	4b0a      	ldr	r3, [pc, #40]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005476:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800547a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800547e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005482:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8005486:	4906      	ldr	r1, [pc, #24]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800548e:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8005492:	4618      	mov	r0, r3
 8005494:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8005498:	46bd      	mov	sp, r7
 800549a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800549e:	bf00      	nop
 80054a0:	44020c00 	.word	0x44020c00

080054a4 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80054ac:	4b48      	ldr	r3, [pc, #288]	@ (80055d0 <RCCEx_PLL2_Config+0x12c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a47      	ldr	r2, [pc, #284]	@ (80055d0 <RCCEx_PLL2_Config+0x12c>)
 80054b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80054b6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80054b8:	f7fc f9ac 	bl	8001814 <HAL_GetTick>
 80054bc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054be:	e008      	b.n	80054d2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80054c0:	f7fc f9a8 	bl	8001814 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d901      	bls.n	80054d2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e07a      	b.n	80055c8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054d2:	4b3f      	ldr	r3, [pc, #252]	@ (80055d0 <RCCEx_PLL2_Config+0x12c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1f0      	bne.n	80054c0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80054de:	4b3c      	ldr	r3, [pc, #240]	@ (80055d0 <RCCEx_PLL2_Config+0x12c>)
 80054e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80054e6:	f023 0303 	bic.w	r3, r3, #3
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6811      	ldr	r1, [r2, #0]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6852      	ldr	r2, [r2, #4]
 80054f2:	0212      	lsls	r2, r2, #8
 80054f4:	430a      	orrs	r2, r1
 80054f6:	4936      	ldr	r1, [pc, #216]	@ (80055d0 <RCCEx_PLL2_Config+0x12c>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	3b01      	subs	r3, #1
 8005502:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	3b01      	subs	r3, #1
 800550c:	025b      	lsls	r3, r3, #9
 800550e:	b29b      	uxth	r3, r3
 8005510:	431a      	orrs	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	3b01      	subs	r3, #1
 8005518:	041b      	lsls	r3, r3, #16
 800551a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	3b01      	subs	r3, #1
 8005526:	061b      	lsls	r3, r3, #24
 8005528:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800552c:	4928      	ldr	r1, [pc, #160]	@ (80055d0 <RCCEx_PLL2_Config+0x12c>)
 800552e:	4313      	orrs	r3, r2
 8005530:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005532:	4b27      	ldr	r3, [pc, #156]	@ (80055d0 <RCCEx_PLL2_Config+0x12c>)
 8005534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005536:	f023 020c 	bic.w	r2, r3, #12
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	4924      	ldr	r1, [pc, #144]	@ (80055d0 <RCCEx_PLL2_Config+0x12c>)
 8005540:	4313      	orrs	r3, r2
 8005542:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005544:	4b22      	ldr	r3, [pc, #136]	@ (80055d0 <RCCEx_PLL2_Config+0x12c>)
 8005546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005548:	f023 0220 	bic.w	r2, r3, #32
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	491f      	ldr	r1, [pc, #124]	@ (80055d0 <RCCEx_PLL2_Config+0x12c>)
 8005552:	4313      	orrs	r3, r2
 8005554:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005556:	4b1e      	ldr	r3, [pc, #120]	@ (80055d0 <RCCEx_PLL2_Config+0x12c>)
 8005558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555e:	491c      	ldr	r1, [pc, #112]	@ (80055d0 <RCCEx_PLL2_Config+0x12c>)
 8005560:	4313      	orrs	r3, r2
 8005562:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005564:	4b1a      	ldr	r3, [pc, #104]	@ (80055d0 <RCCEx_PLL2_Config+0x12c>)
 8005566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005568:	4a19      	ldr	r2, [pc, #100]	@ (80055d0 <RCCEx_PLL2_Config+0x12c>)
 800556a:	f023 0310 	bic.w	r3, r3, #16
 800556e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005570:	4b17      	ldr	r3, [pc, #92]	@ (80055d0 <RCCEx_PLL2_Config+0x12c>)
 8005572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005574:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005578:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6a12      	ldr	r2, [r2, #32]
 8005580:	00d2      	lsls	r2, r2, #3
 8005582:	4913      	ldr	r1, [pc, #76]	@ (80055d0 <RCCEx_PLL2_Config+0x12c>)
 8005584:	4313      	orrs	r3, r2
 8005586:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005588:	4b11      	ldr	r3, [pc, #68]	@ (80055d0 <RCCEx_PLL2_Config+0x12c>)
 800558a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558c:	4a10      	ldr	r2, [pc, #64]	@ (80055d0 <RCCEx_PLL2_Config+0x12c>)
 800558e:	f043 0310 	orr.w	r3, r3, #16
 8005592:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005594:	4b0e      	ldr	r3, [pc, #56]	@ (80055d0 <RCCEx_PLL2_Config+0x12c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a0d      	ldr	r2, [pc, #52]	@ (80055d0 <RCCEx_PLL2_Config+0x12c>)
 800559a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800559e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055a0:	f7fc f938 	bl	8001814 <HAL_GetTick>
 80055a4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80055a6:	e008      	b.n	80055ba <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80055a8:	f7fc f934 	bl	8001814 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d901      	bls.n	80055ba <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e006      	b.n	80055c8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80055ba:	4b05      	ldr	r3, [pc, #20]	@ (80055d0 <RCCEx_PLL2_Config+0x12c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0f0      	beq.n	80055a8 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80055c6:	2300      	movs	r3, #0

}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	44020c00 	.word	0x44020c00

080055d4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 80055dc:	4b48      	ldr	r3, [pc, #288]	@ (8005700 <RCCEx_PLL3_Config+0x12c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a47      	ldr	r2, [pc, #284]	@ (8005700 <RCCEx_PLL3_Config+0x12c>)
 80055e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055e6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055e8:	f7fc f914 	bl	8001814 <HAL_GetTick>
 80055ec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055ee:	e008      	b.n	8005602 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80055f0:	f7fc f910 	bl	8001814 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e07a      	b.n	80056f8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005602:	4b3f      	ldr	r3, [pc, #252]	@ (8005700 <RCCEx_PLL3_Config+0x12c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1f0      	bne.n	80055f0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800560e:	4b3c      	ldr	r3, [pc, #240]	@ (8005700 <RCCEx_PLL3_Config+0x12c>)
 8005610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005612:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005616:	f023 0303 	bic.w	r3, r3, #3
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6811      	ldr	r1, [r2, #0]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6852      	ldr	r2, [r2, #4]
 8005622:	0212      	lsls	r2, r2, #8
 8005624:	430a      	orrs	r2, r1
 8005626:	4936      	ldr	r1, [pc, #216]	@ (8005700 <RCCEx_PLL3_Config+0x12c>)
 8005628:	4313      	orrs	r3, r2
 800562a:	630b      	str	r3, [r1, #48]	@ 0x30
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	3b01      	subs	r3, #1
 8005632:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	3b01      	subs	r3, #1
 800563c:	025b      	lsls	r3, r3, #9
 800563e:	b29b      	uxth	r3, r3
 8005640:	431a      	orrs	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	3b01      	subs	r3, #1
 8005648:	041b      	lsls	r3, r3, #16
 800564a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800564e:	431a      	orrs	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	3b01      	subs	r3, #1
 8005656:	061b      	lsls	r3, r3, #24
 8005658:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800565c:	4928      	ldr	r1, [pc, #160]	@ (8005700 <RCCEx_PLL3_Config+0x12c>)
 800565e:	4313      	orrs	r3, r2
 8005660:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005662:	4b27      	ldr	r3, [pc, #156]	@ (8005700 <RCCEx_PLL3_Config+0x12c>)
 8005664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005666:	f023 020c 	bic.w	r2, r3, #12
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	4924      	ldr	r1, [pc, #144]	@ (8005700 <RCCEx_PLL3_Config+0x12c>)
 8005670:	4313      	orrs	r3, r2
 8005672:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8005674:	4b22      	ldr	r3, [pc, #136]	@ (8005700 <RCCEx_PLL3_Config+0x12c>)
 8005676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005678:	f023 0220 	bic.w	r2, r3, #32
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	69db      	ldr	r3, [r3, #28]
 8005680:	491f      	ldr	r1, [pc, #124]	@ (8005700 <RCCEx_PLL3_Config+0x12c>)
 8005682:	4313      	orrs	r3, r2
 8005684:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005686:	4b1e      	ldr	r3, [pc, #120]	@ (8005700 <RCCEx_PLL3_Config+0x12c>)
 8005688:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568e:	491c      	ldr	r1, [pc, #112]	@ (8005700 <RCCEx_PLL3_Config+0x12c>)
 8005690:	4313      	orrs	r3, r2
 8005692:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8005694:	4b1a      	ldr	r3, [pc, #104]	@ (8005700 <RCCEx_PLL3_Config+0x12c>)
 8005696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005698:	4a19      	ldr	r2, [pc, #100]	@ (8005700 <RCCEx_PLL3_Config+0x12c>)
 800569a:	f023 0310 	bic.w	r3, r3, #16
 800569e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80056a0:	4b17      	ldr	r3, [pc, #92]	@ (8005700 <RCCEx_PLL3_Config+0x12c>)
 80056a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056a4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056a8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6a12      	ldr	r2, [r2, #32]
 80056b0:	00d2      	lsls	r2, r2, #3
 80056b2:	4913      	ldr	r1, [pc, #76]	@ (8005700 <RCCEx_PLL3_Config+0x12c>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80056b8:	4b11      	ldr	r3, [pc, #68]	@ (8005700 <RCCEx_PLL3_Config+0x12c>)
 80056ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056bc:	4a10      	ldr	r2, [pc, #64]	@ (8005700 <RCCEx_PLL3_Config+0x12c>)
 80056be:	f043 0310 	orr.w	r3, r3, #16
 80056c2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80056c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005700 <RCCEx_PLL3_Config+0x12c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a0d      	ldr	r2, [pc, #52]	@ (8005700 <RCCEx_PLL3_Config+0x12c>)
 80056ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056ce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80056d0:	f7fc f8a0 	bl	8001814 <HAL_GetTick>
 80056d4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056d6:	e008      	b.n	80056ea <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80056d8:	f7fc f89c 	bl	8001814 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d901      	bls.n	80056ea <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e006      	b.n	80056f8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056ea:	4b05      	ldr	r3, [pc, #20]	@ (8005700 <RCCEx_PLL3_Config+0x12c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0f0      	beq.n	80056d8 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	44020c00 	.word	0x44020c00

08005704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e049      	b.n	80057aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d106      	bne.n	8005730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fb ffb0 	bl	8001690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3304      	adds	r3, #4
 8005740:	4619      	mov	r1, r3
 8005742:	4610      	mov	r0, r2
 8005744:	f000 fe50 	bl	80063e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d001      	beq.n	80057cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e07c      	b.n	80058c6 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0201 	orr.w	r2, r2, #1
 80057e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a3a      	ldr	r2, [pc, #232]	@ (80058d4 <HAL_TIM_Base_Start_IT+0x120>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d04a      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0xd0>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a39      	ldr	r2, [pc, #228]	@ (80058d8 <HAL_TIM_Base_Start_IT+0x124>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d045      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0xd0>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005800:	d040      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0xd0>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800580a:	d03b      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0xd0>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a32      	ldr	r2, [pc, #200]	@ (80058dc <HAL_TIM_Base_Start_IT+0x128>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d036      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0xd0>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a31      	ldr	r2, [pc, #196]	@ (80058e0 <HAL_TIM_Base_Start_IT+0x12c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d031      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0xd0>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a2f      	ldr	r2, [pc, #188]	@ (80058e4 <HAL_TIM_Base_Start_IT+0x130>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d02c      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0xd0>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a2e      	ldr	r2, [pc, #184]	@ (80058e8 <HAL_TIM_Base_Start_IT+0x134>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d027      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0xd0>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a2c      	ldr	r2, [pc, #176]	@ (80058ec <HAL_TIM_Base_Start_IT+0x138>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d022      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0xd0>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a2b      	ldr	r2, [pc, #172]	@ (80058f0 <HAL_TIM_Base_Start_IT+0x13c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d01d      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0xd0>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a29      	ldr	r2, [pc, #164]	@ (80058f4 <HAL_TIM_Base_Start_IT+0x140>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d018      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0xd0>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a28      	ldr	r2, [pc, #160]	@ (80058f8 <HAL_TIM_Base_Start_IT+0x144>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d013      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0xd0>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a26      	ldr	r2, [pc, #152]	@ (80058fc <HAL_TIM_Base_Start_IT+0x148>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00e      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0xd0>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a25      	ldr	r2, [pc, #148]	@ (8005900 <HAL_TIM_Base_Start_IT+0x14c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d009      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0xd0>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a23      	ldr	r2, [pc, #140]	@ (8005904 <HAL_TIM_Base_Start_IT+0x150>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d004      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0xd0>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a22      	ldr	r2, [pc, #136]	@ (8005908 <HAL_TIM_Base_Start_IT+0x154>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d115      	bne.n	80058b0 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	4b20      	ldr	r3, [pc, #128]	@ (800590c <HAL_TIM_Base_Start_IT+0x158>)
 800588c:	4013      	ands	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b06      	cmp	r3, #6
 8005894:	d015      	beq.n	80058c2 <HAL_TIM_Base_Start_IT+0x10e>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800589c:	d011      	beq.n	80058c2 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f042 0201 	orr.w	r2, r2, #1
 80058ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ae:	e008      	b.n	80058c2 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0201 	orr.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	e000      	b.n	80058c4 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	40012c00 	.word	0x40012c00
 80058d8:	50012c00 	.word	0x50012c00
 80058dc:	40000400 	.word	0x40000400
 80058e0:	50000400 	.word	0x50000400
 80058e4:	40000800 	.word	0x40000800
 80058e8:	50000800 	.word	0x50000800
 80058ec:	40000c00 	.word	0x40000c00
 80058f0:	50000c00 	.word	0x50000c00
 80058f4:	40013400 	.word	0x40013400
 80058f8:	50013400 	.word	0x50013400
 80058fc:	40001800 	.word	0x40001800
 8005900:	50001800 	.word	0x50001800
 8005904:	40014000 	.word	0x40014000
 8005908:	50014000 	.word	0x50014000
 800590c:	00010007 	.word	0x00010007

08005910 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e049      	b.n	80059b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f841 	bl	80059be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3304      	adds	r3, #4
 800594c:	4619      	mov	r1, r3
 800594e:	4610      	mov	r0, r2
 8005950:	f000 fd4a 	bl	80063e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
	...

080059d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d109      	bne.n	80059f8 <HAL_TIM_PWM_Start+0x24>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	bf14      	ite	ne
 80059f0:	2301      	movne	r3, #1
 80059f2:	2300      	moveq	r3, #0
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	e03c      	b.n	8005a72 <HAL_TIM_PWM_Start+0x9e>
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	d109      	bne.n	8005a12 <HAL_TIM_PWM_Start+0x3e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	bf14      	ite	ne
 8005a0a:	2301      	movne	r3, #1
 8005a0c:	2300      	moveq	r3, #0
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	e02f      	b.n	8005a72 <HAL_TIM_PWM_Start+0x9e>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d109      	bne.n	8005a2c <HAL_TIM_PWM_Start+0x58>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	bf14      	ite	ne
 8005a24:	2301      	movne	r3, #1
 8005a26:	2300      	moveq	r3, #0
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	e022      	b.n	8005a72 <HAL_TIM_PWM_Start+0x9e>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2b0c      	cmp	r3, #12
 8005a30:	d109      	bne.n	8005a46 <HAL_TIM_PWM_Start+0x72>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	bf14      	ite	ne
 8005a3e:	2301      	movne	r3, #1
 8005a40:	2300      	moveq	r3, #0
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	e015      	b.n	8005a72 <HAL_TIM_PWM_Start+0x9e>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b10      	cmp	r3, #16
 8005a4a:	d109      	bne.n	8005a60 <HAL_TIM_PWM_Start+0x8c>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	bf14      	ite	ne
 8005a58:	2301      	movne	r3, #1
 8005a5a:	2300      	moveq	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	e008      	b.n	8005a72 <HAL_TIM_PWM_Start+0x9e>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	bf14      	ite	ne
 8005a6c:	2301      	movne	r3, #1
 8005a6e:	2300      	moveq	r3, #0
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e0e2      	b.n	8005c40 <HAL_TIM_PWM_Start+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d104      	bne.n	8005a8a <HAL_TIM_PWM_Start+0xb6>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a88:	e023      	b.n	8005ad2 <HAL_TIM_PWM_Start+0xfe>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b04      	cmp	r3, #4
 8005a8e:	d104      	bne.n	8005a9a <HAL_TIM_PWM_Start+0xc6>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a98:	e01b      	b.n	8005ad2 <HAL_TIM_PWM_Start+0xfe>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	d104      	bne.n	8005aaa <HAL_TIM_PWM_Start+0xd6>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005aa8:	e013      	b.n	8005ad2 <HAL_TIM_PWM_Start+0xfe>
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	2b0c      	cmp	r3, #12
 8005aae:	d104      	bne.n	8005aba <HAL_TIM_PWM_Start+0xe6>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ab8:	e00b      	b.n	8005ad2 <HAL_TIM_PWM_Start+0xfe>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b10      	cmp	r3, #16
 8005abe:	d104      	bne.n	8005aca <HAL_TIM_PWM_Start+0xf6>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ac8:	e003      	b.n	8005ad2 <HAL_TIM_PWM_Start+0xfe>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2202      	movs	r2, #2
 8005ace:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	6839      	ldr	r1, [r7, #0]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f001 fa20 	bl	8006f20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a58      	ldr	r2, [pc, #352]	@ (8005c48 <HAL_TIM_PWM_Start+0x274>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d02c      	beq.n	8005b44 <HAL_TIM_PWM_Start+0x170>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a57      	ldr	r2, [pc, #348]	@ (8005c4c <HAL_TIM_PWM_Start+0x278>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d027      	beq.n	8005b44 <HAL_TIM_PWM_Start+0x170>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a55      	ldr	r2, [pc, #340]	@ (8005c50 <HAL_TIM_PWM_Start+0x27c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d022      	beq.n	8005b44 <HAL_TIM_PWM_Start+0x170>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a54      	ldr	r2, [pc, #336]	@ (8005c54 <HAL_TIM_PWM_Start+0x280>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d01d      	beq.n	8005b44 <HAL_TIM_PWM_Start+0x170>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a52      	ldr	r2, [pc, #328]	@ (8005c58 <HAL_TIM_PWM_Start+0x284>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d018      	beq.n	8005b44 <HAL_TIM_PWM_Start+0x170>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a51      	ldr	r2, [pc, #324]	@ (8005c5c <HAL_TIM_PWM_Start+0x288>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d013      	beq.n	8005b44 <HAL_TIM_PWM_Start+0x170>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a4f      	ldr	r2, [pc, #316]	@ (8005c60 <HAL_TIM_PWM_Start+0x28c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d00e      	beq.n	8005b44 <HAL_TIM_PWM_Start+0x170>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a4e      	ldr	r2, [pc, #312]	@ (8005c64 <HAL_TIM_PWM_Start+0x290>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d009      	beq.n	8005b44 <HAL_TIM_PWM_Start+0x170>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a4c      	ldr	r2, [pc, #304]	@ (8005c68 <HAL_TIM_PWM_Start+0x294>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d004      	beq.n	8005b44 <HAL_TIM_PWM_Start+0x170>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a4b      	ldr	r2, [pc, #300]	@ (8005c6c <HAL_TIM_PWM_Start+0x298>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d101      	bne.n	8005b48 <HAL_TIM_PWM_Start+0x174>
 8005b44:	2301      	movs	r3, #1
 8005b46:	e000      	b.n	8005b4a <HAL_TIM_PWM_Start+0x176>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d007      	beq.n	8005b5e <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a39      	ldr	r2, [pc, #228]	@ (8005c48 <HAL_TIM_PWM_Start+0x274>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d04a      	beq.n	8005bfe <HAL_TIM_PWM_Start+0x22a>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a37      	ldr	r2, [pc, #220]	@ (8005c4c <HAL_TIM_PWM_Start+0x278>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d045      	beq.n	8005bfe <HAL_TIM_PWM_Start+0x22a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b7a:	d040      	beq.n	8005bfe <HAL_TIM_PWM_Start+0x22a>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b84:	d03b      	beq.n	8005bfe <HAL_TIM_PWM_Start+0x22a>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a39      	ldr	r2, [pc, #228]	@ (8005c70 <HAL_TIM_PWM_Start+0x29c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d036      	beq.n	8005bfe <HAL_TIM_PWM_Start+0x22a>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a37      	ldr	r2, [pc, #220]	@ (8005c74 <HAL_TIM_PWM_Start+0x2a0>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d031      	beq.n	8005bfe <HAL_TIM_PWM_Start+0x22a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a36      	ldr	r2, [pc, #216]	@ (8005c78 <HAL_TIM_PWM_Start+0x2a4>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d02c      	beq.n	8005bfe <HAL_TIM_PWM_Start+0x22a>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a34      	ldr	r2, [pc, #208]	@ (8005c7c <HAL_TIM_PWM_Start+0x2a8>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d027      	beq.n	8005bfe <HAL_TIM_PWM_Start+0x22a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a33      	ldr	r2, [pc, #204]	@ (8005c80 <HAL_TIM_PWM_Start+0x2ac>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d022      	beq.n	8005bfe <HAL_TIM_PWM_Start+0x22a>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a31      	ldr	r2, [pc, #196]	@ (8005c84 <HAL_TIM_PWM_Start+0x2b0>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d01d      	beq.n	8005bfe <HAL_TIM_PWM_Start+0x22a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a22      	ldr	r2, [pc, #136]	@ (8005c50 <HAL_TIM_PWM_Start+0x27c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d018      	beq.n	8005bfe <HAL_TIM_PWM_Start+0x22a>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a20      	ldr	r2, [pc, #128]	@ (8005c54 <HAL_TIM_PWM_Start+0x280>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d013      	beq.n	8005bfe <HAL_TIM_PWM_Start+0x22a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a2b      	ldr	r2, [pc, #172]	@ (8005c88 <HAL_TIM_PWM_Start+0x2b4>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d00e      	beq.n	8005bfe <HAL_TIM_PWM_Start+0x22a>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a29      	ldr	r2, [pc, #164]	@ (8005c8c <HAL_TIM_PWM_Start+0x2b8>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d009      	beq.n	8005bfe <HAL_TIM_PWM_Start+0x22a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a1a      	ldr	r2, [pc, #104]	@ (8005c58 <HAL_TIM_PWM_Start+0x284>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d004      	beq.n	8005bfe <HAL_TIM_PWM_Start+0x22a>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a18      	ldr	r2, [pc, #96]	@ (8005c5c <HAL_TIM_PWM_Start+0x288>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d115      	bne.n	8005c2a <HAL_TIM_PWM_Start+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	4b22      	ldr	r3, [pc, #136]	@ (8005c90 <HAL_TIM_PWM_Start+0x2bc>)
 8005c06:	4013      	ands	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2b06      	cmp	r3, #6
 8005c0e:	d015      	beq.n	8005c3c <HAL_TIM_PWM_Start+0x268>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c16:	d011      	beq.n	8005c3c <HAL_TIM_PWM_Start+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0201 	orr.w	r2, r2, #1
 8005c26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c28:	e008      	b.n	8005c3c <HAL_TIM_PWM_Start+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f042 0201 	orr.w	r2, r2, #1
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	e000      	b.n	8005c3e <HAL_TIM_PWM_Start+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	40012c00 	.word	0x40012c00
 8005c4c:	50012c00 	.word	0x50012c00
 8005c50:	40013400 	.word	0x40013400
 8005c54:	50013400 	.word	0x50013400
 8005c58:	40014000 	.word	0x40014000
 8005c5c:	50014000 	.word	0x50014000
 8005c60:	40014400 	.word	0x40014400
 8005c64:	50014400 	.word	0x50014400
 8005c68:	40014800 	.word	0x40014800
 8005c6c:	50014800 	.word	0x50014800
 8005c70:	40000400 	.word	0x40000400
 8005c74:	50000400 	.word	0x50000400
 8005c78:	40000800 	.word	0x40000800
 8005c7c:	50000800 	.word	0x50000800
 8005c80:	40000c00 	.word	0x40000c00
 8005c84:	50000c00 	.word	0x50000c00
 8005c88:	40001800 	.word	0x40001800
 8005c8c:	50001800 	.word	0x50001800
 8005c90:	00010007 	.word	0x00010007

08005c94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d020      	beq.n	8005cf8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d01b      	beq.n	8005cf8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f06f 0202 	mvn.w	r2, #2
 8005cc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	f003 0303 	and.w	r3, r3, #3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d003      	beq.n	8005ce6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fb64 	bl	80063ac <HAL_TIM_IC_CaptureCallback>
 8005ce4:	e005      	b.n	8005cf2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fb56 	bl	8006398 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fb67 	bl	80063c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f003 0304 	and.w	r3, r3, #4
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d020      	beq.n	8005d44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d01b      	beq.n	8005d44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0204 	mvn.w	r2, #4
 8005d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2202      	movs	r2, #2
 8005d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fb3e 	bl	80063ac <HAL_TIM_IC_CaptureCallback>
 8005d30:	e005      	b.n	8005d3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fb30 	bl	8006398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fb41 	bl	80063c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f003 0308 	and.w	r3, r3, #8
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d020      	beq.n	8005d90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f003 0308 	and.w	r3, r3, #8
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d01b      	beq.n	8005d90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f06f 0208 	mvn.w	r2, #8
 8005d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2204      	movs	r2, #4
 8005d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	f003 0303 	and.w	r3, r3, #3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fb18 	bl	80063ac <HAL_TIM_IC_CaptureCallback>
 8005d7c:	e005      	b.n	8005d8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fb0a 	bl	8006398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fb1b 	bl	80063c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f003 0310 	and.w	r3, r3, #16
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d020      	beq.n	8005ddc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f003 0310 	and.w	r3, r3, #16
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d01b      	beq.n	8005ddc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f06f 0210 	mvn.w	r2, #16
 8005dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2208      	movs	r2, #8
 8005db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 faf2 	bl	80063ac <HAL_TIM_IC_CaptureCallback>
 8005dc8:	e005      	b.n	8005dd6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fae4 	bl	8006398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 faf5 	bl	80063c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00c      	beq.n	8005e00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d007      	beq.n	8005e00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f06f 0201 	mvn.w	r2, #1
 8005df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7fb fa54 	bl	80012a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d104      	bne.n	8005e14 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00c      	beq.n	8005e2e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d007      	beq.n	8005e2e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f001 f979 	bl	8007120 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00c      	beq.n	8005e52 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d007      	beq.n	8005e52 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f001 f971 	bl	8007134 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00c      	beq.n	8005e76 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d007      	beq.n	8005e76 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 faaf 	bl	80063d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	f003 0320 	and.w	r3, r3, #32
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00c      	beq.n	8005e9a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f003 0320 	and.w	r3, r3, #32
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d007      	beq.n	8005e9a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f06f 0220 	mvn.w	r2, #32
 8005e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f001 f939 	bl	800710c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00c      	beq.n	8005ebe <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d007      	beq.n	8005ebe <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f001 f945 	bl	8007148 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00c      	beq.n	8005ee2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d007      	beq.n	8005ee2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f001 f93d 	bl	800715c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00c      	beq.n	8005f06 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d007      	beq.n	8005f06 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f001 f935 	bl	8007170 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00c      	beq.n	8005f2a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d007      	beq.n	8005f2a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f001 f92d 	bl	8007184 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f2a:	bf00      	nop
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
	...

08005f34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f40:	2300      	movs	r3, #0
 8005f42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d101      	bne.n	8005f52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e0ff      	b.n	8006152 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b14      	cmp	r3, #20
 8005f5e:	f200 80f0 	bhi.w	8006142 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f62:	a201      	add	r2, pc, #4	@ (adr r2, 8005f68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f68:	08005fbd 	.word	0x08005fbd
 8005f6c:	08006143 	.word	0x08006143
 8005f70:	08006143 	.word	0x08006143
 8005f74:	08006143 	.word	0x08006143
 8005f78:	08005ffd 	.word	0x08005ffd
 8005f7c:	08006143 	.word	0x08006143
 8005f80:	08006143 	.word	0x08006143
 8005f84:	08006143 	.word	0x08006143
 8005f88:	0800603f 	.word	0x0800603f
 8005f8c:	08006143 	.word	0x08006143
 8005f90:	08006143 	.word	0x08006143
 8005f94:	08006143 	.word	0x08006143
 8005f98:	0800607f 	.word	0x0800607f
 8005f9c:	08006143 	.word	0x08006143
 8005fa0:	08006143 	.word	0x08006143
 8005fa4:	08006143 	.word	0x08006143
 8005fa8:	080060c1 	.word	0x080060c1
 8005fac:	08006143 	.word	0x08006143
 8005fb0:	08006143 	.word	0x08006143
 8005fb4:	08006143 	.word	0x08006143
 8005fb8:	08006101 	.word	0x08006101
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68b9      	ldr	r1, [r7, #8]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 fb3a 	bl	800663c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	699a      	ldr	r2, [r3, #24]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f042 0208 	orr.w	r2, r2, #8
 8005fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	699a      	ldr	r2, [r3, #24]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0204 	bic.w	r2, r2, #4
 8005fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6999      	ldr	r1, [r3, #24]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	691a      	ldr	r2, [r3, #16]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	619a      	str	r2, [r3, #24]
      break;
 8005ffa:	e0a5      	b.n	8006148 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68b9      	ldr	r1, [r7, #8]
 8006002:	4618      	mov	r0, r3
 8006004:	f000 fbdc 	bl	80067c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	699a      	ldr	r2, [r3, #24]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699a      	ldr	r2, [r3, #24]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6999      	ldr	r1, [r3, #24]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	021a      	lsls	r2, r3, #8
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	619a      	str	r2, [r3, #24]
      break;
 800603c:	e084      	b.n	8006148 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68b9      	ldr	r1, [r7, #8]
 8006044:	4618      	mov	r0, r3
 8006046:	f000 fc6b 	bl	8006920 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	69da      	ldr	r2, [r3, #28]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f042 0208 	orr.w	r2, r2, #8
 8006058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69da      	ldr	r2, [r3, #28]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0204 	bic.w	r2, r2, #4
 8006068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69d9      	ldr	r1, [r3, #28]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	691a      	ldr	r2, [r3, #16]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	61da      	str	r2, [r3, #28]
      break;
 800607c:	e064      	b.n	8006148 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68b9      	ldr	r1, [r7, #8]
 8006084:	4618      	mov	r0, r3
 8006086:	f000 fcf9 	bl	8006a7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	69da      	ldr	r2, [r3, #28]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006098:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	69da      	ldr	r2, [r3, #28]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	69d9      	ldr	r1, [r3, #28]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	021a      	lsls	r2, r3, #8
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	61da      	str	r2, [r3, #28]
      break;
 80060be:	e043      	b.n	8006148 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68b9      	ldr	r1, [r7, #8]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 fd88 	bl	8006bdc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0208 	orr.w	r2, r2, #8
 80060da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0204 	bic.w	r2, r2, #4
 80060ea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	691a      	ldr	r2, [r3, #16]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	430a      	orrs	r2, r1
 80060fc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80060fe:	e023      	b.n	8006148 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68b9      	ldr	r1, [r7, #8]
 8006106:	4618      	mov	r0, r3
 8006108:	f000 fdea 	bl	8006ce0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800611a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800612a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	021a      	lsls	r2, r3, #8
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006140:	e002      	b.n	8006148 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	75fb      	strb	r3, [r7, #23]
      break;
 8006146:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006150:	7dfb      	ldrb	r3, [r7, #23]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3718      	adds	r7, #24
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop

0800615c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006166:	2300      	movs	r3, #0
 8006168:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <HAL_TIM_ConfigClockSource+0x1c>
 8006174:	2302      	movs	r3, #2
 8006176:	e0fe      	b.n	8006376 <HAL_TIM_ConfigClockSource+0x21a>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006196:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800619a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061b4:	f000 80c9 	beq.w	800634a <HAL_TIM_ConfigClockSource+0x1ee>
 80061b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061bc:	f200 80ce 	bhi.w	800635c <HAL_TIM_ConfigClockSource+0x200>
 80061c0:	4a6f      	ldr	r2, [pc, #444]	@ (8006380 <HAL_TIM_ConfigClockSource+0x224>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	f000 80c1 	beq.w	800634a <HAL_TIM_ConfigClockSource+0x1ee>
 80061c8:	4a6d      	ldr	r2, [pc, #436]	@ (8006380 <HAL_TIM_ConfigClockSource+0x224>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	f200 80c6 	bhi.w	800635c <HAL_TIM_ConfigClockSource+0x200>
 80061d0:	4a6c      	ldr	r2, [pc, #432]	@ (8006384 <HAL_TIM_ConfigClockSource+0x228>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	f000 80b9 	beq.w	800634a <HAL_TIM_ConfigClockSource+0x1ee>
 80061d8:	4a6a      	ldr	r2, [pc, #424]	@ (8006384 <HAL_TIM_ConfigClockSource+0x228>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	f200 80be 	bhi.w	800635c <HAL_TIM_ConfigClockSource+0x200>
 80061e0:	4a69      	ldr	r2, [pc, #420]	@ (8006388 <HAL_TIM_ConfigClockSource+0x22c>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	f000 80b1 	beq.w	800634a <HAL_TIM_ConfigClockSource+0x1ee>
 80061e8:	4a67      	ldr	r2, [pc, #412]	@ (8006388 <HAL_TIM_ConfigClockSource+0x22c>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	f200 80b6 	bhi.w	800635c <HAL_TIM_ConfigClockSource+0x200>
 80061f0:	4a66      	ldr	r2, [pc, #408]	@ (800638c <HAL_TIM_ConfigClockSource+0x230>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	f000 80a9 	beq.w	800634a <HAL_TIM_ConfigClockSource+0x1ee>
 80061f8:	4a64      	ldr	r2, [pc, #400]	@ (800638c <HAL_TIM_ConfigClockSource+0x230>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	f200 80ae 	bhi.w	800635c <HAL_TIM_ConfigClockSource+0x200>
 8006200:	4a63      	ldr	r2, [pc, #396]	@ (8006390 <HAL_TIM_ConfigClockSource+0x234>)
 8006202:	4293      	cmp	r3, r2
 8006204:	f000 80a1 	beq.w	800634a <HAL_TIM_ConfigClockSource+0x1ee>
 8006208:	4a61      	ldr	r2, [pc, #388]	@ (8006390 <HAL_TIM_ConfigClockSource+0x234>)
 800620a:	4293      	cmp	r3, r2
 800620c:	f200 80a6 	bhi.w	800635c <HAL_TIM_ConfigClockSource+0x200>
 8006210:	4a60      	ldr	r2, [pc, #384]	@ (8006394 <HAL_TIM_ConfigClockSource+0x238>)
 8006212:	4293      	cmp	r3, r2
 8006214:	f000 8099 	beq.w	800634a <HAL_TIM_ConfigClockSource+0x1ee>
 8006218:	4a5e      	ldr	r2, [pc, #376]	@ (8006394 <HAL_TIM_ConfigClockSource+0x238>)
 800621a:	4293      	cmp	r3, r2
 800621c:	f200 809e 	bhi.w	800635c <HAL_TIM_ConfigClockSource+0x200>
 8006220:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006224:	f000 8091 	beq.w	800634a <HAL_TIM_ConfigClockSource+0x1ee>
 8006228:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800622c:	f200 8096 	bhi.w	800635c <HAL_TIM_ConfigClockSource+0x200>
 8006230:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006234:	f000 8089 	beq.w	800634a <HAL_TIM_ConfigClockSource+0x1ee>
 8006238:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800623c:	f200 808e 	bhi.w	800635c <HAL_TIM_ConfigClockSource+0x200>
 8006240:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006244:	d03e      	beq.n	80062c4 <HAL_TIM_ConfigClockSource+0x168>
 8006246:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800624a:	f200 8087 	bhi.w	800635c <HAL_TIM_ConfigClockSource+0x200>
 800624e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006252:	f000 8086 	beq.w	8006362 <HAL_TIM_ConfigClockSource+0x206>
 8006256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800625a:	d87f      	bhi.n	800635c <HAL_TIM_ConfigClockSource+0x200>
 800625c:	2b70      	cmp	r3, #112	@ 0x70
 800625e:	d01a      	beq.n	8006296 <HAL_TIM_ConfigClockSource+0x13a>
 8006260:	2b70      	cmp	r3, #112	@ 0x70
 8006262:	d87b      	bhi.n	800635c <HAL_TIM_ConfigClockSource+0x200>
 8006264:	2b60      	cmp	r3, #96	@ 0x60
 8006266:	d050      	beq.n	800630a <HAL_TIM_ConfigClockSource+0x1ae>
 8006268:	2b60      	cmp	r3, #96	@ 0x60
 800626a:	d877      	bhi.n	800635c <HAL_TIM_ConfigClockSource+0x200>
 800626c:	2b50      	cmp	r3, #80	@ 0x50
 800626e:	d03c      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0x18e>
 8006270:	2b50      	cmp	r3, #80	@ 0x50
 8006272:	d873      	bhi.n	800635c <HAL_TIM_ConfigClockSource+0x200>
 8006274:	2b40      	cmp	r3, #64	@ 0x40
 8006276:	d058      	beq.n	800632a <HAL_TIM_ConfigClockSource+0x1ce>
 8006278:	2b40      	cmp	r3, #64	@ 0x40
 800627a:	d86f      	bhi.n	800635c <HAL_TIM_ConfigClockSource+0x200>
 800627c:	2b30      	cmp	r3, #48	@ 0x30
 800627e:	d064      	beq.n	800634a <HAL_TIM_ConfigClockSource+0x1ee>
 8006280:	2b30      	cmp	r3, #48	@ 0x30
 8006282:	d86b      	bhi.n	800635c <HAL_TIM_ConfigClockSource+0x200>
 8006284:	2b20      	cmp	r3, #32
 8006286:	d060      	beq.n	800634a <HAL_TIM_ConfigClockSource+0x1ee>
 8006288:	2b20      	cmp	r3, #32
 800628a:	d867      	bhi.n	800635c <HAL_TIM_ConfigClockSource+0x200>
 800628c:	2b00      	cmp	r3, #0
 800628e:	d05c      	beq.n	800634a <HAL_TIM_ConfigClockSource+0x1ee>
 8006290:	2b10      	cmp	r3, #16
 8006292:	d05a      	beq.n	800634a <HAL_TIM_ConfigClockSource+0x1ee>
 8006294:	e062      	b.n	800635c <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062a6:	f000 fe1b 	bl	8006ee0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80062b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	609a      	str	r2, [r3, #8]
      break;
 80062c2:	e04f      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062d4:	f000 fe04 	bl	8006ee0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689a      	ldr	r2, [r3, #8]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062e6:	609a      	str	r2, [r3, #8]
      break;
 80062e8:	e03c      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062f6:	461a      	mov	r2, r3
 80062f8:	f000 fd76 	bl	8006de8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2150      	movs	r1, #80	@ 0x50
 8006302:	4618      	mov	r0, r3
 8006304:	f000 fdcf 	bl	8006ea6 <TIM_ITRx_SetConfig>
      break;
 8006308:	e02c      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006316:	461a      	mov	r2, r3
 8006318:	f000 fd95 	bl	8006e46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2160      	movs	r1, #96	@ 0x60
 8006322:	4618      	mov	r0, r3
 8006324:	f000 fdbf 	bl	8006ea6 <TIM_ITRx_SetConfig>
      break;
 8006328:	e01c      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006336:	461a      	mov	r2, r3
 8006338:	f000 fd56 	bl	8006de8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2140      	movs	r1, #64	@ 0x40
 8006342:	4618      	mov	r0, r3
 8006344:	f000 fdaf 	bl	8006ea6 <TIM_ITRx_SetConfig>
      break;
 8006348:	e00c      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4619      	mov	r1, r3
 8006354:	4610      	mov	r0, r2
 8006356:	f000 fda6 	bl	8006ea6 <TIM_ITRx_SetConfig>
      break;
 800635a:	e003      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	73fb      	strb	r3, [r7, #15]
      break;
 8006360:	e000      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x208>
      break;
 8006362:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006374:	7bfb      	ldrb	r3, [r7, #15]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	00100070 	.word	0x00100070
 8006384:	00100060 	.word	0x00100060
 8006388:	00100050 	.word	0x00100050
 800638c:	00100040 	.word	0x00100040
 8006390:	00100030 	.word	0x00100030
 8006394:	00100020 	.word	0x00100020

08006398 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a7a      	ldr	r2, [pc, #488]	@ (80065e4 <TIM_Base_SetConfig+0x1fc>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d02b      	beq.n	8006458 <TIM_Base_SetConfig+0x70>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a79      	ldr	r2, [pc, #484]	@ (80065e8 <TIM_Base_SetConfig+0x200>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d027      	beq.n	8006458 <TIM_Base_SetConfig+0x70>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800640e:	d023      	beq.n	8006458 <TIM_Base_SetConfig+0x70>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006416:	d01f      	beq.n	8006458 <TIM_Base_SetConfig+0x70>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a74      	ldr	r2, [pc, #464]	@ (80065ec <TIM_Base_SetConfig+0x204>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d01b      	beq.n	8006458 <TIM_Base_SetConfig+0x70>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a73      	ldr	r2, [pc, #460]	@ (80065f0 <TIM_Base_SetConfig+0x208>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d017      	beq.n	8006458 <TIM_Base_SetConfig+0x70>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a72      	ldr	r2, [pc, #456]	@ (80065f4 <TIM_Base_SetConfig+0x20c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d013      	beq.n	8006458 <TIM_Base_SetConfig+0x70>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a71      	ldr	r2, [pc, #452]	@ (80065f8 <TIM_Base_SetConfig+0x210>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d00f      	beq.n	8006458 <TIM_Base_SetConfig+0x70>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a70      	ldr	r2, [pc, #448]	@ (80065fc <TIM_Base_SetConfig+0x214>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d00b      	beq.n	8006458 <TIM_Base_SetConfig+0x70>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a6f      	ldr	r2, [pc, #444]	@ (8006600 <TIM_Base_SetConfig+0x218>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d007      	beq.n	8006458 <TIM_Base_SetConfig+0x70>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a6e      	ldr	r2, [pc, #440]	@ (8006604 <TIM_Base_SetConfig+0x21c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d003      	beq.n	8006458 <TIM_Base_SetConfig+0x70>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a6d      	ldr	r2, [pc, #436]	@ (8006608 <TIM_Base_SetConfig+0x220>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d108      	bne.n	800646a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800645e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a5d      	ldr	r2, [pc, #372]	@ (80065e4 <TIM_Base_SetConfig+0x1fc>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d05b      	beq.n	800652a <TIM_Base_SetConfig+0x142>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a5c      	ldr	r2, [pc, #368]	@ (80065e8 <TIM_Base_SetConfig+0x200>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d057      	beq.n	800652a <TIM_Base_SetConfig+0x142>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006480:	d053      	beq.n	800652a <TIM_Base_SetConfig+0x142>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006488:	d04f      	beq.n	800652a <TIM_Base_SetConfig+0x142>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a57      	ldr	r2, [pc, #348]	@ (80065ec <TIM_Base_SetConfig+0x204>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d04b      	beq.n	800652a <TIM_Base_SetConfig+0x142>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a56      	ldr	r2, [pc, #344]	@ (80065f0 <TIM_Base_SetConfig+0x208>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d047      	beq.n	800652a <TIM_Base_SetConfig+0x142>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a55      	ldr	r2, [pc, #340]	@ (80065f4 <TIM_Base_SetConfig+0x20c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d043      	beq.n	800652a <TIM_Base_SetConfig+0x142>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a54      	ldr	r2, [pc, #336]	@ (80065f8 <TIM_Base_SetConfig+0x210>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d03f      	beq.n	800652a <TIM_Base_SetConfig+0x142>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a53      	ldr	r2, [pc, #332]	@ (80065fc <TIM_Base_SetConfig+0x214>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d03b      	beq.n	800652a <TIM_Base_SetConfig+0x142>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a52      	ldr	r2, [pc, #328]	@ (8006600 <TIM_Base_SetConfig+0x218>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d037      	beq.n	800652a <TIM_Base_SetConfig+0x142>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a51      	ldr	r2, [pc, #324]	@ (8006604 <TIM_Base_SetConfig+0x21c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d033      	beq.n	800652a <TIM_Base_SetConfig+0x142>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a50      	ldr	r2, [pc, #320]	@ (8006608 <TIM_Base_SetConfig+0x220>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d02f      	beq.n	800652a <TIM_Base_SetConfig+0x142>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a4f      	ldr	r2, [pc, #316]	@ (800660c <TIM_Base_SetConfig+0x224>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d02b      	beq.n	800652a <TIM_Base_SetConfig+0x142>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a4e      	ldr	r2, [pc, #312]	@ (8006610 <TIM_Base_SetConfig+0x228>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d027      	beq.n	800652a <TIM_Base_SetConfig+0x142>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a4d      	ldr	r2, [pc, #308]	@ (8006614 <TIM_Base_SetConfig+0x22c>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d023      	beq.n	800652a <TIM_Base_SetConfig+0x142>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a4c      	ldr	r2, [pc, #304]	@ (8006618 <TIM_Base_SetConfig+0x230>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d01f      	beq.n	800652a <TIM_Base_SetConfig+0x142>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a4b      	ldr	r2, [pc, #300]	@ (800661c <TIM_Base_SetConfig+0x234>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d01b      	beq.n	800652a <TIM_Base_SetConfig+0x142>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a4a      	ldr	r2, [pc, #296]	@ (8006620 <TIM_Base_SetConfig+0x238>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d017      	beq.n	800652a <TIM_Base_SetConfig+0x142>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a49      	ldr	r2, [pc, #292]	@ (8006624 <TIM_Base_SetConfig+0x23c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d013      	beq.n	800652a <TIM_Base_SetConfig+0x142>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a48      	ldr	r2, [pc, #288]	@ (8006628 <TIM_Base_SetConfig+0x240>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d00f      	beq.n	800652a <TIM_Base_SetConfig+0x142>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a47      	ldr	r2, [pc, #284]	@ (800662c <TIM_Base_SetConfig+0x244>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00b      	beq.n	800652a <TIM_Base_SetConfig+0x142>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a46      	ldr	r2, [pc, #280]	@ (8006630 <TIM_Base_SetConfig+0x248>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d007      	beq.n	800652a <TIM_Base_SetConfig+0x142>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a45      	ldr	r2, [pc, #276]	@ (8006634 <TIM_Base_SetConfig+0x24c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d003      	beq.n	800652a <TIM_Base_SetConfig+0x142>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a44      	ldr	r2, [pc, #272]	@ (8006638 <TIM_Base_SetConfig+0x250>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d108      	bne.n	800653c <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	4313      	orrs	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	4313      	orrs	r3, r2
 8006548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a20      	ldr	r2, [pc, #128]	@ (80065e4 <TIM_Base_SetConfig+0x1fc>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d023      	beq.n	80065b0 <TIM_Base_SetConfig+0x1c8>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a1f      	ldr	r2, [pc, #124]	@ (80065e8 <TIM_Base_SetConfig+0x200>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d01f      	beq.n	80065b0 <TIM_Base_SetConfig+0x1c8>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a24      	ldr	r2, [pc, #144]	@ (8006604 <TIM_Base_SetConfig+0x21c>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d01b      	beq.n	80065b0 <TIM_Base_SetConfig+0x1c8>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a23      	ldr	r2, [pc, #140]	@ (8006608 <TIM_Base_SetConfig+0x220>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d017      	beq.n	80065b0 <TIM_Base_SetConfig+0x1c8>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a28      	ldr	r2, [pc, #160]	@ (8006624 <TIM_Base_SetConfig+0x23c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d013      	beq.n	80065b0 <TIM_Base_SetConfig+0x1c8>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a27      	ldr	r2, [pc, #156]	@ (8006628 <TIM_Base_SetConfig+0x240>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d00f      	beq.n	80065b0 <TIM_Base_SetConfig+0x1c8>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a26      	ldr	r2, [pc, #152]	@ (800662c <TIM_Base_SetConfig+0x244>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d00b      	beq.n	80065b0 <TIM_Base_SetConfig+0x1c8>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a25      	ldr	r2, [pc, #148]	@ (8006630 <TIM_Base_SetConfig+0x248>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d007      	beq.n	80065b0 <TIM_Base_SetConfig+0x1c8>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a24      	ldr	r2, [pc, #144]	@ (8006634 <TIM_Base_SetConfig+0x24c>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d003      	beq.n	80065b0 <TIM_Base_SetConfig+0x1c8>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a23      	ldr	r2, [pc, #140]	@ (8006638 <TIM_Base_SetConfig+0x250>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d103      	bne.n	80065b8 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	691a      	ldr	r2, [r3, #16]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d105      	bne.n	80065d6 <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	f023 0201 	bic.w	r2, r3, #1
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	611a      	str	r2, [r3, #16]
  }
}
 80065d6:	bf00      	nop
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	40012c00 	.word	0x40012c00
 80065e8:	50012c00 	.word	0x50012c00
 80065ec:	40000400 	.word	0x40000400
 80065f0:	50000400 	.word	0x50000400
 80065f4:	40000800 	.word	0x40000800
 80065f8:	50000800 	.word	0x50000800
 80065fc:	40000c00 	.word	0x40000c00
 8006600:	50000c00 	.word	0x50000c00
 8006604:	40013400 	.word	0x40013400
 8006608:	50013400 	.word	0x50013400
 800660c:	40001800 	.word	0x40001800
 8006610:	50001800 	.word	0x50001800
 8006614:	40001c00 	.word	0x40001c00
 8006618:	50001c00 	.word	0x50001c00
 800661c:	40002000 	.word	0x40002000
 8006620:	50002000 	.word	0x50002000
 8006624:	40014000 	.word	0x40014000
 8006628:	50014000 	.word	0x50014000
 800662c:	40014400 	.word	0x40014400
 8006630:	50014400 	.word	0x50014400
 8006634:	40014800 	.word	0x40014800
 8006638:	50014800 	.word	0x50014800

0800663c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	f023 0201 	bic.w	r2, r3, #1
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800666a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800666e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 0303 	bic.w	r3, r3, #3
 8006676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4313      	orrs	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f023 0302 	bic.w	r3, r3, #2
 8006688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	4313      	orrs	r3, r2
 8006692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a40      	ldr	r2, [pc, #256]	@ (8006798 <TIM_OC1_SetConfig+0x15c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d023      	beq.n	80066e4 <TIM_OC1_SetConfig+0xa8>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a3f      	ldr	r2, [pc, #252]	@ (800679c <TIM_OC1_SetConfig+0x160>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d01f      	beq.n	80066e4 <TIM_OC1_SetConfig+0xa8>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a3e      	ldr	r2, [pc, #248]	@ (80067a0 <TIM_OC1_SetConfig+0x164>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d01b      	beq.n	80066e4 <TIM_OC1_SetConfig+0xa8>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a3d      	ldr	r2, [pc, #244]	@ (80067a4 <TIM_OC1_SetConfig+0x168>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d017      	beq.n	80066e4 <TIM_OC1_SetConfig+0xa8>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a3c      	ldr	r2, [pc, #240]	@ (80067a8 <TIM_OC1_SetConfig+0x16c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d013      	beq.n	80066e4 <TIM_OC1_SetConfig+0xa8>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a3b      	ldr	r2, [pc, #236]	@ (80067ac <TIM_OC1_SetConfig+0x170>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d00f      	beq.n	80066e4 <TIM_OC1_SetConfig+0xa8>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a3a      	ldr	r2, [pc, #232]	@ (80067b0 <TIM_OC1_SetConfig+0x174>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d00b      	beq.n	80066e4 <TIM_OC1_SetConfig+0xa8>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a39      	ldr	r2, [pc, #228]	@ (80067b4 <TIM_OC1_SetConfig+0x178>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d007      	beq.n	80066e4 <TIM_OC1_SetConfig+0xa8>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a38      	ldr	r2, [pc, #224]	@ (80067b8 <TIM_OC1_SetConfig+0x17c>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d003      	beq.n	80066e4 <TIM_OC1_SetConfig+0xa8>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a37      	ldr	r2, [pc, #220]	@ (80067bc <TIM_OC1_SetConfig+0x180>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d10c      	bne.n	80066fe <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f023 0308 	bic.w	r3, r3, #8
 80066ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f023 0304 	bic.w	r3, r3, #4
 80066fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a25      	ldr	r2, [pc, #148]	@ (8006798 <TIM_OC1_SetConfig+0x15c>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d023      	beq.n	800674e <TIM_OC1_SetConfig+0x112>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a24      	ldr	r2, [pc, #144]	@ (800679c <TIM_OC1_SetConfig+0x160>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d01f      	beq.n	800674e <TIM_OC1_SetConfig+0x112>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a23      	ldr	r2, [pc, #140]	@ (80067a0 <TIM_OC1_SetConfig+0x164>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d01b      	beq.n	800674e <TIM_OC1_SetConfig+0x112>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a22      	ldr	r2, [pc, #136]	@ (80067a4 <TIM_OC1_SetConfig+0x168>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d017      	beq.n	800674e <TIM_OC1_SetConfig+0x112>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a21      	ldr	r2, [pc, #132]	@ (80067a8 <TIM_OC1_SetConfig+0x16c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d013      	beq.n	800674e <TIM_OC1_SetConfig+0x112>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a20      	ldr	r2, [pc, #128]	@ (80067ac <TIM_OC1_SetConfig+0x170>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d00f      	beq.n	800674e <TIM_OC1_SetConfig+0x112>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a1f      	ldr	r2, [pc, #124]	@ (80067b0 <TIM_OC1_SetConfig+0x174>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d00b      	beq.n	800674e <TIM_OC1_SetConfig+0x112>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a1e      	ldr	r2, [pc, #120]	@ (80067b4 <TIM_OC1_SetConfig+0x178>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d007      	beq.n	800674e <TIM_OC1_SetConfig+0x112>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a1d      	ldr	r2, [pc, #116]	@ (80067b8 <TIM_OC1_SetConfig+0x17c>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d003      	beq.n	800674e <TIM_OC1_SetConfig+0x112>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a1c      	ldr	r2, [pc, #112]	@ (80067bc <TIM_OC1_SetConfig+0x180>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d111      	bne.n	8006772 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800675c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	4313      	orrs	r3, r2
 8006766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	4313      	orrs	r3, r2
 8006770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	621a      	str	r2, [r3, #32]
}
 800678c:	bf00      	nop
 800678e:	371c      	adds	r7, #28
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	40012c00 	.word	0x40012c00
 800679c:	50012c00 	.word	0x50012c00
 80067a0:	40013400 	.word	0x40013400
 80067a4:	50013400 	.word	0x50013400
 80067a8:	40014000 	.word	0x40014000
 80067ac:	50014000 	.word	0x50014000
 80067b0:	40014400 	.word	0x40014400
 80067b4:	50014400 	.word	0x50014400
 80067b8:	40014800 	.word	0x40014800
 80067bc:	50014800 	.word	0x50014800

080067c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b087      	sub	sp, #28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	f023 0210 	bic.w	r2, r3, #16
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	021b      	lsls	r3, r3, #8
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	4313      	orrs	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f023 0320 	bic.w	r3, r3, #32
 800680e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	011b      	lsls	r3, r3, #4
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	4313      	orrs	r3, r2
 800681a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a36      	ldr	r2, [pc, #216]	@ (80068f8 <TIM_OC2_SetConfig+0x138>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d00b      	beq.n	800683c <TIM_OC2_SetConfig+0x7c>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a35      	ldr	r2, [pc, #212]	@ (80068fc <TIM_OC2_SetConfig+0x13c>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d007      	beq.n	800683c <TIM_OC2_SetConfig+0x7c>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a34      	ldr	r2, [pc, #208]	@ (8006900 <TIM_OC2_SetConfig+0x140>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d003      	beq.n	800683c <TIM_OC2_SetConfig+0x7c>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a33      	ldr	r2, [pc, #204]	@ (8006904 <TIM_OC2_SetConfig+0x144>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d10d      	bne.n	8006858 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	011b      	lsls	r3, r3, #4
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	4313      	orrs	r3, r2
 800684e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006856:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a27      	ldr	r2, [pc, #156]	@ (80068f8 <TIM_OC2_SetConfig+0x138>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d023      	beq.n	80068a8 <TIM_OC2_SetConfig+0xe8>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a26      	ldr	r2, [pc, #152]	@ (80068fc <TIM_OC2_SetConfig+0x13c>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d01f      	beq.n	80068a8 <TIM_OC2_SetConfig+0xe8>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a25      	ldr	r2, [pc, #148]	@ (8006900 <TIM_OC2_SetConfig+0x140>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d01b      	beq.n	80068a8 <TIM_OC2_SetConfig+0xe8>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a24      	ldr	r2, [pc, #144]	@ (8006904 <TIM_OC2_SetConfig+0x144>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d017      	beq.n	80068a8 <TIM_OC2_SetConfig+0xe8>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a23      	ldr	r2, [pc, #140]	@ (8006908 <TIM_OC2_SetConfig+0x148>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d013      	beq.n	80068a8 <TIM_OC2_SetConfig+0xe8>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a22      	ldr	r2, [pc, #136]	@ (800690c <TIM_OC2_SetConfig+0x14c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d00f      	beq.n	80068a8 <TIM_OC2_SetConfig+0xe8>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a21      	ldr	r2, [pc, #132]	@ (8006910 <TIM_OC2_SetConfig+0x150>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00b      	beq.n	80068a8 <TIM_OC2_SetConfig+0xe8>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a20      	ldr	r2, [pc, #128]	@ (8006914 <TIM_OC2_SetConfig+0x154>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d007      	beq.n	80068a8 <TIM_OC2_SetConfig+0xe8>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a1f      	ldr	r2, [pc, #124]	@ (8006918 <TIM_OC2_SetConfig+0x158>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d003      	beq.n	80068a8 <TIM_OC2_SetConfig+0xe8>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a1e      	ldr	r2, [pc, #120]	@ (800691c <TIM_OC2_SetConfig+0x15c>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d113      	bne.n	80068d0 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	621a      	str	r2, [r3, #32]
}
 80068ea:	bf00      	nop
 80068ec:	371c      	adds	r7, #28
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	40012c00 	.word	0x40012c00
 80068fc:	50012c00 	.word	0x50012c00
 8006900:	40013400 	.word	0x40013400
 8006904:	50013400 	.word	0x50013400
 8006908:	40014000 	.word	0x40014000
 800690c:	50014000 	.word	0x50014000
 8006910:	40014400 	.word	0x40014400
 8006914:	50014400 	.word	0x50014400
 8006918:	40014800 	.word	0x40014800
 800691c:	50014800 	.word	0x50014800

08006920 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800694e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f023 0303 	bic.w	r3, r3, #3
 800695a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	4313      	orrs	r3, r2
 8006964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800696c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	021b      	lsls	r3, r3, #8
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	4313      	orrs	r3, r2
 8006978:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a35      	ldr	r2, [pc, #212]	@ (8006a54 <TIM_OC3_SetConfig+0x134>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d00b      	beq.n	800699a <TIM_OC3_SetConfig+0x7a>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a34      	ldr	r2, [pc, #208]	@ (8006a58 <TIM_OC3_SetConfig+0x138>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d007      	beq.n	800699a <TIM_OC3_SetConfig+0x7a>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a33      	ldr	r2, [pc, #204]	@ (8006a5c <TIM_OC3_SetConfig+0x13c>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d003      	beq.n	800699a <TIM_OC3_SetConfig+0x7a>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a32      	ldr	r2, [pc, #200]	@ (8006a60 <TIM_OC3_SetConfig+0x140>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d10d      	bne.n	80069b6 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80069a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	021b      	lsls	r3, r3, #8
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a26      	ldr	r2, [pc, #152]	@ (8006a54 <TIM_OC3_SetConfig+0x134>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d023      	beq.n	8006a06 <TIM_OC3_SetConfig+0xe6>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a25      	ldr	r2, [pc, #148]	@ (8006a58 <TIM_OC3_SetConfig+0x138>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d01f      	beq.n	8006a06 <TIM_OC3_SetConfig+0xe6>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a24      	ldr	r2, [pc, #144]	@ (8006a5c <TIM_OC3_SetConfig+0x13c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d01b      	beq.n	8006a06 <TIM_OC3_SetConfig+0xe6>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a23      	ldr	r2, [pc, #140]	@ (8006a60 <TIM_OC3_SetConfig+0x140>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d017      	beq.n	8006a06 <TIM_OC3_SetConfig+0xe6>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a22      	ldr	r2, [pc, #136]	@ (8006a64 <TIM_OC3_SetConfig+0x144>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d013      	beq.n	8006a06 <TIM_OC3_SetConfig+0xe6>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a21      	ldr	r2, [pc, #132]	@ (8006a68 <TIM_OC3_SetConfig+0x148>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d00f      	beq.n	8006a06 <TIM_OC3_SetConfig+0xe6>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a20      	ldr	r2, [pc, #128]	@ (8006a6c <TIM_OC3_SetConfig+0x14c>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d00b      	beq.n	8006a06 <TIM_OC3_SetConfig+0xe6>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a1f      	ldr	r2, [pc, #124]	@ (8006a70 <TIM_OC3_SetConfig+0x150>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d007      	beq.n	8006a06 <TIM_OC3_SetConfig+0xe6>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a1e      	ldr	r2, [pc, #120]	@ (8006a74 <TIM_OC3_SetConfig+0x154>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d003      	beq.n	8006a06 <TIM_OC3_SetConfig+0xe6>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a1d      	ldr	r2, [pc, #116]	@ (8006a78 <TIM_OC3_SetConfig+0x158>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d113      	bne.n	8006a2e <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	011b      	lsls	r3, r3, #4
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	011b      	lsls	r3, r3, #4
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	621a      	str	r2, [r3, #32]
}
 8006a48:	bf00      	nop
 8006a4a:	371c      	adds	r7, #28
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr
 8006a54:	40012c00 	.word	0x40012c00
 8006a58:	50012c00 	.word	0x50012c00
 8006a5c:	40013400 	.word	0x40013400
 8006a60:	50013400 	.word	0x50013400
 8006a64:	40014000 	.word	0x40014000
 8006a68:	50014000 	.word	0x50014000
 8006a6c:	40014400 	.word	0x40014400
 8006a70:	50014400 	.word	0x50014400
 8006a74:	40014800 	.word	0x40014800
 8006a78:	50014800 	.word	0x50014800

08006a7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006aaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	021b      	lsls	r3, r3, #8
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006aca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	031b      	lsls	r3, r3, #12
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a36      	ldr	r2, [pc, #216]	@ (8006bb4 <TIM_OC4_SetConfig+0x138>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d00b      	beq.n	8006af8 <TIM_OC4_SetConfig+0x7c>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a35      	ldr	r2, [pc, #212]	@ (8006bb8 <TIM_OC4_SetConfig+0x13c>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d007      	beq.n	8006af8 <TIM_OC4_SetConfig+0x7c>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a34      	ldr	r2, [pc, #208]	@ (8006bbc <TIM_OC4_SetConfig+0x140>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d003      	beq.n	8006af8 <TIM_OC4_SetConfig+0x7c>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a33      	ldr	r2, [pc, #204]	@ (8006bc0 <TIM_OC4_SetConfig+0x144>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d10d      	bne.n	8006b14 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006afe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	031b      	lsls	r3, r3, #12
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a27      	ldr	r2, [pc, #156]	@ (8006bb4 <TIM_OC4_SetConfig+0x138>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d023      	beq.n	8006b64 <TIM_OC4_SetConfig+0xe8>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a26      	ldr	r2, [pc, #152]	@ (8006bb8 <TIM_OC4_SetConfig+0x13c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d01f      	beq.n	8006b64 <TIM_OC4_SetConfig+0xe8>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a25      	ldr	r2, [pc, #148]	@ (8006bbc <TIM_OC4_SetConfig+0x140>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d01b      	beq.n	8006b64 <TIM_OC4_SetConfig+0xe8>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a24      	ldr	r2, [pc, #144]	@ (8006bc0 <TIM_OC4_SetConfig+0x144>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d017      	beq.n	8006b64 <TIM_OC4_SetConfig+0xe8>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a23      	ldr	r2, [pc, #140]	@ (8006bc4 <TIM_OC4_SetConfig+0x148>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d013      	beq.n	8006b64 <TIM_OC4_SetConfig+0xe8>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a22      	ldr	r2, [pc, #136]	@ (8006bc8 <TIM_OC4_SetConfig+0x14c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d00f      	beq.n	8006b64 <TIM_OC4_SetConfig+0xe8>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a21      	ldr	r2, [pc, #132]	@ (8006bcc <TIM_OC4_SetConfig+0x150>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d00b      	beq.n	8006b64 <TIM_OC4_SetConfig+0xe8>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a20      	ldr	r2, [pc, #128]	@ (8006bd0 <TIM_OC4_SetConfig+0x154>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d007      	beq.n	8006b64 <TIM_OC4_SetConfig+0xe8>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a1f      	ldr	r2, [pc, #124]	@ (8006bd4 <TIM_OC4_SetConfig+0x158>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d003      	beq.n	8006b64 <TIM_OC4_SetConfig+0xe8>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a1e      	ldr	r2, [pc, #120]	@ (8006bd8 <TIM_OC4_SetConfig+0x15c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d113      	bne.n	8006b8c <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b6a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b72:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	019b      	lsls	r3, r3, #6
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	019b      	lsls	r3, r3, #6
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	621a      	str	r2, [r3, #32]
}
 8006ba6:	bf00      	nop
 8006ba8:	371c      	adds	r7, #28
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	40012c00 	.word	0x40012c00
 8006bb8:	50012c00 	.word	0x50012c00
 8006bbc:	40013400 	.word	0x40013400
 8006bc0:	50013400 	.word	0x50013400
 8006bc4:	40014000 	.word	0x40014000
 8006bc8:	50014000 	.word	0x50014000
 8006bcc:	40014400 	.word	0x40014400
 8006bd0:	50014400 	.word	0x50014400
 8006bd4:	40014800 	.word	0x40014800
 8006bd8:	50014800 	.word	0x50014800

08006bdc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006c20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	041b      	lsls	r3, r3, #16
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a21      	ldr	r2, [pc, #132]	@ (8006cb8 <TIM_OC5_SetConfig+0xdc>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d023      	beq.n	8006c7e <TIM_OC5_SetConfig+0xa2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a20      	ldr	r2, [pc, #128]	@ (8006cbc <TIM_OC5_SetConfig+0xe0>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d01f      	beq.n	8006c7e <TIM_OC5_SetConfig+0xa2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a1f      	ldr	r2, [pc, #124]	@ (8006cc0 <TIM_OC5_SetConfig+0xe4>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d01b      	beq.n	8006c7e <TIM_OC5_SetConfig+0xa2>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a1e      	ldr	r2, [pc, #120]	@ (8006cc4 <TIM_OC5_SetConfig+0xe8>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d017      	beq.n	8006c7e <TIM_OC5_SetConfig+0xa2>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a1d      	ldr	r2, [pc, #116]	@ (8006cc8 <TIM_OC5_SetConfig+0xec>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d013      	beq.n	8006c7e <TIM_OC5_SetConfig+0xa2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a1c      	ldr	r2, [pc, #112]	@ (8006ccc <TIM_OC5_SetConfig+0xf0>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00f      	beq.n	8006c7e <TIM_OC5_SetConfig+0xa2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a1b      	ldr	r2, [pc, #108]	@ (8006cd0 <TIM_OC5_SetConfig+0xf4>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d00b      	beq.n	8006c7e <TIM_OC5_SetConfig+0xa2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a1a      	ldr	r2, [pc, #104]	@ (8006cd4 <TIM_OC5_SetConfig+0xf8>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d007      	beq.n	8006c7e <TIM_OC5_SetConfig+0xa2>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a19      	ldr	r2, [pc, #100]	@ (8006cd8 <TIM_OC5_SetConfig+0xfc>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d003      	beq.n	8006c7e <TIM_OC5_SetConfig+0xa2>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a18      	ldr	r2, [pc, #96]	@ (8006cdc <TIM_OC5_SetConfig+0x100>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d109      	bne.n	8006c92 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	021b      	lsls	r3, r3, #8
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	621a      	str	r2, [r3, #32]
}
 8006cac:	bf00      	nop
 8006cae:	371c      	adds	r7, #28
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	40012c00 	.word	0x40012c00
 8006cbc:	50012c00 	.word	0x50012c00
 8006cc0:	40013400 	.word	0x40013400
 8006cc4:	50013400 	.word	0x50013400
 8006cc8:	40014000 	.word	0x40014000
 8006ccc:	50014000 	.word	0x50014000
 8006cd0:	40014400 	.word	0x40014400
 8006cd4:	50014400 	.word	0x50014400
 8006cd8:	40014800 	.word	0x40014800
 8006cdc:	50014800 	.word	0x50014800

08006ce0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	021b      	lsls	r3, r3, #8
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006d26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	051b      	lsls	r3, r3, #20
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a22      	ldr	r2, [pc, #136]	@ (8006dc0 <TIM_OC6_SetConfig+0xe0>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d023      	beq.n	8006d84 <TIM_OC6_SetConfig+0xa4>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a21      	ldr	r2, [pc, #132]	@ (8006dc4 <TIM_OC6_SetConfig+0xe4>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d01f      	beq.n	8006d84 <TIM_OC6_SetConfig+0xa4>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a20      	ldr	r2, [pc, #128]	@ (8006dc8 <TIM_OC6_SetConfig+0xe8>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d01b      	beq.n	8006d84 <TIM_OC6_SetConfig+0xa4>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a1f      	ldr	r2, [pc, #124]	@ (8006dcc <TIM_OC6_SetConfig+0xec>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d017      	beq.n	8006d84 <TIM_OC6_SetConfig+0xa4>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a1e      	ldr	r2, [pc, #120]	@ (8006dd0 <TIM_OC6_SetConfig+0xf0>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d013      	beq.n	8006d84 <TIM_OC6_SetConfig+0xa4>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8006dd4 <TIM_OC6_SetConfig+0xf4>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d00f      	beq.n	8006d84 <TIM_OC6_SetConfig+0xa4>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a1c      	ldr	r2, [pc, #112]	@ (8006dd8 <TIM_OC6_SetConfig+0xf8>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d00b      	beq.n	8006d84 <TIM_OC6_SetConfig+0xa4>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a1b      	ldr	r2, [pc, #108]	@ (8006ddc <TIM_OC6_SetConfig+0xfc>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d007      	beq.n	8006d84 <TIM_OC6_SetConfig+0xa4>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a1a      	ldr	r2, [pc, #104]	@ (8006de0 <TIM_OC6_SetConfig+0x100>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d003      	beq.n	8006d84 <TIM_OC6_SetConfig+0xa4>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a19      	ldr	r2, [pc, #100]	@ (8006de4 <TIM_OC6_SetConfig+0x104>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d109      	bne.n	8006d98 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	695b      	ldr	r3, [r3, #20]
 8006d90:	029b      	lsls	r3, r3, #10
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	621a      	str	r2, [r3, #32]
}
 8006db2:	bf00      	nop
 8006db4:	371c      	adds	r7, #28
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	40012c00 	.word	0x40012c00
 8006dc4:	50012c00 	.word	0x50012c00
 8006dc8:	40013400 	.word	0x40013400
 8006dcc:	50013400 	.word	0x50013400
 8006dd0:	40014000 	.word	0x40014000
 8006dd4:	50014000 	.word	0x50014000
 8006dd8:	40014400 	.word	0x40014400
 8006ddc:	50014400 	.word	0x50014400
 8006de0:	40014800 	.word	0x40014800
 8006de4:	50014800 	.word	0x50014800

08006de8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	f023 0201 	bic.w	r2, r3, #1
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	011b      	lsls	r3, r3, #4
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f023 030a 	bic.w	r3, r3, #10
 8006e24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	621a      	str	r2, [r3, #32]
}
 8006e3a:	bf00      	nop
 8006e3c:	371c      	adds	r7, #28
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b087      	sub	sp, #28
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	60f8      	str	r0, [r7, #12]
 8006e4e:	60b9      	str	r1, [r7, #8]
 8006e50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6a1b      	ldr	r3, [r3, #32]
 8006e5c:	f023 0210 	bic.w	r2, r3, #16
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	031b      	lsls	r3, r3, #12
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	011b      	lsls	r3, r3, #4
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	621a      	str	r2, [r3, #32]
}
 8006e9a:	bf00      	nop
 8006e9c:	371c      	adds	r7, #28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b085      	sub	sp, #20
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006ebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ec0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	f043 0307 	orr.w	r3, r3, #7
 8006ecc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	609a      	str	r2, [r3, #8]
}
 8006ed4:	bf00      	nop
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b087      	sub	sp, #28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
 8006eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006efa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	021a      	lsls	r2, r3, #8
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	431a      	orrs	r2, r3
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	609a      	str	r2, [r3, #8]
}
 8006f14:	bf00      	nop
 8006f16:	371c      	adds	r7, #28
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b087      	sub	sp, #28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	f003 031f 	and.w	r3, r3, #31
 8006f32:	2201      	movs	r2, #1
 8006f34:	fa02 f303 	lsl.w	r3, r2, r3
 8006f38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6a1a      	ldr	r2, [r3, #32]
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	43db      	mvns	r3, r3
 8006f42:	401a      	ands	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6a1a      	ldr	r2, [r3, #32]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f003 031f 	and.w	r3, r3, #31
 8006f52:	6879      	ldr	r1, [r7, #4]
 8006f54:	fa01 f303 	lsl.w	r3, r1, r3
 8006f58:	431a      	orrs	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	621a      	str	r2, [r3, #32]
}
 8006f5e:	bf00      	nop
 8006f60:	371c      	adds	r7, #28
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
	...

08006f6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d101      	bne.n	8006f84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f80:	2302      	movs	r3, #2
 8006f82:	e0a1      	b.n	80070c8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a4a      	ldr	r2, [pc, #296]	@ (80070d4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d00e      	beq.n	8006fcc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a49      	ldr	r2, [pc, #292]	@ (80070d8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d009      	beq.n	8006fcc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a47      	ldr	r2, [pc, #284]	@ (80070dc <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d004      	beq.n	8006fcc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a46      	ldr	r2, [pc, #280]	@ (80070e0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d108      	bne.n	8006fde <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006fd2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006fe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fe8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a34      	ldr	r2, [pc, #208]	@ (80070d4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d04a      	beq.n	800709c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a33      	ldr	r2, [pc, #204]	@ (80070d8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d045      	beq.n	800709c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007018:	d040      	beq.n	800709c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007022:	d03b      	beq.n	800709c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a2e      	ldr	r2, [pc, #184]	@ (80070e4 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d036      	beq.n	800709c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a2d      	ldr	r2, [pc, #180]	@ (80070e8 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d031      	beq.n	800709c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a2b      	ldr	r2, [pc, #172]	@ (80070ec <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d02c      	beq.n	800709c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a2a      	ldr	r2, [pc, #168]	@ (80070f0 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d027      	beq.n	800709c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a28      	ldr	r2, [pc, #160]	@ (80070f4 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d022      	beq.n	800709c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a27      	ldr	r2, [pc, #156]	@ (80070f8 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d01d      	beq.n	800709c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a1d      	ldr	r2, [pc, #116]	@ (80070dc <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d018      	beq.n	800709c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a1c      	ldr	r2, [pc, #112]	@ (80070e0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d013      	beq.n	800709c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a20      	ldr	r2, [pc, #128]	@ (80070fc <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d00e      	beq.n	800709c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a1f      	ldr	r2, [pc, #124]	@ (8007100 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d009      	beq.n	800709c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a1d      	ldr	r2, [pc, #116]	@ (8007104 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d004      	beq.n	800709c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a1c      	ldr	r2, [pc, #112]	@ (8007108 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d10c      	bne.n	80070b6 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr
 80070d4:	40012c00 	.word	0x40012c00
 80070d8:	50012c00 	.word	0x50012c00
 80070dc:	40013400 	.word	0x40013400
 80070e0:	50013400 	.word	0x50013400
 80070e4:	40000400 	.word	0x40000400
 80070e8:	50000400 	.word	0x50000400
 80070ec:	40000800 	.word	0x40000800
 80070f0:	50000800 	.word	0x50000800
 80070f4:	40000c00 	.word	0x40000c00
 80070f8:	50000c00 	.word	0x50000c00
 80070fc:	40001800 	.word	0x40001800
 8007100:	50001800 	.word	0x50001800
 8007104:	40014000 	.word	0x40014000
 8007108:	50014000 	.word	0x50014000

0800710c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007128:	bf00      	nop
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <__NVIC_SetPriority>:
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	4603      	mov	r3, r0
 80071a0:	6039      	str	r1, [r7, #0]
 80071a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80071a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	db0a      	blt.n	80071c2 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	b2da      	uxtb	r2, r3
 80071b0:	490c      	ldr	r1, [pc, #48]	@ (80071e4 <__NVIC_SetPriority+0x4c>)
 80071b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071b6:	0112      	lsls	r2, r2, #4
 80071b8:	b2d2      	uxtb	r2, r2
 80071ba:	440b      	add	r3, r1
 80071bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80071c0:	e00a      	b.n	80071d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	4908      	ldr	r1, [pc, #32]	@ (80071e8 <__NVIC_SetPriority+0x50>)
 80071c8:	88fb      	ldrh	r3, [r7, #6]
 80071ca:	f003 030f 	and.w	r3, r3, #15
 80071ce:	3b04      	subs	r3, #4
 80071d0:	0112      	lsls	r2, r2, #4
 80071d2:	b2d2      	uxtb	r2, r2
 80071d4:	440b      	add	r3, r1
 80071d6:	761a      	strb	r2, [r3, #24]
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr
 80071e4:	e000e100 	.word	0xe000e100
 80071e8:	e000ed00 	.word	0xe000ed00

080071ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80071ec:	b580      	push	{r7, lr}
 80071ee:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 80071f0:	4b05      	ldr	r3, [pc, #20]	@ (8007208 <SysTick_Handler+0x1c>)
 80071f2:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80071f4:	f001 fba6 	bl	8008944 <xTaskGetSchedulerState>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d001      	beq.n	8007202 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80071fe:	f001 ff51 	bl	80090a4 <xPortSysTickHandler>
  }
}
 8007202:	bf00      	nop
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	e000e010 	.word	0xe000e010

0800720c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800720c:	b580      	push	{r7, lr}
 800720e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 8007210:	2100      	movs	r1, #0
 8007212:	f06f 0004 	mvn.w	r0, #4
 8007216:	f7ff ffbf 	bl	8007198 <__NVIC_SetPriority>
#endif
}
 800721a:	bf00      	nop
 800721c:	bd80      	pop	{r7, pc}

0800721e <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 800721e:	b580      	push	{r7, lr}
 8007220:	b086      	sub	sp, #24
 8007222:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 8007224:	2300      	movs	r3, #0
 8007226:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007228:	f3ef 8305 	mrs	r3, IPSR
 800722c:	60fb      	str	r3, [r7, #12]
  return(result);
 800722e:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 8007234:	2301      	movs	r3, #1
 8007236:	617b      	str	r3, [r7, #20]
 8007238:	e013      	b.n	8007262 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 800723a:	f001 fb83 	bl	8008944 <xTaskGetSchedulerState>
 800723e:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	2b01      	cmp	r3, #1
 8007244:	d00d      	beq.n	8007262 <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007246:	f3ef 8310 	mrs	r3, PRIMASK
 800724a:	60bb      	str	r3, [r7, #8]
  return(result);
 800724c:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 800724e:	2b00      	cmp	r3, #0
 8007250:	d105      	bne.n	800725e <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007252:	f3ef 8311 	mrs	r3, BASEPRI
 8007256:	607b      	str	r3, [r7, #4]
  return(result);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 800725e:	2301      	movs	r3, #1
 8007260:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 8007262:	697b      	ldr	r3, [r7, #20]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3718      	adds	r7, #24
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8007272:	f7ff ffd4 	bl	800721e <IRQ_Context>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d003      	beq.n	8007284 <osKernelInitialize+0x18>
    stat = osErrorISR;
 800727c:	f06f 0305 	mvn.w	r3, #5
 8007280:	607b      	str	r3, [r7, #4]
 8007282:	e012      	b.n	80072aa <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 8007284:	f001 fb5e 	bl	8008944 <xTaskGetSchedulerState>
 8007288:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d109      	bne.n	80072a4 <osKernelInitialize+0x38>
 8007290:	4b08      	ldr	r3, [pc, #32]	@ (80072b4 <osKernelInitialize+0x48>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d105      	bne.n	80072a4 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007298:	4b06      	ldr	r3, [pc, #24]	@ (80072b4 <osKernelInitialize+0x48>)
 800729a:	2201      	movs	r2, #1
 800729c:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800729e:	2300      	movs	r3, #0
 80072a0:	607b      	str	r3, [r7, #4]
 80072a2:	e002      	b.n	80072aa <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 80072a4:	f04f 33ff 	mov.w	r3, #4294967295
 80072a8:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 80072aa:	687b      	ldr	r3, [r7, #4]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	200001a8 	.word	0x200001a8

080072b8 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 80072be:	f7ff ffae 	bl	800721e <IRQ_Context>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d003      	beq.n	80072d0 <osKernelStart+0x18>
    stat = osErrorISR;
 80072c8:	f06f 0305 	mvn.w	r3, #5
 80072cc:	607b      	str	r3, [r7, #4]
 80072ce:	e016      	b.n	80072fe <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 80072d0:	f001 fb38 	bl	8008944 <xTaskGetSchedulerState>
 80072d4:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d10d      	bne.n	80072f8 <osKernelStart+0x40>
 80072dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007308 <osKernelStart+0x50>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d109      	bne.n	80072f8 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80072e4:	f7ff ff92 	bl	800720c <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 80072e8:	4b07      	ldr	r3, [pc, #28]	@ (8007308 <osKernelStart+0x50>)
 80072ea:	2202      	movs	r2, #2
 80072ec:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80072ee:	f000 fdf7 	bl	8007ee0 <vTaskStartScheduler>
      stat = osOK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	607b      	str	r3, [r7, #4]
 80072f6:	e002      	b.n	80072fe <osKernelStart+0x46>
    } else {
      stat = osError;
 80072f8:	f04f 33ff 	mov.w	r3, #4294967295
 80072fc:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 80072fe:	687b      	ldr	r3, [r7, #4]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	200001a8 	.word	0x200001a8

0800730c <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800730c:	b580      	push	{r7, lr}
 800730e:	b08e      	sub	sp, #56	@ 0x38
 8007310:	af04      	add	r7, sp, #16
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007318:	2300      	movs	r3, #0
 800731a:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 800731c:	f7ff ff7f 	bl	800721e <IRQ_Context>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d17e      	bne.n	8007424 <osThreadNew+0x118>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d07b      	beq.n	8007424 <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 800732c:	2380      	movs	r3, #128	@ 0x80
 800732e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007330:	2318      	movs	r3, #24
 8007332:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007334:	2300      	movs	r3, #0
 8007336:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007338:	f04f 33ff 	mov.w	r3, #4294967295
 800733c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d045      	beq.n	80073d0 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d002      	beq.n	8007352 <osThreadNew+0x46>
        name = attr->name;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d002      	beq.n	8007360 <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d008      	beq.n	8007378 <osThreadNew+0x6c>
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	2b38      	cmp	r3, #56	@ 0x38
 800736a:	d805      	bhi.n	8007378 <osThreadNew+0x6c>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	f003 0301 	and.w	r3, r3, #1
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 8007378:	2300      	movs	r3, #0
 800737a:	e054      	b.n	8007426 <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d003      	beq.n	800738c <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	695b      	ldr	r3, [r3, #20]
 8007388:	089b      	lsrs	r3, r3, #2
 800738a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00e      	beq.n	80073b2 <osThreadNew+0xa6>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	2b5b      	cmp	r3, #91	@ 0x5b
 800739a:	d90a      	bls.n	80073b2 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d006      	beq.n	80073b2 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 80073ac:	2301      	movs	r3, #1
 80073ae:	61bb      	str	r3, [r7, #24]
 80073b0:	e010      	b.n	80073d4 <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10c      	bne.n	80073d4 <osThreadNew+0xc8>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d108      	bne.n	80073d4 <osThreadNew+0xc8>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d104      	bne.n	80073d4 <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 80073ca:	2300      	movs	r3, #0
 80073cc:	61bb      	str	r3, [r7, #24]
 80073ce:	e001      	b.n	80073d4 <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 80073d0:	2300      	movs	r3, #0
 80073d2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d110      	bne.n	80073fc <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80073e2:	9202      	str	r2, [sp, #8]
 80073e4:	9301      	str	r3, [sp, #4]
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	6a3a      	ldr	r2, [r7, #32]
 80073ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f000 fba5 	bl	8007b40 <xTaskCreateStatic>
 80073f6:	4603      	mov	r3, r0
 80073f8:	617b      	str	r3, [r7, #20]
 80073fa:	e013      	b.n	8007424 <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d110      	bne.n	8007424 <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 8007402:	6a3b      	ldr	r3, [r7, #32]
 8007404:	b29a      	uxth	r2, r3
 8007406:	f107 0314 	add.w	r3, r7, #20
 800740a:	9301      	str	r3, [sp, #4]
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f000 fbe0 	bl	8007bda <xTaskCreate>
 800741a:	4603      	mov	r3, r0
 800741c:	2b01      	cmp	r3, #1
 800741e:	d001      	beq.n	8007424 <osThreadNew+0x118>
            hTask = NULL;
 8007420:	2300      	movs	r3, #0
 8007422:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 8007424:	697b      	ldr	r3, [r7, #20]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3728      	adds	r7, #40	@ 0x28
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 800742e:	b580      	push	{r7, lr}
 8007430:	b084      	sub	sp, #16
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 8007436:	f7ff fef2 	bl	800721e <IRQ_Context>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d003      	beq.n	8007448 <osDelay+0x1a>
    stat = osErrorISR;
 8007440:	f06f 0305 	mvn.w	r3, #5
 8007444:	60fb      	str	r3, [r7, #12]
 8007446:	e007      	b.n	8007458 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 8007448:	2300      	movs	r3, #0
 800744a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <osDelay+0x2a>
      vTaskDelay(ticks);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fd1e 	bl	8007e94 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 8007458:	68fb      	ldr	r3, [r7, #12]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
	...

08007464 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	4a07      	ldr	r2, [pc, #28]	@ (8007490 <vApplicationGetIdleTaskMemory+0x2c>)
 8007474:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	4a06      	ldr	r2, [pc, #24]	@ (8007494 <vApplicationGetIdleTaskMemory+0x30>)
 800747a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2280      	movs	r2, #128	@ 0x80
 8007480:	601a      	str	r2, [r3, #0]
}
 8007482:	bf00      	nop
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	200001ac 	.word	0x200001ac
 8007494:	20000208 	.word	0x20000208

08007498 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4a07      	ldr	r2, [pc, #28]	@ (80074c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80074a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	4a06      	ldr	r2, [pc, #24]	@ (80074c8 <vApplicationGetTimerTaskMemory+0x30>)
 80074ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2280      	movs	r2, #128	@ 0x80
 80074b4:	601a      	str	r2, [r3, #0]
}
 80074b6:	bf00      	nop
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	20000408 	.word	0x20000408
 80074c8:	20000464 	.word	0x20000464

080074cc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f103 0208 	add.w	r2, r3, #8
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f04f 32ff 	mov.w	r2, #4294967295
 80074e4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f103 0208 	add.w	r2, r3, #8
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f103 0208 	add.w	r2, r3, #8
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800751a:	bf00      	nop
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8007526:	b480      	push	{r7}
 8007528:	b085      	sub	sp, #20
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
 800752e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753c:	d103      	bne.n	8007546 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	e00c      	b.n	8007560 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	3308      	adds	r3, #8
 800754a:	60fb      	str	r3, [r7, #12]
 800754c:	e002      	b.n	8007554 <vListInsert+0x2e>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	60fb      	str	r3, [r7, #12]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	429a      	cmp	r2, r3
 800755e:	d2f6      	bcs.n	800754e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	1c5a      	adds	r2, r3, #1
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	601a      	str	r2, [r3, #0]
}
 800758c:	bf00      	nop
 800758e:	3714      	adds	r7, #20
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	6892      	ldr	r2, [r2, #8]
 80075ae:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	6852      	ldr	r2, [r2, #4]
 80075b8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d103      	bne.n	80075cc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	1e5a      	subs	r2, r3, #1
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3714      	adds	r7, #20
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80075f6:	2301      	movs	r3, #1
 80075f8:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d103      	bne.n	800760c <xQueueGenericReset+0x20>
 8007604:	f001 feb8 	bl	8009378 <ulSetInterruptMask>
 8007608:	bf00      	nop
 800760a:	e7fd      	b.n	8007608 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d057      	beq.n	80076c2 <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8007616:	2b00      	cmp	r3, #0
 8007618:	d053      	beq.n	80076c2 <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007622:	2100      	movs	r1, #0
 8007624:	fba3 2302 	umull	r2, r3, r3, r2
 8007628:	2b00      	cmp	r3, #0
 800762a:	d000      	beq.n	800762e <xQueueGenericReset+0x42>
 800762c:	2101      	movs	r1, #1
 800762e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8007630:	2b00      	cmp	r3, #0
 8007632:	d146      	bne.n	80076c2 <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 8007634:	f001 fd0a 	bl	800904c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007640:	68b9      	ldr	r1, [r7, #8]
 8007642:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007644:	fb01 f303 	mul.w	r3, r1, r3
 8007648:	441a      	add	r2, r3
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2200      	movs	r2, #0
 8007652:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007664:	3b01      	subs	r3, #1
 8007666:	68b9      	ldr	r1, [r7, #8]
 8007668:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800766a:	fb01 f303 	mul.w	r3, r1, r3
 800766e:	441a      	add	r2, r3
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	22ff      	movs	r2, #255	@ 0xff
 8007678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	22ff      	movs	r2, #255	@ 0xff
 8007680:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10e      	bne.n	80076a8 <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d014      	beq.n	80076bc <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	3310      	adds	r3, #16
 8007696:	4618      	mov	r0, r3
 8007698:	f000 ff4a 	bl	8008530 <xTaskRemoveFromEventList>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00c      	beq.n	80076bc <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80076a2:	f001 fcc1 	bl	8009028 <vPortYield>
 80076a6:	e009      	b.n	80076bc <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	3310      	adds	r3, #16
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7ff ff0d 	bl	80074cc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	3324      	adds	r3, #36	@ 0x24
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7ff ff08 	bl	80074cc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80076bc:	f001 fcd8 	bl	8009070 <vPortExitCritical>
 80076c0:	e001      	b.n	80076c6 <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d103      	bne.n	80076d4 <xQueueGenericReset+0xe8>
 80076cc:	f001 fe54 	bl	8009378 <ulSetInterruptMask>
 80076d0:	bf00      	nop
 80076d2:	e7fd      	b.n	80076d0 <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80076d4:	68fb      	ldr	r3, [r7, #12]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 80076de:	b580      	push	{r7, lr}
 80076e0:	b088      	sub	sp, #32
 80076e2:	af02      	add	r7, sp, #8
 80076e4:	60f8      	str	r0, [r7, #12]
 80076e6:	60b9      	str	r1, [r7, #8]
 80076e8:	607a      	str	r2, [r7, #4]
 80076ea:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 80076ec:	2300      	movs	r3, #0
 80076ee:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d103      	bne.n	80076fe <xQueueGenericCreateStatic+0x20>
 80076f6:	f001 fe3f 	bl	8009378 <ulSetInterruptMask>
 80076fa:	bf00      	nop
 80076fc:	e7fd      	b.n	80076fa <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d029      	beq.n	8007758 <xQueueGenericCreateStatic+0x7a>
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d026      	beq.n	8007758 <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d002      	beq.n	8007716 <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d020      	beq.n	8007758 <xQueueGenericCreateStatic+0x7a>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d102      	bne.n	8007722 <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d11a      	bne.n	8007758 <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8007722:	2350      	movs	r3, #80	@ 0x50
 8007724:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	2b50      	cmp	r3, #80	@ 0x50
 800772a:	d003      	beq.n	8007734 <xQueueGenericCreateStatic+0x56>
 800772c:	f001 fe24 	bl	8009378 <ulSetInterruptMask>
 8007730:	bf00      	nop
 8007732:	e7fd      	b.n	8007730 <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8007734:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	2201      	movs	r2, #1
 800773e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007742:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	4613      	mov	r3, r2
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	68b9      	ldr	r1, [r7, #8]
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f000 f80d 	bl	8007770 <prvInitialiseNewQueue>
 8007756:	e006      	b.n	8007766 <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d103      	bne.n	8007766 <xQueueGenericCreateStatic+0x88>
 800775e:	f001 fe0b 	bl	8009378 <ulSetInterruptMask>
 8007762:	bf00      	nop
 8007764:	e7fd      	b.n	8007762 <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8007766:	697b      	ldr	r3, [r7, #20]
    }
 8007768:	4618      	mov	r0, r3
 800776a:	3718      	adds	r7, #24
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
 800777c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d103      	bne.n	800778c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	69ba      	ldr	r2, [r7, #24]
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	e002      	b.n	8007792 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800779e:	2101      	movs	r1, #1
 80077a0:	69b8      	ldr	r0, [r7, #24]
 80077a2:	f7ff ff23 	bl	80075ec <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	78fa      	ldrb	r2, [r7, #3]
 80077aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80077ae:	bf00      	nop
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b08a      	sub	sp, #40	@ 0x28
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	60f8      	str	r0, [r7, #12]
 80077be:	60b9      	str	r1, [r7, #8]
 80077c0:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80077c2:	2300      	movs	r3, #0
 80077c4:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80077ca:	6a3b      	ldr	r3, [r7, #32]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d103      	bne.n	80077d8 <xQueueReceive+0x22>
 80077d0:	f001 fdd2 	bl	8009378 <ulSetInterruptMask>
 80077d4:	bf00      	nop
 80077d6:	e7fd      	b.n	80077d4 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d103      	bne.n	80077e6 <xQueueReceive+0x30>
 80077de:	6a3b      	ldr	r3, [r7, #32]
 80077e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <xQueueReceive+0x34>
 80077e6:	2301      	movs	r3, #1
 80077e8:	e000      	b.n	80077ec <xQueueReceive+0x36>
 80077ea:	2300      	movs	r3, #0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d103      	bne.n	80077f8 <xQueueReceive+0x42>
 80077f0:	f001 fdc2 	bl	8009378 <ulSetInterruptMask>
 80077f4:	bf00      	nop
 80077f6:	e7fd      	b.n	80077f4 <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077f8:	f001 f8a4 	bl	8008944 <xTaskGetSchedulerState>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d102      	bne.n	8007808 <xQueueReceive+0x52>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d101      	bne.n	800780c <xQueueReceive+0x56>
 8007808:	2301      	movs	r3, #1
 800780a:	e000      	b.n	800780e <xQueueReceive+0x58>
 800780c:	2300      	movs	r3, #0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d103      	bne.n	800781a <xQueueReceive+0x64>
 8007812:	f001 fdb1 	bl	8009378 <ulSetInterruptMask>
 8007816:	bf00      	nop
 8007818:	e7fd      	b.n	8007816 <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800781a:	f001 fc17 	bl	800904c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800781e:	6a3b      	ldr	r3, [r7, #32]
 8007820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007822:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d019      	beq.n	800785e <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800782a:	68b9      	ldr	r1, [r7, #8]
 800782c:	6a38      	ldr	r0, [r7, #32]
 800782e:	f000 f87e 	bl	800792e <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	1e5a      	subs	r2, r3, #1
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800783a:	6a3b      	ldr	r3, [r7, #32]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d009      	beq.n	8007856 <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	3310      	adds	r3, #16
 8007846:	4618      	mov	r0, r3
 8007848:	f000 fe72 	bl	8008530 <xTaskRemoveFromEventList>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8007852:	f001 fbe9 	bl	8009028 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8007856:	f001 fc0b 	bl	8009070 <vPortExitCritical>
                return pdPASS;
 800785a:	2301      	movs	r3, #1
 800785c:	e063      	b.n	8007926 <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d103      	bne.n	800786c <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8007864:	f001 fc04 	bl	8009070 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8007868:	2300      	movs	r3, #0
 800786a:	e05c      	b.n	8007926 <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 800786c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786e:	2b00      	cmp	r3, #0
 8007870:	d106      	bne.n	8007880 <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007872:	f107 0314 	add.w	r3, r7, #20
 8007876:	4618      	mov	r0, r3
 8007878:	f000 ff28 	bl	80086cc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800787c:	2301      	movs	r3, #1
 800787e:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8007880:	f001 fbf6 	bl	8009070 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8007884:	f000 fb88 	bl	8007f98 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8007888:	f001 fbe0 	bl	800904c <vPortEnterCritical>
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007892:	b25b      	sxtb	r3, r3
 8007894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007898:	d103      	bne.n	80078a2 <xQueueReceive+0xec>
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078a2:	6a3b      	ldr	r3, [r7, #32]
 80078a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078a8:	b25b      	sxtb	r3, r3
 80078aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ae:	d103      	bne.n	80078b8 <xQueueReceive+0x102>
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078b8:	f001 fbda 	bl	8009070 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078bc:	1d3a      	adds	r2, r7, #4
 80078be:	f107 0314 	add.w	r3, r7, #20
 80078c2:	4611      	mov	r1, r2
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 ff17 	bl	80086f8 <xTaskCheckForTimeOut>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d11d      	bne.n	800790c <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078d0:	6a38      	ldr	r0, [r7, #32]
 80078d2:	f000 f8a4 	bl	8007a1e <prvIsQueueEmpty>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d011      	beq.n	8007900 <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	3324      	adds	r3, #36	@ 0x24
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	4611      	mov	r1, r2
 80078e4:	4618      	mov	r0, r3
 80078e6:	f000 fdc7 	bl	8008478 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80078ea:	6a38      	ldr	r0, [r7, #32]
 80078ec:	f000 f845 	bl	800797a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80078f0:	f000 fb60 	bl	8007fb4 <xTaskResumeAll>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d18f      	bne.n	800781a <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 80078fa:	f001 fb95 	bl	8009028 <vPortYield>
 80078fe:	e78c      	b.n	800781a <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8007900:	6a38      	ldr	r0, [r7, #32]
 8007902:	f000 f83a 	bl	800797a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8007906:	f000 fb55 	bl	8007fb4 <xTaskResumeAll>
 800790a:	e786      	b.n	800781a <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800790c:	6a38      	ldr	r0, [r7, #32]
 800790e:	f000 f834 	bl	800797a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8007912:	f000 fb4f 	bl	8007fb4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007916:	6a38      	ldr	r0, [r7, #32]
 8007918:	f000 f881 	bl	8007a1e <prvIsQueueEmpty>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	f43f af7b 	beq.w	800781a <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8007924:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8007926:	4618      	mov	r0, r3
 8007928:	3728      	adds	r7, #40	@ 0x28
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b082      	sub	sp, #8
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800793c:	2b00      	cmp	r3, #0
 800793e:	d018      	beq.n	8007972 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	68da      	ldr	r2, [r3, #12]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007948:	441a      	add	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68da      	ldr	r2, [r3, #12]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	429a      	cmp	r2, r3
 8007958:	d303      	bcc.n	8007962 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	68d9      	ldr	r1, [r3, #12]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800796a:	461a      	mov	r2, r3
 800796c:	6838      	ldr	r0, [r7, #0]
 800796e:	f001 fe2f 	bl	80095d0 <memcpy>
    }
}
 8007972:	bf00      	nop
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b084      	sub	sp, #16
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8007982:	f001 fb63 	bl	800904c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800798c:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800798e:	e011      	b.n	80079b4 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007994:	2b00      	cmp	r3, #0
 8007996:	d012      	beq.n	80079be <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	3324      	adds	r3, #36	@ 0x24
 800799c:	4618      	mov	r0, r3
 800799e:	f000 fdc7 	bl	8008530 <xTaskRemoveFromEventList>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80079a8:	f000 fefe 	bl	80087a8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80079ac:	7bfb      	ldrb	r3, [r7, #15]
 80079ae:	3b01      	subs	r3, #1
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80079b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	dce9      	bgt.n	8007990 <prvUnlockQueue+0x16>
 80079bc:	e000      	b.n	80079c0 <prvUnlockQueue+0x46>
                    break;
 80079be:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	22ff      	movs	r2, #255	@ 0xff
 80079c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80079c8:	f001 fb52 	bl	8009070 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80079cc:	f001 fb3e 	bl	800904c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80079d6:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80079d8:	e011      	b.n	80079fe <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d012      	beq.n	8007a08 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	3310      	adds	r3, #16
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 fda2 	bl	8008530 <xTaskRemoveFromEventList>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d001      	beq.n	80079f6 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80079f2:	f000 fed9 	bl	80087a8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80079f6:	7bbb      	ldrb	r3, [r7, #14]
 80079f8:	3b01      	subs	r3, #1
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80079fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	dce9      	bgt.n	80079da <prvUnlockQueue+0x60>
 8007a06:	e000      	b.n	8007a0a <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8007a08:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	22ff      	movs	r2, #255	@ 0xff
 8007a0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8007a12:	f001 fb2d 	bl	8009070 <vPortExitCritical>
}
 8007a16:	bf00      	nop
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b084      	sub	sp, #16
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8007a26:	f001 fb11 	bl	800904c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d102      	bne.n	8007a38 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8007a32:	2301      	movs	r3, #1
 8007a34:	60fb      	str	r3, [r7, #12]
 8007a36:	e001      	b.n	8007a3c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8007a3c:	f001 fb18 	bl	8009070 <vPortExitCritical>

    return xReturn;
 8007a40:	68fb      	ldr	r3, [r7, #12]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
	...

08007a4c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d103      	bne.n	8007a68 <vQueueAddToRegistry+0x1c>
 8007a60:	f001 fc8a 	bl	8009378 <ulSetInterruptMask>
 8007a64:	bf00      	nop
 8007a66:	e7fd      	b.n	8007a64 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d024      	beq.n	8007ab8 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60fb      	str	r3, [r7, #12]
 8007a72:	e01e      	b.n	8007ab2 <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8007a74:	4a17      	ldr	r2, [pc, #92]	@ (8007ad4 <vQueueAddToRegistry+0x88>)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	00db      	lsls	r3, r3, #3
 8007a7a:	4413      	add	r3, r2
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d105      	bne.n	8007a90 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	00db      	lsls	r3, r3, #3
 8007a88:	4a12      	ldr	r2, [pc, #72]	@ (8007ad4 <vQueueAddToRegistry+0x88>)
 8007a8a:	4413      	add	r3, r2
 8007a8c:	60bb      	str	r3, [r7, #8]
                    break;
 8007a8e:	e013      	b.n	8007ab8 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10a      	bne.n	8007aac <vQueueAddToRegistry+0x60>
 8007a96:	4a0f      	ldr	r2, [pc, #60]	@ (8007ad4 <vQueueAddToRegistry+0x88>)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d104      	bne.n	8007aac <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	00db      	lsls	r3, r3, #3
 8007aa6:	4a0b      	ldr	r2, [pc, #44]	@ (8007ad4 <vQueueAddToRegistry+0x88>)
 8007aa8:	4413      	add	r3, r2
 8007aaa:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	60fb      	str	r3, [r7, #12]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2b07      	cmp	r3, #7
 8007ab6:	d9dd      	bls.n	8007a74 <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d005      	beq.n	8007aca <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8007aca:	bf00      	nop
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20000664 	.word	0x20000664

08007ad8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8007ae8:	f001 fab0 	bl	800904c <vPortEnterCritical>
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007af2:	b25b      	sxtb	r3, r3
 8007af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af8:	d103      	bne.n	8007b02 <vQueueWaitForMessageRestricted+0x2a>
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b08:	b25b      	sxtb	r3, r3
 8007b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b0e:	d103      	bne.n	8007b18 <vQueueWaitForMessageRestricted+0x40>
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b18:	f001 faaa 	bl	8009070 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d106      	bne.n	8007b32 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	3324      	adds	r3, #36	@ 0x24
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	68b9      	ldr	r1, [r7, #8]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 fcc1 	bl	80084b4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8007b32:	6978      	ldr	r0, [r7, #20]
 8007b34:	f7ff ff21 	bl	800797a <prvUnlockQueue>
    }
 8007b38:	bf00      	nop
 8007b3a:	3718      	adds	r7, #24
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b08c      	sub	sp, #48	@ 0x30
 8007b44:	af04      	add	r7, sp, #16
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	607a      	str	r2, [r7, #4]
 8007b4c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8007b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d103      	bne.n	8007b5c <xTaskCreateStatic+0x1c>
 8007b54:	f001 fc10 	bl	8009378 <ulSetInterruptMask>
 8007b58:	bf00      	nop
 8007b5a:	e7fd      	b.n	8007b58 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d103      	bne.n	8007b6a <xTaskCreateStatic+0x2a>
 8007b62:	f001 fc09 	bl	8009378 <ulSetInterruptMask>
 8007b66:	bf00      	nop
 8007b68:	e7fd      	b.n	8007b66 <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8007b6a:	235c      	movs	r3, #92	@ 0x5c
 8007b6c:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	2b5c      	cmp	r3, #92	@ 0x5c
 8007b72:	d003      	beq.n	8007b7c <xTaskCreateStatic+0x3c>
 8007b74:	f001 fc00 	bl	8009378 <ulSetInterruptMask>
 8007b78:	bf00      	nop
 8007b7a:	e7fd      	b.n	8007b78 <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007b7c:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d023      	beq.n	8007bcc <xTaskCreateStatic+0x8c>
 8007b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d020      	beq.n	8007bcc <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b8c:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8007b8e:	225c      	movs	r2, #92	@ 0x5c
 8007b90:	2100      	movs	r1, #0
 8007b92:	69f8      	ldr	r0, [r7, #28]
 8007b94:	f001 fce8 	bl	8009568 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b9c:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	9303      	str	r3, [sp, #12]
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	9302      	str	r3, [sp, #8]
 8007bae:	f107 0318 	add.w	r3, r7, #24
 8007bb2:	9301      	str	r3, [sp, #4]
 8007bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	68b9      	ldr	r1, [r7, #8]
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f000 f855 	bl	8007c6e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8007bc4:	69f8      	ldr	r0, [r7, #28]
 8007bc6:	f000 f8d5 	bl	8007d74 <prvAddNewTaskToReadyList>
 8007bca:	e001      	b.n	8007bd0 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8007bd0:	69bb      	ldr	r3, [r7, #24]
    }
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3720      	adds	r7, #32
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b08c      	sub	sp, #48	@ 0x30
 8007bde:	af04      	add	r7, sp, #16
 8007be0:	60f8      	str	r0, [r7, #12]
 8007be2:	60b9      	str	r1, [r7, #8]
 8007be4:	603b      	str	r3, [r7, #0]
 8007be6:	4613      	mov	r3, r2
 8007be8:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007bea:	88fb      	ldrh	r3, [r7, #6]
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f001 fc22 	bl	8009438 <pvPortMalloc>
 8007bf4:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d013      	beq.n	8007c24 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007bfc:	205c      	movs	r0, #92	@ 0x5c
 8007bfe:	f001 fc1b 	bl	8009438 <pvPortMalloc>
 8007c02:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d008      	beq.n	8007c1c <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8007c0a:	225c      	movs	r2, #92	@ 0x5c
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	69f8      	ldr	r0, [r7, #28]
 8007c10:	f001 fcaa 	bl	8009568 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	631a      	str	r2, [r3, #48]	@ 0x30
 8007c1a:	e005      	b.n	8007c28 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8007c1c:	6978      	ldr	r0, [r7, #20]
 8007c1e:	f001 fc5d 	bl	80094dc <vPortFree>
 8007c22:	e001      	b.n	8007c28 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8007c24:	2300      	movs	r3, #0
 8007c26:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d017      	beq.n	8007c5e <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c36:	88fa      	ldrh	r2, [r7, #6]
 8007c38:	2300      	movs	r3, #0
 8007c3a:	9303      	str	r3, [sp, #12]
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	9302      	str	r3, [sp, #8]
 8007c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c42:	9301      	str	r3, [sp, #4]
 8007c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	68b9      	ldr	r1, [r7, #8]
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f000 f80e 	bl	8007c6e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8007c52:	69f8      	ldr	r0, [r7, #28]
 8007c54:	f000 f88e 	bl	8007d74 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	61bb      	str	r3, [r7, #24]
 8007c5c:	e002      	b.n	8007c64 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c62:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8007c64:	69bb      	ldr	r3, [r7, #24]
    }
 8007c66:	4618      	mov	r0, r3
 8007c68:	3720      	adds	r7, #32
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b086      	sub	sp, #24
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	60f8      	str	r0, [r7, #12]
 8007c76:	60b9      	str	r1, [r7, #8]
 8007c78:	607a      	str	r2, [r7, #4]
 8007c7a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c7e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	461a      	mov	r2, r3
 8007c86:	21a5      	movs	r1, #165	@ 0xa5
 8007c88:	f001 fc6e 	bl	8009568 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007c96:	3b01      	subs	r3, #1
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4413      	add	r3, r2
 8007c9c:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	f023 0307 	bic.w	r3, r3, #7
 8007ca4:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	f003 0307 	and.w	r3, r3, #7
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d003      	beq.n	8007cb8 <prvInitialiseNewTask+0x4a>
 8007cb0:	f001 fb62 	bl	8009378 <ulSetInterruptMask>
 8007cb4:	bf00      	nop
 8007cb6:	e7fd      	b.n	8007cb4 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d01e      	beq.n	8007cfc <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	617b      	str	r3, [r7, #20]
 8007cc2:	e012      	b.n	8007cea <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	4413      	add	r3, r2
 8007cca:	7819      	ldrb	r1, [r3, #0]
 8007ccc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	3334      	adds	r3, #52	@ 0x34
 8007cd4:	460a      	mov	r2, r1
 8007cd6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	4413      	add	r3, r2
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d006      	beq.n	8007cf2 <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	617b      	str	r3, [r7, #20]
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	2b0f      	cmp	r3, #15
 8007cee:	d9e9      	bls.n	8007cc4 <prvInitialiseNewTask+0x56>
 8007cf0:	e000      	b.n	8007cf4 <prvInitialiseNewTask+0x86>
            {
                break;
 8007cf2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8007cfc:	6a3b      	ldr	r3, [r7, #32]
 8007cfe:	2b37      	cmp	r3, #55	@ 0x37
 8007d00:	d903      	bls.n	8007d0a <prvInitialiseNewTask+0x9c>
 8007d02:	f001 fb39 	bl	8009378 <ulSetInterruptMask>
 8007d06:	bf00      	nop
 8007d08:	e7fd      	b.n	8007d06 <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d0a:	6a3b      	ldr	r3, [r7, #32]
 8007d0c:	2b37      	cmp	r3, #55	@ 0x37
 8007d0e:	d901      	bls.n	8007d14 <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d10:	2337      	movs	r3, #55	@ 0x37
 8007d12:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8007d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d16:	6a3a      	ldr	r2, [r7, #32]
 8007d18:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8007d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d1c:	6a3a      	ldr	r2, [r7, #32]
 8007d1e:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d22:	3304      	adds	r3, #4
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7ff fbf1 	bl	800750c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2c:	3318      	adds	r3, #24
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7ff fbec 	bl	800750c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d38:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d3a:	6a3b      	ldr	r3, [r7, #32]
 8007d3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d42:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d48:	625a      	str	r2, [r3, #36]	@ 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8007d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	6938      	ldr	r0, [r7, #16]
 8007d54:	f001 f9d8 	bl	8009108 <pxPortInitialiseStack>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d5c:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d002      	beq.n	8007d6a <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d68:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007d6a:	bf00      	nop
 8007d6c:	3718      	adds	r7, #24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
	...

08007d74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8007d7c:	f001 f966 	bl	800904c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8007d80:	4b3e      	ldr	r3, [pc, #248]	@ (8007e7c <prvAddNewTaskToReadyList+0x108>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3301      	adds	r3, #1
 8007d86:	4a3d      	ldr	r2, [pc, #244]	@ (8007e7c <prvAddNewTaskToReadyList+0x108>)
 8007d88:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8007d8a:	4b3d      	ldr	r3, [pc, #244]	@ (8007e80 <prvAddNewTaskToReadyList+0x10c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d109      	bne.n	8007da6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8007d92:	4a3b      	ldr	r2, [pc, #236]	@ (8007e80 <prvAddNewTaskToReadyList+0x10c>)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d98:	4b38      	ldr	r3, [pc, #224]	@ (8007e7c <prvAddNewTaskToReadyList+0x108>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d110      	bne.n	8007dc2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8007da0:	f000 fd1e 	bl	80087e0 <prvInitialiseTaskLists>
 8007da4:	e00d      	b.n	8007dc2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8007da6:	4b37      	ldr	r3, [pc, #220]	@ (8007e84 <prvAddNewTaskToReadyList+0x110>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d109      	bne.n	8007dc2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007dae:	4b34      	ldr	r3, [pc, #208]	@ (8007e80 <prvAddNewTaskToReadyList+0x10c>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d802      	bhi.n	8007dc2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8007dbc:	4a30      	ldr	r2, [pc, #192]	@ (8007e80 <prvAddNewTaskToReadyList+0x10c>)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8007dc2:	4b31      	ldr	r3, [pc, #196]	@ (8007e88 <prvAddNewTaskToReadyList+0x114>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	4a2f      	ldr	r2, [pc, #188]	@ (8007e88 <prvAddNewTaskToReadyList+0x114>)
 8007dca:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007dcc:	4b2e      	ldr	r3, [pc, #184]	@ (8007e88 <prvAddNewTaskToReadyList+0x114>)
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dd8:	4b2c      	ldr	r3, [pc, #176]	@ (8007e8c <prvAddNewTaskToReadyList+0x118>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d903      	bls.n	8007de8 <prvAddNewTaskToReadyList+0x74>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de4:	4a29      	ldr	r2, [pc, #164]	@ (8007e8c <prvAddNewTaskToReadyList+0x118>)
 8007de6:	6013      	str	r3, [r2, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dec:	4928      	ldr	r1, [pc, #160]	@ (8007e90 <prvAddNewTaskToReadyList+0x11c>)
 8007dee:	4613      	mov	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4413      	add	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	440b      	add	r3, r1
 8007df8:	3304      	adds	r3, #4
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	60fb      	str	r3, [r7, #12]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	609a      	str	r2, [r3, #8]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	689a      	ldr	r2, [r3, #8]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	60da      	str	r2, [r3, #12]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	3204      	adds	r2, #4
 8007e14:	605a      	str	r2, [r3, #4]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	1d1a      	adds	r2, r3, #4
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	609a      	str	r2, [r3, #8]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e22:	4613      	mov	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4a19      	ldr	r2, [pc, #100]	@ (8007e90 <prvAddNewTaskToReadyList+0x11c>)
 8007e2c:	441a      	add	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	615a      	str	r2, [r3, #20]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e36:	4916      	ldr	r1, [pc, #88]	@ (8007e90 <prvAddNewTaskToReadyList+0x11c>)
 8007e38:	4613      	mov	r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	4413      	add	r3, r2
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	440b      	add	r3, r1
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	1c59      	adds	r1, r3, #1
 8007e46:	4812      	ldr	r0, [pc, #72]	@ (8007e90 <prvAddNewTaskToReadyList+0x11c>)
 8007e48:	4613      	mov	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4403      	add	r3, r0
 8007e52:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8007e54:	f001 f90c 	bl	8009070 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8007e58:	4b0a      	ldr	r3, [pc, #40]	@ (8007e84 <prvAddNewTaskToReadyList+0x110>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d008      	beq.n	8007e72 <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e60:	4b07      	ldr	r3, [pc, #28]	@ (8007e80 <prvAddNewTaskToReadyList+0x10c>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d201      	bcs.n	8007e72 <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8007e6e:	f001 f8db 	bl	8009028 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007e72:	bf00      	nop
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	20000b78 	.word	0x20000b78
 8007e80:	200006a4 	.word	0x200006a4
 8007e84:	20000b84 	.word	0x20000b84
 8007e88:	20000b94 	.word	0x20000b94
 8007e8c:	20000b80 	.word	0x20000b80
 8007e90:	200006a8 	.word	0x200006a8

08007e94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d010      	beq.n	8007ec8 <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 8007ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8007edc <vTaskDelay+0x48>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <vTaskDelay+0x22>
 8007eae:	f001 fa63 	bl	8009378 <ulSetInterruptMask>
 8007eb2:	bf00      	nop
 8007eb4:	e7fd      	b.n	8007eb2 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 8007eb6:	f000 f86f 	bl	8007f98 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007eba:	2100      	movs	r1, #0
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fd5f 	bl	8008980 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8007ec2:	f000 f877 	bl	8007fb4 <xTaskResumeAll>
 8007ec6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 8007ece:	f001 f8ab 	bl	8009028 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8007ed2:	bf00      	nop
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	20000ba0 	.word	0x20000ba0

08007ee0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b088      	sub	sp, #32
 8007ee4:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8007eea:	2300      	movs	r3, #0
 8007eec:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007eee:	463a      	mov	r2, r7
 8007ef0:	1d39      	adds	r1, r7, #4
 8007ef2:	f107 0308 	add.w	r3, r7, #8
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7ff fab4 	bl	8007464 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	9202      	str	r2, [sp, #8]
 8007f04:	9301      	str	r3, [sp, #4]
 8007f06:	2300      	movs	r3, #0
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	460a      	mov	r2, r1
 8007f0e:	491b      	ldr	r1, [pc, #108]	@ (8007f7c <vTaskStartScheduler+0x9c>)
 8007f10:	481b      	ldr	r0, [pc, #108]	@ (8007f80 <vTaskStartScheduler+0xa0>)
 8007f12:	f7ff fe15 	bl	8007b40 <xTaskCreateStatic>
 8007f16:	4603      	mov	r3, r0
 8007f18:	4a1a      	ldr	r2, [pc, #104]	@ (8007f84 <vTaskStartScheduler+0xa4>)
 8007f1a:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8007f1c:	4b19      	ldr	r3, [pc, #100]	@ (8007f84 <vTaskStartScheduler+0xa4>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d002      	beq.n	8007f2a <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 8007f24:	2301      	movs	r3, #1
 8007f26:	60fb      	str	r3, [r7, #12]
 8007f28:	e001      	b.n	8007f2e <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d102      	bne.n	8007f3a <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 8007f34:	f000 fd92 	bl	8008a5c <xTimerCreateTimerTask>
 8007f38:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d10e      	bne.n	8007f5e <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8007f40:	f001 fa1a 	bl	8009378 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8007f44:	4b10      	ldr	r3, [pc, #64]	@ (8007f88 <vTaskStartScheduler+0xa8>)
 8007f46:	f04f 32ff 	mov.w	r2, #4294967295
 8007f4a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8007f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8007f8c <vTaskStartScheduler+0xac>)
 8007f4e:	2201      	movs	r2, #1
 8007f50:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f52:	4b0f      	ldr	r3, [pc, #60]	@ (8007f90 <vTaskStartScheduler+0xb0>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8007f58:	f001 f960 	bl	800921c <xPortStartScheduler>
 8007f5c:	e007      	b.n	8007f6e <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f64:	d103      	bne.n	8007f6e <vTaskStartScheduler+0x8e>
 8007f66:	f001 fa07 	bl	8009378 <ulSetInterruptMask>
 8007f6a:	bf00      	nop
 8007f6c:	e7fd      	b.n	8007f6a <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8007f6e:	4b09      	ldr	r3, [pc, #36]	@ (8007f94 <vTaskStartScheduler+0xb4>)
 8007f70:	681b      	ldr	r3, [r3, #0]
}
 8007f72:	bf00      	nop
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	08009f20 	.word	0x08009f20
 8007f80:	080087c1 	.word	0x080087c1
 8007f84:	20000b9c 	.word	0x20000b9c
 8007f88:	20000b98 	.word	0x20000b98
 8007f8c:	20000b84 	.word	0x20000b84
 8007f90:	20000b7c 	.word	0x20000b7c
 8007f94:	08009f98 	.word	0x08009f98

08007f98 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f98:	b480      	push	{r7}
 8007f9a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8007f9c:	4b04      	ldr	r3, [pc, #16]	@ (8007fb0 <vTaskSuspendAll+0x18>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	4a03      	ldr	r2, [pc, #12]	@ (8007fb0 <vTaskSuspendAll+0x18>)
 8007fa4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8007fa6:	bf00      	nop
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	20000ba0 	.word	0x20000ba0

08007fb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8007fc2:	4b6b      	ldr	r3, [pc, #428]	@ (8008170 <xTaskResumeAll+0x1bc>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d103      	bne.n	8007fd2 <xTaskResumeAll+0x1e>
 8007fca:	f001 f9d5 	bl	8009378 <ulSetInterruptMask>
 8007fce:	bf00      	nop
 8007fd0:	e7fd      	b.n	8007fce <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8007fd2:	f001 f83b 	bl	800904c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8007fd6:	4b66      	ldr	r3, [pc, #408]	@ (8008170 <xTaskResumeAll+0x1bc>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	4a64      	ldr	r2, [pc, #400]	@ (8008170 <xTaskResumeAll+0x1bc>)
 8007fde:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8007fe0:	4b63      	ldr	r3, [pc, #396]	@ (8008170 <xTaskResumeAll+0x1bc>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f040 80bb 	bne.w	8008160 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007fea:	4b62      	ldr	r3, [pc, #392]	@ (8008174 <xTaskResumeAll+0x1c0>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f000 80b6 	beq.w	8008160 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ff4:	e08b      	b.n	800810e <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ff6:	4b60      	ldr	r3, [pc, #384]	@ (8008178 <xTaskResumeAll+0x1c4>)
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008002:	60bb      	str	r3, [r7, #8]
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	69db      	ldr	r3, [r3, #28]
 8008008:	697a      	ldr	r2, [r7, #20]
 800800a:	6a12      	ldr	r2, [r2, #32]
 800800c:	609a      	str	r2, [r3, #8]
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	6a1b      	ldr	r3, [r3, #32]
 8008012:	697a      	ldr	r2, [r7, #20]
 8008014:	69d2      	ldr	r2, [r2, #28]
 8008016:	605a      	str	r2, [r3, #4]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	3318      	adds	r3, #24
 8008020:	429a      	cmp	r2, r3
 8008022:	d103      	bne.n	800802c <xTaskResumeAll+0x78>
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	6a1a      	ldr	r2, [r3, #32]
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	605a      	str	r2, [r3, #4]
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	2200      	movs	r2, #0
 8008030:	629a      	str	r2, [r3, #40]	@ 0x28
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	1e5a      	subs	r2, r3, #1
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	695b      	ldr	r3, [r3, #20]
 8008040:	607b      	str	r3, [r7, #4]
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	697a      	ldr	r2, [r7, #20]
 8008048:	68d2      	ldr	r2, [r2, #12]
 800804a:	609a      	str	r2, [r3, #8]
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	6892      	ldr	r2, [r2, #8]
 8008054:	605a      	str	r2, [r3, #4]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	685a      	ldr	r2, [r3, #4]
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	3304      	adds	r3, #4
 800805e:	429a      	cmp	r2, r3
 8008060:	d103      	bne.n	800806a <xTaskResumeAll+0xb6>
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	68da      	ldr	r2, [r3, #12]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	605a      	str	r2, [r3, #4]
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	2200      	movs	r2, #0
 800806e:	615a      	str	r2, [r3, #20]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	1e5a      	subs	r2, r3, #1
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800807e:	4b3f      	ldr	r3, [pc, #252]	@ (800817c <xTaskResumeAll+0x1c8>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	429a      	cmp	r2, r3
 8008084:	d903      	bls.n	800808e <xTaskResumeAll+0xda>
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800808a:	4a3c      	ldr	r2, [pc, #240]	@ (800817c <xTaskResumeAll+0x1c8>)
 800808c:	6013      	str	r3, [r2, #0]
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008092:	493b      	ldr	r1, [pc, #236]	@ (8008180 <xTaskResumeAll+0x1cc>)
 8008094:	4613      	mov	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	440b      	add	r3, r1
 800809e:	3304      	adds	r3, #4
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	603b      	str	r3, [r7, #0]
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	609a      	str	r2, [r3, #8]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	689a      	ldr	r2, [r3, #8]
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	60da      	str	r2, [r3, #12]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	3204      	adds	r2, #4
 80080ba:	605a      	str	r2, [r3, #4]
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	1d1a      	adds	r2, r3, #4
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	609a      	str	r2, [r3, #8]
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080c8:	4613      	mov	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4413      	add	r3, r2
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4a2b      	ldr	r2, [pc, #172]	@ (8008180 <xTaskResumeAll+0x1cc>)
 80080d2:	441a      	add	r2, r3
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	615a      	str	r2, [r3, #20]
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080dc:	4928      	ldr	r1, [pc, #160]	@ (8008180 <xTaskResumeAll+0x1cc>)
 80080de:	4613      	mov	r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	4413      	add	r3, r2
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	440b      	add	r3, r1
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	1c59      	adds	r1, r3, #1
 80080ec:	4824      	ldr	r0, [pc, #144]	@ (8008180 <xTaskResumeAll+0x1cc>)
 80080ee:	4613      	mov	r3, r2
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	4413      	add	r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4403      	add	r3, r0
 80080f8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080fe:	4b21      	ldr	r3, [pc, #132]	@ (8008184 <xTaskResumeAll+0x1d0>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008104:	429a      	cmp	r2, r3
 8008106:	d902      	bls.n	800810e <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 8008108:	4b1f      	ldr	r3, [pc, #124]	@ (8008188 <xTaskResumeAll+0x1d4>)
 800810a:	2201      	movs	r2, #1
 800810c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800810e:	4b1a      	ldr	r3, [pc, #104]	@ (8008178 <xTaskResumeAll+0x1c4>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	f47f af6f 	bne.w	8007ff6 <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d001      	beq.n	8008122 <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800811e:	f000 fbf5 	bl	800890c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008122:	4b1a      	ldr	r3, [pc, #104]	@ (800818c <xTaskResumeAll+0x1d8>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d010      	beq.n	8008150 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800812e:	f000 f83f 	bl	80081b0 <xTaskIncrementTick>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d002      	beq.n	800813e <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 8008138:	4b13      	ldr	r3, [pc, #76]	@ (8008188 <xTaskResumeAll+0x1d4>)
 800813a:	2201      	movs	r2, #1
 800813c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	3b01      	subs	r3, #1
 8008142:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1f1      	bne.n	800812e <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 800814a:	4b10      	ldr	r3, [pc, #64]	@ (800818c <xTaskResumeAll+0x1d8>)
 800814c:	2200      	movs	r2, #0
 800814e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8008150:	4b0d      	ldr	r3, [pc, #52]	@ (8008188 <xTaskResumeAll+0x1d4>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d003      	beq.n	8008160 <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8008158:	2301      	movs	r3, #1
 800815a:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800815c:	f000 ff64 	bl	8009028 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8008160:	f000 ff86 	bl	8009070 <vPortExitCritical>

    return xAlreadyYielded;
 8008164:	693b      	ldr	r3, [r7, #16]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	20000ba0 	.word	0x20000ba0
 8008174:	20000b78 	.word	0x20000b78
 8008178:	20000b38 	.word	0x20000b38
 800817c:	20000b80 	.word	0x20000b80
 8008180:	200006a8 	.word	0x200006a8
 8008184:	200006a4 	.word	0x200006a4
 8008188:	20000b8c 	.word	0x20000b8c
 800818c:	20000b88 	.word	0x20000b88

08008190 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8008196:	4b05      	ldr	r3, [pc, #20]	@ (80081ac <xTaskGetTickCount+0x1c>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800819c:	687b      	ldr	r3, [r7, #4]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	370c      	adds	r7, #12
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	20000b7c 	.word	0x20000b7c

080081b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b088      	sub	sp, #32
 80081b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80081b6:	2300      	movs	r3, #0
 80081b8:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80081ba:	4b7a      	ldr	r3, [pc, #488]	@ (80083a4 <xTaskIncrementTick+0x1f4>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f040 80e6 	bne.w	8008390 <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80081c4:	4b78      	ldr	r3, [pc, #480]	@ (80083a8 <xTaskIncrementTick+0x1f8>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	3301      	adds	r3, #1
 80081ca:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80081cc:	4a76      	ldr	r2, [pc, #472]	@ (80083a8 <xTaskIncrementTick+0x1f8>)
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d119      	bne.n	800820c <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 80081d8:	4b74      	ldr	r3, [pc, #464]	@ (80083ac <xTaskIncrementTick+0x1fc>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d003      	beq.n	80081ea <xTaskIncrementTick+0x3a>
 80081e2:	f001 f8c9 	bl	8009378 <ulSetInterruptMask>
 80081e6:	bf00      	nop
 80081e8:	e7fd      	b.n	80081e6 <xTaskIncrementTick+0x36>
 80081ea:	4b70      	ldr	r3, [pc, #448]	@ (80083ac <xTaskIncrementTick+0x1fc>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	617b      	str	r3, [r7, #20]
 80081f0:	4b6f      	ldr	r3, [pc, #444]	@ (80083b0 <xTaskIncrementTick+0x200>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a6d      	ldr	r2, [pc, #436]	@ (80083ac <xTaskIncrementTick+0x1fc>)
 80081f6:	6013      	str	r3, [r2, #0]
 80081f8:	4a6d      	ldr	r2, [pc, #436]	@ (80083b0 <xTaskIncrementTick+0x200>)
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	6013      	str	r3, [r2, #0]
 80081fe:	4b6d      	ldr	r3, [pc, #436]	@ (80083b4 <xTaskIncrementTick+0x204>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	3301      	adds	r3, #1
 8008204:	4a6b      	ldr	r2, [pc, #428]	@ (80083b4 <xTaskIncrementTick+0x204>)
 8008206:	6013      	str	r3, [r2, #0]
 8008208:	f000 fb80 	bl	800890c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800820c:	4b6a      	ldr	r3, [pc, #424]	@ (80083b8 <xTaskIncrementTick+0x208>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	69ba      	ldr	r2, [r7, #24]
 8008212:	429a      	cmp	r2, r3
 8008214:	f0c0 80a7 	bcc.w	8008366 <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008218:	4b64      	ldr	r3, [pc, #400]	@ (80083ac <xTaskIncrementTick+0x1fc>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d104      	bne.n	800822c <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008222:	4b65      	ldr	r3, [pc, #404]	@ (80083b8 <xTaskIncrementTick+0x208>)
 8008224:	f04f 32ff 	mov.w	r2, #4294967295
 8008228:	601a      	str	r2, [r3, #0]
                    break;
 800822a:	e09c      	b.n	8008366 <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800822c:	4b5f      	ldr	r3, [pc, #380]	@ (80083ac <xTaskIncrementTick+0x1fc>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800823c:	69ba      	ldr	r2, [r7, #24]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	429a      	cmp	r2, r3
 8008242:	d203      	bcs.n	800824c <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8008244:	4a5c      	ldr	r2, [pc, #368]	@ (80083b8 <xTaskIncrementTick+0x208>)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800824a:	e08c      	b.n	8008366 <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	695b      	ldr	r3, [r3, #20]
 8008250:	60bb      	str	r3, [r7, #8]
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	68d2      	ldr	r2, [r2, #12]
 800825a:	609a      	str	r2, [r3, #8]
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	6892      	ldr	r2, [r2, #8]
 8008264:	605a      	str	r2, [r3, #4]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	685a      	ldr	r2, [r3, #4]
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	3304      	adds	r3, #4
 800826e:	429a      	cmp	r2, r3
 8008270:	d103      	bne.n	800827a <xTaskIncrementTick+0xca>
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	68da      	ldr	r2, [r3, #12]
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	605a      	str	r2, [r3, #4]
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	2200      	movs	r2, #0
 800827e:	615a      	str	r2, [r3, #20]
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	1e5a      	subs	r2, r3, #1
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800828e:	2b00      	cmp	r3, #0
 8008290:	d01e      	beq.n	80082d0 <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008296:	607b      	str	r3, [r7, #4]
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	69db      	ldr	r3, [r3, #28]
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	6a12      	ldr	r2, [r2, #32]
 80082a0:	609a      	str	r2, [r3, #8]
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	693a      	ldr	r2, [r7, #16]
 80082a8:	69d2      	ldr	r2, [r2, #28]
 80082aa:	605a      	str	r2, [r3, #4]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	3318      	adds	r3, #24
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d103      	bne.n	80082c0 <xTaskIncrementTick+0x110>
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	6a1a      	ldr	r2, [r3, #32]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	605a      	str	r2, [r3, #4]
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	2200      	movs	r2, #0
 80082c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	1e5a      	subs	r2, r3, #1
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082d4:	4b39      	ldr	r3, [pc, #228]	@ (80083bc <xTaskIncrementTick+0x20c>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d903      	bls.n	80082e4 <xTaskIncrementTick+0x134>
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e0:	4a36      	ldr	r2, [pc, #216]	@ (80083bc <xTaskIncrementTick+0x20c>)
 80082e2:	6013      	str	r3, [r2, #0]
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082e8:	4935      	ldr	r1, [pc, #212]	@ (80083c0 <xTaskIncrementTick+0x210>)
 80082ea:	4613      	mov	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	440b      	add	r3, r1
 80082f4:	3304      	adds	r3, #4
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	603b      	str	r3, [r7, #0]
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	683a      	ldr	r2, [r7, #0]
 80082fe:	609a      	str	r2, [r3, #8]
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	689a      	ldr	r2, [r3, #8]
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	60da      	str	r2, [r3, #12]
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	3204      	adds	r2, #4
 8008310:	605a      	str	r2, [r3, #4]
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	1d1a      	adds	r2, r3, #4
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	609a      	str	r2, [r3, #8]
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800831e:	4613      	mov	r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4a26      	ldr	r2, [pc, #152]	@ (80083c0 <xTaskIncrementTick+0x210>)
 8008328:	441a      	add	r2, r3
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	615a      	str	r2, [r3, #20]
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008332:	4923      	ldr	r1, [pc, #140]	@ (80083c0 <xTaskIncrementTick+0x210>)
 8008334:	4613      	mov	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	4413      	add	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	440b      	add	r3, r1
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	1c59      	adds	r1, r3, #1
 8008342:	481f      	ldr	r0, [pc, #124]	@ (80083c0 <xTaskIncrementTick+0x210>)
 8008344:	4613      	mov	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4403      	add	r3, r0
 800834e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008354:	4b1b      	ldr	r3, [pc, #108]	@ (80083c4 <xTaskIncrementTick+0x214>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800835a:	429a      	cmp	r2, r3
 800835c:	f67f af5c 	bls.w	8008218 <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 8008360:	2301      	movs	r3, #1
 8008362:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008364:	e758      	b.n	8008218 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008366:	4b17      	ldr	r3, [pc, #92]	@ (80083c4 <xTaskIncrementTick+0x214>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800836c:	4914      	ldr	r1, [pc, #80]	@ (80083c0 <xTaskIncrementTick+0x210>)
 800836e:	4613      	mov	r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4413      	add	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	440b      	add	r3, r1
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d901      	bls.n	8008382 <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 800837e:	2301      	movs	r3, #1
 8008380:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8008382:	4b11      	ldr	r3, [pc, #68]	@ (80083c8 <xTaskIncrementTick+0x218>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d007      	beq.n	800839a <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 800838a:	2301      	movs	r3, #1
 800838c:	61fb      	str	r3, [r7, #28]
 800838e:	e004      	b.n	800839a <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8008390:	4b0e      	ldr	r3, [pc, #56]	@ (80083cc <xTaskIncrementTick+0x21c>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	3301      	adds	r3, #1
 8008396:	4a0d      	ldr	r2, [pc, #52]	@ (80083cc <xTaskIncrementTick+0x21c>)
 8008398:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800839a:	69fb      	ldr	r3, [r7, #28]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3720      	adds	r7, #32
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	20000ba0 	.word	0x20000ba0
 80083a8:	20000b7c 	.word	0x20000b7c
 80083ac:	20000b30 	.word	0x20000b30
 80083b0:	20000b34 	.word	0x20000b34
 80083b4:	20000b90 	.word	0x20000b90
 80083b8:	20000b98 	.word	0x20000b98
 80083bc:	20000b80 	.word	0x20000b80
 80083c0:	200006a8 	.word	0x200006a8
 80083c4:	200006a4 	.word	0x200006a4
 80083c8:	20000b8c 	.word	0x20000b8c
 80083cc:	20000b88 	.word	0x20000b88

080083d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80083d6:	4b23      	ldr	r3, [pc, #140]	@ (8008464 <vTaskSwitchContext+0x94>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d003      	beq.n	80083e6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80083de:	4b22      	ldr	r3, [pc, #136]	@ (8008468 <vTaskSwitchContext+0x98>)
 80083e0:	2201      	movs	r2, #1
 80083e2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80083e4:	e039      	b.n	800845a <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 80083e6:	4b20      	ldr	r3, [pc, #128]	@ (8008468 <vTaskSwitchContext+0x98>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083ec:	4b1f      	ldr	r3, [pc, #124]	@ (800846c <vTaskSwitchContext+0x9c>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	607b      	str	r3, [r7, #4]
 80083f2:	e009      	b.n	8008408 <vTaskSwitchContext+0x38>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d103      	bne.n	8008402 <vTaskSwitchContext+0x32>
 80083fa:	f000 ffbd 	bl	8009378 <ulSetInterruptMask>
 80083fe:	bf00      	nop
 8008400:	e7fd      	b.n	80083fe <vTaskSwitchContext+0x2e>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	3b01      	subs	r3, #1
 8008406:	607b      	str	r3, [r7, #4]
 8008408:	4919      	ldr	r1, [pc, #100]	@ (8008470 <vTaskSwitchContext+0xa0>)
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	4613      	mov	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4413      	add	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	440b      	add	r3, r1
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d0eb      	beq.n	80083f4 <vTaskSwitchContext+0x24>
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	4613      	mov	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4413      	add	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4a12      	ldr	r2, [pc, #72]	@ (8008470 <vTaskSwitchContext+0xa0>)
 8008428:	4413      	add	r3, r2
 800842a:	603b      	str	r3, [r7, #0]
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	685a      	ldr	r2, [r3, #4]
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	605a      	str	r2, [r3, #4]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	685a      	ldr	r2, [r3, #4]
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	3308      	adds	r3, #8
 800843e:	429a      	cmp	r2, r3
 8008440:	d103      	bne.n	800844a <vTaskSwitchContext+0x7a>
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	68da      	ldr	r2, [r3, #12]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	605a      	str	r2, [r3, #4]
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	4a08      	ldr	r2, [pc, #32]	@ (8008474 <vTaskSwitchContext+0xa4>)
 8008452:	6013      	str	r3, [r2, #0]
 8008454:	4a05      	ldr	r2, [pc, #20]	@ (800846c <vTaskSwitchContext+0x9c>)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6013      	str	r3, [r2, #0]
}
 800845a:	bf00      	nop
 800845c:	3708      	adds	r7, #8
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	20000ba0 	.word	0x20000ba0
 8008468:	20000b8c 	.word	0x20000b8c
 800846c:	20000b80 	.word	0x20000b80
 8008470:	200006a8 	.word	0x200006a8
 8008474:	200006a4 	.word	0x200006a4

08008478 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d103      	bne.n	8008490 <vTaskPlaceOnEventList+0x18>
 8008488:	f000 ff76 	bl	8009378 <ulSetInterruptMask>
 800848c:	bf00      	nop
 800848e:	e7fd      	b.n	800848c <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008490:	4b07      	ldr	r3, [pc, #28]	@ (80084b0 <vTaskPlaceOnEventList+0x38>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	3318      	adds	r3, #24
 8008496:	4619      	mov	r1, r3
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7ff f844 	bl	8007526 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800849e:	2101      	movs	r1, #1
 80084a0:	6838      	ldr	r0, [r7, #0]
 80084a2:	f000 fa6d 	bl	8008980 <prvAddCurrentTaskToDelayedList>
}
 80084a6:	bf00      	nop
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	200006a4 	.word	0x200006a4

080084b4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d103      	bne.n	80084ce <vTaskPlaceOnEventListRestricted+0x1a>
 80084c6:	f000 ff57 	bl	8009378 <ulSetInterruptMask>
 80084ca:	bf00      	nop
 80084cc:	e7fd      	b.n	80084ca <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	617b      	str	r3, [r7, #20]
 80084d4:	4b15      	ldr	r3, [pc, #84]	@ (800852c <vTaskPlaceOnEventListRestricted+0x78>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	61da      	str	r2, [r3, #28]
 80084dc:	4b13      	ldr	r3, [pc, #76]	@ (800852c <vTaskPlaceOnEventListRestricted+0x78>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	6892      	ldr	r2, [r2, #8]
 80084e4:	621a      	str	r2, [r3, #32]
 80084e6:	4b11      	ldr	r3, [pc, #68]	@ (800852c <vTaskPlaceOnEventListRestricted+0x78>)
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	3218      	adds	r2, #24
 80084f0:	605a      	str	r2, [r3, #4]
 80084f2:	4b0e      	ldr	r3, [pc, #56]	@ (800852c <vTaskPlaceOnEventListRestricted+0x78>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f103 0218 	add.w	r2, r3, #24
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	609a      	str	r2, [r3, #8]
 80084fe:	4b0b      	ldr	r3, [pc, #44]	@ (800852c <vTaskPlaceOnEventListRestricted+0x78>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	629a      	str	r2, [r3, #40]	@ 0x28
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	1c5a      	adds	r2, r3, #1
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d002      	beq.n	800851c <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 8008516:	f04f 33ff 	mov.w	r3, #4294967295
 800851a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800851c:	6879      	ldr	r1, [r7, #4]
 800851e:	68b8      	ldr	r0, [r7, #8]
 8008520:	f000 fa2e 	bl	8008980 <prvAddCurrentTaskToDelayedList>
    }
 8008524:	bf00      	nop
 8008526:	3718      	adds	r7, #24
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	200006a4 	.word	0x200006a4

08008530 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b088      	sub	sp, #32
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d103      	bne.n	800854e <xTaskRemoveFromEventList+0x1e>
 8008546:	f000 ff17 	bl	8009378 <ulSetInterruptMask>
 800854a:	bf00      	nop
 800854c:	e7fd      	b.n	800854a <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008552:	617b      	str	r3, [r7, #20]
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	69db      	ldr	r3, [r3, #28]
 8008558:	69ba      	ldr	r2, [r7, #24]
 800855a:	6a12      	ldr	r2, [r2, #32]
 800855c:	609a      	str	r2, [r3, #8]
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	69ba      	ldr	r2, [r7, #24]
 8008564:	69d2      	ldr	r2, [r2, #28]
 8008566:	605a      	str	r2, [r3, #4]
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	3318      	adds	r3, #24
 8008570:	429a      	cmp	r2, r3
 8008572:	d103      	bne.n	800857c <xTaskRemoveFromEventList+0x4c>
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	6a1a      	ldr	r2, [r3, #32]
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	605a      	str	r2, [r3, #4]
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	2200      	movs	r2, #0
 8008580:	629a      	str	r2, [r3, #40]	@ 0x28
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	1e5a      	subs	r2, r3, #1
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800858c:	4b49      	ldr	r3, [pc, #292]	@ (80086b4 <xTaskRemoveFromEventList+0x184>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d15f      	bne.n	8008654 <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	695b      	ldr	r3, [r3, #20]
 8008598:	60fb      	str	r3, [r7, #12]
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	69ba      	ldr	r2, [r7, #24]
 80085a0:	68d2      	ldr	r2, [r2, #12]
 80085a2:	609a      	str	r2, [r3, #8]
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	69ba      	ldr	r2, [r7, #24]
 80085aa:	6892      	ldr	r2, [r2, #8]
 80085ac:	605a      	str	r2, [r3, #4]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	685a      	ldr	r2, [r3, #4]
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	3304      	adds	r3, #4
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d103      	bne.n	80085c2 <xTaskRemoveFromEventList+0x92>
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	68da      	ldr	r2, [r3, #12]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	605a      	str	r2, [r3, #4]
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	2200      	movs	r2, #0
 80085c6:	615a      	str	r2, [r3, #20]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	1e5a      	subs	r2, r3, #1
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085d6:	4b38      	ldr	r3, [pc, #224]	@ (80086b8 <xTaskRemoveFromEventList+0x188>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d903      	bls.n	80085e6 <xTaskRemoveFromEventList+0xb6>
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e2:	4a35      	ldr	r2, [pc, #212]	@ (80086b8 <xTaskRemoveFromEventList+0x188>)
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ea:	4934      	ldr	r1, [pc, #208]	@ (80086bc <xTaskRemoveFromEventList+0x18c>)
 80085ec:	4613      	mov	r3, r2
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	4413      	add	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	440b      	add	r3, r1
 80085f6:	3304      	adds	r3, #4
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	60bb      	str	r3, [r7, #8]
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	68ba      	ldr	r2, [r7, #8]
 8008600:	609a      	str	r2, [r3, #8]
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	689a      	ldr	r2, [r3, #8]
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	60da      	str	r2, [r3, #12]
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	69ba      	ldr	r2, [r7, #24]
 8008610:	3204      	adds	r2, #4
 8008612:	605a      	str	r2, [r3, #4]
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	1d1a      	adds	r2, r3, #4
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	609a      	str	r2, [r3, #8]
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008620:	4613      	mov	r3, r2
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	4413      	add	r3, r2
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	4a24      	ldr	r2, [pc, #144]	@ (80086bc <xTaskRemoveFromEventList+0x18c>)
 800862a:	441a      	add	r2, r3
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	615a      	str	r2, [r3, #20]
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008634:	4921      	ldr	r1, [pc, #132]	@ (80086bc <xTaskRemoveFromEventList+0x18c>)
 8008636:	4613      	mov	r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	4413      	add	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	440b      	add	r3, r1
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	1c59      	adds	r1, r3, #1
 8008644:	481d      	ldr	r0, [pc, #116]	@ (80086bc <xTaskRemoveFromEventList+0x18c>)
 8008646:	4613      	mov	r3, r2
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	4413      	add	r3, r2
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4403      	add	r3, r0
 8008650:	6019      	str	r1, [r3, #0]
 8008652:	e01b      	b.n	800868c <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008654:	4b1a      	ldr	r3, [pc, #104]	@ (80086c0 <xTaskRemoveFromEventList+0x190>)
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	613b      	str	r3, [r7, #16]
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	693a      	ldr	r2, [r7, #16]
 800865e:	61da      	str	r2, [r3, #28]
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	689a      	ldr	r2, [r3, #8]
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	621a      	str	r2, [r3, #32]
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	69ba      	ldr	r2, [r7, #24]
 800866e:	3218      	adds	r2, #24
 8008670:	605a      	str	r2, [r3, #4]
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	f103 0218 	add.w	r2, r3, #24
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	609a      	str	r2, [r3, #8]
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	4a10      	ldr	r2, [pc, #64]	@ (80086c0 <xTaskRemoveFromEventList+0x190>)
 8008680:	629a      	str	r2, [r3, #40]	@ 0x28
 8008682:	4b0f      	ldr	r3, [pc, #60]	@ (80086c0 <xTaskRemoveFromEventList+0x190>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	3301      	adds	r3, #1
 8008688:	4a0d      	ldr	r2, [pc, #52]	@ (80086c0 <xTaskRemoveFromEventList+0x190>)
 800868a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008690:	4b0c      	ldr	r3, [pc, #48]	@ (80086c4 <xTaskRemoveFromEventList+0x194>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008696:	429a      	cmp	r2, r3
 8008698:	d905      	bls.n	80086a6 <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800869a:	2301      	movs	r3, #1
 800869c:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800869e:	4b0a      	ldr	r3, [pc, #40]	@ (80086c8 <xTaskRemoveFromEventList+0x198>)
 80086a0:	2201      	movs	r2, #1
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	e001      	b.n	80086aa <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 80086a6:	2300      	movs	r3, #0
 80086a8:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 80086aa:	69fb      	ldr	r3, [r7, #28]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3720      	adds	r7, #32
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	20000ba0 	.word	0x20000ba0
 80086b8:	20000b80 	.word	0x20000b80
 80086bc:	200006a8 	.word	0x200006a8
 80086c0:	20000b38 	.word	0x20000b38
 80086c4:	200006a4 	.word	0x200006a4
 80086c8:	20000b8c 	.word	0x20000b8c

080086cc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80086d4:	4b06      	ldr	r3, [pc, #24]	@ (80086f0 <vTaskInternalSetTimeOutState+0x24>)
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80086dc:	4b05      	ldr	r3, [pc, #20]	@ (80086f4 <vTaskInternalSetTimeOutState+0x28>)
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	605a      	str	r2, [r3, #4]
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr
 80086f0:	20000b90 	.word	0x20000b90
 80086f4:	20000b7c 	.word	0x20000b7c

080086f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d103      	bne.n	8008710 <xTaskCheckForTimeOut+0x18>
 8008708:	f000 fe36 	bl	8009378 <ulSetInterruptMask>
 800870c:	bf00      	nop
 800870e:	e7fd      	b.n	800870c <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d103      	bne.n	800871e <xTaskCheckForTimeOut+0x26>
 8008716:	f000 fe2f 	bl	8009378 <ulSetInterruptMask>
 800871a:	bf00      	nop
 800871c:	e7fd      	b.n	800871a <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 800871e:	f000 fc95 	bl	800904c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8008722:	4b1f      	ldr	r3, [pc, #124]	@ (80087a0 <xTaskCheckForTimeOut+0xa8>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800873a:	d102      	bne.n	8008742 <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800873c:	2300      	movs	r3, #0
 800873e:	617b      	str	r3, [r7, #20]
 8008740:	e026      	b.n	8008790 <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	4b17      	ldr	r3, [pc, #92]	@ (80087a4 <xTaskCheckForTimeOut+0xac>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	429a      	cmp	r2, r3
 800874c:	d00a      	beq.n	8008764 <xTaskCheckForTimeOut+0x6c>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	693a      	ldr	r2, [r7, #16]
 8008754:	429a      	cmp	r2, r3
 8008756:	d305      	bcc.n	8008764 <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8008758:	2301      	movs	r3, #1
 800875a:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	2200      	movs	r2, #0
 8008760:	601a      	str	r2, [r3, #0]
 8008762:	e015      	b.n	8008790 <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	429a      	cmp	r2, r3
 800876c:	d20b      	bcs.n	8008786 <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	1ad2      	subs	r2, r2, r3
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f7ff ffa6 	bl	80086cc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8008780:	2300      	movs	r3, #0
 8008782:	617b      	str	r3, [r7, #20]
 8008784:	e004      	b.n	8008790 <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	2200      	movs	r2, #0
 800878a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800878c:	2301      	movs	r3, #1
 800878e:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8008790:	f000 fc6e 	bl	8009070 <vPortExitCritical>

    return xReturn;
 8008794:	697b      	ldr	r3, [r7, #20]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3718      	adds	r7, #24
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	20000b7c 	.word	0x20000b7c
 80087a4:	20000b90 	.word	0x20000b90

080087a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80087a8:	b480      	push	{r7}
 80087aa:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80087ac:	4b03      	ldr	r3, [pc, #12]	@ (80087bc <vTaskMissedYield+0x14>)
 80087ae:	2201      	movs	r2, #1
 80087b0:	601a      	str	r2, [r3, #0]
}
 80087b2:	bf00      	nop
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr
 80087bc:	20000b8c 	.word	0x20000b8c

080087c0 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80087c8:	f000 f84a 	bl	8008860 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80087cc:	4b03      	ldr	r3, [pc, #12]	@ (80087dc <prvIdleTask+0x1c>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d9f9      	bls.n	80087c8 <prvIdleTask+0x8>
            {
                taskYIELD();
 80087d4:	f000 fc28 	bl	8009028 <vPortYield>
        prvCheckTasksWaitingTermination();
 80087d8:	e7f6      	b.n	80087c8 <prvIdleTask+0x8>
 80087da:	bf00      	nop
 80087dc:	200006a8 	.word	0x200006a8

080087e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087e6:	2300      	movs	r3, #0
 80087e8:	607b      	str	r3, [r7, #4]
 80087ea:	e00c      	b.n	8008806 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	4613      	mov	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4413      	add	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4a12      	ldr	r2, [pc, #72]	@ (8008840 <prvInitialiseTaskLists+0x60>)
 80087f8:	4413      	add	r3, r2
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fe fe66 	bl	80074cc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	3301      	adds	r3, #1
 8008804:	607b      	str	r3, [r7, #4]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2b37      	cmp	r3, #55	@ 0x37
 800880a:	d9ef      	bls.n	80087ec <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800880c:	480d      	ldr	r0, [pc, #52]	@ (8008844 <prvInitialiseTaskLists+0x64>)
 800880e:	f7fe fe5d 	bl	80074cc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8008812:	480d      	ldr	r0, [pc, #52]	@ (8008848 <prvInitialiseTaskLists+0x68>)
 8008814:	f7fe fe5a 	bl	80074cc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8008818:	480c      	ldr	r0, [pc, #48]	@ (800884c <prvInitialiseTaskLists+0x6c>)
 800881a:	f7fe fe57 	bl	80074cc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800881e:	480c      	ldr	r0, [pc, #48]	@ (8008850 <prvInitialiseTaskLists+0x70>)
 8008820:	f7fe fe54 	bl	80074cc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8008824:	480b      	ldr	r0, [pc, #44]	@ (8008854 <prvInitialiseTaskLists+0x74>)
 8008826:	f7fe fe51 	bl	80074cc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800882a:	4b0b      	ldr	r3, [pc, #44]	@ (8008858 <prvInitialiseTaskLists+0x78>)
 800882c:	4a05      	ldr	r2, [pc, #20]	@ (8008844 <prvInitialiseTaskLists+0x64>)
 800882e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008830:	4b0a      	ldr	r3, [pc, #40]	@ (800885c <prvInitialiseTaskLists+0x7c>)
 8008832:	4a05      	ldr	r2, [pc, #20]	@ (8008848 <prvInitialiseTaskLists+0x68>)
 8008834:	601a      	str	r2, [r3, #0]
}
 8008836:	bf00      	nop
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	200006a8 	.word	0x200006a8
 8008844:	20000b08 	.word	0x20000b08
 8008848:	20000b1c 	.word	0x20000b1c
 800884c:	20000b38 	.word	0x20000b38
 8008850:	20000b4c 	.word	0x20000b4c
 8008854:	20000b64 	.word	0x20000b64
 8008858:	20000b30 	.word	0x20000b30
 800885c:	20000b34 	.word	0x20000b34

08008860 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008866:	e019      	b.n	800889c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8008868:	f000 fbf0 	bl	800904c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800886c:	4b10      	ldr	r3, [pc, #64]	@ (80088b0 <prvCheckTasksWaitingTermination+0x50>)
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	3304      	adds	r3, #4
 8008878:	4618      	mov	r0, r3
 800887a:	f7fe fe8d 	bl	8007598 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800887e:	4b0d      	ldr	r3, [pc, #52]	@ (80088b4 <prvCheckTasksWaitingTermination+0x54>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	3b01      	subs	r3, #1
 8008884:	4a0b      	ldr	r2, [pc, #44]	@ (80088b4 <prvCheckTasksWaitingTermination+0x54>)
 8008886:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8008888:	4b0b      	ldr	r3, [pc, #44]	@ (80088b8 <prvCheckTasksWaitingTermination+0x58>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	3b01      	subs	r3, #1
 800888e:	4a0a      	ldr	r2, [pc, #40]	@ (80088b8 <prvCheckTasksWaitingTermination+0x58>)
 8008890:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8008892:	f000 fbed 	bl	8009070 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f810 	bl	80088bc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800889c:	4b06      	ldr	r3, [pc, #24]	@ (80088b8 <prvCheckTasksWaitingTermination+0x58>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d1e1      	bne.n	8008868 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80088a4:	bf00      	nop
 80088a6:	bf00      	nop
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	20000b4c 	.word	0x20000b4c
 80088b4:	20000b78 	.word	0x20000b78
 80088b8:	20000b60 	.word	0x20000b60

080088bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d108      	bne.n	80088e0 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 fe02 	bl	80094dc <vPortFree>
                vPortFree( pxTCB );
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fdff 	bl	80094dc <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80088de:	e011      	b.n	8008904 <prvDeleteTCB+0x48>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d103      	bne.n	80088f2 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fdf6 	bl	80094dc <vPortFree>
    }
 80088f0:	e008      	b.n	8008904 <prvDeleteTCB+0x48>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d003      	beq.n	8008904 <prvDeleteTCB+0x48>
 80088fc:	f000 fd3c 	bl	8009378 <ulSetInterruptMask>
 8008900:	bf00      	nop
 8008902:	e7fd      	b.n	8008900 <prvDeleteTCB+0x44>
    }
 8008904:	bf00      	nop
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800890c:	b480      	push	{r7}
 800890e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008910:	4b0a      	ldr	r3, [pc, #40]	@ (800893c <prvResetNextTaskUnblockTime+0x30>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d104      	bne.n	8008924 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800891a:	4b09      	ldr	r3, [pc, #36]	@ (8008940 <prvResetNextTaskUnblockTime+0x34>)
 800891c:	f04f 32ff 	mov.w	r2, #4294967295
 8008920:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8008922:	e005      	b.n	8008930 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008924:	4b05      	ldr	r3, [pc, #20]	@ (800893c <prvResetNextTaskUnblockTime+0x30>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a04      	ldr	r2, [pc, #16]	@ (8008940 <prvResetNextTaskUnblockTime+0x34>)
 800892e:	6013      	str	r3, [r2, #0]
}
 8008930:	bf00      	nop
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	20000b30 	.word	0x20000b30
 8008940:	20000b98 	.word	0x20000b98

08008944 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800894a:	4b0b      	ldr	r3, [pc, #44]	@ (8008978 <xTaskGetSchedulerState+0x34>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d102      	bne.n	8008958 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8008952:	2301      	movs	r3, #1
 8008954:	607b      	str	r3, [r7, #4]
 8008956:	e008      	b.n	800896a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8008958:	4b08      	ldr	r3, [pc, #32]	@ (800897c <xTaskGetSchedulerState+0x38>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d102      	bne.n	8008966 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8008960:	2302      	movs	r3, #2
 8008962:	607b      	str	r3, [r7, #4]
 8008964:	e001      	b.n	800896a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8008966:	2300      	movs	r3, #0
 8008968:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800896a:	687b      	ldr	r3, [r7, #4]
    }
 800896c:	4618      	mov	r0, r3
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	20000b84 	.word	0x20000b84
 800897c:	20000ba0 	.word	0x20000ba0

08008980 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800898a:	4b2e      	ldr	r3, [pc, #184]	@ (8008a44 <prvAddCurrentTaskToDelayedList+0xc4>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008990:	4b2d      	ldr	r3, [pc, #180]	@ (8008a48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3304      	adds	r3, #4
 8008996:	4618      	mov	r0, r3
 8008998:	f7fe fdfe 	bl	8007598 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a2:	d124      	bne.n	80089ee <prvAddCurrentTaskToDelayedList+0x6e>
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d021      	beq.n	80089ee <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089aa:	4b28      	ldr	r3, [pc, #160]	@ (8008a4c <prvAddCurrentTaskToDelayedList+0xcc>)
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	613b      	str	r3, [r7, #16]
 80089b0:	4b25      	ldr	r3, [pc, #148]	@ (8008a48 <prvAddCurrentTaskToDelayedList+0xc8>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	693a      	ldr	r2, [r7, #16]
 80089b6:	609a      	str	r2, [r3, #8]
 80089b8:	4b23      	ldr	r3, [pc, #140]	@ (8008a48 <prvAddCurrentTaskToDelayedList+0xc8>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	6892      	ldr	r2, [r2, #8]
 80089c0:	60da      	str	r2, [r3, #12]
 80089c2:	4b21      	ldr	r3, [pc, #132]	@ (8008a48 <prvAddCurrentTaskToDelayedList+0xc8>)
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	3204      	adds	r2, #4
 80089cc:	605a      	str	r2, [r3, #4]
 80089ce:	4b1e      	ldr	r3, [pc, #120]	@ (8008a48 <prvAddCurrentTaskToDelayedList+0xc8>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	1d1a      	adds	r2, r3, #4
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	609a      	str	r2, [r3, #8]
 80089d8:	4b1b      	ldr	r3, [pc, #108]	@ (8008a48 <prvAddCurrentTaskToDelayedList+0xc8>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a1b      	ldr	r2, [pc, #108]	@ (8008a4c <prvAddCurrentTaskToDelayedList+0xcc>)
 80089de:	615a      	str	r2, [r3, #20]
 80089e0:	4b1a      	ldr	r3, [pc, #104]	@ (8008a4c <prvAddCurrentTaskToDelayedList+0xcc>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	3301      	adds	r3, #1
 80089e6:	4a19      	ldr	r2, [pc, #100]	@ (8008a4c <prvAddCurrentTaskToDelayedList+0xcc>)
 80089e8:	6013      	str	r3, [r2, #0]
 80089ea:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80089ec:	e026      	b.n	8008a3c <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4413      	add	r3, r2
 80089f4:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80089f6:	4b14      	ldr	r3, [pc, #80]	@ (8008a48 <prvAddCurrentTaskToDelayedList+0xc8>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d209      	bcs.n	8008a1a <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a06:	4b12      	ldr	r3, [pc, #72]	@ (8008a50 <prvAddCurrentTaskToDelayedList+0xd0>)
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8008a48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3304      	adds	r3, #4
 8008a10:	4619      	mov	r1, r3
 8008a12:	4610      	mov	r0, r2
 8008a14:	f7fe fd87 	bl	8007526 <vListInsert>
}
 8008a18:	e010      	b.n	8008a3c <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8008a54 <prvAddCurrentTaskToDelayedList+0xd4>)
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8008a48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	3304      	adds	r3, #4
 8008a24:	4619      	mov	r1, r3
 8008a26:	4610      	mov	r0, r2
 8008a28:	f7fe fd7d 	bl	8007526 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8008a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a58 <prvAddCurrentTaskToDelayedList+0xd8>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d202      	bcs.n	8008a3c <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8008a36:	4a08      	ldr	r2, [pc, #32]	@ (8008a58 <prvAddCurrentTaskToDelayedList+0xd8>)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6013      	str	r3, [r2, #0]
}
 8008a3c:	bf00      	nop
 8008a3e:	3718      	adds	r7, #24
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	20000b7c 	.word	0x20000b7c
 8008a48:	200006a4 	.word	0x200006a4
 8008a4c:	20000b64 	.word	0x20000b64
 8008a50:	20000b34 	.word	0x20000b34
 8008a54:	20000b30 	.word	0x20000b30
 8008a58:	20000b98 	.word	0x20000b98

08008a5c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b088      	sub	sp, #32
 8008a60:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8008a62:	2300      	movs	r3, #0
 8008a64:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8008a66:	f000 fa5f 	bl	8008f28 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8008a6a:	4b18      	ldr	r3, [pc, #96]	@ (8008acc <xTimerCreateTimerTask+0x70>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d020      	beq.n	8008ab4 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8008a72:	2300      	movs	r3, #0
 8008a74:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 8008a76:	2300      	movs	r3, #0
 8008a78:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008a7a:	463a      	mov	r2, r7
 8008a7c:	1d39      	adds	r1, r7, #4
 8008a7e:	f107 0308 	add.w	r3, r7, #8
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7fe fd08 	bl	8007498 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8008a88:	6839      	ldr	r1, [r7, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	9202      	str	r2, [sp, #8]
 8008a90:	9301      	str	r3, [sp, #4]
 8008a92:	2302      	movs	r3, #2
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	2300      	movs	r3, #0
 8008a98:	460a      	mov	r2, r1
 8008a9a:	490d      	ldr	r1, [pc, #52]	@ (8008ad0 <xTimerCreateTimerTask+0x74>)
 8008a9c:	480d      	ldr	r0, [pc, #52]	@ (8008ad4 <xTimerCreateTimerTask+0x78>)
 8008a9e:	f7ff f84f 	bl	8007b40 <xTaskCreateStatic>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8008ad8 <xTimerCreateTimerTask+0x7c>)
 8008aa6:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 8008aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8008ad8 <xTimerCreateTimerTask+0x7c>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d103      	bne.n	8008ac2 <xTimerCreateTimerTask+0x66>
 8008aba:	f000 fc5d 	bl	8009378 <ulSetInterruptMask>
 8008abe:	bf00      	nop
 8008ac0:	e7fd      	b.n	8008abe <xTimerCreateTimerTask+0x62>
        return xReturn;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
    }
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	20000bd4 	.word	0x20000bd4
 8008ad0:	08009f28 	.word	0x08009f28
 8008ad4:	08008b81 	.word	0x08008b81
 8008ad8:	20000bd8 	.word	0x20000bd8

08008adc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8008ae8:	e008      	b.n	8008afc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	699b      	ldr	r3, [r3, #24]
 8008aee:	68ba      	ldr	r2, [r7, #8]
 8008af0:	4413      	add	r3, r2
 8008af2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6a1b      	ldr	r3, [r3, #32]
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	699a      	ldr	r2, [r3, #24]
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	18d1      	adds	r1, r2, r3
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 f8d7 	bl	8008cbc <prvInsertTimerInActiveList>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1ea      	bne.n	8008aea <prvReloadTimer+0xe>
        }
    }
 8008b14:	bf00      	nop
 8008b16:	bf00      	nop
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
	...

08008b20 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b2a:	4b14      	ldr	r3, [pc, #80]	@ (8008b7c <prvProcessExpiredTimer+0x5c>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	3304      	adds	r3, #4
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7fe fd2d 	bl	8007598 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b44:	f003 0304 	and.w	r3, r3, #4
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d005      	beq.n	8008b58 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8008b4c:	683a      	ldr	r2, [r7, #0]
 8008b4e:	6879      	ldr	r1, [r7, #4]
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f7ff ffc3 	bl	8008adc <prvReloadTimer>
 8008b56:	e008      	b.n	8008b6a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b5e:	f023 0301 	bic.w	r3, r3, #1
 8008b62:	b2da      	uxtb	r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6a1b      	ldr	r3, [r3, #32]
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	4798      	blx	r3
    }
 8008b72:	bf00      	nop
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	20000bcc 	.word	0x20000bcc

08008b80 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b88:	f107 0308 	add.w	r3, r7, #8
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f000 f851 	bl	8008c34 <prvGetNextExpireTime>
 8008b92:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	4619      	mov	r1, r3
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 f805 	bl	8008ba8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8008b9e:	f000 f8cf 	bl	8008d40 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ba2:	bf00      	nop
 8008ba4:	e7f0      	b.n	8008b88 <prvTimerTask+0x8>
	...

08008ba8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8008bb2:	f7ff f9f1 	bl	8007f98 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008bb6:	f107 0308 	add.w	r3, r7, #8
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f000 f85e 	bl	8008c7c <prvSampleTimeNow>
 8008bc0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d12a      	bne.n	8008c1e <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d10a      	bne.n	8008be4 <prvProcessTimerOrBlockTask+0x3c>
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d806      	bhi.n	8008be4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8008bd6:	f7ff f9ed 	bl	8007fb4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008bda:	68f9      	ldr	r1, [r7, #12]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7ff ff9f 	bl	8008b20 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8008be2:	e01e      	b.n	8008c22 <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d008      	beq.n	8008bfc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008bea:	4b10      	ldr	r3, [pc, #64]	@ (8008c2c <prvProcessTimerOrBlockTask+0x84>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d101      	bne.n	8008bf8 <prvProcessTimerOrBlockTask+0x50>
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e000      	b.n	8008bfa <prvProcessTimerOrBlockTask+0x52>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8008c30 <prvProcessTimerOrBlockTask+0x88>)
 8008bfe:	6818      	ldr	r0, [r3, #0]
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	4619      	mov	r1, r3
 8008c0a:	f7fe ff65 	bl	8007ad8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8008c0e:	f7ff f9d1 	bl	8007fb4 <xTaskResumeAll>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d104      	bne.n	8008c22 <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 8008c18:	f000 fa06 	bl	8009028 <vPortYield>
    }
 8008c1c:	e001      	b.n	8008c22 <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 8008c1e:	f7ff f9c9 	bl	8007fb4 <xTaskResumeAll>
    }
 8008c22:	bf00      	nop
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	20000bd0 	.word	0x20000bd0
 8008c30:	20000bd4 	.word	0x20000bd4

08008c34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8008c34:	b480      	push	{r7}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8008c78 <prvGetNextExpireTime+0x44>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d101      	bne.n	8008c4a <prvGetNextExpireTime+0x16>
 8008c46:	2201      	movs	r2, #1
 8008c48:	e000      	b.n	8008c4c <prvGetNextExpireTime+0x18>
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d105      	bne.n	8008c64 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c58:	4b07      	ldr	r3, [pc, #28]	@ (8008c78 <prvGetNextExpireTime+0x44>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	60fb      	str	r3, [r7, #12]
 8008c62:	e001      	b.n	8008c68 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8008c64:	2300      	movs	r3, #0
 8008c66:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8008c68:	68fb      	ldr	r3, [r7, #12]
    }
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3714      	adds	r7, #20
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr
 8008c76:	bf00      	nop
 8008c78:	20000bcc 	.word	0x20000bcc

08008c7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8008c84:	f7ff fa84 	bl	8008190 <xTaskGetTickCount>
 8008c88:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8008c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8008cb8 <prvSampleTimeNow+0x3c>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d205      	bcs.n	8008ca0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8008c94:	f000 f922 	bl	8008edc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	e002      	b.n	8008ca6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8008ca6:	4a04      	ldr	r2, [pc, #16]	@ (8008cb8 <prvSampleTimeNow+0x3c>)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8008cac:	68fb      	ldr	r3, [r7, #12]
    }
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3710      	adds	r7, #16
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	20000bdc 	.word	0x20000bdc

08008cbc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b086      	sub	sp, #24
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	607a      	str	r2, [r7, #4]
 8008cc8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d812      	bhi.n	8008d08 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	1ad2      	subs	r2, r2, r3
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d302      	bcc.n	8008cf6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	617b      	str	r3, [r7, #20]
 8008cf4:	e01b      	b.n	8008d2e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008cf6:	4b10      	ldr	r3, [pc, #64]	@ (8008d38 <prvInsertTimerInActiveList+0x7c>)
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	3304      	adds	r3, #4
 8008cfe:	4619      	mov	r1, r3
 8008d00:	4610      	mov	r0, r2
 8008d02:	f7fe fc10 	bl	8007526 <vListInsert>
 8008d06:	e012      	b.n	8008d2e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d206      	bcs.n	8008d1e <prvInsertTimerInActiveList+0x62>
 8008d10:	68ba      	ldr	r2, [r7, #8]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d302      	bcc.n	8008d1e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	617b      	str	r3, [r7, #20]
 8008d1c:	e007      	b.n	8008d2e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d1e:	4b07      	ldr	r3, [pc, #28]	@ (8008d3c <prvInsertTimerInActiveList+0x80>)
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	3304      	adds	r3, #4
 8008d26:	4619      	mov	r1, r3
 8008d28:	4610      	mov	r0, r2
 8008d2a:	f7fe fbfc 	bl	8007526 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8008d2e:	697b      	ldr	r3, [r7, #20]
    }
 8008d30:	4618      	mov	r0, r3
 8008d32:	3718      	adds	r7, #24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	20000bd0 	.word	0x20000bd0
 8008d3c:	20000bcc 	.word	0x20000bcc

08008d40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b088      	sub	sp, #32
 8008d44:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d46:	e0b7      	b.n	8008eb8 <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	da11      	bge.n	8008d72 <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008d4e:	1d3b      	adds	r3, r7, #4
 8008d50:	3304      	adds	r3, #4
 8008d52:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d103      	bne.n	8008d62 <prvProcessReceivedCommands+0x22>
 8008d5a:	f000 fb0d 	bl	8009378 <ulSetInterruptMask>
 8008d5e:	bf00      	nop
 8008d60:	e7fd      	b.n	8008d5e <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	69fa      	ldr	r2, [r7, #28]
 8008d68:	6850      	ldr	r0, [r2, #4]
 8008d6a:	69fa      	ldr	r2, [r7, #28]
 8008d6c:	6892      	ldr	r2, [r2, #8]
 8008d6e:	4611      	mov	r1, r2
 8008d70:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	f2c0 809f 	blt.w	8008eb8 <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d004      	beq.n	8008d90 <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	3304      	adds	r3, #4
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7fe fc04 	bl	8007598 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d90:	463b      	mov	r3, r7
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7ff ff72 	bl	8008c7c <prvSampleTimeNow>
 8008d98:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	2b08      	cmp	r3, #8
 8008da0:	f200 8087 	bhi.w	8008eb2 <prvProcessReceivedCommands+0x172>
 8008da4:	a201      	add	r2, pc, #4	@ (adr r2, 8008dac <prvProcessReceivedCommands+0x6c>)
 8008da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008daa:	bf00      	nop
 8008dac:	08008dd1 	.word	0x08008dd1
 8008db0:	08008dd1 	.word	0x08008dd1
 8008db4:	08008e39 	.word	0x08008e39
 8008db8:	08008e4d 	.word	0x08008e4d
 8008dbc:	08008e89 	.word	0x08008e89
 8008dc0:	08008dd1 	.word	0x08008dd1
 8008dc4:	08008dd1 	.word	0x08008dd1
 8008dc8:	08008e39 	.word	0x08008e39
 8008dcc:	08008e4d 	.word	0x08008e4d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008dd6:	f043 0301 	orr.w	r3, r3, #1
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	18d1      	adds	r1, r2, r3
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	697a      	ldr	r2, [r7, #20]
 8008dee:	69b8      	ldr	r0, [r7, #24]
 8008df0:	f7ff ff64 	bl	8008cbc <prvInsertTimerInActiveList>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d05d      	beq.n	8008eb6 <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e00:	f003 0304 	and.w	r3, r3, #4
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d009      	beq.n	8008e1c <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8008e08:	68ba      	ldr	r2, [r7, #8]
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	4413      	add	r3, r2
 8008e10:	697a      	ldr	r2, [r7, #20]
 8008e12:	4619      	mov	r1, r3
 8008e14:	69b8      	ldr	r0, [r7, #24]
 8008e16:	f7ff fe61 	bl	8008adc <prvReloadTimer>
 8008e1a:	e008      	b.n	8008e2e <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e22:	f023 0301 	bic.w	r3, r3, #1
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	6a1b      	ldr	r3, [r3, #32]
 8008e32:	69b8      	ldr	r0, [r7, #24]
 8008e34:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8008e36:	e03e      	b.n	8008eb6 <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008e38:	69bb      	ldr	r3, [r7, #24]
 8008e3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e3e:	f023 0301 	bic.w	r3, r3, #1
 8008e42:	b2da      	uxtb	r2, r3
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8008e4a:	e035      	b.n	8008eb8 <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e52:	f043 0301 	orr.w	r3, r3, #1
 8008e56:	b2da      	uxtb	r2, r3
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008e5e:	68ba      	ldr	r2, [r7, #8]
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d103      	bne.n	8008e74 <prvProcessReceivedCommands+0x134>
 8008e6c:	f000 fa84 	bl	8009378 <ulSetInterruptMask>
 8008e70:	bf00      	nop
 8008e72:	e7fd      	b.n	8008e70 <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	699a      	ldr	r2, [r3, #24]
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	18d1      	adds	r1, r2, r3
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	697a      	ldr	r2, [r7, #20]
 8008e80:	69b8      	ldr	r0, [r7, #24]
 8008e82:	f7ff ff1b 	bl	8008cbc <prvInsertTimerInActiveList>
                        break;
 8008e86:	e017      	b.n	8008eb8 <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e8e:	f003 0302 	and.w	r3, r3, #2
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d103      	bne.n	8008e9e <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 8008e96:	69b8      	ldr	r0, [r7, #24]
 8008e98:	f000 fb20 	bl	80094dc <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8008e9c:	e00c      	b.n	8008eb8 <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ea4:	f023 0301 	bic.w	r3, r3, #1
 8008ea8:	b2da      	uxtb	r2, r3
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8008eb0:	e002      	b.n	8008eb8 <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 8008eb2:	bf00      	nop
 8008eb4:	e000      	b.n	8008eb8 <prvProcessReceivedCommands+0x178>
                        break;
 8008eb6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008eb8:	4b07      	ldr	r3, [pc, #28]	@ (8008ed8 <prvProcessReceivedCommands+0x198>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	1d39      	adds	r1, r7, #4
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7fe fc78 	bl	80077b6 <xQueueReceive>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f47f af3d 	bne.w	8008d48 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8008ece:	bf00      	nop
 8008ed0:	bf00      	nop
 8008ed2:	3720      	adds	r7, #32
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	20000bd4 	.word	0x20000bd4

08008edc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ee2:	e009      	b.n	8008ef8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8008f20 <prvSwitchTimerLists+0x44>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8008eee:	f04f 31ff 	mov.w	r1, #4294967295
 8008ef2:	6838      	ldr	r0, [r7, #0]
 8008ef4:	f7ff fe14 	bl	8008b20 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ef8:	4b09      	ldr	r3, [pc, #36]	@ (8008f20 <prvSwitchTimerLists+0x44>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1f0      	bne.n	8008ee4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8008f02:	4b07      	ldr	r3, [pc, #28]	@ (8008f20 <prvSwitchTimerLists+0x44>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8008f08:	4b06      	ldr	r3, [pc, #24]	@ (8008f24 <prvSwitchTimerLists+0x48>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a04      	ldr	r2, [pc, #16]	@ (8008f20 <prvSwitchTimerLists+0x44>)
 8008f0e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8008f10:	4a04      	ldr	r2, [pc, #16]	@ (8008f24 <prvSwitchTimerLists+0x48>)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6013      	str	r3, [r2, #0]
    }
 8008f16:	bf00      	nop
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	20000bcc 	.word	0x20000bcc
 8008f24:	20000bd0 	.word	0x20000bd0

08008f28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8008f2e:	f000 f88d 	bl	800904c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8008f32:	4b15      	ldr	r3, [pc, #84]	@ (8008f88 <prvCheckForValidListAndQueue+0x60>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d120      	bne.n	8008f7c <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8008f3a:	4814      	ldr	r0, [pc, #80]	@ (8008f8c <prvCheckForValidListAndQueue+0x64>)
 8008f3c:	f7fe fac6 	bl	80074cc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8008f40:	4813      	ldr	r0, [pc, #76]	@ (8008f90 <prvCheckForValidListAndQueue+0x68>)
 8008f42:	f7fe fac3 	bl	80074cc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8008f46:	4b13      	ldr	r3, [pc, #76]	@ (8008f94 <prvCheckForValidListAndQueue+0x6c>)
 8008f48:	4a10      	ldr	r2, [pc, #64]	@ (8008f8c <prvCheckForValidListAndQueue+0x64>)
 8008f4a:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8008f4c:	4b12      	ldr	r3, [pc, #72]	@ (8008f98 <prvCheckForValidListAndQueue+0x70>)
 8008f4e:	4a10      	ldr	r2, [pc, #64]	@ (8008f90 <prvCheckForValidListAndQueue+0x68>)
 8008f50:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008f52:	2300      	movs	r3, #0
 8008f54:	9300      	str	r3, [sp, #0]
 8008f56:	4b11      	ldr	r3, [pc, #68]	@ (8008f9c <prvCheckForValidListAndQueue+0x74>)
 8008f58:	4a11      	ldr	r2, [pc, #68]	@ (8008fa0 <prvCheckForValidListAndQueue+0x78>)
 8008f5a:	2110      	movs	r1, #16
 8008f5c:	200a      	movs	r0, #10
 8008f5e:	f7fe fbbe 	bl	80076de <xQueueGenericCreateStatic>
 8008f62:	4603      	mov	r3, r0
 8008f64:	4a08      	ldr	r2, [pc, #32]	@ (8008f88 <prvCheckForValidListAndQueue+0x60>)
 8008f66:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8008f68:	4b07      	ldr	r3, [pc, #28]	@ (8008f88 <prvCheckForValidListAndQueue+0x60>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d005      	beq.n	8008f7c <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008f70:	4b05      	ldr	r3, [pc, #20]	@ (8008f88 <prvCheckForValidListAndQueue+0x60>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	490b      	ldr	r1, [pc, #44]	@ (8008fa4 <prvCheckForValidListAndQueue+0x7c>)
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7fe fd68 	bl	8007a4c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008f7c:	f000 f878 	bl	8009070 <vPortExitCritical>
    }
 8008f80:	bf00      	nop
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	20000bd4 	.word	0x20000bd4
 8008f8c:	20000ba4 	.word	0x20000ba4
 8008f90:	20000bb8 	.word	0x20000bb8
 8008f94:	20000bcc 	.word	0x20000bcc
 8008f98:	20000bd0 	.word	0x20000bd0
 8008f9c:	20000c80 	.word	0x20000c80
 8008fa0:	20000be0 	.word	0x20000be0
 8008fa4:	08009f30 	.word	0x08009f30

08008fa8 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8008fa8:	b480      	push	{r7}
 8008faa:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008fac:	4b0b      	ldr	r3, [pc, #44]	@ (8008fdc <vPortSetupTimerInterrupt+0x34>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8008fe0 <vPortSetupTimerInterrupt+0x38>)
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8008fe4 <vPortSetupTimerInterrupt+0x3c>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8008fe8 <vPortSetupTimerInterrupt+0x40>)
 8008fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc2:	099b      	lsrs	r3, r3, #6
 8008fc4:	4a09      	ldr	r2, [pc, #36]	@ (8008fec <vPortSetupTimerInterrupt+0x44>)
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8008fca:	4b04      	ldr	r3, [pc, #16]	@ (8008fdc <vPortSetupTimerInterrupt+0x34>)
 8008fcc:	2207      	movs	r2, #7
 8008fce:	601a      	str	r2, [r3, #0]
}
 8008fd0:	bf00      	nop
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	e000e010 	.word	0xe000e010
 8008fe0:	e000e018 	.word	0xe000e018
 8008fe4:	20000018 	.word	0x20000018
 8008fe8:	10624dd3 	.word	0x10624dd3
 8008fec:	e000e014 	.word	0xe000e014

08008ff0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 8008ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8009024 <prvTaskExitError+0x34>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009002:	d003      	beq.n	800900c <prvTaskExitError+0x1c>
 8009004:	f000 f9b8 	bl	8009378 <ulSetInterruptMask>
 8009008:	bf00      	nop
 800900a:	e7fd      	b.n	8009008 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800900c:	f000 f9b4 	bl	8009378 <ulSetInterruptMask>

    while( ulDummy == 0 )
 8009010:	bf00      	nop
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d0fc      	beq.n	8009012 <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 8009018:	bf00      	nop
 800901a:	bf00      	nop
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	20000024 	.word	0x20000024

08009028 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8009028:	b480      	push	{r7}
 800902a:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800902c:	4b06      	ldr	r3, [pc, #24]	@ (8009048 <vPortYield+0x20>)
 800902e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009032:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8009034:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8009038:	f3bf 8f6f 	isb	sy
}
 800903c:	bf00      	nop
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	e000ed04 	.word	0xe000ed04

0800904c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800904c:	b580      	push	{r7, lr}
 800904e:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8009050:	f000 f992 	bl	8009378 <ulSetInterruptMask>
    ulCriticalNesting++;
 8009054:	4b05      	ldr	r3, [pc, #20]	@ (800906c <vPortEnterCritical+0x20>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	3301      	adds	r3, #1
 800905a:	4a04      	ldr	r2, [pc, #16]	@ (800906c <vPortEnterCritical+0x20>)
 800905c:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800905e:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8009062:	f3bf 8f6f 	isb	sy
}
 8009066:	bf00      	nop
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	20000024 	.word	0x20000024

08009070 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8009070:	b580      	push	{r7, lr}
 8009072:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 8009074:	4b0a      	ldr	r3, [pc, #40]	@ (80090a0 <vPortExitCritical+0x30>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d103      	bne.n	8009084 <vPortExitCritical+0x14>
 800907c:	f000 f97c 	bl	8009378 <ulSetInterruptMask>
 8009080:	bf00      	nop
 8009082:	e7fd      	b.n	8009080 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 8009084:	4b06      	ldr	r3, [pc, #24]	@ (80090a0 <vPortExitCritical+0x30>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	3b01      	subs	r3, #1
 800908a:	4a05      	ldr	r2, [pc, #20]	@ (80090a0 <vPortExitCritical+0x30>)
 800908c:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800908e:	4b04      	ldr	r3, [pc, #16]	@ (80090a0 <vPortExitCritical+0x30>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d102      	bne.n	800909c <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 8009096:	2000      	movs	r0, #0
 8009098:	f000 f97b 	bl	8009392 <vClearInterruptMask>
    }
}
 800909c:	bf00      	nop
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	20000024 	.word	0x20000024

080090a4 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80090aa:	f000 f965 	bl	8009378 <ulSetInterruptMask>
 80090ae:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80090b0:	f7ff f87e 	bl	80081b0 <xTaskIncrementTick>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d003      	beq.n	80090c2 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80090ba:	4b05      	ldr	r3, [pc, #20]	@ (80090d0 <xPortSysTickHandler+0x2c>)
 80090bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090c0:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f965 	bl	8009392 <vClearInterruptMask>
}
 80090c8:	bf00      	nop
 80090ca:	3708      	adds	r7, #8
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	e000ed04 	.word	0xe000ed04

080090d4 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	3b02      	subs	r3, #2
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 80090ea:	7afb      	ldrb	r3, [r7, #11]
 80090ec:	2b66      	cmp	r3, #102	@ 0x66
 80090ee:	d102      	bne.n	80090f6 <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 80090f0:	f000 f90e 	bl	8009310 <vRestoreContextOfFirstTask>
            break;
 80090f4:	e003      	b.n	80090fe <vPortSVCHandler_C+0x2a>
                break;
        #endif /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 1 ) */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 80090f6:	f000 f93f 	bl	8009378 <ulSetInterruptMask>
 80090fa:	bf00      	nop
 80090fc:	e7fd      	b.n	80090fa <vPortSVCHandler_C+0x26>
    }
}
 80090fe:	bf00      	nop
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
	...

08009108 <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	607a      	str	r2, [r7, #4]
 8009114:	603b      	str	r3, [r7, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	3b04      	subs	r3, #4
 800911a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009122:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	3b04      	subs	r3, #4
 8009128:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	3b04      	subs	r3, #4
 8009134:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
 8009136:	4a38      	ldr	r2, [pc, #224]	@ (8009218 <pxPortInitialiseStack+0x110>)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	3b04      	subs	r3, #4
 8009140:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 8009148:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	3b04      	subs	r3, #4
 800914e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8009156:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	3b04      	subs	r3, #4
 800915c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 8009164:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	3b04      	subs	r3, #4
 800916a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8009172:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	3b04      	subs	r3, #4
 8009178:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	3b04      	subs	r3, #4
 8009184:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 800918c:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	3b04      	subs	r3, #4
 8009192:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800919a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	3b04      	subs	r3, #4
 80091a0:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 80091a8:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	3b04      	subs	r3, #4
 80091ae:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 80091b6:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	3b04      	subs	r3, #4
 80091bc:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 80091c4:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	3b04      	subs	r3, #4
 80091ca:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 80091d2:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	3b04      	subs	r3, #4
 80091d8:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 80091e0:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	3b04      	subs	r3, #4
 80091e6:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 80091ee:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	3b04      	subs	r3, #4
 80091f4:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 80091fc:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	3b04      	subs	r3, #4
 8009202:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	601a      	str	r2, [r3, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
 800920a:	68fb      	ldr	r3, [r7, #12]
    }
 800920c:	4618      	mov	r0, r3
 800920e:	3714      	adds	r7, #20
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr
 8009218:	08008ff1 	.word	0x08008ff1

0800921c <xPortStartScheduler>:

#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8009222:	2300      	movs	r3, #0
 8009224:	60bb      	str	r3, [r7, #8]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = portNVIC_SHPR2_REG;
 8009226:	4b35      	ldr	r3, [pc, #212]	@ (80092fc <xPortStartScheduler+0xe0>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	60fb      	str	r3, [r7, #12]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        portNVIC_SHPR2_REG = 0xFF000000;
 800922c:	4b33      	ldr	r3, [pc, #204]	@ (80092fc <xPortStartScheduler+0xe0>)
 800922e:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8009232:	601a      	str	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 8009234:	4b31      	ldr	r3, [pc, #196]	@ (80092fc <xPortStartScheduler+0xe0>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	0e1b      	lsrs	r3, r3, #24
 800923a:	b2db      	uxtb	r3, r3
 800923c:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800923e:	79fb      	ldrb	r3, [r7, #7]
 8009240:	b2db      	uxtb	r3, r3
 8009242:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009246:	b2da      	uxtb	r2, r3
 8009248:	4b2d      	ldr	r3, [pc, #180]	@ (8009300 <xPortStartScheduler+0xe4>)
 800924a:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800924c:	4b2c      	ldr	r3, [pc, #176]	@ (8009300 <xPortStartScheduler+0xe4>)
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d103      	bne.n	800925c <xPortStartScheduler+0x40>
 8009254:	f000 f890 	bl	8009378 <ulSetInterruptMask>
 8009258:	bf00      	nop
 800925a:	e7fd      	b.n	8009258 <xPortStartScheduler+0x3c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800925c:	79fb      	ldrb	r3, [r7, #7]
 800925e:	b2db      	uxtb	r3, r3
 8009260:	43db      	mvns	r3, r3
 8009262:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00b      	beq.n	8009282 <xPortStartScheduler+0x66>
 800926a:	f000 f885 	bl	8009378 <ulSetInterruptMask>
 800926e:	bf00      	nop
 8009270:	e7fd      	b.n	800926e <xPortStartScheduler+0x52>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	3301      	adds	r3, #1
 8009276:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009278:	79fb      	ldrb	r3, [r7, #7]
 800927a:	b2db      	uxtb	r3, r3
 800927c:	005b      	lsls	r3, r3, #1
 800927e:	b2db      	uxtb	r3, r3
 8009280:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009282:	79fb      	ldrb	r3, [r7, #7]
 8009284:	b2db      	uxtb	r3, r3
 8009286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800928a:	2b80      	cmp	r3, #128	@ 0x80
 800928c:	d0f1      	beq.n	8009272 <xPortStartScheduler+0x56>
        }

        if( ulImplementedPrioBits == 8 )
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	2b08      	cmp	r3, #8
 8009292:	d103      	bne.n	800929c <xPortStartScheduler+0x80>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8009294:	4b1b      	ldr	r3, [pc, #108]	@ (8009304 <xPortStartScheduler+0xe8>)
 8009296:	2200      	movs	r2, #0
 8009298:	601a      	str	r2, [r3, #0]
 800929a:	e004      	b.n	80092a6 <xPortStartScheduler+0x8a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	f1c3 0307 	rsb	r3, r3, #7
 80092a2:	4a18      	ldr	r2, [pc, #96]	@ (8009304 <xPortStartScheduler+0xe8>)
 80092a4:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80092a6:	4b17      	ldr	r3, [pc, #92]	@ (8009304 <xPortStartScheduler+0xe8>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	021b      	lsls	r3, r3, #8
 80092ac:	4a15      	ldr	r2, [pc, #84]	@ (8009304 <xPortStartScheduler+0xe8>)
 80092ae:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80092b0:	4b14      	ldr	r3, [pc, #80]	@ (8009304 <xPortStartScheduler+0xe8>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80092b8:	4a12      	ldr	r2, [pc, #72]	@ (8009304 <xPortStartScheduler+0xe8>)
 80092ba:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        portNVIC_SHPR2_REG = ulOriginalPriority;
 80092bc:	4a0f      	ldr	r2, [pc, #60]	@ (80092fc <xPortStartScheduler+0xe0>)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6013      	str	r3, [r2, #0]
    }
    #endif /* #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) ) */

    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80092c2:	4b11      	ldr	r3, [pc, #68]	@ (8009308 <xPortStartScheduler+0xec>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a10      	ldr	r2, [pc, #64]	@ (8009308 <xPortStartScheduler+0xec>)
 80092c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092cc:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80092ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009308 <xPortStartScheduler+0xec>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a0d      	ldr	r2, [pc, #52]	@ (8009308 <xPortStartScheduler+0xec>)
 80092d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092d8:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80092da:	f7ff fe65 	bl	8008fa8 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 80092de:	4b0b      	ldr	r3, [pc, #44]	@ (800930c <xPortStartScheduler+0xf0>)
 80092e0:	2200      	movs	r2, #0
 80092e2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif

    /* Start the first task. */
    vStartFirstTask();
 80092e4:	f000 f834 	bl	8009350 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 80092e8:	f7ff f872 	bl	80083d0 <vTaskSwitchContext>
    prvTaskExitError();
 80092ec:	f7ff fe80 	bl	8008ff0 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	e000ed1c 	.word	0xe000ed1c
 8009300:	20000cd0 	.word	0x20000cd0
 8009304:	20000cd4 	.word	0x20000cd4
 8009308:	e000ed20 	.word	0xe000ed20
 800930c:	20000024 	.word	0x20000024

08009310 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8009310:	4a0b      	ldr	r2, [pc, #44]	@ (8009340 <pxCurrentTCBConst2>)
 8009312:	6811      	ldr	r1, [r2, #0]
 8009314:	6808      	ldr	r0, [r1, #0]
 8009316:	c806      	ldmia	r0!, {r1, r2}
 8009318:	f381 880b 	msr	PSPLIM, r1
 800931c:	2102      	movs	r1, #2
 800931e:	f381 8814 	msr	CONTROL, r1
 8009322:	3020      	adds	r0, #32
 8009324:	f380 8809 	msr	PSP, r0
 8009328:	f3bf 8f6f 	isb	sy
 800932c:	f04f 0000 	mov.w	r0, #0
 8009330:	f380 8811 	msr	BASEPRI, r0
 8009334:	4710      	bx	r2
 8009336:	bf00      	nop
 8009338:	f3af 8000 	nop.w
 800933c:	f3af 8000 	nop.w

08009340 <pxCurrentTCBConst2>:
 8009340:	200006a4 	.word	0x200006a4
            "   bx   r2                                         \n" /* Finally, branch to EXC_RETURN. */
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
    }
 8009344:	bf00      	nop
 8009346:	bf00      	nop
	...

08009350 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8009350:	4807      	ldr	r0, [pc, #28]	@ (8009370 <xVTORConst>)
 8009352:	6800      	ldr	r0, [r0, #0]
 8009354:	6800      	ldr	r0, [r0, #0]
 8009356:	f380 8808 	msr	MSP, r0
 800935a:	b662      	cpsie	i
 800935c:	b661      	cpsie	f
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	f3bf 8f6f 	isb	sy
 8009366:	df66      	svc	102	@ 0x66
 8009368:	bf00      	nop
 800936a:	bf00      	nop
 800936c:	f3af 8000 	nop.w

08009370 <xVTORConst>:
 8009370:	e000ed08 	.word	0xe000ed08
        "                                                   \n"
        "   .align 4                                        \n"
        "xVTORConst: .word 0xe000ed08                       \n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 8009374:	bf00      	nop
 8009376:	bf00      	nop

08009378 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8009378:	f3ef 8011 	mrs	r0, BASEPRI
 800937c:	f04f 0150 	mov.w	r1, #80	@ 0x50
 8009380:	f381 8811 	msr	BASEPRI, r1
 8009384:	f3bf 8f4f 	dsb	sy
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800938e:	bf00      	nop
 8009390:	4618      	mov	r0, r3

08009392 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8009392:	f380 8811 	msr	BASEPRI, r0
 8009396:	f3bf 8f4f 	dsb	sy
 800939a:	f3bf 8f6f 	isb	sy
 800939e:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::: "memory"
    );
}
 80093a0:	bf00      	nop
	...

080093b0 <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 80093b0:	f3ef 8009 	mrs	r0, PSP
 80093b4:	f3ef 820b 	mrs	r2, PSPLIM
 80093b8:	4673      	mov	r3, lr
 80093ba:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80093be:	4a10      	ldr	r2, [pc, #64]	@ (8009400 <pxCurrentTCBConst>)
 80093c0:	6811      	ldr	r1, [r2, #0]
 80093c2:	6008      	str	r0, [r1, #0]
 80093c4:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80093c8:	f380 8811 	msr	BASEPRI, r0
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	f3bf 8f6f 	isb	sy
 80093d4:	f7fe fffc 	bl	80083d0 <vTaskSwitchContext>
 80093d8:	f04f 0000 	mov.w	r0, #0
 80093dc:	f380 8811 	msr	BASEPRI, r0
 80093e0:	4a07      	ldr	r2, [pc, #28]	@ (8009400 <pxCurrentTCBConst>)
 80093e2:	6811      	ldr	r1, [r2, #0]
 80093e4:	6808      	ldr	r0, [r1, #0]
 80093e6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80093ea:	f382 880b 	msr	PSPLIM, r2
 80093ee:	f380 8809 	msr	PSP, r0
 80093f2:	4718      	bx	r3
 80093f4:	f3af 8000 	nop.w
 80093f8:	f3af 8000 	nop.w
 80093fc:	f3af 8000 	nop.w

08009400 <pxCurrentTCBConst>:
 8009400:	200006a4 	.word	0x200006a4
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst: .word pxCurrentTCB              \n"
            ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
        );
    }
 8009404:	bf00      	nop
 8009406:	bf00      	nop
	...

08009410 <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8009410:	f01e 0f04 	tst.w	lr, #4
 8009414:	bf0c      	ite	eq
 8009416:	f3ef 8008 	mrseq	r0, MSP
 800941a:	f3ef 8009 	mrsne	r0, PSP
 800941e:	4904      	ldr	r1, [pc, #16]	@ (8009430 <svchandler_address_const>)
 8009420:	4708      	bx	r1
 8009422:	bf00      	nop
 8009424:	f3af 8000 	nop.w
 8009428:	f3af 8000 	nop.w
 800942c:	f3af 8000 	nop.w

08009430 <svchandler_address_const>:
 8009430:	080090d5 	.word	0x080090d5
            "   bx r1                                           \n"
            "                                                   \n"
            "   .align 4                                        \n"
            "svchandler_address_const: .word vPortSVCHandler_C  \n"
        );
    }
 8009434:	bf00      	nop
 8009436:	bf00      	nop

08009438 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8009440:	2300      	movs	r3, #0
 8009442:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f003 0307 	and.w	r3, r3, #7
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00e      	beq.n	800946c <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f023 0307 	bic.w	r3, r3, #7
 8009454:	3308      	adds	r3, #8
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	429a      	cmp	r2, r3
 800945a:	d205      	bcs.n	8009468 <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f023 0307 	bic.w	r3, r3, #7
 8009462:	3308      	adds	r3, #8
 8009464:	607b      	str	r3, [r7, #4]
 8009466:	e001      	b.n	800946c <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 8009468:	2300      	movs	r3, #0
 800946a:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 800946c:	f7fe fd94 	bl	8007f98 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8009470:	4b17      	ldr	r3, [pc, #92]	@ (80094d0 <pvPortMalloc+0x98>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d105      	bne.n	8009484 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8009478:	4b16      	ldr	r3, [pc, #88]	@ (80094d4 <pvPortMalloc+0x9c>)
 800947a:	f023 0307 	bic.w	r3, r3, #7
 800947e:	461a      	mov	r2, r3
 8009480:	4b13      	ldr	r3, [pc, #76]	@ (80094d0 <pvPortMalloc+0x98>)
 8009482:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d01b      	beq.n	80094c2 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800948a:	4b13      	ldr	r3, [pc, #76]	@ (80094d8 <pvPortMalloc+0xa0>)
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8009492:	f641 72f7 	movw	r2, #8183	@ 0x1ff7
 8009496:	4293      	cmp	r3, r2
 8009498:	d813      	bhi.n	80094c2 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 800949a:	4b0f      	ldr	r3, [pc, #60]	@ (80094d8 <pvPortMalloc+0xa0>)
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	441a      	add	r2, r3
 80094a2:	4b0d      	ldr	r3, [pc, #52]	@ (80094d8 <pvPortMalloc+0xa0>)
 80094a4:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d90b      	bls.n	80094c2 <pvPortMalloc+0x8a>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 80094aa:	4b09      	ldr	r3, [pc, #36]	@ (80094d0 <pvPortMalloc+0x98>)
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	4b0a      	ldr	r3, [pc, #40]	@ (80094d8 <pvPortMalloc+0xa0>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4413      	add	r3, r2
 80094b4:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 80094b6:	4b08      	ldr	r3, [pc, #32]	@ (80094d8 <pvPortMalloc+0xa0>)
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4413      	add	r3, r2
 80094be:	4a06      	ldr	r2, [pc, #24]	@ (80094d8 <pvPortMalloc+0xa0>)
 80094c0:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80094c2:	f7fe fd77 	bl	8007fb4 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 80094c6:	68fb      	ldr	r3, [r7, #12]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	20002cdc 	.word	0x20002cdc
 80094d4:	20000cdf 	.word	0x20000cdf
 80094d8:	20002cd8 	.word	0x20002cd8

080094dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d003      	beq.n	80094f2 <vPortFree+0x16>
 80094ea:	f7ff ff45 	bl	8009378 <ulSetInterruptMask>
 80094ee:	bf00      	nop
 80094f0:	e7fd      	b.n	80094ee <vPortFree+0x12>
}
 80094f2:	bf00      	nop
 80094f4:	3708      	adds	r7, #8
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
	...

080094fc <sniprintf>:
 80094fc:	b40c      	push	{r2, r3}
 80094fe:	4b19      	ldr	r3, [pc, #100]	@ (8009564 <sniprintf+0x68>)
 8009500:	b530      	push	{r4, r5, lr}
 8009502:	1e0c      	subs	r4, r1, #0
 8009504:	b09d      	sub	sp, #116	@ 0x74
 8009506:	681d      	ldr	r5, [r3, #0]
 8009508:	da08      	bge.n	800951c <sniprintf+0x20>
 800950a:	238b      	movs	r3, #139	@ 0x8b
 800950c:	f04f 30ff 	mov.w	r0, #4294967295
 8009510:	602b      	str	r3, [r5, #0]
 8009512:	b01d      	add	sp, #116	@ 0x74
 8009514:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009518:	b002      	add	sp, #8
 800951a:	4770      	bx	lr
 800951c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009520:	9002      	str	r0, [sp, #8]
 8009522:	9006      	str	r0, [sp, #24]
 8009524:	a902      	add	r1, sp, #8
 8009526:	f8ad 3014 	strh.w	r3, [sp, #20]
 800952a:	f04f 0300 	mov.w	r3, #0
 800952e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009530:	4628      	mov	r0, r5
 8009532:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009534:	bf14      	ite	ne
 8009536:	f104 33ff 	addne.w	r3, r4, #4294967295
 800953a:	4623      	moveq	r3, r4
 800953c:	9304      	str	r3, [sp, #16]
 800953e:	9307      	str	r3, [sp, #28]
 8009540:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009544:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009548:	ab21      	add	r3, sp, #132	@ 0x84
 800954a:	9301      	str	r3, [sp, #4]
 800954c:	f000 f9a2 	bl	8009894 <_svfiprintf_r>
 8009550:	1c43      	adds	r3, r0, #1
 8009552:	bfbc      	itt	lt
 8009554:	238b      	movlt	r3, #139	@ 0x8b
 8009556:	602b      	strlt	r3, [r5, #0]
 8009558:	2c00      	cmp	r4, #0
 800955a:	d0da      	beq.n	8009512 <sniprintf+0x16>
 800955c:	9b02      	ldr	r3, [sp, #8]
 800955e:	2200      	movs	r2, #0
 8009560:	701a      	strb	r2, [r3, #0]
 8009562:	e7d6      	b.n	8009512 <sniprintf+0x16>
 8009564:	20000028 	.word	0x20000028

08009568 <memset>:
 8009568:	4402      	add	r2, r0
 800956a:	4603      	mov	r3, r0
 800956c:	4293      	cmp	r3, r2
 800956e:	d100      	bne.n	8009572 <memset+0xa>
 8009570:	4770      	bx	lr
 8009572:	f803 1b01 	strb.w	r1, [r3], #1
 8009576:	e7f9      	b.n	800956c <memset+0x4>

08009578 <__errno>:
 8009578:	4b01      	ldr	r3, [pc, #4]	@ (8009580 <__errno+0x8>)
 800957a:	6818      	ldr	r0, [r3, #0]
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	20000028 	.word	0x20000028

08009584 <__libc_init_array>:
 8009584:	b570      	push	{r4, r5, r6, lr}
 8009586:	4d0d      	ldr	r5, [pc, #52]	@ (80095bc <__libc_init_array+0x38>)
 8009588:	2600      	movs	r6, #0
 800958a:	4c0d      	ldr	r4, [pc, #52]	@ (80095c0 <__libc_init_array+0x3c>)
 800958c:	1b64      	subs	r4, r4, r5
 800958e:	10a4      	asrs	r4, r4, #2
 8009590:	42a6      	cmp	r6, r4
 8009592:	d109      	bne.n	80095a8 <__libc_init_array+0x24>
 8009594:	4d0b      	ldr	r5, [pc, #44]	@ (80095c4 <__libc_init_array+0x40>)
 8009596:	2600      	movs	r6, #0
 8009598:	4c0b      	ldr	r4, [pc, #44]	@ (80095c8 <__libc_init_array+0x44>)
 800959a:	f000 fc75 	bl	8009e88 <_init>
 800959e:	1b64      	subs	r4, r4, r5
 80095a0:	10a4      	asrs	r4, r4, #2
 80095a2:	42a6      	cmp	r6, r4
 80095a4:	d105      	bne.n	80095b2 <__libc_init_array+0x2e>
 80095a6:	bd70      	pop	{r4, r5, r6, pc}
 80095a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ac:	3601      	adds	r6, #1
 80095ae:	4798      	blx	r3
 80095b0:	e7ee      	b.n	8009590 <__libc_init_array+0xc>
 80095b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80095b6:	3601      	adds	r6, #1
 80095b8:	4798      	blx	r3
 80095ba:	e7f2      	b.n	80095a2 <__libc_init_array+0x1e>
 80095bc:	08009fd0 	.word	0x08009fd0
 80095c0:	08009fd0 	.word	0x08009fd0
 80095c4:	08009fd0 	.word	0x08009fd0
 80095c8:	08009fd4 	.word	0x08009fd4

080095cc <__retarget_lock_acquire_recursive>:
 80095cc:	4770      	bx	lr

080095ce <__retarget_lock_release_recursive>:
 80095ce:	4770      	bx	lr

080095d0 <memcpy>:
 80095d0:	440a      	add	r2, r1
 80095d2:	1e43      	subs	r3, r0, #1
 80095d4:	4291      	cmp	r1, r2
 80095d6:	d100      	bne.n	80095da <memcpy+0xa>
 80095d8:	4770      	bx	lr
 80095da:	b510      	push	{r4, lr}
 80095dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095e0:	4291      	cmp	r1, r2
 80095e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095e6:	d1f9      	bne.n	80095dc <memcpy+0xc>
 80095e8:	bd10      	pop	{r4, pc}
	...

080095ec <_free_r>:
 80095ec:	b538      	push	{r3, r4, r5, lr}
 80095ee:	4605      	mov	r5, r0
 80095f0:	2900      	cmp	r1, #0
 80095f2:	d041      	beq.n	8009678 <_free_r+0x8c>
 80095f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095f8:	1f0c      	subs	r4, r1, #4
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	bfb8      	it	lt
 80095fe:	18e4      	addlt	r4, r4, r3
 8009600:	f000 f8e0 	bl	80097c4 <__malloc_lock>
 8009604:	4a1d      	ldr	r2, [pc, #116]	@ (800967c <_free_r+0x90>)
 8009606:	6813      	ldr	r3, [r2, #0]
 8009608:	b933      	cbnz	r3, 8009618 <_free_r+0x2c>
 800960a:	6063      	str	r3, [r4, #4]
 800960c:	6014      	str	r4, [r2, #0]
 800960e:	4628      	mov	r0, r5
 8009610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009614:	f000 b8dc 	b.w	80097d0 <__malloc_unlock>
 8009618:	42a3      	cmp	r3, r4
 800961a:	d908      	bls.n	800962e <_free_r+0x42>
 800961c:	6820      	ldr	r0, [r4, #0]
 800961e:	1821      	adds	r1, r4, r0
 8009620:	428b      	cmp	r3, r1
 8009622:	bf01      	itttt	eq
 8009624:	6819      	ldreq	r1, [r3, #0]
 8009626:	685b      	ldreq	r3, [r3, #4]
 8009628:	1809      	addeq	r1, r1, r0
 800962a:	6021      	streq	r1, [r4, #0]
 800962c:	e7ed      	b.n	800960a <_free_r+0x1e>
 800962e:	461a      	mov	r2, r3
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	b10b      	cbz	r3, 8009638 <_free_r+0x4c>
 8009634:	42a3      	cmp	r3, r4
 8009636:	d9fa      	bls.n	800962e <_free_r+0x42>
 8009638:	6811      	ldr	r1, [r2, #0]
 800963a:	1850      	adds	r0, r2, r1
 800963c:	42a0      	cmp	r0, r4
 800963e:	d10b      	bne.n	8009658 <_free_r+0x6c>
 8009640:	6820      	ldr	r0, [r4, #0]
 8009642:	4401      	add	r1, r0
 8009644:	1850      	adds	r0, r2, r1
 8009646:	6011      	str	r1, [r2, #0]
 8009648:	4283      	cmp	r3, r0
 800964a:	d1e0      	bne.n	800960e <_free_r+0x22>
 800964c:	6818      	ldr	r0, [r3, #0]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	4408      	add	r0, r1
 8009652:	6053      	str	r3, [r2, #4]
 8009654:	6010      	str	r0, [r2, #0]
 8009656:	e7da      	b.n	800960e <_free_r+0x22>
 8009658:	d902      	bls.n	8009660 <_free_r+0x74>
 800965a:	230c      	movs	r3, #12
 800965c:	602b      	str	r3, [r5, #0]
 800965e:	e7d6      	b.n	800960e <_free_r+0x22>
 8009660:	6820      	ldr	r0, [r4, #0]
 8009662:	1821      	adds	r1, r4, r0
 8009664:	428b      	cmp	r3, r1
 8009666:	bf02      	ittt	eq
 8009668:	6819      	ldreq	r1, [r3, #0]
 800966a:	685b      	ldreq	r3, [r3, #4]
 800966c:	1809      	addeq	r1, r1, r0
 800966e:	6063      	str	r3, [r4, #4]
 8009670:	bf08      	it	eq
 8009672:	6021      	streq	r1, [r4, #0]
 8009674:	6054      	str	r4, [r2, #4]
 8009676:	e7ca      	b.n	800960e <_free_r+0x22>
 8009678:	bd38      	pop	{r3, r4, r5, pc}
 800967a:	bf00      	nop
 800967c:	20002e24 	.word	0x20002e24

08009680 <sbrk_aligned>:
 8009680:	b570      	push	{r4, r5, r6, lr}
 8009682:	4e0f      	ldr	r6, [pc, #60]	@ (80096c0 <sbrk_aligned+0x40>)
 8009684:	460c      	mov	r4, r1
 8009686:	4605      	mov	r5, r0
 8009688:	6831      	ldr	r1, [r6, #0]
 800968a:	b911      	cbnz	r1, 8009692 <sbrk_aligned+0x12>
 800968c:	f000 fba8 	bl	8009de0 <_sbrk_r>
 8009690:	6030      	str	r0, [r6, #0]
 8009692:	4621      	mov	r1, r4
 8009694:	4628      	mov	r0, r5
 8009696:	f000 fba3 	bl	8009de0 <_sbrk_r>
 800969a:	1c43      	adds	r3, r0, #1
 800969c:	d103      	bne.n	80096a6 <sbrk_aligned+0x26>
 800969e:	f04f 34ff 	mov.w	r4, #4294967295
 80096a2:	4620      	mov	r0, r4
 80096a4:	bd70      	pop	{r4, r5, r6, pc}
 80096a6:	1cc4      	adds	r4, r0, #3
 80096a8:	f024 0403 	bic.w	r4, r4, #3
 80096ac:	42a0      	cmp	r0, r4
 80096ae:	d0f8      	beq.n	80096a2 <sbrk_aligned+0x22>
 80096b0:	1a21      	subs	r1, r4, r0
 80096b2:	4628      	mov	r0, r5
 80096b4:	f000 fb94 	bl	8009de0 <_sbrk_r>
 80096b8:	3001      	adds	r0, #1
 80096ba:	d1f2      	bne.n	80096a2 <sbrk_aligned+0x22>
 80096bc:	e7ef      	b.n	800969e <sbrk_aligned+0x1e>
 80096be:	bf00      	nop
 80096c0:	20002e20 	.word	0x20002e20

080096c4 <_malloc_r>:
 80096c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096c8:	1ccd      	adds	r5, r1, #3
 80096ca:	4606      	mov	r6, r0
 80096cc:	f025 0503 	bic.w	r5, r5, #3
 80096d0:	3508      	adds	r5, #8
 80096d2:	2d0c      	cmp	r5, #12
 80096d4:	bf38      	it	cc
 80096d6:	250c      	movcc	r5, #12
 80096d8:	2d00      	cmp	r5, #0
 80096da:	db01      	blt.n	80096e0 <_malloc_r+0x1c>
 80096dc:	42a9      	cmp	r1, r5
 80096de:	d904      	bls.n	80096ea <_malloc_r+0x26>
 80096e0:	230c      	movs	r3, #12
 80096e2:	6033      	str	r3, [r6, #0]
 80096e4:	2000      	movs	r0, #0
 80096e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80097c0 <_malloc_r+0xfc>
 80096ee:	f000 f869 	bl	80097c4 <__malloc_lock>
 80096f2:	f8d8 3000 	ldr.w	r3, [r8]
 80096f6:	461c      	mov	r4, r3
 80096f8:	bb44      	cbnz	r4, 800974c <_malloc_r+0x88>
 80096fa:	4629      	mov	r1, r5
 80096fc:	4630      	mov	r0, r6
 80096fe:	f7ff ffbf 	bl	8009680 <sbrk_aligned>
 8009702:	1c43      	adds	r3, r0, #1
 8009704:	4604      	mov	r4, r0
 8009706:	d158      	bne.n	80097ba <_malloc_r+0xf6>
 8009708:	f8d8 4000 	ldr.w	r4, [r8]
 800970c:	4627      	mov	r7, r4
 800970e:	2f00      	cmp	r7, #0
 8009710:	d143      	bne.n	800979a <_malloc_r+0xd6>
 8009712:	2c00      	cmp	r4, #0
 8009714:	d04b      	beq.n	80097ae <_malloc_r+0xea>
 8009716:	6823      	ldr	r3, [r4, #0]
 8009718:	4639      	mov	r1, r7
 800971a:	4630      	mov	r0, r6
 800971c:	eb04 0903 	add.w	r9, r4, r3
 8009720:	f000 fb5e 	bl	8009de0 <_sbrk_r>
 8009724:	4581      	cmp	r9, r0
 8009726:	d142      	bne.n	80097ae <_malloc_r+0xea>
 8009728:	6821      	ldr	r1, [r4, #0]
 800972a:	4630      	mov	r0, r6
 800972c:	1a6d      	subs	r5, r5, r1
 800972e:	4629      	mov	r1, r5
 8009730:	f7ff ffa6 	bl	8009680 <sbrk_aligned>
 8009734:	3001      	adds	r0, #1
 8009736:	d03a      	beq.n	80097ae <_malloc_r+0xea>
 8009738:	6823      	ldr	r3, [r4, #0]
 800973a:	442b      	add	r3, r5
 800973c:	6023      	str	r3, [r4, #0]
 800973e:	f8d8 3000 	ldr.w	r3, [r8]
 8009742:	685a      	ldr	r2, [r3, #4]
 8009744:	bb62      	cbnz	r2, 80097a0 <_malloc_r+0xdc>
 8009746:	f8c8 7000 	str.w	r7, [r8]
 800974a:	e00f      	b.n	800976c <_malloc_r+0xa8>
 800974c:	6822      	ldr	r2, [r4, #0]
 800974e:	1b52      	subs	r2, r2, r5
 8009750:	d420      	bmi.n	8009794 <_malloc_r+0xd0>
 8009752:	2a0b      	cmp	r2, #11
 8009754:	d917      	bls.n	8009786 <_malloc_r+0xc2>
 8009756:	1961      	adds	r1, r4, r5
 8009758:	42a3      	cmp	r3, r4
 800975a:	6025      	str	r5, [r4, #0]
 800975c:	bf18      	it	ne
 800975e:	6059      	strne	r1, [r3, #4]
 8009760:	6863      	ldr	r3, [r4, #4]
 8009762:	bf08      	it	eq
 8009764:	f8c8 1000 	streq.w	r1, [r8]
 8009768:	5162      	str	r2, [r4, r5]
 800976a:	604b      	str	r3, [r1, #4]
 800976c:	4630      	mov	r0, r6
 800976e:	f000 f82f 	bl	80097d0 <__malloc_unlock>
 8009772:	f104 000b 	add.w	r0, r4, #11
 8009776:	1d23      	adds	r3, r4, #4
 8009778:	f020 0007 	bic.w	r0, r0, #7
 800977c:	1ac2      	subs	r2, r0, r3
 800977e:	bf1c      	itt	ne
 8009780:	1a1b      	subne	r3, r3, r0
 8009782:	50a3      	strne	r3, [r4, r2]
 8009784:	e7af      	b.n	80096e6 <_malloc_r+0x22>
 8009786:	6862      	ldr	r2, [r4, #4]
 8009788:	42a3      	cmp	r3, r4
 800978a:	bf0c      	ite	eq
 800978c:	f8c8 2000 	streq.w	r2, [r8]
 8009790:	605a      	strne	r2, [r3, #4]
 8009792:	e7eb      	b.n	800976c <_malloc_r+0xa8>
 8009794:	4623      	mov	r3, r4
 8009796:	6864      	ldr	r4, [r4, #4]
 8009798:	e7ae      	b.n	80096f8 <_malloc_r+0x34>
 800979a:	463c      	mov	r4, r7
 800979c:	687f      	ldr	r7, [r7, #4]
 800979e:	e7b6      	b.n	800970e <_malloc_r+0x4a>
 80097a0:	461a      	mov	r2, r3
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	42a3      	cmp	r3, r4
 80097a6:	d1fb      	bne.n	80097a0 <_malloc_r+0xdc>
 80097a8:	2300      	movs	r3, #0
 80097aa:	6053      	str	r3, [r2, #4]
 80097ac:	e7de      	b.n	800976c <_malloc_r+0xa8>
 80097ae:	230c      	movs	r3, #12
 80097b0:	4630      	mov	r0, r6
 80097b2:	6033      	str	r3, [r6, #0]
 80097b4:	f000 f80c 	bl	80097d0 <__malloc_unlock>
 80097b8:	e794      	b.n	80096e4 <_malloc_r+0x20>
 80097ba:	6005      	str	r5, [r0, #0]
 80097bc:	e7d6      	b.n	800976c <_malloc_r+0xa8>
 80097be:	bf00      	nop
 80097c0:	20002e24 	.word	0x20002e24

080097c4 <__malloc_lock>:
 80097c4:	4801      	ldr	r0, [pc, #4]	@ (80097cc <__malloc_lock+0x8>)
 80097c6:	f7ff bf01 	b.w	80095cc <__retarget_lock_acquire_recursive>
 80097ca:	bf00      	nop
 80097cc:	20002e1c 	.word	0x20002e1c

080097d0 <__malloc_unlock>:
 80097d0:	4801      	ldr	r0, [pc, #4]	@ (80097d8 <__malloc_unlock+0x8>)
 80097d2:	f7ff befc 	b.w	80095ce <__retarget_lock_release_recursive>
 80097d6:	bf00      	nop
 80097d8:	20002e1c 	.word	0x20002e1c

080097dc <__ssputs_r>:
 80097dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097e0:	461f      	mov	r7, r3
 80097e2:	688e      	ldr	r6, [r1, #8]
 80097e4:	4682      	mov	sl, r0
 80097e6:	460c      	mov	r4, r1
 80097e8:	42be      	cmp	r6, r7
 80097ea:	4690      	mov	r8, r2
 80097ec:	680b      	ldr	r3, [r1, #0]
 80097ee:	d82d      	bhi.n	800984c <__ssputs_r+0x70>
 80097f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80097f8:	d026      	beq.n	8009848 <__ssputs_r+0x6c>
 80097fa:	6965      	ldr	r5, [r4, #20]
 80097fc:	6909      	ldr	r1, [r1, #16]
 80097fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009802:	eba3 0901 	sub.w	r9, r3, r1
 8009806:	1c7b      	adds	r3, r7, #1
 8009808:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800980c:	444b      	add	r3, r9
 800980e:	106d      	asrs	r5, r5, #1
 8009810:	429d      	cmp	r5, r3
 8009812:	bf38      	it	cc
 8009814:	461d      	movcc	r5, r3
 8009816:	0553      	lsls	r3, r2, #21
 8009818:	d527      	bpl.n	800986a <__ssputs_r+0x8e>
 800981a:	4629      	mov	r1, r5
 800981c:	f7ff ff52 	bl	80096c4 <_malloc_r>
 8009820:	4606      	mov	r6, r0
 8009822:	b360      	cbz	r0, 800987e <__ssputs_r+0xa2>
 8009824:	464a      	mov	r2, r9
 8009826:	6921      	ldr	r1, [r4, #16]
 8009828:	f7ff fed2 	bl	80095d0 <memcpy>
 800982c:	89a3      	ldrh	r3, [r4, #12]
 800982e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009832:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009836:	81a3      	strh	r3, [r4, #12]
 8009838:	6126      	str	r6, [r4, #16]
 800983a:	444e      	add	r6, r9
 800983c:	6165      	str	r5, [r4, #20]
 800983e:	eba5 0509 	sub.w	r5, r5, r9
 8009842:	6026      	str	r6, [r4, #0]
 8009844:	463e      	mov	r6, r7
 8009846:	60a5      	str	r5, [r4, #8]
 8009848:	42be      	cmp	r6, r7
 800984a:	d900      	bls.n	800984e <__ssputs_r+0x72>
 800984c:	463e      	mov	r6, r7
 800984e:	4632      	mov	r2, r6
 8009850:	4641      	mov	r1, r8
 8009852:	6820      	ldr	r0, [r4, #0]
 8009854:	f000 faaa 	bl	8009dac <memmove>
 8009858:	68a3      	ldr	r3, [r4, #8]
 800985a:	2000      	movs	r0, #0
 800985c:	1b9b      	subs	r3, r3, r6
 800985e:	60a3      	str	r3, [r4, #8]
 8009860:	6823      	ldr	r3, [r4, #0]
 8009862:	4433      	add	r3, r6
 8009864:	6023      	str	r3, [r4, #0]
 8009866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800986a:	462a      	mov	r2, r5
 800986c:	f000 fad6 	bl	8009e1c <_realloc_r>
 8009870:	4606      	mov	r6, r0
 8009872:	2800      	cmp	r0, #0
 8009874:	d1e0      	bne.n	8009838 <__ssputs_r+0x5c>
 8009876:	6921      	ldr	r1, [r4, #16]
 8009878:	4650      	mov	r0, sl
 800987a:	f7ff feb7 	bl	80095ec <_free_r>
 800987e:	230c      	movs	r3, #12
 8009880:	f04f 30ff 	mov.w	r0, #4294967295
 8009884:	f8ca 3000 	str.w	r3, [sl]
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800988e:	81a3      	strh	r3, [r4, #12]
 8009890:	e7e9      	b.n	8009866 <__ssputs_r+0x8a>
	...

08009894 <_svfiprintf_r>:
 8009894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009898:	4698      	mov	r8, r3
 800989a:	898b      	ldrh	r3, [r1, #12]
 800989c:	b09d      	sub	sp, #116	@ 0x74
 800989e:	4607      	mov	r7, r0
 80098a0:	061b      	lsls	r3, r3, #24
 80098a2:	460d      	mov	r5, r1
 80098a4:	4614      	mov	r4, r2
 80098a6:	d510      	bpl.n	80098ca <_svfiprintf_r+0x36>
 80098a8:	690b      	ldr	r3, [r1, #16]
 80098aa:	b973      	cbnz	r3, 80098ca <_svfiprintf_r+0x36>
 80098ac:	2140      	movs	r1, #64	@ 0x40
 80098ae:	f7ff ff09 	bl	80096c4 <_malloc_r>
 80098b2:	6028      	str	r0, [r5, #0]
 80098b4:	6128      	str	r0, [r5, #16]
 80098b6:	b930      	cbnz	r0, 80098c6 <_svfiprintf_r+0x32>
 80098b8:	230c      	movs	r3, #12
 80098ba:	603b      	str	r3, [r7, #0]
 80098bc:	f04f 30ff 	mov.w	r0, #4294967295
 80098c0:	b01d      	add	sp, #116	@ 0x74
 80098c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098c6:	2340      	movs	r3, #64	@ 0x40
 80098c8:	616b      	str	r3, [r5, #20]
 80098ca:	2300      	movs	r3, #0
 80098cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80098d0:	f04f 0901 	mov.w	r9, #1
 80098d4:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8009a78 <_svfiprintf_r+0x1e4>
 80098d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80098da:	2320      	movs	r3, #32
 80098dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80098e0:	2330      	movs	r3, #48	@ 0x30
 80098e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80098e6:	4623      	mov	r3, r4
 80098e8:	469a      	mov	sl, r3
 80098ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098ee:	b10a      	cbz	r2, 80098f4 <_svfiprintf_r+0x60>
 80098f0:	2a25      	cmp	r2, #37	@ 0x25
 80098f2:	d1f9      	bne.n	80098e8 <_svfiprintf_r+0x54>
 80098f4:	ebba 0b04 	subs.w	fp, sl, r4
 80098f8:	d00b      	beq.n	8009912 <_svfiprintf_r+0x7e>
 80098fa:	465b      	mov	r3, fp
 80098fc:	4622      	mov	r2, r4
 80098fe:	4629      	mov	r1, r5
 8009900:	4638      	mov	r0, r7
 8009902:	f7ff ff6b 	bl	80097dc <__ssputs_r>
 8009906:	3001      	adds	r0, #1
 8009908:	f000 80a7 	beq.w	8009a5a <_svfiprintf_r+0x1c6>
 800990c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800990e:	445a      	add	r2, fp
 8009910:	9209      	str	r2, [sp, #36]	@ 0x24
 8009912:	f89a 3000 	ldrb.w	r3, [sl]
 8009916:	2b00      	cmp	r3, #0
 8009918:	f000 809f 	beq.w	8009a5a <_svfiprintf_r+0x1c6>
 800991c:	2300      	movs	r3, #0
 800991e:	f04f 32ff 	mov.w	r2, #4294967295
 8009922:	f10a 0a01 	add.w	sl, sl, #1
 8009926:	9304      	str	r3, [sp, #16]
 8009928:	9307      	str	r3, [sp, #28]
 800992a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800992e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009930:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009934:	4654      	mov	r4, sl
 8009936:	2205      	movs	r2, #5
 8009938:	484f      	ldr	r0, [pc, #316]	@ (8009a78 <_svfiprintf_r+0x1e4>)
 800993a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800993e:	f000 fa5f 	bl	8009e00 <memchr>
 8009942:	9a04      	ldr	r2, [sp, #16]
 8009944:	b9d8      	cbnz	r0, 800997e <_svfiprintf_r+0xea>
 8009946:	06d0      	lsls	r0, r2, #27
 8009948:	bf44      	itt	mi
 800994a:	2320      	movmi	r3, #32
 800994c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009950:	0711      	lsls	r1, r2, #28
 8009952:	bf44      	itt	mi
 8009954:	232b      	movmi	r3, #43	@ 0x2b
 8009956:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800995a:	f89a 3000 	ldrb.w	r3, [sl]
 800995e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009960:	d015      	beq.n	800998e <_svfiprintf_r+0xfa>
 8009962:	9a07      	ldr	r2, [sp, #28]
 8009964:	4654      	mov	r4, sl
 8009966:	2000      	movs	r0, #0
 8009968:	f04f 0c0a 	mov.w	ip, #10
 800996c:	4621      	mov	r1, r4
 800996e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009972:	3b30      	subs	r3, #48	@ 0x30
 8009974:	2b09      	cmp	r3, #9
 8009976:	d94b      	bls.n	8009a10 <_svfiprintf_r+0x17c>
 8009978:	b1b0      	cbz	r0, 80099a8 <_svfiprintf_r+0x114>
 800997a:	9207      	str	r2, [sp, #28]
 800997c:	e014      	b.n	80099a8 <_svfiprintf_r+0x114>
 800997e:	eba0 0308 	sub.w	r3, r0, r8
 8009982:	46a2      	mov	sl, r4
 8009984:	fa09 f303 	lsl.w	r3, r9, r3
 8009988:	4313      	orrs	r3, r2
 800998a:	9304      	str	r3, [sp, #16]
 800998c:	e7d2      	b.n	8009934 <_svfiprintf_r+0xa0>
 800998e:	9b03      	ldr	r3, [sp, #12]
 8009990:	1d19      	adds	r1, r3, #4
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	9103      	str	r1, [sp, #12]
 8009998:	bfbb      	ittet	lt
 800999a:	425b      	neglt	r3, r3
 800999c:	f042 0202 	orrlt.w	r2, r2, #2
 80099a0:	9307      	strge	r3, [sp, #28]
 80099a2:	9307      	strlt	r3, [sp, #28]
 80099a4:	bfb8      	it	lt
 80099a6:	9204      	strlt	r2, [sp, #16]
 80099a8:	7823      	ldrb	r3, [r4, #0]
 80099aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80099ac:	d10a      	bne.n	80099c4 <_svfiprintf_r+0x130>
 80099ae:	7863      	ldrb	r3, [r4, #1]
 80099b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80099b2:	d132      	bne.n	8009a1a <_svfiprintf_r+0x186>
 80099b4:	9b03      	ldr	r3, [sp, #12]
 80099b6:	3402      	adds	r4, #2
 80099b8:	1d1a      	adds	r2, r3, #4
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099c0:	9203      	str	r2, [sp, #12]
 80099c2:	9305      	str	r3, [sp, #20]
 80099c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009a88 <_svfiprintf_r+0x1f4>
 80099c8:	2203      	movs	r2, #3
 80099ca:	7821      	ldrb	r1, [r4, #0]
 80099cc:	4650      	mov	r0, sl
 80099ce:	f000 fa17 	bl	8009e00 <memchr>
 80099d2:	b138      	cbz	r0, 80099e4 <_svfiprintf_r+0x150>
 80099d4:	eba0 000a 	sub.w	r0, r0, sl
 80099d8:	2240      	movs	r2, #64	@ 0x40
 80099da:	9b04      	ldr	r3, [sp, #16]
 80099dc:	3401      	adds	r4, #1
 80099de:	4082      	lsls	r2, r0
 80099e0:	4313      	orrs	r3, r2
 80099e2:	9304      	str	r3, [sp, #16]
 80099e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099e8:	2206      	movs	r2, #6
 80099ea:	4824      	ldr	r0, [pc, #144]	@ (8009a7c <_svfiprintf_r+0x1e8>)
 80099ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80099f0:	f000 fa06 	bl	8009e00 <memchr>
 80099f4:	2800      	cmp	r0, #0
 80099f6:	d036      	beq.n	8009a66 <_svfiprintf_r+0x1d2>
 80099f8:	4b21      	ldr	r3, [pc, #132]	@ (8009a80 <_svfiprintf_r+0x1ec>)
 80099fa:	bb1b      	cbnz	r3, 8009a44 <_svfiprintf_r+0x1b0>
 80099fc:	9b03      	ldr	r3, [sp, #12]
 80099fe:	3307      	adds	r3, #7
 8009a00:	f023 0307 	bic.w	r3, r3, #7
 8009a04:	3308      	adds	r3, #8
 8009a06:	9303      	str	r3, [sp, #12]
 8009a08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a0a:	4433      	add	r3, r6
 8009a0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a0e:	e76a      	b.n	80098e6 <_svfiprintf_r+0x52>
 8009a10:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a14:	460c      	mov	r4, r1
 8009a16:	2001      	movs	r0, #1
 8009a18:	e7a8      	b.n	800996c <_svfiprintf_r+0xd8>
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	3401      	adds	r4, #1
 8009a1e:	f04f 0c0a 	mov.w	ip, #10
 8009a22:	4619      	mov	r1, r3
 8009a24:	9305      	str	r3, [sp, #20]
 8009a26:	4620      	mov	r0, r4
 8009a28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a2c:	3a30      	subs	r2, #48	@ 0x30
 8009a2e:	2a09      	cmp	r2, #9
 8009a30:	d903      	bls.n	8009a3a <_svfiprintf_r+0x1a6>
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d0c6      	beq.n	80099c4 <_svfiprintf_r+0x130>
 8009a36:	9105      	str	r1, [sp, #20]
 8009a38:	e7c4      	b.n	80099c4 <_svfiprintf_r+0x130>
 8009a3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a3e:	4604      	mov	r4, r0
 8009a40:	2301      	movs	r3, #1
 8009a42:	e7f0      	b.n	8009a26 <_svfiprintf_r+0x192>
 8009a44:	ab03      	add	r3, sp, #12
 8009a46:	462a      	mov	r2, r5
 8009a48:	a904      	add	r1, sp, #16
 8009a4a:	4638      	mov	r0, r7
 8009a4c:	9300      	str	r3, [sp, #0]
 8009a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8009a84 <_svfiprintf_r+0x1f0>)
 8009a50:	f3af 8000 	nop.w
 8009a54:	1c42      	adds	r2, r0, #1
 8009a56:	4606      	mov	r6, r0
 8009a58:	d1d6      	bne.n	8009a08 <_svfiprintf_r+0x174>
 8009a5a:	89ab      	ldrh	r3, [r5, #12]
 8009a5c:	065b      	lsls	r3, r3, #25
 8009a5e:	f53f af2d 	bmi.w	80098bc <_svfiprintf_r+0x28>
 8009a62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a64:	e72c      	b.n	80098c0 <_svfiprintf_r+0x2c>
 8009a66:	ab03      	add	r3, sp, #12
 8009a68:	462a      	mov	r2, r5
 8009a6a:	a904      	add	r1, sp, #16
 8009a6c:	4638      	mov	r0, r7
 8009a6e:	9300      	str	r3, [sp, #0]
 8009a70:	4b04      	ldr	r3, [pc, #16]	@ (8009a84 <_svfiprintf_r+0x1f0>)
 8009a72:	f000 f87d 	bl	8009b70 <_printf_i>
 8009a76:	e7ed      	b.n	8009a54 <_svfiprintf_r+0x1c0>
 8009a78:	08009f9c 	.word	0x08009f9c
 8009a7c:	08009fa6 	.word	0x08009fa6
 8009a80:	00000000 	.word	0x00000000
 8009a84:	080097dd 	.word	0x080097dd
 8009a88:	08009fa2 	.word	0x08009fa2

08009a8c <_printf_common>:
 8009a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a90:	4616      	mov	r6, r2
 8009a92:	4698      	mov	r8, r3
 8009a94:	688a      	ldr	r2, [r1, #8]
 8009a96:	4607      	mov	r7, r0
 8009a98:	690b      	ldr	r3, [r1, #16]
 8009a9a:	460c      	mov	r4, r1
 8009a9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	bfb8      	it	lt
 8009aa4:	4613      	movlt	r3, r2
 8009aa6:	6033      	str	r3, [r6, #0]
 8009aa8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009aac:	b10a      	cbz	r2, 8009ab2 <_printf_common+0x26>
 8009aae:	3301      	adds	r3, #1
 8009ab0:	6033      	str	r3, [r6, #0]
 8009ab2:	6823      	ldr	r3, [r4, #0]
 8009ab4:	0699      	lsls	r1, r3, #26
 8009ab6:	bf42      	ittt	mi
 8009ab8:	6833      	ldrmi	r3, [r6, #0]
 8009aba:	3302      	addmi	r3, #2
 8009abc:	6033      	strmi	r3, [r6, #0]
 8009abe:	6825      	ldr	r5, [r4, #0]
 8009ac0:	f015 0506 	ands.w	r5, r5, #6
 8009ac4:	d106      	bne.n	8009ad4 <_printf_common+0x48>
 8009ac6:	f104 0a19 	add.w	sl, r4, #25
 8009aca:	68e3      	ldr	r3, [r4, #12]
 8009acc:	6832      	ldr	r2, [r6, #0]
 8009ace:	1a9b      	subs	r3, r3, r2
 8009ad0:	42ab      	cmp	r3, r5
 8009ad2:	dc2b      	bgt.n	8009b2c <_printf_common+0xa0>
 8009ad4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009ad8:	6822      	ldr	r2, [r4, #0]
 8009ada:	3b00      	subs	r3, #0
 8009adc:	bf18      	it	ne
 8009ade:	2301      	movne	r3, #1
 8009ae0:	0692      	lsls	r2, r2, #26
 8009ae2:	d430      	bmi.n	8009b46 <_printf_common+0xba>
 8009ae4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009ae8:	4641      	mov	r1, r8
 8009aea:	4638      	mov	r0, r7
 8009aec:	47c8      	blx	r9
 8009aee:	3001      	adds	r0, #1
 8009af0:	d023      	beq.n	8009b3a <_printf_common+0xae>
 8009af2:	6823      	ldr	r3, [r4, #0]
 8009af4:	341a      	adds	r4, #26
 8009af6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009afa:	f003 0306 	and.w	r3, r3, #6
 8009afe:	2b04      	cmp	r3, #4
 8009b00:	bf0a      	itet	eq
 8009b02:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009b06:	2500      	movne	r5, #0
 8009b08:	6833      	ldreq	r3, [r6, #0]
 8009b0a:	f04f 0600 	mov.w	r6, #0
 8009b0e:	bf08      	it	eq
 8009b10:	1aed      	subeq	r5, r5, r3
 8009b12:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009b16:	bf08      	it	eq
 8009b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	bfc4      	itt	gt
 8009b20:	1a9b      	subgt	r3, r3, r2
 8009b22:	18ed      	addgt	r5, r5, r3
 8009b24:	42b5      	cmp	r5, r6
 8009b26:	d11a      	bne.n	8009b5e <_printf_common+0xd2>
 8009b28:	2000      	movs	r0, #0
 8009b2a:	e008      	b.n	8009b3e <_printf_common+0xb2>
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	4652      	mov	r2, sl
 8009b30:	4641      	mov	r1, r8
 8009b32:	4638      	mov	r0, r7
 8009b34:	47c8      	blx	r9
 8009b36:	3001      	adds	r0, #1
 8009b38:	d103      	bne.n	8009b42 <_printf_common+0xb6>
 8009b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b42:	3501      	adds	r5, #1
 8009b44:	e7c1      	b.n	8009aca <_printf_common+0x3e>
 8009b46:	18e1      	adds	r1, r4, r3
 8009b48:	1c5a      	adds	r2, r3, #1
 8009b4a:	2030      	movs	r0, #48	@ 0x30
 8009b4c:	3302      	adds	r3, #2
 8009b4e:	4422      	add	r2, r4
 8009b50:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009b54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009b58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009b5c:	e7c2      	b.n	8009ae4 <_printf_common+0x58>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	4622      	mov	r2, r4
 8009b62:	4641      	mov	r1, r8
 8009b64:	4638      	mov	r0, r7
 8009b66:	47c8      	blx	r9
 8009b68:	3001      	adds	r0, #1
 8009b6a:	d0e6      	beq.n	8009b3a <_printf_common+0xae>
 8009b6c:	3601      	adds	r6, #1
 8009b6e:	e7d9      	b.n	8009b24 <_printf_common+0x98>

08009b70 <_printf_i>:
 8009b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b74:	7e0f      	ldrb	r7, [r1, #24]
 8009b76:	4691      	mov	r9, r2
 8009b78:	4680      	mov	r8, r0
 8009b7a:	460c      	mov	r4, r1
 8009b7c:	2f78      	cmp	r7, #120	@ 0x78
 8009b7e:	469a      	mov	sl, r3
 8009b80:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009b82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009b86:	d807      	bhi.n	8009b98 <_printf_i+0x28>
 8009b88:	2f62      	cmp	r7, #98	@ 0x62
 8009b8a:	d80a      	bhi.n	8009ba2 <_printf_i+0x32>
 8009b8c:	2f00      	cmp	r7, #0
 8009b8e:	f000 80d1 	beq.w	8009d34 <_printf_i+0x1c4>
 8009b92:	2f58      	cmp	r7, #88	@ 0x58
 8009b94:	f000 80b8 	beq.w	8009d08 <_printf_i+0x198>
 8009b98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009ba0:	e03a      	b.n	8009c18 <_printf_i+0xa8>
 8009ba2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009ba6:	2b15      	cmp	r3, #21
 8009ba8:	d8f6      	bhi.n	8009b98 <_printf_i+0x28>
 8009baa:	a101      	add	r1, pc, #4	@ (adr r1, 8009bb0 <_printf_i+0x40>)
 8009bac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bb0:	08009c09 	.word	0x08009c09
 8009bb4:	08009c1d 	.word	0x08009c1d
 8009bb8:	08009b99 	.word	0x08009b99
 8009bbc:	08009b99 	.word	0x08009b99
 8009bc0:	08009b99 	.word	0x08009b99
 8009bc4:	08009b99 	.word	0x08009b99
 8009bc8:	08009c1d 	.word	0x08009c1d
 8009bcc:	08009b99 	.word	0x08009b99
 8009bd0:	08009b99 	.word	0x08009b99
 8009bd4:	08009b99 	.word	0x08009b99
 8009bd8:	08009b99 	.word	0x08009b99
 8009bdc:	08009d1b 	.word	0x08009d1b
 8009be0:	08009c47 	.word	0x08009c47
 8009be4:	08009cd5 	.word	0x08009cd5
 8009be8:	08009b99 	.word	0x08009b99
 8009bec:	08009b99 	.word	0x08009b99
 8009bf0:	08009d3d 	.word	0x08009d3d
 8009bf4:	08009b99 	.word	0x08009b99
 8009bf8:	08009c47 	.word	0x08009c47
 8009bfc:	08009b99 	.word	0x08009b99
 8009c00:	08009b99 	.word	0x08009b99
 8009c04:	08009cdd 	.word	0x08009cdd
 8009c08:	6833      	ldr	r3, [r6, #0]
 8009c0a:	1d1a      	adds	r2, r3, #4
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	6032      	str	r2, [r6, #0]
 8009c10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e09c      	b.n	8009d56 <_printf_i+0x1e6>
 8009c1c:	6833      	ldr	r3, [r6, #0]
 8009c1e:	6820      	ldr	r0, [r4, #0]
 8009c20:	1d19      	adds	r1, r3, #4
 8009c22:	6031      	str	r1, [r6, #0]
 8009c24:	0606      	lsls	r6, r0, #24
 8009c26:	d501      	bpl.n	8009c2c <_printf_i+0xbc>
 8009c28:	681d      	ldr	r5, [r3, #0]
 8009c2a:	e003      	b.n	8009c34 <_printf_i+0xc4>
 8009c2c:	0645      	lsls	r5, r0, #25
 8009c2e:	d5fb      	bpl.n	8009c28 <_printf_i+0xb8>
 8009c30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009c34:	2d00      	cmp	r5, #0
 8009c36:	da03      	bge.n	8009c40 <_printf_i+0xd0>
 8009c38:	232d      	movs	r3, #45	@ 0x2d
 8009c3a:	426d      	negs	r5, r5
 8009c3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c40:	4858      	ldr	r0, [pc, #352]	@ (8009da4 <_printf_i+0x234>)
 8009c42:	230a      	movs	r3, #10
 8009c44:	e011      	b.n	8009c6a <_printf_i+0xfa>
 8009c46:	6821      	ldr	r1, [r4, #0]
 8009c48:	6833      	ldr	r3, [r6, #0]
 8009c4a:	0608      	lsls	r0, r1, #24
 8009c4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009c50:	d402      	bmi.n	8009c58 <_printf_i+0xe8>
 8009c52:	0649      	lsls	r1, r1, #25
 8009c54:	bf48      	it	mi
 8009c56:	b2ad      	uxthmi	r5, r5
 8009c58:	2f6f      	cmp	r7, #111	@ 0x6f
 8009c5a:	6033      	str	r3, [r6, #0]
 8009c5c:	4851      	ldr	r0, [pc, #324]	@ (8009da4 <_printf_i+0x234>)
 8009c5e:	bf14      	ite	ne
 8009c60:	230a      	movne	r3, #10
 8009c62:	2308      	moveq	r3, #8
 8009c64:	2100      	movs	r1, #0
 8009c66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009c6a:	6866      	ldr	r6, [r4, #4]
 8009c6c:	2e00      	cmp	r6, #0
 8009c6e:	60a6      	str	r6, [r4, #8]
 8009c70:	db05      	blt.n	8009c7e <_printf_i+0x10e>
 8009c72:	6821      	ldr	r1, [r4, #0]
 8009c74:	432e      	orrs	r6, r5
 8009c76:	f021 0104 	bic.w	r1, r1, #4
 8009c7a:	6021      	str	r1, [r4, #0]
 8009c7c:	d04b      	beq.n	8009d16 <_printf_i+0x1a6>
 8009c7e:	4616      	mov	r6, r2
 8009c80:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c84:	fb03 5711 	mls	r7, r3, r1, r5
 8009c88:	5dc7      	ldrb	r7, [r0, r7]
 8009c8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c8e:	462f      	mov	r7, r5
 8009c90:	460d      	mov	r5, r1
 8009c92:	42bb      	cmp	r3, r7
 8009c94:	d9f4      	bls.n	8009c80 <_printf_i+0x110>
 8009c96:	2b08      	cmp	r3, #8
 8009c98:	d10b      	bne.n	8009cb2 <_printf_i+0x142>
 8009c9a:	6823      	ldr	r3, [r4, #0]
 8009c9c:	07df      	lsls	r7, r3, #31
 8009c9e:	d508      	bpl.n	8009cb2 <_printf_i+0x142>
 8009ca0:	6923      	ldr	r3, [r4, #16]
 8009ca2:	6861      	ldr	r1, [r4, #4]
 8009ca4:	4299      	cmp	r1, r3
 8009ca6:	bfde      	ittt	le
 8009ca8:	2330      	movle	r3, #48	@ 0x30
 8009caa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009cae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009cb2:	1b92      	subs	r2, r2, r6
 8009cb4:	6122      	str	r2, [r4, #16]
 8009cb6:	464b      	mov	r3, r9
 8009cb8:	aa03      	add	r2, sp, #12
 8009cba:	4621      	mov	r1, r4
 8009cbc:	4640      	mov	r0, r8
 8009cbe:	f8cd a000 	str.w	sl, [sp]
 8009cc2:	f7ff fee3 	bl	8009a8c <_printf_common>
 8009cc6:	3001      	adds	r0, #1
 8009cc8:	d14a      	bne.n	8009d60 <_printf_i+0x1f0>
 8009cca:	f04f 30ff 	mov.w	r0, #4294967295
 8009cce:	b004      	add	sp, #16
 8009cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	f043 0320 	orr.w	r3, r3, #32
 8009cda:	6023      	str	r3, [r4, #0]
 8009cdc:	2778      	movs	r7, #120	@ 0x78
 8009cde:	4832      	ldr	r0, [pc, #200]	@ (8009da8 <_printf_i+0x238>)
 8009ce0:	6823      	ldr	r3, [r4, #0]
 8009ce2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009ce6:	061f      	lsls	r7, r3, #24
 8009ce8:	6831      	ldr	r1, [r6, #0]
 8009cea:	f851 5b04 	ldr.w	r5, [r1], #4
 8009cee:	d402      	bmi.n	8009cf6 <_printf_i+0x186>
 8009cf0:	065f      	lsls	r7, r3, #25
 8009cf2:	bf48      	it	mi
 8009cf4:	b2ad      	uxthmi	r5, r5
 8009cf6:	6031      	str	r1, [r6, #0]
 8009cf8:	07d9      	lsls	r1, r3, #31
 8009cfa:	bf44      	itt	mi
 8009cfc:	f043 0320 	orrmi.w	r3, r3, #32
 8009d00:	6023      	strmi	r3, [r4, #0]
 8009d02:	b11d      	cbz	r5, 8009d0c <_printf_i+0x19c>
 8009d04:	2310      	movs	r3, #16
 8009d06:	e7ad      	b.n	8009c64 <_printf_i+0xf4>
 8009d08:	4826      	ldr	r0, [pc, #152]	@ (8009da4 <_printf_i+0x234>)
 8009d0a:	e7e9      	b.n	8009ce0 <_printf_i+0x170>
 8009d0c:	6823      	ldr	r3, [r4, #0]
 8009d0e:	f023 0320 	bic.w	r3, r3, #32
 8009d12:	6023      	str	r3, [r4, #0]
 8009d14:	e7f6      	b.n	8009d04 <_printf_i+0x194>
 8009d16:	4616      	mov	r6, r2
 8009d18:	e7bd      	b.n	8009c96 <_printf_i+0x126>
 8009d1a:	6833      	ldr	r3, [r6, #0]
 8009d1c:	6825      	ldr	r5, [r4, #0]
 8009d1e:	1d18      	adds	r0, r3, #4
 8009d20:	6961      	ldr	r1, [r4, #20]
 8009d22:	6030      	str	r0, [r6, #0]
 8009d24:	062e      	lsls	r6, r5, #24
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	d501      	bpl.n	8009d2e <_printf_i+0x1be>
 8009d2a:	6019      	str	r1, [r3, #0]
 8009d2c:	e002      	b.n	8009d34 <_printf_i+0x1c4>
 8009d2e:	0668      	lsls	r0, r5, #25
 8009d30:	d5fb      	bpl.n	8009d2a <_printf_i+0x1ba>
 8009d32:	8019      	strh	r1, [r3, #0]
 8009d34:	2300      	movs	r3, #0
 8009d36:	4616      	mov	r6, r2
 8009d38:	6123      	str	r3, [r4, #16]
 8009d3a:	e7bc      	b.n	8009cb6 <_printf_i+0x146>
 8009d3c:	6833      	ldr	r3, [r6, #0]
 8009d3e:	2100      	movs	r1, #0
 8009d40:	1d1a      	adds	r2, r3, #4
 8009d42:	6032      	str	r2, [r6, #0]
 8009d44:	681e      	ldr	r6, [r3, #0]
 8009d46:	6862      	ldr	r2, [r4, #4]
 8009d48:	4630      	mov	r0, r6
 8009d4a:	f000 f859 	bl	8009e00 <memchr>
 8009d4e:	b108      	cbz	r0, 8009d54 <_printf_i+0x1e4>
 8009d50:	1b80      	subs	r0, r0, r6
 8009d52:	6060      	str	r0, [r4, #4]
 8009d54:	6863      	ldr	r3, [r4, #4]
 8009d56:	6123      	str	r3, [r4, #16]
 8009d58:	2300      	movs	r3, #0
 8009d5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d5e:	e7aa      	b.n	8009cb6 <_printf_i+0x146>
 8009d60:	6923      	ldr	r3, [r4, #16]
 8009d62:	4632      	mov	r2, r6
 8009d64:	4649      	mov	r1, r9
 8009d66:	4640      	mov	r0, r8
 8009d68:	47d0      	blx	sl
 8009d6a:	3001      	adds	r0, #1
 8009d6c:	d0ad      	beq.n	8009cca <_printf_i+0x15a>
 8009d6e:	6823      	ldr	r3, [r4, #0]
 8009d70:	079b      	lsls	r3, r3, #30
 8009d72:	d413      	bmi.n	8009d9c <_printf_i+0x22c>
 8009d74:	68e0      	ldr	r0, [r4, #12]
 8009d76:	9b03      	ldr	r3, [sp, #12]
 8009d78:	4298      	cmp	r0, r3
 8009d7a:	bfb8      	it	lt
 8009d7c:	4618      	movlt	r0, r3
 8009d7e:	e7a6      	b.n	8009cce <_printf_i+0x15e>
 8009d80:	2301      	movs	r3, #1
 8009d82:	4632      	mov	r2, r6
 8009d84:	4649      	mov	r1, r9
 8009d86:	4640      	mov	r0, r8
 8009d88:	47d0      	blx	sl
 8009d8a:	3001      	adds	r0, #1
 8009d8c:	d09d      	beq.n	8009cca <_printf_i+0x15a>
 8009d8e:	3501      	adds	r5, #1
 8009d90:	68e3      	ldr	r3, [r4, #12]
 8009d92:	9903      	ldr	r1, [sp, #12]
 8009d94:	1a5b      	subs	r3, r3, r1
 8009d96:	42ab      	cmp	r3, r5
 8009d98:	dcf2      	bgt.n	8009d80 <_printf_i+0x210>
 8009d9a:	e7eb      	b.n	8009d74 <_printf_i+0x204>
 8009d9c:	2500      	movs	r5, #0
 8009d9e:	f104 0619 	add.w	r6, r4, #25
 8009da2:	e7f5      	b.n	8009d90 <_printf_i+0x220>
 8009da4:	08009fad 	.word	0x08009fad
 8009da8:	08009fbe 	.word	0x08009fbe

08009dac <memmove>:
 8009dac:	4288      	cmp	r0, r1
 8009dae:	b510      	push	{r4, lr}
 8009db0:	eb01 0402 	add.w	r4, r1, r2
 8009db4:	d902      	bls.n	8009dbc <memmove+0x10>
 8009db6:	4284      	cmp	r4, r0
 8009db8:	4623      	mov	r3, r4
 8009dba:	d807      	bhi.n	8009dcc <memmove+0x20>
 8009dbc:	1e43      	subs	r3, r0, #1
 8009dbe:	42a1      	cmp	r1, r4
 8009dc0:	d008      	beq.n	8009dd4 <memmove+0x28>
 8009dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009dca:	e7f8      	b.n	8009dbe <memmove+0x12>
 8009dcc:	4402      	add	r2, r0
 8009dce:	4601      	mov	r1, r0
 8009dd0:	428a      	cmp	r2, r1
 8009dd2:	d100      	bne.n	8009dd6 <memmove+0x2a>
 8009dd4:	bd10      	pop	{r4, pc}
 8009dd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009dda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009dde:	e7f7      	b.n	8009dd0 <memmove+0x24>

08009de0 <_sbrk_r>:
 8009de0:	b538      	push	{r3, r4, r5, lr}
 8009de2:	2300      	movs	r3, #0
 8009de4:	4d05      	ldr	r5, [pc, #20]	@ (8009dfc <_sbrk_r+0x1c>)
 8009de6:	4604      	mov	r4, r0
 8009de8:	4608      	mov	r0, r1
 8009dea:	602b      	str	r3, [r5, #0]
 8009dec:	f7f7 fb1a 	bl	8001424 <_sbrk>
 8009df0:	1c43      	adds	r3, r0, #1
 8009df2:	d102      	bne.n	8009dfa <_sbrk_r+0x1a>
 8009df4:	682b      	ldr	r3, [r5, #0]
 8009df6:	b103      	cbz	r3, 8009dfa <_sbrk_r+0x1a>
 8009df8:	6023      	str	r3, [r4, #0]
 8009dfa:	bd38      	pop	{r3, r4, r5, pc}
 8009dfc:	20002e18 	.word	0x20002e18

08009e00 <memchr>:
 8009e00:	b2c9      	uxtb	r1, r1
 8009e02:	4603      	mov	r3, r0
 8009e04:	4402      	add	r2, r0
 8009e06:	b510      	push	{r4, lr}
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	d101      	bne.n	8009e12 <memchr+0x12>
 8009e0e:	2000      	movs	r0, #0
 8009e10:	e003      	b.n	8009e1a <memchr+0x1a>
 8009e12:	7804      	ldrb	r4, [r0, #0]
 8009e14:	3301      	adds	r3, #1
 8009e16:	428c      	cmp	r4, r1
 8009e18:	d1f6      	bne.n	8009e08 <memchr+0x8>
 8009e1a:	bd10      	pop	{r4, pc}

08009e1c <_realloc_r>:
 8009e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e20:	4607      	mov	r7, r0
 8009e22:	4614      	mov	r4, r2
 8009e24:	460d      	mov	r5, r1
 8009e26:	b921      	cbnz	r1, 8009e32 <_realloc_r+0x16>
 8009e28:	4611      	mov	r1, r2
 8009e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e2e:	f7ff bc49 	b.w	80096c4 <_malloc_r>
 8009e32:	b92a      	cbnz	r2, 8009e40 <_realloc_r+0x24>
 8009e34:	4625      	mov	r5, r4
 8009e36:	f7ff fbd9 	bl	80095ec <_free_r>
 8009e3a:	4628      	mov	r0, r5
 8009e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e40:	f000 f81a 	bl	8009e78 <_malloc_usable_size_r>
 8009e44:	4284      	cmp	r4, r0
 8009e46:	4606      	mov	r6, r0
 8009e48:	d802      	bhi.n	8009e50 <_realloc_r+0x34>
 8009e4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e4e:	d8f4      	bhi.n	8009e3a <_realloc_r+0x1e>
 8009e50:	4621      	mov	r1, r4
 8009e52:	4638      	mov	r0, r7
 8009e54:	f7ff fc36 	bl	80096c4 <_malloc_r>
 8009e58:	4680      	mov	r8, r0
 8009e5a:	b908      	cbnz	r0, 8009e60 <_realloc_r+0x44>
 8009e5c:	4645      	mov	r5, r8
 8009e5e:	e7ec      	b.n	8009e3a <_realloc_r+0x1e>
 8009e60:	42b4      	cmp	r4, r6
 8009e62:	4622      	mov	r2, r4
 8009e64:	4629      	mov	r1, r5
 8009e66:	bf28      	it	cs
 8009e68:	4632      	movcs	r2, r6
 8009e6a:	f7ff fbb1 	bl	80095d0 <memcpy>
 8009e6e:	4629      	mov	r1, r5
 8009e70:	4638      	mov	r0, r7
 8009e72:	f7ff fbbb 	bl	80095ec <_free_r>
 8009e76:	e7f1      	b.n	8009e5c <_realloc_r+0x40>

08009e78 <_malloc_usable_size_r>:
 8009e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e7c:	1f18      	subs	r0, r3, #4
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	bfbc      	itt	lt
 8009e82:	580b      	ldrlt	r3, [r1, r0]
 8009e84:	18c0      	addlt	r0, r0, r3
 8009e86:	4770      	bx	lr

08009e88 <_init>:
 8009e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e8a:	bf00      	nop
 8009e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e8e:	bc08      	pop	{r3}
 8009e90:	469e      	mov	lr, r3
 8009e92:	4770      	bx	lr

08009e94 <_fini>:
 8009e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e96:	bf00      	nop
 8009e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e9a:	bc08      	pop	{r3}
 8009e9c:	469e      	mov	lr, r3
 8009e9e:	4770      	bx	lr
