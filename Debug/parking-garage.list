
parking-garage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2f0  08000250  08000250  00001250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  0800a540  0800a540  0000b540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a670  0800a670  0000c078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800a670  0800a670  0000c078  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800a670  0800a670  0000c078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a670  0800a670  0000b670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a674  0800a674  0000b674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800a678  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ea4  20000078  0800a6f0  0000c078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f1c  0800a6f0  0000cf1c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000c078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000223c5  00000000  00000000  0000c0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004443  00000000  00000000  0002e473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001de8  00000000  00000000  000328b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016f2  00000000  00000000  000346a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000369b6  00000000  00000000  00035d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000245b1  00000000  00000000  0006c748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001560bb  00000000  00000000  00090cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e6db4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008288  00000000  00000000  001e6df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001ef080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000078 	.word	0x20000078
 800026c:	00000000 	.word	0x00000000
 8000270:	0800a528 	.word	0x0800a528

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	2000007c 	.word	0x2000007c
 800028c:	0800a528 	.word	0x0800a528

08000290 <MX_FREERTOS_Init>:
  .name = "parkingControlTask",
  .priority = (osPriority_t) osPriorityNormal,
  .stack_size = 128 * 4
};

void MX_FREERTOS_Init(void) {
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0

  rampControlTaskHandle = osThreadNew(StartRampControlTask, NULL, &rampControlTask_attributes);
 8000294:	4a08      	ldr	r2, [pc, #32]	@ (80002b8 <MX_FREERTOS_Init+0x28>)
 8000296:	2100      	movs	r1, #0
 8000298:	4808      	ldr	r0, [pc, #32]	@ (80002bc <MX_FREERTOS_Init+0x2c>)
 800029a:	f007 fb85 	bl	80079a8 <osThreadNew>
 800029e:	4603      	mov	r3, r0
 80002a0:	4a07      	ldr	r2, [pc, #28]	@ (80002c0 <MX_FREERTOS_Init+0x30>)
 80002a2:	6013      	str	r3, [r2, #0]

  parkingControlTaskHandle = osThreadNew(StartParkingControlTask, NULL, &parkingControlTask_attributes);
 80002a4:	4a07      	ldr	r2, [pc, #28]	@ (80002c4 <MX_FREERTOS_Init+0x34>)
 80002a6:	2100      	movs	r1, #0
 80002a8:	4807      	ldr	r0, [pc, #28]	@ (80002c8 <MX_FREERTOS_Init+0x38>)
 80002aa:	f007 fb7d 	bl	80079a8 <osThreadNew>
 80002ae:	4603      	mov	r3, r0
 80002b0:	4a06      	ldr	r2, [pc, #24]	@ (80002cc <MX_FREERTOS_Init+0x3c>)
 80002b2:	6013      	str	r3, [r2, #0]

}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	0800a5d8 	.word	0x0800a5d8
 80002bc:	080002d1 	.word	0x080002d1
 80002c0:	2000011c 	.word	0x2000011c
 80002c4:	0800a5fc 	.word	0x0800a5fc
 80002c8:	08000391 	.word	0x08000391
 80002cc:	20000120 	.word	0x20000120

080002d0 <StartRampControlTask>:

void StartRampControlTask(void *argument)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b088      	sub	sp, #32
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	int updated = 1;
 80002d8:	2301      	movs	r3, #1
 80002da:	61fb      	str	r3, [r7, #28]
	int total_capacity = 0;
 80002dc:	2300      	movs	r3, #0
 80002de:	61bb      	str	r3, [r7, #24]
	int r1, old_r1 = 0;
 80002e0:	2300      	movs	r3, #0
 80002e2:	617b      	str	r3, [r7, #20]
	int r2 = 0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	613b      	str	r3, [r7, #16]

	HD44780_Init(2);
 80002e8:	2002      	movs	r0, #2
 80002ea:	f000 fbbf 	bl	8000a6c <HD44780_Init>
	HD44780_Clear();
 80002ee:	f000 fc41 	bl	8000b74 <HD44780_Clear>

	for(;;)
	{

		r1 = HAL_GPIO_ReadPin(GPIOG, RAMP_ENTER_Pin);
 80002f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002f6:	4821      	ldr	r0, [pc, #132]	@ (800037c <StartRampControlTask+0xac>)
 80002f8:	f001 fd26 	bl	8001d48 <HAL_GPIO_ReadPin>
 80002fc:	4603      	mov	r3, r0
 80002fe:	60fb      	str	r3, [r7, #12]
		r2 = HAL_GPIO_ReadPin(GPIOB, RAMP_EXIT_Pin);
 8000300:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000304:	481e      	ldr	r0, [pc, #120]	@ (8000380 <StartRampControlTask+0xb0>)
 8000306:	f001 fd1f 	bl	8001d48 <HAL_GPIO_ReadPin>
 800030a:	4603      	mov	r3, r0
 800030c:	613b      	str	r3, [r7, #16]

		if(updated)
 800030e:	69fb      	ldr	r3, [r7, #28]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d003      	beq.n	800031c <StartRampControlTask+0x4c>
		{
			update_availability();
 8000314:	f000 f8d4 	bl	80004c0 <update_availability>

			updated = 0;
 8000318:	2300      	movs	r3, #0
 800031a:	61fb      	str	r3, [r7, #28]
		}

		if((r1==1) && (old_r1 != r1))
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d119      	bne.n	8000356 <StartRampControlTask+0x86>
 8000322:	697a      	ldr	r2, [r7, #20]
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	429a      	cmp	r2, r3
 8000328:	d015      	beq.n	8000356 <StartRampControlTask+0x86>
		{
			if(total_capacity == 12)
 800032a:	69bb      	ldr	r3, [r7, #24]
 800032c:	2b0c      	cmp	r3, #12
 800032e:	d105      	bne.n	800033c <StartRampControlTask+0x6c>
			{
				HD44780_Clear();
 8000330:	f000 fc20 	bl	8000b74 <HD44780_Clear>
				HD44780_PrintStr("Parking full");
 8000334:	4813      	ldr	r0, [pc, #76]	@ (8000384 <StartRampControlTask+0xb4>)
 8000336:	f000 fca5 	bl	8000c84 <HD44780_PrintStr>
 800033a:	e00c      	b.n	8000356 <StartRampControlTask+0x86>
			} else
			{
				HD44780_Clear();
 800033c:	f000 fc1a 	bl	8000b74 <HD44780_Clear>
				HD44780_PrintStr("Welcome.");
 8000340:	4811      	ldr	r0, [pc, #68]	@ (8000388 <StartRampControlTask+0xb8>)
 8000342:	f000 fc9f 	bl	8000c84 <HD44780_PrintStr>

				raise_ramp(TIM_CHANNEL_1);
 8000346:	2000      	movs	r0, #0
 8000348:	f000 f8e2 	bl	8000510 <raise_ramp>
				total_capacity++;
 800034c:	69bb      	ldr	r3, [r7, #24]
 800034e:	3301      	adds	r3, #1
 8000350:	61bb      	str	r3, [r7, #24]
				updated = 1;
 8000352:	2301      	movs	r3, #1
 8000354:	61fb      	str	r3, [r7, #28]
			}
		}
		old_r1 = r1;
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	617b      	str	r3, [r7, #20]

		if(r2==1)
 800035a:	693b      	ldr	r3, [r7, #16]
 800035c:	2b01      	cmp	r3, #1
 800035e:	d1c8      	bne.n	80002f2 <StartRampControlTask+0x22>
		{
			HD44780_Clear();
 8000360:	f000 fc08 	bl	8000b74 <HD44780_Clear>
			HD44780_PrintStr("Goodbye.");
 8000364:	4809      	ldr	r0, [pc, #36]	@ (800038c <StartRampControlTask+0xbc>)
 8000366:	f000 fc8d 	bl	8000c84 <HD44780_PrintStr>

			raise_ramp(TIM_CHANNEL_2);
 800036a:	2004      	movs	r0, #4
 800036c:	f000 f8d0 	bl	8000510 <raise_ramp>
			total_capacity--;
 8000370:	69bb      	ldr	r3, [r7, #24]
 8000372:	3b01      	subs	r3, #1
 8000374:	61bb      	str	r3, [r7, #24]
			updated = 1;
 8000376:	2301      	movs	r3, #1
 8000378:	61fb      	str	r3, [r7, #28]
		r1 = HAL_GPIO_ReadPin(GPIOG, RAMP_ENTER_Pin);
 800037a:	e7ba      	b.n	80002f2 <StartRampControlTask+0x22>
 800037c:	42021800 	.word	0x42021800
 8000380:	42020400 	.word	0x42020400
 8000384:	0800a564 	.word	0x0800a564
 8000388:	0800a574 	.word	0x0800a574
 800038c:	0800a580 	.word	0x0800a580

08000390 <StartParkingControlTask>:
	}

}

void StartParkingControlTask(void *argument)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b086      	sub	sp, #24
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	int parking = 0;
 8000398:	2300      	movs	r3, #0
 800039a:	617b      	str	r3, [r7, #20]
	int timespan = 0;
 800039c:	2300      	movs	r3, #0
 800039e:	613b      	str	r3, [r7, #16]
	int current_time = 0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80003a4:	2200      	movs	r2, #0
 80003a6:	493e      	ldr	r1, [pc, #248]	@ (80004a0 <StartParkingControlTask+0x110>)
 80003a8:	483e      	ldr	r0, [pc, #248]	@ (80004a4 <StartParkingControlTask+0x114>)
 80003aa:	f005 faad 	bl	8005908 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80003ae:	2200      	movs	r2, #0
 80003b0:	493d      	ldr	r1, [pc, #244]	@ (80004a8 <StartParkingControlTask+0x118>)
 80003b2:	483c      	ldr	r0, [pc, #240]	@ (80004a4 <StartParkingControlTask+0x114>)
 80003b4:	f005 fb90 	bl	8005ad8 <HAL_RTC_GetDate>

//		snprintf(buffer, sizeof(buffer), "Time:%02d:%02d:%02d", sTime.Hours, sTime.Minutes, sTime.Seconds);
//		HD44780_Clear();
//		HD44780_PrintStr(buffer);

		int p10 = HAL_GPIO_ReadPin(GPIOF, P10_Pin);
 80003b8:	2108      	movs	r1, #8
 80003ba:	483c      	ldr	r0, [pc, #240]	@ (80004ac <StartParkingControlTask+0x11c>)
 80003bc:	f001 fcc4 	bl	8001d48 <HAL_GPIO_ReadPin>
 80003c0:	4603      	mov	r3, r0
 80003c2:	60bb      	str	r3, [r7, #8]
		if(p10==1)
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d154      	bne.n	8000474 <StartParkingControlTask+0xe4>
		{


			if(parking_started[9] == 0)
 80003ca:	4b39      	ldr	r3, [pc, #228]	@ (80004b0 <StartParkingControlTask+0x120>)
 80003cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d11f      	bne.n	8000412 <StartParkingControlTask+0x82>
			{
			    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80003d2:	2200      	movs	r2, #0
 80003d4:	4932      	ldr	r1, [pc, #200]	@ (80004a0 <StartParkingControlTask+0x110>)
 80003d6:	4833      	ldr	r0, [pc, #204]	@ (80004a4 <StartParkingControlTask+0x114>)
 80003d8:	f005 fa96 	bl	8005908 <HAL_RTC_GetTime>
			    parking = sTime.Hours*60*60 + sTime.Minutes*60 + sTime.Seconds;
 80003dc:	4b30      	ldr	r3, [pc, #192]	@ (80004a0 <StartParkingControlTask+0x110>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	461a      	mov	r2, r3
 80003e2:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80003e6:	fb03 f202 	mul.w	r2, r3, r2
 80003ea:	4b2d      	ldr	r3, [pc, #180]	@ (80004a0 <StartParkingControlTask+0x110>)
 80003ec:	785b      	ldrb	r3, [r3, #1]
 80003ee:	4619      	mov	r1, r3
 80003f0:	460b      	mov	r3, r1
 80003f2:	011b      	lsls	r3, r3, #4
 80003f4:	1a5b      	subs	r3, r3, r1
 80003f6:	009b      	lsls	r3, r3, #2
 80003f8:	4413      	add	r3, r2
 80003fa:	4a29      	ldr	r2, [pc, #164]	@ (80004a0 <StartParkingControlTask+0x110>)
 80003fc:	7892      	ldrb	r2, [r2, #2]
 80003fe:	4413      	add	r3, r2
 8000400:	617b      	str	r3, [r7, #20]

				parking_started[9] = 1;
 8000402:	4b2b      	ldr	r3, [pc, #172]	@ (80004b0 <StartParkingControlTask+0x120>)
 8000404:	2201      	movs	r2, #1
 8000406:	625a      	str	r2, [r3, #36]	@ 0x24
				main_capacity--;
 8000408:	4b2a      	ldr	r3, [pc, #168]	@ (80004b4 <StartParkingControlTask+0x124>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	3b01      	subs	r3, #1
 800040e:	4a29      	ldr	r2, [pc, #164]	@ (80004b4 <StartParkingControlTask+0x124>)
 8000410:	6013      	str	r3, [r2, #0]
			}

			current_time = sTime.Hours*60*60 + sTime.Minutes*60 + sTime.Seconds;
 8000412:	4b23      	ldr	r3, [pc, #140]	@ (80004a0 <StartParkingControlTask+0x110>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	461a      	mov	r2, r3
 8000418:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800041c:	fb03 f202 	mul.w	r2, r3, r2
 8000420:	4b1f      	ldr	r3, [pc, #124]	@ (80004a0 <StartParkingControlTask+0x110>)
 8000422:	785b      	ldrb	r3, [r3, #1]
 8000424:	4619      	mov	r1, r3
 8000426:	460b      	mov	r3, r1
 8000428:	011b      	lsls	r3, r3, #4
 800042a:	1a5b      	subs	r3, r3, r1
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	4413      	add	r3, r2
 8000430:	4a1b      	ldr	r2, [pc, #108]	@ (80004a0 <StartParkingControlTask+0x110>)
 8000432:	7892      	ldrb	r2, [r2, #2]
 8000434:	4413      	add	r3, r2
 8000436:	60fb      	str	r3, [r7, #12]
			timespan = current_time - parking;
 8000438:	68fa      	ldr	r2, [r7, #12]
 800043a:	697b      	ldr	r3, [r7, #20]
 800043c:	1ad3      	subs	r3, r2, r3
 800043e:	613b      	str	r3, [r7, #16]
			if(timespan >=20)
 8000440:	693b      	ldr	r3, [r7, #16]
 8000442:	2b13      	cmp	r3, #19
 8000444:	dd09      	ble.n	800045a <StartParkingControlTask+0xca>
			{
				parking_timeout[9] = 1;
 8000446:	4b1c      	ldr	r3, [pc, #112]	@ (80004b8 <StartParkingControlTask+0x128>)
 8000448:	2201      	movs	r2, #1
 800044a:	625a      	str	r2, [r3, #36]	@ 0x24
				HAL_GPIO_WritePin(GPIOD, P10_G_Pin, 0);
 800044c:	2200      	movs	r2, #0
 800044e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000452:	481a      	ldr	r0, [pc, #104]	@ (80004bc <StartParkingControlTask+0x12c>)
 8000454:	f001 fc90 	bl	8001d78 <HAL_GPIO_WritePin>
 8000458:	e7a4      	b.n	80003a4 <StartParkingControlTask+0x14>

			} else
			{
				HAL_GPIO_WritePin(GPIOD, P10_R_Pin, 1);
 800045a:	2201      	movs	r2, #1
 800045c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000460:	4816      	ldr	r0, [pc, #88]	@ (80004bc <StartParkingControlTask+0x12c>)
 8000462:	f001 fc89 	bl	8001d78 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, P10_G_Pin, 0);
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800046c:	4813      	ldr	r0, [pc, #76]	@ (80004bc <StartParkingControlTask+0x12c>)
 800046e:	f001 fc83 	bl	8001d78 <HAL_GPIO_WritePin>
 8000472:	e797      	b.n	80003a4 <StartParkingControlTask+0x14>
			}

		}
		else if(p10==0)
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d194      	bne.n	80003a4 <StartParkingControlTask+0x14>
		{
			HAL_GPIO_WritePin(GPIOD, P10_G_Pin, 1);
 800047a:	2201      	movs	r2, #1
 800047c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000480:	480e      	ldr	r0, [pc, #56]	@ (80004bc <StartParkingControlTask+0x12c>)
 8000482:	f001 fc79 	bl	8001d78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, P10_R_Pin, 0);
 8000486:	2200      	movs	r2, #0
 8000488:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800048c:	480b      	ldr	r0, [pc, #44]	@ (80004bc <StartParkingControlTask+0x12c>)
 800048e:	f001 fc73 	bl	8001d78 <HAL_GPIO_WritePin>

			parking_started[9] = 0;
 8000492:	4b07      	ldr	r3, [pc, #28]	@ (80004b0 <StartParkingControlTask+0x120>)
 8000494:	2200      	movs	r2, #0
 8000496:	625a      	str	r2, [r3, #36]	@ 0x24
			parking_timeout[9] = 0;
 8000498:	4b07      	ldr	r3, [pc, #28]	@ (80004b8 <StartParkingControlTask+0x128>)
 800049a:	2200      	movs	r2, #0
 800049c:	625a      	str	r2, [r3, #36]	@ 0x24
	{
 800049e:	e781      	b.n	80003a4 <StartParkingControlTask+0x14>
 80004a0:	20000104 	.word	0x20000104
 80004a4:	20000180 	.word	0x20000180
 80004a8:	20000118 	.word	0x20000118
 80004ac:	42021400 	.word	0x42021400
 80004b0:	200000d4 	.word	0x200000d4
 80004b4:	20000000 	.word	0x20000000
 80004b8:	200000a4 	.word	0x200000a4
 80004bc:	42020c00 	.word	0x42020c00

080004c0 <update_availability>:
	}

}

void update_availability()
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	snprintf(string_out, sizeof(string_out), "Main Lot: %d", main_capacity);
 80004c4:	4b0d      	ldr	r3, [pc, #52]	@ (80004fc <update_availability+0x3c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000500 <update_availability+0x40>)
 80004ca:	2110      	movs	r1, #16
 80004cc:	480d      	ldr	r0, [pc, #52]	@ (8000504 <update_availability+0x44>)
 80004ce:	f009 fb65 	bl	8009b9c <sniprintf>
	HD44780_Clear();
 80004d2:	f000 fb4f 	bl	8000b74 <HD44780_Clear>
	HD44780_PrintStr(string_out);
 80004d6:	480b      	ldr	r0, [pc, #44]	@ (8000504 <update_availability+0x44>)
 80004d8:	f000 fbd4 	bl	8000c84 <HD44780_PrintStr>
	HD44780_SetCursor(0, 1);
 80004dc:	2101      	movs	r1, #1
 80004de:	2000      	movs	r0, #0
 80004e0:	f000 fb5e 	bl	8000ba0 <HD44780_SetCursor>
	snprintf(string_out, sizeof(string_out), "Disabled Lot: %d", disabled_capacity);
 80004e4:	4b08      	ldr	r3, [pc, #32]	@ (8000508 <update_availability+0x48>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a08      	ldr	r2, [pc, #32]	@ (800050c <update_availability+0x4c>)
 80004ea:	2110      	movs	r1, #16
 80004ec:	4805      	ldr	r0, [pc, #20]	@ (8000504 <update_availability+0x44>)
 80004ee:	f009 fb55 	bl	8009b9c <sniprintf>
	HD44780_PrintStr(string_out);
 80004f2:	4804      	ldr	r0, [pc, #16]	@ (8000504 <update_availability+0x44>)
 80004f4:	f000 fbc6 	bl	8000c84 <HD44780_PrintStr>
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20000000 	.word	0x20000000
 8000500:	0800a58c 	.word	0x0800a58c
 8000504:	20000094 	.word	0x20000094
 8000508:	20000004 	.word	0x20000004
 800050c:	0800a59c 	.word	0x0800a59c

08000510 <raise_ramp>:

void raise_ramp(char channel)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
	int x = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
	for(x=750; x>250; x=x-1)
 800051e:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	e031      	b.n	800058a <raise_ramp+0x7a>
	{
		__HAL_TIM_SET_COMPARE(&htim3,channel, x);
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d104      	bne.n	8000536 <raise_ramp+0x26>
 800052c:	4b3a      	ldr	r3, [pc, #232]	@ (8000618 <raise_ramp+0x108>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	635a      	str	r2, [r3, #52]	@ 0x34
 8000534:	e023      	b.n	800057e <raise_ramp+0x6e>
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b04      	cmp	r3, #4
 800053a:	d104      	bne.n	8000546 <raise_ramp+0x36>
 800053c:	4b36      	ldr	r3, [pc, #216]	@ (8000618 <raise_ramp+0x108>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	6393      	str	r3, [r2, #56]	@ 0x38
 8000544:	e01b      	b.n	800057e <raise_ramp+0x6e>
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	2b08      	cmp	r3, #8
 800054a:	d104      	bne.n	8000556 <raise_ramp+0x46>
 800054c:	4b32      	ldr	r3, [pc, #200]	@ (8000618 <raise_ramp+0x108>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000554:	e013      	b.n	800057e <raise_ramp+0x6e>
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	2b0c      	cmp	r3, #12
 800055a:	d104      	bne.n	8000566 <raise_ramp+0x56>
 800055c:	4b2e      	ldr	r3, [pc, #184]	@ (8000618 <raise_ramp+0x108>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	6413      	str	r3, [r2, #64]	@ 0x40
 8000564:	e00b      	b.n	800057e <raise_ramp+0x6e>
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	2b10      	cmp	r3, #16
 800056a:	d104      	bne.n	8000576 <raise_ramp+0x66>
 800056c:	4b2a      	ldr	r3, [pc, #168]	@ (8000618 <raise_ramp+0x108>)
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	6493      	str	r3, [r2, #72]	@ 0x48
 8000574:	e003      	b.n	800057e <raise_ramp+0x6e>
 8000576:	4b28      	ldr	r3, [pc, #160]	@ (8000618 <raise_ramp+0x108>)
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	64d3      	str	r3, [r2, #76]	@ 0x4c
		osDelay(5);
 800057e:	2005      	movs	r0, #5
 8000580:	f007 faa3 	bl	8007aca <osDelay>
	for(x=750; x>250; x=x-1)
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	3b01      	subs	r3, #1
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	2bfa      	cmp	r3, #250	@ 0xfa
 800058e:	dcca      	bgt.n	8000526 <raise_ramp+0x16>
	}
	osDelay(3000);
 8000590:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000594:	f007 fa99 	bl	8007aca <osDelay>
	for(x=250; x<750; x=x+1)
 8000598:	23fa      	movs	r3, #250	@ 0xfa
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	e031      	b.n	8000602 <raise_ramp+0xf2>
	{
		__HAL_TIM_SET_COMPARE(&htim3,channel, x);
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d104      	bne.n	80005ae <raise_ramp+0x9e>
 80005a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000618 <raise_ramp+0x108>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	68fa      	ldr	r2, [r7, #12]
 80005aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80005ac:	e023      	b.n	80005f6 <raise_ramp+0xe6>
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	2b04      	cmp	r3, #4
 80005b2:	d104      	bne.n	80005be <raise_ramp+0xae>
 80005b4:	4b18      	ldr	r3, [pc, #96]	@ (8000618 <raise_ramp+0x108>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	6393      	str	r3, [r2, #56]	@ 0x38
 80005bc:	e01b      	b.n	80005f6 <raise_ramp+0xe6>
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2b08      	cmp	r3, #8
 80005c2:	d104      	bne.n	80005ce <raise_ramp+0xbe>
 80005c4:	4b14      	ldr	r3, [pc, #80]	@ (8000618 <raise_ramp+0x108>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80005cc:	e013      	b.n	80005f6 <raise_ramp+0xe6>
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	2b0c      	cmp	r3, #12
 80005d2:	d104      	bne.n	80005de <raise_ramp+0xce>
 80005d4:	4b10      	ldr	r3, [pc, #64]	@ (8000618 <raise_ramp+0x108>)
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	6413      	str	r3, [r2, #64]	@ 0x40
 80005dc:	e00b      	b.n	80005f6 <raise_ramp+0xe6>
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2b10      	cmp	r3, #16
 80005e2:	d104      	bne.n	80005ee <raise_ramp+0xde>
 80005e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <raise_ramp+0x108>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	6493      	str	r3, [r2, #72]	@ 0x48
 80005ec:	e003      	b.n	80005f6 <raise_ramp+0xe6>
 80005ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <raise_ramp+0x108>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
		osDelay(5);
 80005f6:	2005      	movs	r0, #5
 80005f8:	f007 fa67 	bl	8007aca <osDelay>
	for(x=250; x<750; x=x+1)
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	3301      	adds	r3, #1
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8000608:	4293      	cmp	r3, r2
 800060a:	ddc8      	ble.n	800059e <raise_ramp+0x8e>
	}

}
 800060c:	bf00      	nop
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000200 	.word	0x20000200

0800061c <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN(PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT(PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08e      	sub	sp, #56	@ 0x38
 8000620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000632:	4b9c      	ldr	r3, [pc, #624]	@ (80008a4 <MX_GPIO_Init+0x288>)
 8000634:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000638:	4a9a      	ldr	r2, [pc, #616]	@ (80008a4 <MX_GPIO_Init+0x288>)
 800063a:	f043 0310 	orr.w	r3, r3, #16
 800063e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000642:	4b98      	ldr	r3, [pc, #608]	@ (80008a4 <MX_GPIO_Init+0x288>)
 8000644:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000648:	f003 0310 	and.w	r3, r3, #16
 800064c:	623b      	str	r3, [r7, #32]
 800064e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000650:	4b94      	ldr	r3, [pc, #592]	@ (80008a4 <MX_GPIO_Init+0x288>)
 8000652:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000656:	4a93      	ldr	r2, [pc, #588]	@ (80008a4 <MX_GPIO_Init+0x288>)
 8000658:	f043 0320 	orr.w	r3, r3, #32
 800065c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000660:	4b90      	ldr	r3, [pc, #576]	@ (80008a4 <MX_GPIO_Init+0x288>)
 8000662:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000666:	f003 0320 	and.w	r3, r3, #32
 800066a:	61fb      	str	r3, [r7, #28]
 800066c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066e:	4b8d      	ldr	r3, [pc, #564]	@ (80008a4 <MX_GPIO_Init+0x288>)
 8000670:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000674:	4a8b      	ldr	r2, [pc, #556]	@ (80008a4 <MX_GPIO_Init+0x288>)
 8000676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800067a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800067e:	4b89      	ldr	r3, [pc, #548]	@ (80008a4 <MX_GPIO_Init+0x288>)
 8000680:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000688:	61bb      	str	r3, [r7, #24]
 800068a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068c:	4b85      	ldr	r3, [pc, #532]	@ (80008a4 <MX_GPIO_Init+0x288>)
 800068e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000692:	4a84      	ldr	r2, [pc, #528]	@ (80008a4 <MX_GPIO_Init+0x288>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800069c:	4b81      	ldr	r3, [pc, #516]	@ (80008a4 <MX_GPIO_Init+0x288>)
 800069e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
 80006a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	4b7e      	ldr	r3, [pc, #504]	@ (80008a4 <MX_GPIO_Init+0x288>)
 80006ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006b0:	4a7c      	ldr	r2, [pc, #496]	@ (80008a4 <MX_GPIO_Init+0x288>)
 80006b2:	f043 0302 	orr.w	r3, r3, #2
 80006b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006ba:	4b7a      	ldr	r3, [pc, #488]	@ (80008a4 <MX_GPIO_Init+0x288>)
 80006bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006c0:	f003 0302 	and.w	r3, r3, #2
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006c8:	4b76      	ldr	r3, [pc, #472]	@ (80008a4 <MX_GPIO_Init+0x288>)
 80006ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ce:	4a75      	ldr	r2, [pc, #468]	@ (80008a4 <MX_GPIO_Init+0x288>)
 80006d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006d8:	4b72      	ldr	r3, [pc, #456]	@ (80008a4 <MX_GPIO_Init+0x288>)
 80006da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e6:	4b6f      	ldr	r3, [pc, #444]	@ (80008a4 <MX_GPIO_Init+0x288>)
 80006e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ec:	4a6d      	ldr	r2, [pc, #436]	@ (80008a4 <MX_GPIO_Init+0x288>)
 80006ee:	f043 0308 	orr.w	r3, r3, #8
 80006f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006f6:	4b6b      	ldr	r3, [pc, #428]	@ (80008a4 <MX_GPIO_Init+0x288>)
 80006f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006fc:	f003 0308 	and.w	r3, r3, #8
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000704:	4b67      	ldr	r3, [pc, #412]	@ (80008a4 <MX_GPIO_Init+0x288>)
 8000706:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800070a:	4a66      	ldr	r2, [pc, #408]	@ (80008a4 <MX_GPIO_Init+0x288>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000714:	4b63      	ldr	r3, [pc, #396]	@ (80008a4 <MX_GPIO_Init+0x288>)
 8000716:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800071a:	f003 0304 	and.w	r3, r3, #4
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, P3_G_Pin|P4_R_Pin|P5_G_Pin|P9_R_Pin
 8000722:	2200      	movs	r2, #0
 8000724:	f24b 71c0 	movw	r1, #47040	@ 0xb7c0
 8000728:	485f      	ldr	r0, [pc, #380]	@ (80008a8 <MX_GPIO_Init+0x28c>)
 800072a:	f001 fb25 	bl	8001d78 <HAL_GPIO_WritePin>
                          |P4_G_Pin|P3_R_Pin|P8_R_Pin|P2_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, P12_R_Pin|P12_G_Pin|P7_R_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 5194 	mov.w	r1, #4736	@ 0x1280
 8000734:	485d      	ldr	r0, [pc, #372]	@ (80008ac <MX_GPIO_Init+0x290>)
 8000736:	f001 fb1f 	bl	8001d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, P2_R_Pin|P1_G_Pin|P6_G_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2129      	movs	r1, #41	@ 0x29
 800073e:	485c      	ldr	r0, [pc, #368]	@ (80008b0 <MX_GPIO_Init+0x294>)
 8000740:	f001 fb1a 	bl	8001d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, P11_R_Pin|P7_G_Pin|P9_G_Pin|P8_G_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f245 0141 	movw	r1, #20545	@ 0x5041
 800074a:	485a      	ldr	r0, [pc, #360]	@ (80008b4 <MX_GPIO_Init+0x298>)
 800074c:	f001 fb14 	bl	8001d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P1_R_Pin|P6_R_Pin, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000756:	4858      	ldr	r0, [pc, #352]	@ (80008b8 <MX_GPIO_Init+0x29c>)
 8000758:	f001 fb0e 	bl	8001d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, P5_R_Pin|P10_G_Pin|P10_R_Pin|P11_G_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f24e 0102 	movw	r1, #57346	@ 0xe002
 8000762:	4856      	ldr	r0, [pc, #344]	@ (80008bc <MX_GPIO_Init+0x2a0>)
 8000764:	f001 fb08 	bl	8001d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P3_G_Pin P4_R_Pin P5_G_Pin P9_R_Pin
                           P4_G_Pin P3_R_Pin P8_R_Pin P2_G_Pin */
  GPIO_InitStruct.Pin = P3_G_Pin|P4_R_Pin|P5_G_Pin|P9_R_Pin
 8000768:	f24b 73c0 	movw	r3, #47040	@ 0xb7c0
 800076c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |P4_G_Pin|P3_R_Pin|P8_R_Pin|P2_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800077a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800077e:	4619      	mov	r1, r3
 8000780:	4849      	ldr	r0, [pc, #292]	@ (80008a8 <MX_GPIO_Init+0x28c>)
 8000782:	f001 f983 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : P10_Pin P7_Pin */
  GPIO_InitStruct.Pin = P10_Pin|P7_Pin;
 8000786:	f242 0308 	movw	r3, #8200	@ 0x2008
 800078a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078c:	2300      	movs	r3, #0
 800078e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000794:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000798:	4619      	mov	r1, r3
 800079a:	4844      	ldr	r0, [pc, #272]	@ (80008ac <MX_GPIO_Init+0x290>)
 800079c:	f001 f976 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : P12_R_Pin P12_G_Pin P7_R_Pin */
  GPIO_InitStruct.Pin = P12_R_Pin|P12_G_Pin|P7_R_Pin;
 80007a0:	f44f 5394 	mov.w	r3, #4736	@ 0x1280
 80007a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	2301      	movs	r3, #1
 80007a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b6:	4619      	mov	r1, r3
 80007b8:	483c      	ldr	r0, [pc, #240]	@ (80008ac <MX_GPIO_Init+0x290>)
 80007ba:	f001 f967 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : P2_R_Pin P1_G_Pin P6_G_Pin */
  GPIO_InitStruct.Pin = P2_R_Pin|P1_G_Pin|P6_G_Pin;
 80007be:	2329      	movs	r3, #41	@ 0x29
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d2:	4619      	mov	r1, r3
 80007d4:	4836      	ldr	r0, [pc, #216]	@ (80008b0 <MX_GPIO_Init+0x294>)
 80007d6:	f001 f959 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : P2_Pin P5_Pin RAMP_EXIT_Pin P6_Pin */
  GPIO_InitStruct.Pin = P2_Pin|P5_Pin|RAMP_EXIT_Pin|P6_Pin;
 80007da:	f241 1305 	movw	r3, #4357	@ 0x1105
 80007de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ec:	4619      	mov	r1, r3
 80007ee:	4832      	ldr	r0, [pc, #200]	@ (80008b8 <MX_GPIO_Init+0x29c>)
 80007f0:	f001 f94c 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : P11_R_Pin P7_G_Pin P9_G_Pin P8_G_Pin */
  GPIO_InitStruct.Pin = P11_R_Pin|P7_G_Pin|P9_G_Pin|P8_G_Pin;
 80007f4:	f245 0341 	movw	r3, #20545	@ 0x5041
 80007f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000806:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800080a:	4619      	mov	r1, r3
 800080c:	4829      	ldr	r0, [pc, #164]	@ (80008b4 <MX_GPIO_Init+0x298>)
 800080e:	f001 f93d 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : P11_Pin RAMP_ENTER_Pin */
  GPIO_InitStruct.Pin = P11_Pin|RAMP_ENTER_Pin;
 8000812:	f240 4302 	movw	r3, #1026	@ 0x402
 8000816:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000818:	2300      	movs	r3, #0
 800081a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000820:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000824:	4619      	mov	r1, r3
 8000826:	4823      	ldr	r0, [pc, #140]	@ (80008b4 <MX_GPIO_Init+0x298>)
 8000828:	f001 f930 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : P9_Pin P8_Pin P1_Pin */
  GPIO_InitStruct.Pin = P9_Pin|P8_Pin|P1_Pin;
 800082c:	f644 0301 	movw	r3, #18433	@ 0x4801
 8000830:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800083a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800083e:	4619      	mov	r1, r3
 8000840:	4819      	ldr	r0, [pc, #100]	@ (80008a8 <MX_GPIO_Init+0x28c>)
 8000842:	f001 f923 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : P1_R_Pin P6_R_Pin */
  GPIO_InitStruct.Pin = P1_R_Pin|P6_R_Pin;
 8000846:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800084a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800085c:	4619      	mov	r1, r3
 800085e:	4816      	ldr	r0, [pc, #88]	@ (80008b8 <MX_GPIO_Init+0x29c>)
 8000860:	f001 f914 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : P3_Pin P4_Pin P12_Pin */
  GPIO_InitStruct.Pin = P3_Pin|P4_Pin|P12_Pin;
 8000864:	f641 0301 	movw	r3, #6145	@ 0x1801
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086a:	2300      	movs	r3, #0
 800086c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000876:	4619      	mov	r1, r3
 8000878:	4810      	ldr	r0, [pc, #64]	@ (80008bc <MX_GPIO_Init+0x2a0>)
 800087a:	f001 f907 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : P5_R_Pin P10_G_Pin P10_R_Pin P11_G_Pin */
  GPIO_InitStruct.Pin = P5_R_Pin|P10_G_Pin|P10_R_Pin|P11_G_Pin;
 800087e:	f24e 0302 	movw	r3, #57346	@ 0xe002
 8000882:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	2301      	movs	r3, #1
 8000886:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000890:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000894:	4619      	mov	r1, r3
 8000896:	4809      	ldr	r0, [pc, #36]	@ (80008bc <MX_GPIO_Init+0x2a0>)
 8000898:	f001 f8f8 	bl	8001a8c <HAL_GPIO_Init>

}
 800089c:	bf00      	nop
 800089e:	3738      	adds	r7, #56	@ 0x38
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	44020c00 	.word	0x44020c00
 80008a8:	42021000 	.word	0x42021000
 80008ac:	42021400 	.word	0x42021400
 80008b0:	42020000 	.word	0x42020000
 80008b4:	42021800 	.word	0x42021800
 80008b8:	42020400 	.word	0x42020400
 80008bc:	42020c00 	.word	0x42020c00

080008c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000934 <MX_I2C1_Init+0x74>)
 80008c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000938 <MX_I2C1_Init+0x78>)
 80008c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <MX_I2C1_Init+0x74>)
 80008cc:	4a1b      	ldr	r2, [pc, #108]	@ (800093c <MX_I2C1_Init+0x7c>)
 80008ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008d0:	4b18      	ldr	r3, [pc, #96]	@ (8000934 <MX_I2C1_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d6:	4b17      	ldr	r3, [pc, #92]	@ (8000934 <MX_I2C1_Init+0x74>)
 80008d8:	2201      	movs	r2, #1
 80008da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008dc:	4b15      	ldr	r3, [pc, #84]	@ (8000934 <MX_I2C1_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008e2:	4b14      	ldr	r3, [pc, #80]	@ (8000934 <MX_I2C1_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008e8:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <MX_I2C1_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ee:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <MX_I2C1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000934 <MX_I2C1_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008fa:	480e      	ldr	r0, [pc, #56]	@ (8000934 <MX_I2C1_Init+0x74>)
 80008fc:	f001 fa6e 	bl	8001ddc <HAL_I2C_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000906:	f000 fb73 	bl	8000ff0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800090a:	2100      	movs	r1, #0
 800090c:	4809      	ldr	r0, [pc, #36]	@ (8000934 <MX_I2C1_Init+0x74>)
 800090e:	f001 fe0f 	bl	8002530 <HAL_I2CEx_ConfigAnalogFilter>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000918:	f000 fb6a 	bl	8000ff0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800091c:	2100      	movs	r1, #0
 800091e:	4805      	ldr	r0, [pc, #20]	@ (8000934 <MX_I2C1_Init+0x74>)
 8000920:	f001 fe51 	bl	80025c6 <HAL_I2CEx_ConfigDigitalFilter>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800092a:	f000 fb61 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000124 	.word	0x20000124
 8000938:	40005400 	.word	0x40005400
 800093c:	60808cd3 	.word	0x60808cd3

08000940 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b0cc      	sub	sp, #304	@ 0x130
 8000944:	af00      	add	r7, sp, #0
 8000946:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800094a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800094e:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000960:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000964:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000968:	4618      	mov	r0, r3
 800096a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800096e:	461a      	mov	r2, r3
 8000970:	2100      	movs	r1, #0
 8000972:	f009 f949 	bl	8009c08 <memset>
  if(i2cHandle->Instance==I2C1)
 8000976:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800097a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a33      	ldr	r2, [pc, #204]	@ (8000a50 <HAL_I2C_MspInit+0x110>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d15d      	bne.n	8000a44 <HAL_I2C_MspInit+0x104>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000988:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800098c:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000990:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000994:	f04f 0300 	mov.w	r3, #0
 8000998:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800099c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80009a0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80009a4:	2200      	movs	r2, #0
 80009a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009aa:	f107 0310 	add.w	r3, r7, #16
 80009ae:	4618      	mov	r0, r3
 80009b0:	f002 fddc 	bl	800356c <HAL_RCCEx_PeriphCLKConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 80009ba:	f000 fb19 	bl	8000ff0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	4b25      	ldr	r3, [pc, #148]	@ (8000a54 <HAL_I2C_MspInit+0x114>)
 80009c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009c4:	4a23      	ldr	r2, [pc, #140]	@ (8000a54 <HAL_I2C_MspInit+0x114>)
 80009c6:	f043 0302 	orr.w	r3, r3, #2
 80009ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009ce:	4b21      	ldr	r3, [pc, #132]	@ (8000a54 <HAL_I2C_MspInit+0x114>)
 80009d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009d4:	f003 0202 	and.w	r2, r3, #2
 80009d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80009dc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80009e6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80009ea:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009ec:	23c0      	movs	r3, #192	@ 0xc0
 80009ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f2:	2312      	movs	r3, #18
 80009f4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a04:	2304      	movs	r3, #4
 8000a06:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0a:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4811      	ldr	r0, [pc, #68]	@ (8000a58 <HAL_I2C_MspInit+0x118>)
 8000a12:	f001 f83b 	bl	8001a8c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a16:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <HAL_I2C_MspInit+0x114>)
 8000a18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a54 <HAL_I2C_MspInit+0x114>)
 8000a1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a22:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000a26:	4b0b      	ldr	r3, [pc, #44]	@ (8000a54 <HAL_I2C_MspInit+0x114>)
 8000a28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000a2c:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8000a30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000a34:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000a3e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000a42:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a44:	bf00      	nop
 8000a46:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40005400 	.word	0x40005400
 8000a54:	44020c00 	.word	0x44020c00
 8000a58:	42020400 	.word	0x42020400

08000a5c <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END ICACHE_Init 1 */
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000a76:	4a38      	ldr	r2, [pc, #224]	@ (8000b58 <HD44780_Init+0xec>)
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000a7c:	4b37      	ldr	r3, [pc, #220]	@ (8000b5c <HD44780_Init+0xf0>)
 8000a7e:	2208      	movs	r2, #8
 8000a80:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000a82:	4b37      	ldr	r3, [pc, #220]	@ (8000b60 <HD44780_Init+0xf4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000a88:	4b33      	ldr	r3, [pc, #204]	@ (8000b58 <HD44780_Init+0xec>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d907      	bls.n	8000aa0 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000a90:	4b33      	ldr	r3, [pc, #204]	@ (8000b60 <HD44780_Init+0xf4>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	f043 0308 	orr.w	r3, r3, #8
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4b31      	ldr	r3, [pc, #196]	@ (8000b60 <HD44780_Init+0xf4>)
 8000a9c:	701a      	strb	r2, [r3, #0]
 8000a9e:	e006      	b.n	8000aae <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000aa0:	4b2f      	ldr	r3, [pc, #188]	@ (8000b60 <HD44780_Init+0xf4>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8000b60 <HD44780_Init+0xf4>)
 8000aac:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000aae:	f000 f987 	bl	8000dc0 <DelayInit>
  HAL_Delay(50);
 8000ab2:	2032      	movs	r0, #50	@ 0x32
 8000ab4:	f000 fe8e 	bl	80017d4 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000ab8:	4b28      	ldr	r3, [pc, #160]	@ (8000b5c <HD44780_Init+0xf0>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 f945 	bl	8000d4c <ExpanderWrite>
  HAL_Delay(1000);
 8000ac2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ac6:	f000 fe85 	bl	80017d4 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000aca:	2030      	movs	r0, #48	@ 0x30
 8000acc:	f000 f92c 	bl	8000d28 <Write4Bits>
  DelayUS(4500);
 8000ad0:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000ad4:	f000 f99e 	bl	8000e14 <DelayUS>

  Write4Bits(0x03 << 4);
 8000ad8:	2030      	movs	r0, #48	@ 0x30
 8000ada:	f000 f925 	bl	8000d28 <Write4Bits>
  DelayUS(4500);
 8000ade:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000ae2:	f000 f997 	bl	8000e14 <DelayUS>

  Write4Bits(0x03 << 4);
 8000ae6:	2030      	movs	r0, #48	@ 0x30
 8000ae8:	f000 f91e 	bl	8000d28 <Write4Bits>
  DelayUS(4500);
 8000aec:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000af0:	f000 f990 	bl	8000e14 <DelayUS>

  Write4Bits(0x02 << 4);
 8000af4:	2020      	movs	r0, #32
 8000af6:	f000 f917 	bl	8000d28 <Write4Bits>
  DelayUS(100);
 8000afa:	2064      	movs	r0, #100	@ 0x64
 8000afc:	f000 f98a 	bl	8000e14 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000b00:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <HD44780_Init+0xf4>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	f043 0320 	orr.w	r3, r3, #32
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f8cf 	bl	8000cae <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000b10:	4b14      	ldr	r3, [pc, #80]	@ (8000b64 <HD44780_Init+0xf8>)
 8000b12:	2204      	movs	r2, #4
 8000b14:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000b16:	f000 f875 	bl	8000c04 <HD44780_Display>
  HD44780_Clear();
 8000b1a:	f000 f82b 	bl	8000b74 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000b1e:	4b12      	ldr	r3, [pc, #72]	@ (8000b68 <HD44780_Init+0xfc>)
 8000b20:	2202      	movs	r2, #2
 8000b22:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000b24:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <HD44780_Init+0xfc>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	f043 0304 	orr.w	r3, r3, #4
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f8bd 	bl	8000cae <SendCommand>
  DelayUS(4500);
 8000b34:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000b38:	f000 f96c 	bl	8000e14 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000b3c:	490b      	ldr	r1, [pc, #44]	@ (8000b6c <HD44780_Init+0x100>)
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 f876 	bl	8000c30 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000b44:	490a      	ldr	r1, [pc, #40]	@ (8000b70 <HD44780_Init+0x104>)
 8000b46:	2001      	movs	r0, #1
 8000b48:	f000 f872 	bl	8000c30 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000b4c:	f000 f81d 	bl	8000b8a <HD44780_Home>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	2000017b 	.word	0x2000017b
 8000b5c:	2000017c 	.word	0x2000017c
 8000b60:	20000178 	.word	0x20000178
 8000b64:	20000179 	.word	0x20000179
 8000b68:	2000017a 	.word	0x2000017a
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	20000010 	.word	0x20000010

08000b74 <HD44780_Clear>:

void HD44780_Clear()
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f000 f898 	bl	8000cae <SendCommand>
  DelayUS(2000);
 8000b7e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b82:	f000 f947 	bl	8000e14 <DelayUS>
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HD44780_Home>:

void HD44780_Home()
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000b8e:	2002      	movs	r0, #2
 8000b90:	f000 f88d 	bl	8000cae <SendCommand>
  DelayUS(2000);
 8000b94:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b98:	f000 f93c 	bl	8000e14 <DelayUS>
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b087      	sub	sp, #28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	460a      	mov	r2, r1
 8000baa:	71fb      	strb	r3, [r7, #7]
 8000bac:	4613      	mov	r3, r2
 8000bae:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000bb0:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <HD44780_SetCursor+0x5c>)
 8000bb2:	f107 0408 	add.w	r4, r7, #8
 8000bb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000bbc:	4b10      	ldr	r3, [pc, #64]	@ (8000c00 <HD44780_SetCursor+0x60>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	79ba      	ldrb	r2, [r7, #6]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d303      	bcc.n	8000bce <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <HD44780_SetCursor+0x60>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000bce:	79bb      	ldrb	r3, [r7, #6]
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	3318      	adds	r3, #24
 8000bd4:	443b      	add	r3, r7
 8000bd6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	4413      	add	r3, r2
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	b25b      	sxtb	r3, r3
 8000be4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000be8:	b25b      	sxtb	r3, r3
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f85e 	bl	8000cae <SendCommand>
}
 8000bf2:	bf00      	nop
 8000bf4:	371c      	adds	r7, #28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd90      	pop	{r4, r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	0800a5b0 	.word	0x0800a5b0
 8000c00:	2000017b 	.word	0x2000017b

08000c04 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <HD44780_Display+0x28>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	f043 0304 	orr.w	r3, r3, #4
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <HD44780_Display+0x28>)
 8000c14:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000c16:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <HD44780_Display+0x28>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	f043 0308 	orr.w	r3, r3, #8
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 f844 	bl	8000cae <SendCommand>
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000179 	.word	0x20000179

08000c30 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	b25b      	sxtb	r3, r3
 8000c4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c50:	b25b      	sxtb	r3, r3
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	4618      	mov	r0, r3
 8000c56:	f000 f82a 	bl	8000cae <SendCommand>
  for (int i=0; i<8; i++)
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	e009      	b.n	8000c74 <HD44780_CreateSpecialChar+0x44>
  {
    SendChar(charmap[i]);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	683a      	ldr	r2, [r7, #0]
 8000c64:	4413      	add	r3, r2
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 f82e 	bl	8000cca <SendChar>
  for (int i=0; i<8; i++)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	3301      	adds	r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	2b07      	cmp	r3, #7
 8000c78:	ddf2      	ble.n	8000c60 <HD44780_CreateSpecialChar+0x30>
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000c8c:	e006      	b.n	8000c9c <HD44780_PrintStr+0x18>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	1c5a      	adds	r2, r3, #1
 8000c92:	607a      	str	r2, [r7, #4]
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 f817 	bl	8000cca <SendChar>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1f4      	bne.n	8000c8e <HD44780_PrintStr+0xa>
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 f812 	bl	8000ce6 <Send>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <SendChar>:

static void SendChar(uint8_t ch)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 f804 	bl	8000ce6 <Send>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b084      	sub	sp, #16
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	460a      	mov	r2, r1
 8000cf0:	71fb      	strb	r3, [r7, #7]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	f023 030f 	bic.w	r3, r3, #15
 8000cfc:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	011b      	lsls	r3, r3, #4
 8000d02:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000d04:	7bfa      	ldrb	r2, [r7, #15]
 8000d06:	79bb      	ldrb	r3, [r7, #6]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 f80b 	bl	8000d28 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000d12:	7bba      	ldrb	r2, [r7, #14]
 8000d14:	79bb      	ldrb	r3, [r7, #6]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 f804 	bl	8000d28 <Write4Bits>
}
 8000d20:	bf00      	nop
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 f809 	bl	8000d4c <ExpanderWrite>
  PulseEnable(value);
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 f821 	bl	8000d84 <PulseEnable>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af02      	add	r7, sp, #8
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000d56:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <ExpanderWrite+0x30>)
 8000d58:	781a      	ldrb	r2, [r3, #0]
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000d62:	f107 020f 	add.w	r2, r7, #15
 8000d66:	230a      	movs	r3, #10
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	214e      	movs	r1, #78	@ 0x4e
 8000d6e:	4804      	ldr	r0, [pc, #16]	@ (8000d80 <ExpanderWrite+0x34>)
 8000d70:	f001 f8d0 	bl	8001f14 <HAL_I2C_Master_Transmit>
}
 8000d74:	bf00      	nop
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	2000017c 	.word	0x2000017c
 8000d80:	20000124 	.word	0x20000124

08000d84 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f043 0304 	orr.w	r3, r3, #4
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ffd8 	bl	8000d4c <ExpanderWrite>
  DelayUS(20);
 8000d9c:	2014      	movs	r0, #20
 8000d9e:	f000 f839 	bl	8000e14 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	f023 0304 	bic.w	r3, r3, #4
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ffce 	bl	8000d4c <ExpanderWrite>
  DelayUS(20);
 8000db0:	2014      	movs	r0, #20
 8000db2:	f000 f82f 	bl	8000e14 <DelayUS>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <DelayInit>:

static void DelayInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <DelayInit+0x4c>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	4a10      	ldr	r2, [pc, #64]	@ (8000e0c <DelayInit+0x4c>)
 8000dca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000dce:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <DelayInit+0x4c>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e0c <DelayInit+0x4c>)
 8000dd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000dda:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e10 <DelayInit+0x50>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0b      	ldr	r2, [pc, #44]	@ (8000e10 <DelayInit+0x50>)
 8000de2:	f023 0301 	bic.w	r3, r3, #1
 8000de6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000de8:	4b09      	ldr	r3, [pc, #36]	@ (8000e10 <DelayInit+0x50>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a08      	ldr	r2, [pc, #32]	@ (8000e10 <DelayInit+0x50>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <DelayInit+0x50>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000dfa:	bf00      	nop
  __ASM volatile ("NOP");
 8000dfc:	bf00      	nop
  __ASM volatile ("NOP");
 8000dfe:	bf00      	nop
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000edf0 	.word	0xe000edf0
 8000e10:	e0001000 	.word	0xe0001000

08000e14 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000e14:	b480      	push	{r7}
 8000e16:	b087      	sub	sp, #28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <DelayUS+0x44>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0e      	ldr	r2, [pc, #56]	@ (8000e5c <DelayUS+0x48>)
 8000e22:	fba2 2303 	umull	r2, r3, r2, r3
 8000e26:	0c9a      	lsrs	r2, r3, #18
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	fb02 f303 	mul.w	r3, r2, r3
 8000e2e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000e30:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <DelayUS+0x4c>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000e36:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <DelayUS+0x4c>)
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d8f6      	bhi.n	8000e36 <DelayUS+0x22>
}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	371c      	adds	r7, #28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000018 	.word	0x20000018
 8000e5c:	431bde83 	.word	0x431bde83
 8000e60:	e0001000 	.word	0xe0001000

08000e64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e68:	f000 fc6c 	bl	8001744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e6c:	f000 f824 	bl	8000eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e70:	f7ff fbd4 	bl	800061c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e74:	f7ff fd24 	bl	80008c0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000e78:	f000 fb04 	bl	8001484 <MX_TIM3_Init>
  MX_ICACHE_Init();
 8000e7c:	f7ff fdee 	bl	8000a5c <MX_ICACHE_Init>
  MX_RTC_Init();
 8000e80:	f000 f8bc 	bl	8000ffc <MX_RTC_Init>
  MX_TIM7_Init();
 8000e84:	f000 fb82 	bl	800158c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4809      	ldr	r0, [pc, #36]	@ (8000eb0 <main+0x4c>)
 8000e8c:	f005 f8f0 	bl	8006070 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000e90:	2104      	movs	r1, #4
 8000e92:	4807      	ldr	r0, [pc, #28]	@ (8000eb0 <main+0x4c>)
 8000e94:	f005 f8ec 	bl	8006070 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8000e98:	4806      	ldr	r0, [pc, #24]	@ (8000eb4 <main+0x50>)
 8000e9a:	f004 ffd9 	bl	8005e50 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e9e:	f006 fd33 	bl	8007908 <osKernelInitialize>

  /* Call init function for freertos objects (in app_freertos.c) */
  MX_FREERTOS_Init();
 8000ea2:	f7ff f9f5 	bl	8000290 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ea6:	f006 fd55 	bl	8007954 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000eaa:	bf00      	nop
 8000eac:	e7fd      	b.n	8000eaa <main+0x46>
 8000eae:	bf00      	nop
 8000eb0:	20000200 	.word	0x20000200
 8000eb4:	2000024c 	.word	0x2000024c

08000eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b09c      	sub	sp, #112	@ 0x70
 8000ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ebe:	f107 0320 	add.w	r3, r7, #32
 8000ec2:	2250      	movs	r2, #80	@ 0x50
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f008 fe9e 	bl	8009c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ecc:	f107 0308 	add.w	r3, r7, #8
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
 8000edc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ede:	4b2f      	ldr	r3, [pc, #188]	@ (8000f9c <SystemClock_Config+0xe4>)
 8000ee0:	691b      	ldr	r3, [r3, #16]
 8000ee2:	4a2e      	ldr	r2, [pc, #184]	@ (8000f9c <SystemClock_Config+0xe4>)
 8000ee4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000ee8:	6113      	str	r3, [r2, #16]
 8000eea:	4b2c      	ldr	r3, [pc, #176]	@ (8000f9c <SystemClock_Config+0xe4>)
 8000eec:	691b      	ldr	r3, [r3, #16]
 8000eee:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ef6:	bf00      	nop
 8000ef8:	4b28      	ldr	r3, [pc, #160]	@ (8000f9c <SystemClock_Config+0xe4>)
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	f003 0308 	and.w	r3, r3, #8
 8000f00:	2b08      	cmp	r3, #8
 8000f02:	d1f9      	bne.n	8000ef8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_CSI;
 8000f04:	2318      	movs	r3, #24
 8000f06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f08:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000f0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000f14:	2320      	movs	r3, #32
 8000f16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f20:	2301      	movs	r3, #1
 8000f22:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 8000f24:	237d      	movs	r3, #125	@ 0x7d
 8000f26:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f30:	2302      	movs	r3, #2
 8000f32:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8000f34:	2308      	movs	r3, #8
 8000f36:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f40:	f107 0320 	add.w	r3, r7, #32
 8000f44:	4618      	mov	r0, r3
 8000f46:	f001 fb8b 	bl	8002660 <HAL_RCC_OscConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f50:	f000 f84e 	bl	8000ff0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f54:	231f      	movs	r3, #31
 8000f56:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f6c:	f107 0308 	add.w	r3, r7, #8
 8000f70:	2105      	movs	r1, #5
 8000f72:	4618      	mov	r0, r3
 8000f74:	f001 ffac 	bl	8002ed0 <HAL_RCC_ClockConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f7e:	f000 f837 	bl	8000ff0 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000f82:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <SystemClock_Config+0xe8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000f8a:	4a05      	ldr	r2, [pc, #20]	@ (8000fa0 <SystemClock_Config+0xe8>)
 8000f8c:	f043 0320 	orr.w	r3, r3, #32
 8000f90:	6013      	str	r3, [r2, #0]
}
 8000f92:	bf00      	nop
 8000f94:	3770      	adds	r7, #112	@ 0x70
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	44020800 	.word	0x44020800
 8000fa0:	40022000 	.word	0x40022000

08000fa4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM7)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d108      	bne.n	8000fc8 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
	if(parking_timeout[9] == 1)
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d104      	bne.n	8000fc8 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		HAL_GPIO_TogglePin(GPIOD, P10_R_Pin);
 8000fbe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fc2:	4809      	ldr	r0, [pc, #36]	@ (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000fc4:	f000 fef0 	bl	8001da8 <HAL_GPIO_TogglePin>
	}
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a07      	ldr	r2, [pc, #28]	@ (8000fec <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d101      	bne.n	8000fd6 <HAL_TIM_PeriodElapsedCallback+0x32>
  {
    HAL_IncTick();
 8000fd2:	f000 fbdf 	bl	8001794 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40001400 	.word	0x40001400
 8000fe4:	200000a4 	.word	0x200000a4
 8000fe8:	42020c00 	.word	0x42020c00
 8000fec:	40001000 	.word	0x40001000

08000ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff4:	b672      	cpsid	i
}
 8000ff6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <Error_Handler+0x8>

08000ffc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08e      	sub	sp, #56	@ 0x38
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]
 8001012:	615a      	str	r2, [r3, #20]
 8001014:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800102a:	4b33      	ldr	r3, [pc, #204]	@ (80010f8 <MX_RTC_Init+0xfc>)
 800102c:	4a33      	ldr	r2, [pc, #204]	@ (80010fc <MX_RTC_Init+0x100>)
 800102e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001030:	4b31      	ldr	r3, [pc, #196]	@ (80010f8 <MX_RTC_Init+0xfc>)
 8001032:	2200      	movs	r2, #0
 8001034:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001036:	4b30      	ldr	r3, [pc, #192]	@ (80010f8 <MX_RTC_Init+0xfc>)
 8001038:	227f      	movs	r2, #127	@ 0x7f
 800103a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800103c:	4b2e      	ldr	r3, [pc, #184]	@ (80010f8 <MX_RTC_Init+0xfc>)
 800103e:	22ff      	movs	r2, #255	@ 0xff
 8001040:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001042:	4b2d      	ldr	r3, [pc, #180]	@ (80010f8 <MX_RTC_Init+0xfc>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001048:	4b2b      	ldr	r3, [pc, #172]	@ (80010f8 <MX_RTC_Init+0xfc>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800104e:	4b2a      	ldr	r3, [pc, #168]	@ (80010f8 <MX_RTC_Init+0xfc>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001054:	4b28      	ldr	r3, [pc, #160]	@ (80010f8 <MX_RTC_Init+0xfc>)
 8001056:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800105a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800105c:	4b26      	ldr	r3, [pc, #152]	@ (80010f8 <MX_RTC_Init+0xfc>)
 800105e:	2200      	movs	r2, #0
 8001060:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001062:	4b25      	ldr	r3, [pc, #148]	@ (80010f8 <MX_RTC_Init+0xfc>)
 8001064:	2200      	movs	r2, #0
 8001066:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001068:	4823      	ldr	r0, [pc, #140]	@ (80010f8 <MX_RTC_Init+0xfc>)
 800106a:	f004 fb39 	bl	80056e0 <HAL_RTC_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001074:	f7ff ffbc 	bl	8000ff0 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800107c:	2300      	movs	r3, #0
 800107e:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001080:	2300      	movs	r3, #0
 8001082:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001084:	2300      	movs	r3, #0
 8001086:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	4619      	mov	r1, r3
 800108e:	481a      	ldr	r0, [pc, #104]	@ (80010f8 <MX_RTC_Init+0xfc>)
 8001090:	f004 fe58 	bl	8005d44 <HAL_RTCEx_PrivilegeModeSet>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800109a:	f7ff ffa9 	bl	8000ff0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 17;
 800109e:	2311      	movs	r3, #17
 80010a0:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 25;
 80010a2:	2319      	movs	r3, #25
 80010a4:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80010b2:	f107 0308 	add.w	r3, r7, #8
 80010b6:	2200      	movs	r2, #0
 80010b8:	4619      	mov	r1, r3
 80010ba:	480f      	ldr	r0, [pc, #60]	@ (80010f8 <MX_RTC_Init+0xfc>)
 80010bc:	f004 fb92 	bl	80057e4 <HAL_RTC_SetTime>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80010c6:	f7ff ff93 	bl	8000ff0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80010ca:	2303      	movs	r3, #3
 80010cc:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_APRIL;
 80010ce:	2304      	movs	r3, #4
 80010d0:	717b      	strb	r3, [r7, #5]
  sDate.Date = 16;
 80010d2:	2310      	movs	r3, #16
 80010d4:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 25;
 80010d6:	2319      	movs	r3, #25
 80010d8:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2200      	movs	r2, #0
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <MX_RTC_Init+0xfc>)
 80010e2:	f004 fc73 	bl	80059cc <HAL_RTC_SetDate>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 80010ec:	f7ff ff80 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	3738      	adds	r7, #56	@ 0x38
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000180 	.word	0x20000180
 80010fc:	44007800 	.word	0x44007800

08001100 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0c6      	sub	sp, #280	@ 0x118
 8001104:	af00      	add	r7, sp, #0
 8001106:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800110a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800110e:	6018      	str	r0, [r3, #0]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001110:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001118:	4618      	mov	r0, r3
 800111a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800111e:	461a      	mov	r2, r3
 8001120:	2100      	movs	r1, #0
 8001122:	f008 fd71 	bl	8009c08 <memset>
  if(rtcHandle->Instance==RTC)
 8001126:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800112a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a21      	ldr	r2, [pc, #132]	@ (80011b8 <HAL_RTC_MspInit+0xb8>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d13a      	bne.n	80011ae <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001138:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800113c:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001140:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800114c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001150:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001154:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001158:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	4618      	mov	r0, r3
 8001162:	f002 fa03 	bl	800356c <HAL_RCCEx_PeriphCLKConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 800116c:	f7ff ff40 	bl	8000ff0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001170:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <HAL_RTC_MspInit+0xbc>)
 8001172:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001176:	4a11      	ldr	r2, [pc, #68]	@ (80011bc <HAL_RTC_MspInit+0xbc>)
 8001178:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800117c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001180:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <HAL_RTC_MspInit+0xbc>)
 8001182:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001186:	4a0d      	ldr	r2, [pc, #52]	@ (80011bc <HAL_RTC_MspInit+0xbc>)
 8001188:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800118c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001190:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <HAL_RTC_MspInit+0xbc>)
 8001192:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001196:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800119a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800119e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011a8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80011ac:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80011ae:	bf00      	nop
 80011b0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	44007800 	.word	0x44007800
 80011bc:	44020c00 	.word	0x44020c00

080011c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011c4:	2200      	movs	r2, #0
 80011c6:	210f      	movs	r1, #15
 80011c8:	f06f 0001 	mvn.w	r0, #1
 80011cc:	f000 fbde 	bl	800198c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08e      	sub	sp, #56	@ 0x38
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011dc:	4b33      	ldr	r3, [pc, #204]	@ (80012ac <HAL_InitTick+0xd8>)
 80011de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80011e2:	4a32      	ldr	r2, [pc, #200]	@ (80012ac <HAL_InitTick+0xd8>)
 80011e4:	f043 0310 	orr.w	r3, r3, #16
 80011e8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80011ec:	4b2f      	ldr	r3, [pc, #188]	@ (80012ac <HAL_InitTick+0xd8>)
 80011ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80011f2:	f003 0310 	and.w	r3, r3, #16
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011fa:	f107 020c 	add.w	r2, r7, #12
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f002 f979 	bl	80034fc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800120e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001210:	2b00      	cmp	r3, #0
 8001212:	d103      	bne.n	800121c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001214:	f002 f95c 	bl	80034d0 <HAL_RCC_GetPCLK1Freq>
 8001218:	6378      	str	r0, [r7, #52]	@ 0x34
 800121a:	e004      	b.n	8001226 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800121c:	f002 f958 	bl	80034d0 <HAL_RCC_GetPCLK1Freq>
 8001220:	4603      	mov	r3, r0
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8001226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001228:	095b      	lsrs	r3, r3, #5
 800122a:	4a21      	ldr	r2, [pc, #132]	@ (80012b0 <HAL_InitTick+0xdc>)
 800122c:	fba2 2303 	umull	r2, r3, r2, r3
 8001230:	09db      	lsrs	r3, r3, #7
 8001232:	3b01      	subs	r3, #1
 8001234:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001236:	4b1f      	ldr	r3, [pc, #124]	@ (80012b4 <HAL_InitTick+0xe0>)
 8001238:	4a1f      	ldr	r2, [pc, #124]	@ (80012b8 <HAL_InitTick+0xe4>)
 800123a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 800123c:	4b1d      	ldr	r3, [pc, #116]	@ (80012b4 <HAL_InitTick+0xe0>)
 800123e:	2263      	movs	r2, #99	@ 0x63
 8001240:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001242:	4a1c      	ldr	r2, [pc, #112]	@ (80012b4 <HAL_InitTick+0xe0>)
 8001244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001246:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001248:	4b1a      	ldr	r3, [pc, #104]	@ (80012b4 <HAL_InitTick+0xe0>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124e:	4b19      	ldr	r3, [pc, #100]	@ (80012b4 <HAL_InitTick+0xe0>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001254:	4817      	ldr	r0, [pc, #92]	@ (80012b4 <HAL_InitTick+0xe0>)
 8001256:	f004 fda3 	bl	8005da0 <HAL_TIM_Base_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001260:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001264:	2b00      	cmp	r3, #0
 8001266:	d118      	bne.n	800129a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001268:	4812      	ldr	r0, [pc, #72]	@ (80012b4 <HAL_InitTick+0xe0>)
 800126a:	f004 fdf1 	bl	8005e50 <HAL_TIM_Base_Start_IT>
 800126e:	4603      	mov	r3, r0
 8001270:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001274:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001278:	2b00      	cmp	r3, #0
 800127a:	d10e      	bne.n	800129a <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b0f      	cmp	r3, #15
 8001280:	d808      	bhi.n	8001294 <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001282:	2200      	movs	r2, #0
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	2031      	movs	r0, #49	@ 0x31
 8001288:	f000 fb80 	bl	800198c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800128c:	4a0b      	ldr	r2, [pc, #44]	@ (80012bc <HAL_InitTick+0xe8>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	e002      	b.n	800129a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800129a:	2031      	movs	r0, #49	@ 0x31
 800129c:	f000 fb90 	bl	80019c0 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 80012a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3738      	adds	r7, #56	@ 0x38
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	44020c00 	.word	0x44020c00
 80012b0:	0a7c5ac5 	.word	0x0a7c5ac5
 80012b4:	200001b0 	.word	0x200001b0
 80012b8:	40001000 	.word	0x40001000
 80012bc:	2000001c 	.word	0x2000001c

080012c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <NMI_Handler+0x4>

080012c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <HardFault_Handler+0x4>

080012d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <MemManage_Handler+0x4>

080012d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <BusFault_Handler+0x4>

080012e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <UsageFault_Handler+0x4>

080012e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012fc:	4802      	ldr	r0, [pc, #8]	@ (8001308 <TIM6_IRQHandler+0x10>)
 80012fe:	f005 f817 	bl	8006330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200001b0 	.word	0x200001b0

0800130c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001310:	4802      	ldr	r0, [pc, #8]	@ (800131c <TIM7_IRQHandler+0x10>)
 8001312:	f005 f80d 	bl	8006330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	2000024c 	.word	0x2000024c

08001320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001328:	4a14      	ldr	r2, [pc, #80]	@ (800137c <_sbrk+0x5c>)
 800132a:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <_sbrk+0x60>)
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001334:	4b13      	ldr	r3, [pc, #76]	@ (8001384 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d102      	bne.n	8001342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800133c:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <_sbrk+0x64>)
 800133e:	4a12      	ldr	r2, [pc, #72]	@ (8001388 <_sbrk+0x68>)
 8001340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001342:	4b10      	ldr	r3, [pc, #64]	@ (8001384 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	429a      	cmp	r2, r3
 800134e:	d207      	bcs.n	8001360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001350:	f008 fc62 	bl	8009c18 <__errno>
 8001354:	4603      	mov	r3, r0
 8001356:	220c      	movs	r2, #12
 8001358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135a:	f04f 33ff 	mov.w	r3, #4294967295
 800135e:	e009      	b.n	8001374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001360:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001366:	4b07      	ldr	r3, [pc, #28]	@ (8001384 <_sbrk+0x64>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	4a05      	ldr	r2, [pc, #20]	@ (8001384 <_sbrk+0x64>)
 8001370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001372:	68fb      	ldr	r3, [r7, #12]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200a0000 	.word	0x200a0000
 8001380:	00000400 	.word	0x00000400
 8001384:	200001fc 	.word	0x200001fc
 8001388:	20002f20 	.word	0x20002f20

0800138c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001392:	4b35      	ldr	r3, [pc, #212]	@ (8001468 <SystemInit+0xdc>)
 8001394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001398:	4a33      	ldr	r2, [pc, #204]	@ (8001468 <SystemInit+0xdc>)
 800139a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800139e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80013a2:	4b32      	ldr	r3, [pc, #200]	@ (800146c <SystemInit+0xe0>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80013a8:	4b30      	ldr	r3, [pc, #192]	@ (800146c <SystemInit+0xe0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80013ae:	4b2f      	ldr	r3, [pc, #188]	@ (800146c <SystemInit+0xe0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80013b4:	4b2d      	ldr	r3, [pc, #180]	@ (800146c <SystemInit+0xe0>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	492c      	ldr	r1, [pc, #176]	@ (800146c <SystemInit+0xe0>)
 80013ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001470 <SystemInit+0xe4>)
 80013bc:	4013      	ands	r3, r2
 80013be:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80013c0:	4b2a      	ldr	r3, [pc, #168]	@ (800146c <SystemInit+0xe0>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80013c6:	4b29      	ldr	r3, [pc, #164]	@ (800146c <SystemInit+0xe0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80013cc:	4b27      	ldr	r3, [pc, #156]	@ (800146c <SystemInit+0xe0>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80013d2:	4b26      	ldr	r3, [pc, #152]	@ (800146c <SystemInit+0xe0>)
 80013d4:	4a27      	ldr	r2, [pc, #156]	@ (8001474 <SystemInit+0xe8>)
 80013d6:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80013d8:	4b24      	ldr	r3, [pc, #144]	@ (800146c <SystemInit+0xe0>)
 80013da:	2200      	movs	r2, #0
 80013dc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80013de:	4b23      	ldr	r3, [pc, #140]	@ (800146c <SystemInit+0xe0>)
 80013e0:	4a24      	ldr	r2, [pc, #144]	@ (8001474 <SystemInit+0xe8>)
 80013e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80013e4:	4b21      	ldr	r3, [pc, #132]	@ (800146c <SystemInit+0xe0>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80013ea:	4b20      	ldr	r3, [pc, #128]	@ (800146c <SystemInit+0xe0>)
 80013ec:	4a21      	ldr	r2, [pc, #132]	@ (8001474 <SystemInit+0xe8>)
 80013ee:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80013f0:	4b1e      	ldr	r3, [pc, #120]	@ (800146c <SystemInit+0xe0>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80013f6:	4b1d      	ldr	r3, [pc, #116]	@ (800146c <SystemInit+0xe0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a1c      	ldr	r2, [pc, #112]	@ (800146c <SystemInit+0xe0>)
 80013fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001400:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001402:	4b1a      	ldr	r3, [pc, #104]	@ (800146c <SystemInit+0xe0>)
 8001404:	2200      	movs	r2, #0
 8001406:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001408:	4b17      	ldr	r3, [pc, #92]	@ (8001468 <SystemInit+0xdc>)
 800140a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800140e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001410:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <SystemInit+0xec>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001418:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001420:	d003      	beq.n	800142a <SystemInit+0x9e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001428:	d117      	bne.n	800145a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800142a:	4b13      	ldr	r3, [pc, #76]	@ (8001478 <SystemInit+0xec>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	d005      	beq.n	8001442 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001436:	4b10      	ldr	r3, [pc, #64]	@ (8001478 <SystemInit+0xec>)
 8001438:	4a10      	ldr	r2, [pc, #64]	@ (800147c <SystemInit+0xf0>)
 800143a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800143c:	4b0e      	ldr	r3, [pc, #56]	@ (8001478 <SystemInit+0xec>)
 800143e:	4a10      	ldr	r2, [pc, #64]	@ (8001480 <SystemInit+0xf4>)
 8001440:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001442:	4b0d      	ldr	r3, [pc, #52]	@ (8001478 <SystemInit+0xec>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	4a0c      	ldr	r2, [pc, #48]	@ (8001478 <SystemInit+0xec>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800144e:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <SystemInit+0xec>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	4a09      	ldr	r2, [pc, #36]	@ (8001478 <SystemInit+0xec>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	61d3      	str	r3, [r2, #28]
  }
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000ed00 	.word	0xe000ed00
 800146c:	44020c00 	.word	0x44020c00
 8001470:	eae2eae3 	.word	0xeae2eae3
 8001474:	01010280 	.word	0x01010280
 8001478:	40022000 	.word	0x40022000
 800147c:	08192a3b 	.word	0x08192a3b
 8001480:	4c5d6e7f 	.word	0x4c5d6e7f

08001484 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08e      	sub	sp, #56	@ 0x38
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a4:	463b      	mov	r3, r7
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]
 80014b2:	615a      	str	r2, [r3, #20]
 80014b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014b6:	4b33      	ldr	r3, [pc, #204]	@ (8001584 <MX_TIM3_Init+0x100>)
 80014b8:	4a33      	ldr	r2, [pc, #204]	@ (8001588 <MX_TIM3_Init+0x104>)
 80014ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 80014bc:	4b31      	ldr	r3, [pc, #196]	@ (8001584 <MX_TIM3_Init+0x100>)
 80014be:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80014c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001584 <MX_TIM3_Init+0x100>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80014ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001584 <MX_TIM3_Init+0x100>)
 80014cc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80014d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001584 <MX_TIM3_Init+0x100>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001584 <MX_TIM3_Init+0x100>)
 80014da:	2200      	movs	r2, #0
 80014dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014de:	4829      	ldr	r0, [pc, #164]	@ (8001584 <MX_TIM3_Init+0x100>)
 80014e0:	f004 fc5e 	bl	8005da0 <HAL_TIM_Base_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80014ea:	f7ff fd81 	bl	8000ff0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014f8:	4619      	mov	r1, r3
 80014fa:	4822      	ldr	r0, [pc, #136]	@ (8001584 <MX_TIM3_Init+0x100>)
 80014fc:	f005 f97c 	bl	80067f8 <HAL_TIM_ConfigClockSource>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001506:	f7ff fd73 	bl	8000ff0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800150a:	481e      	ldr	r0, [pc, #120]	@ (8001584 <MX_TIM3_Init+0x100>)
 800150c:	f004 fd4e 	bl	8005fac <HAL_TIM_PWM_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001516:	f7ff fd6b 	bl	8000ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	4619      	mov	r1, r3
 8001528:	4816      	ldr	r0, [pc, #88]	@ (8001584 <MX_TIM3_Init+0x100>)
 800152a:	f006 f86d 	bl	8007608 <HAL_TIMEx_MasterConfigSynchronization>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001534:	f7ff fd5c 	bl	8000ff0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001538:	2360      	movs	r3, #96	@ 0x60
 800153a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001548:	463b      	mov	r3, r7
 800154a:	2200      	movs	r2, #0
 800154c:	4619      	mov	r1, r3
 800154e:	480d      	ldr	r0, [pc, #52]	@ (8001584 <MX_TIM3_Init+0x100>)
 8001550:	f005 f83e 	bl	80065d0 <HAL_TIM_PWM_ConfigChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800155a:	f7ff fd49 	bl	8000ff0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800155e:	463b      	mov	r3, r7
 8001560:	2204      	movs	r2, #4
 8001562:	4619      	mov	r1, r3
 8001564:	4807      	ldr	r0, [pc, #28]	@ (8001584 <MX_TIM3_Init+0x100>)
 8001566:	f005 f833 	bl	80065d0 <HAL_TIM_PWM_ConfigChannel>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001570:	f7ff fd3e 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001574:	4803      	ldr	r0, [pc, #12]	@ (8001584 <MX_TIM3_Init+0x100>)
 8001576:	f000 f881 	bl	800167c <HAL_TIM_MspPostInit>

}
 800157a:	bf00      	nop
 800157c:	3738      	adds	r7, #56	@ 0x38
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000200 	.word	0x20000200
 8001588:	40000400 	.word	0x40000400

0800158c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800159c:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <MX_TIM7_Init+0x68>)
 800159e:	4a16      	ldr	r2, [pc, #88]	@ (80015f8 <MX_TIM7_Init+0x6c>)
 80015a0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2000;
 80015a2:	4b14      	ldr	r3, [pc, #80]	@ (80015f4 <MX_TIM7_Init+0x68>)
 80015a4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80015a8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015aa:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <MX_TIM7_Init+0x68>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 62500;
 80015b0:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <MX_TIM7_Init+0x68>)
 80015b2:	f24f 4224 	movw	r2, #62500	@ 0xf424
 80015b6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015b8:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <MX_TIM7_Init+0x68>)
 80015ba:	2280      	movs	r2, #128	@ 0x80
 80015bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80015be:	480d      	ldr	r0, [pc, #52]	@ (80015f4 <MX_TIM7_Init+0x68>)
 80015c0:	f004 fbee 	bl	8005da0 <HAL_TIM_Base_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80015ca:	f7ff fd11 	bl	8000ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	4619      	mov	r1, r3
 80015da:	4806      	ldr	r0, [pc, #24]	@ (80015f4 <MX_TIM7_Init+0x68>)
 80015dc:	f006 f814 	bl	8007608 <HAL_TIMEx_MasterConfigSynchronization>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80015e6:	f7ff fd03 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	2000024c 	.word	0x2000024c
 80015f8:	40001400 	.word	0x40001400

080015fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a19      	ldr	r2, [pc, #100]	@ (8001670 <HAL_TIM_Base_MspInit+0x74>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d10f      	bne.n	800162e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800160e:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <HAL_TIM_Base_MspInit+0x78>)
 8001610:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001614:	4a17      	ldr	r2, [pc, #92]	@ (8001674 <HAL_TIM_Base_MspInit+0x78>)
 8001616:	f043 0302 	orr.w	r3, r3, #2
 800161a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800161e:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <HAL_TIM_Base_MspInit+0x78>)
 8001620:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800162c:	e01b      	b.n	8001666 <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM7)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a11      	ldr	r2, [pc, #68]	@ (8001678 <HAL_TIM_Base_MspInit+0x7c>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d116      	bne.n	8001666 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001638:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <HAL_TIM_Base_MspInit+0x78>)
 800163a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800163e:	4a0d      	ldr	r2, [pc, #52]	@ (8001674 <HAL_TIM_Base_MspInit+0x78>)
 8001640:	f043 0320 	orr.w	r3, r3, #32
 8001644:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001648:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <HAL_TIM_Base_MspInit+0x78>)
 800164a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800164e:	f003 0320 	and.w	r3, r3, #32
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2105      	movs	r1, #5
 800165a:	2032      	movs	r0, #50	@ 0x32
 800165c:	f000 f996 	bl	800198c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001660:	2032      	movs	r0, #50	@ 0x32
 8001662:	f000 f9ad 	bl	80019c0 <HAL_NVIC_EnableIRQ>
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40000400 	.word	0x40000400
 8001674:	44020c00 	.word	0x44020c00
 8001678:	40001400 	.word	0x40001400

0800167c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a12      	ldr	r2, [pc, #72]	@ (80016e4 <HAL_TIM_MspPostInit+0x68>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d11e      	bne.n	80016dc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800169e:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <HAL_TIM_MspPostInit+0x6c>)
 80016a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016a4:	4a10      	ldr	r2, [pc, #64]	@ (80016e8 <HAL_TIM_MspPostInit+0x6c>)
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016ae:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <HAL_TIM_MspPostInit+0x6c>)
 80016b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = SG_ENTER_Pin|SG_EXIT_Pin;
 80016bc:	23c0      	movs	r3, #192	@ 0xc0
 80016be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016cc:	2302      	movs	r3, #2
 80016ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	4619      	mov	r1, r3
 80016d6:	4805      	ldr	r0, [pc, #20]	@ (80016ec <HAL_TIM_MspPostInit+0x70>)
 80016d8:	f000 f9d8 	bl	8001a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016dc:	bf00      	nop
 80016de:	3720      	adds	r7, #32
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40000400 	.word	0x40000400
 80016e8:	44020c00 	.word	0x44020c00
 80016ec:	42020800 	.word	0x42020800

080016f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016f0:	480d      	ldr	r0, [pc, #52]	@ (8001728 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016f4:	f7ff fe4a 	bl	800138c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f8:	480c      	ldr	r0, [pc, #48]	@ (800172c <LoopForever+0x6>)
  ldr r1, =_edata
 80016fa:	490d      	ldr	r1, [pc, #52]	@ (8001730 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001734 <LoopForever+0xe>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001700:	e002      	b.n	8001708 <LoopCopyDataInit>

08001702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001706:	3304      	adds	r3, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800170c:	d3f9      	bcc.n	8001702 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170e:	4a0a      	ldr	r2, [pc, #40]	@ (8001738 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001710:	4c0a      	ldr	r4, [pc, #40]	@ (800173c <LoopForever+0x16>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001714:	e001      	b.n	800171a <LoopFillZerobss>

08001716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001718:	3204      	adds	r2, #4

0800171a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800171c:	d3fb      	bcc.n	8001716 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800171e:	f008 fa81 	bl	8009c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001722:	f7ff fb9f 	bl	8000e64 <main>

08001726 <LoopForever>:

LoopForever:
    b LoopForever
 8001726:	e7fe      	b.n	8001726 <LoopForever>
  ldr   r0, =_estack
 8001728:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800172c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001730:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001734:	0800a678 	.word	0x0800a678
  ldr r2, =_sbss
 8001738:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800173c:	20002f1c 	.word	0x20002f1c

08001740 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001740:	e7fe      	b.n	8001740 <ADC1_IRQHandler>
	...

08001744 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001748:	2003      	movs	r0, #3
 800174a:	f000 f914 	bl	8001976 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800174e:	f001 fd77 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 8001752:	4602      	mov	r2, r0
 8001754:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <HAL_Init+0x44>)
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	f003 030f 	and.w	r3, r3, #15
 800175c:	490b      	ldr	r1, [pc, #44]	@ (800178c <HAL_Init+0x48>)
 800175e:	5ccb      	ldrb	r3, [r1, r3]
 8001760:	fa22 f303 	lsr.w	r3, r2, r3
 8001764:	4a0a      	ldr	r2, [pc, #40]	@ (8001790 <HAL_Init+0x4c>)
 8001766:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001768:	2004      	movs	r0, #4
 800176a:	f000 f937 	bl	80019dc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800176e:	200f      	movs	r0, #15
 8001770:	f7ff fd30 	bl	80011d4 <HAL_InitTick>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e002      	b.n	8001784 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800177e:	f7ff fd1f 	bl	80011c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	bd80      	pop	{r7, pc}
 8001788:	44020c00 	.word	0x44020c00
 800178c:	0800a620 	.word	0x0800a620
 8001790:	20000018 	.word	0x20000018

08001794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001798:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <HAL_IncTick+0x20>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <HAL_IncTick+0x24>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	4a04      	ldr	r2, [pc, #16]	@ (80017b8 <HAL_IncTick+0x24>)
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000020 	.word	0x20000020
 80017b8:	20000298 	.word	0x20000298

080017bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return uwTick;
 80017c0:	4b03      	ldr	r3, [pc, #12]	@ (80017d0 <HAL_GetTick+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000298 	.word	0x20000298

080017d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017dc:	f7ff ffee 	bl	80017bc <HAL_GetTick>
 80017e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ec:	d005      	beq.n	80017fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <HAL_Delay+0x44>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017fa:	bf00      	nop
 80017fc:	f7ff ffde 	bl	80017bc <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	429a      	cmp	r2, r3
 800180a:	d8f7      	bhi.n	80017fc <HAL_Delay+0x28>
  {
  }
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000020 	.word	0x20000020

0800181c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800182c:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001838:	4013      	ands	r3, r2
 800183a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001844:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800184c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184e:	4a04      	ldr	r2, [pc, #16]	@ (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	60d3      	str	r3, [r2, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001868:	4b04      	ldr	r3, [pc, #16]	@ (800187c <__NVIC_GetPriorityGrouping+0x18>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	f003 0307 	and.w	r3, r3, #7
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800188a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800188e:	2b00      	cmp	r3, #0
 8001890:	db0b      	blt.n	80018aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	f003 021f 	and.w	r2, r3, #31
 8001898:	4907      	ldr	r1, [pc, #28]	@ (80018b8 <__NVIC_EnableIRQ+0x38>)
 800189a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800189e:	095b      	lsrs	r3, r3, #5
 80018a0:	2001      	movs	r0, #1
 80018a2:	fa00 f202 	lsl.w	r2, r0, r2
 80018a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000e100 	.word	0xe000e100

080018bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	db0a      	blt.n	80018e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	490c      	ldr	r1, [pc, #48]	@ (8001908 <__NVIC_SetPriority+0x4c>)
 80018d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018da:	0112      	lsls	r2, r2, #4
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	440b      	add	r3, r1
 80018e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e4:	e00a      	b.n	80018fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4908      	ldr	r1, [pc, #32]	@ (800190c <__NVIC_SetPriority+0x50>)
 80018ec:	88fb      	ldrh	r3, [r7, #6]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	3b04      	subs	r3, #4
 80018f4:	0112      	lsls	r2, r2, #4
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	440b      	add	r3, r1
 80018fa:	761a      	strb	r2, [r3, #24]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000e100 	.word	0xe000e100
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	@ 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f1c3 0307 	rsb	r3, r3, #7
 800192a:	2b04      	cmp	r3, #4
 800192c:	bf28      	it	cs
 800192e:	2304      	movcs	r3, #4
 8001930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3304      	adds	r3, #4
 8001936:	2b06      	cmp	r3, #6
 8001938:	d902      	bls.n	8001940 <NVIC_EncodePriority+0x30>
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3b03      	subs	r3, #3
 800193e:	e000      	b.n	8001942 <NVIC_EncodePriority+0x32>
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	f04f 32ff 	mov.w	r2, #4294967295
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001958:	f04f 31ff 	mov.w	r1, #4294967295
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43d9      	mvns	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	4313      	orrs	r3, r2
         );
}
 800196a:	4618      	mov	r0, r3
 800196c:	3724      	adds	r7, #36	@ 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff ff4c 	bl	800181c <__NVIC_SetPriorityGrouping>
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800199a:	f7ff ff63 	bl	8001864 <__NVIC_GetPriorityGrouping>
 800199e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	68b9      	ldr	r1, [r7, #8]
 80019a4:	6978      	ldr	r0, [r7, #20]
 80019a6:	f7ff ffb3 	bl	8001910 <NVIC_EncodePriority>
 80019aa:	4602      	mov	r2, r0
 80019ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019b0:	4611      	mov	r1, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff ff82 	bl	80018bc <__NVIC_SetPriority>
}
 80019b8:	bf00      	nop
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff ff56 	bl	8001880 <__NVIC_EnableIRQ>
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d844      	bhi.n	8001a74 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80019ea:	a201      	add	r2, pc, #4	@ (adr r2, 80019f0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80019ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f0:	08001a13 	.word	0x08001a13
 80019f4:	08001a31 	.word	0x08001a31
 80019f8:	08001a53 	.word	0x08001a53
 80019fc:	08001a75 	.word	0x08001a75
 8001a00:	08001a05 	.word	0x08001a05
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001a04:	4b1f      	ldr	r3, [pc, #124]	@ (8001a84 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a1e      	ldr	r2, [pc, #120]	@ (8001a84 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a0a:	f043 0304 	orr.w	r3, r3, #4
 8001a0e:	6013      	str	r3, [r2, #0]
      break;
 8001a10:	e031      	b.n	8001a76 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001a12:	4b1c      	ldr	r3, [pc, #112]	@ (8001a84 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a1b      	ldr	r2, [pc, #108]	@ (8001a84 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a18:	f023 0304 	bic.w	r3, r3, #4
 8001a1c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a88 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001a24:	4a18      	ldr	r2, [pc, #96]	@ (8001a88 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a26:	f023 030c 	bic.w	r3, r3, #12
 8001a2a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001a2e:	e022      	b.n	8001a76 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001a30:	4b14      	ldr	r3, [pc, #80]	@ (8001a84 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a13      	ldr	r2, [pc, #76]	@ (8001a84 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a36:	f023 0304 	bic.w	r3, r3, #4
 8001a3a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001a3c:	4b12      	ldr	r3, [pc, #72]	@ (8001a88 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001a42:	f023 030c 	bic.w	r3, r3, #12
 8001a46:	4a10      	ldr	r2, [pc, #64]	@ (8001a88 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a48:	f043 0304 	orr.w	r3, r3, #4
 8001a4c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001a50:	e011      	b.n	8001a76 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001a52:	4b0c      	ldr	r3, [pc, #48]	@ (8001a84 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a0b      	ldr	r2, [pc, #44]	@ (8001a84 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a58:	f023 0304 	bic.w	r3, r3, #4
 8001a5c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a88 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001a64:	f023 030c 	bic.w	r3, r3, #12
 8001a68:	4a07      	ldr	r2, [pc, #28]	@ (8001a88 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a6a:	f043 0308 	orr.w	r3, r3, #8
 8001a6e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001a72:	e000      	b.n	8001a76 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001a74:	bf00      	nop
  }
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000e010 	.word	0xe000e010
 8001a88:	44020c00 	.word	0x44020c00

08001a8c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001a9a:	e142      	b.n	8001d22 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 8134 	beq.w	8001d1c <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0x38>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b12      	cmp	r3, #18
 8001ac2:	d125      	bne.n	8001b10 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	08da      	lsrs	r2, r3, #3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3208      	adds	r2, #8
 8001acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	220f      	movs	r2, #15
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	f003 020f 	and.w	r2, r3, #15
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	08da      	lsrs	r2, r3, #3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3208      	adds	r2, #8
 8001b0a:	6979      	ldr	r1, [r7, #20]
 8001b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	4013      	ands	r3, r2
 8001b26:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0203 	and.w	r2, r3, #3
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d00b      	beq.n	8001b64 <HAL_GPIO_Init+0xd8>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d007      	beq.n	8001b64 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b58:	2b11      	cmp	r3, #17
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b12      	cmp	r3, #18
 8001b62:	d130      	bne.n	8001bc6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	2203      	movs	r2, #3
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	68da      	ldr	r2, [r3, #12]
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	091b      	lsrs	r3, r3, #4
 8001bb0:	f003 0201 	and.w	r2, r3, #1
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d109      	bne.n	8001be6 <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d11b      	bne.n	8001c16 <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d017      	beq.n	8001c16 <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d07c      	beq.n	8001d1c <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001c22:	4a47      	ldr	r2, [pc, #284]	@ (8001d40 <HAL_GPIO_Init+0x2b4>)
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	089b      	lsrs	r3, r3, #2
 8001c28:	3318      	adds	r3, #24
 8001c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	220f      	movs	r2, #15
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	4013      	ands	r3, r2
 8001c44:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	0a9a      	lsrs	r2, r3, #10
 8001c4a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d44 <HAL_GPIO_Init+0x2b8>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	f002 0203 	and.w	r2, r2, #3
 8001c54:	00d2      	lsls	r2, r2, #3
 8001c56:	4093      	lsls	r3, r2
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001c5e:	4938      	ldr	r1, [pc, #224]	@ (8001d40 <HAL_GPIO_Init+0x2b4>)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	089b      	lsrs	r3, r3, #2
 8001c64:	3318      	adds	r3, #24
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001c6c:	4b34      	ldr	r3, [pc, #208]	@ (8001d40 <HAL_GPIO_Init+0x2b4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001c90:	4a2b      	ldr	r2, [pc, #172]	@ (8001d40 <HAL_GPIO_Init+0x2b4>)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001c96:	4b2a      	ldr	r3, [pc, #168]	@ (8001d40 <HAL_GPIO_Init+0x2b4>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001cba:	4a21      	ldr	r2, [pc, #132]	@ (8001d40 <HAL_GPIO_Init+0x2b4>)
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d40 <HAL_GPIO_Init+0x2b4>)
 8001cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001cc6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001ce6:	4a16      	ldr	r2, [pc, #88]	@ (8001d40 <HAL_GPIO_Init+0x2b4>)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001cee:	4b14      	ldr	r3, [pc, #80]	@ (8001d40 <HAL_GPIO_Init+0x2b4>)
 8001cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cf4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001d14:	4a0a      	ldr	r2, [pc, #40]	@ (8001d40 <HAL_GPIO_Init+0x2b4>)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f47f aeb5 	bne.w	8001a9c <HAL_GPIO_Init+0x10>
  }
}
 8001d32:	bf00      	nop
 8001d34:	bf00      	nop
 8001d36:	371c      	adds	r7, #28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	44022000 	.word	0x44022000
 8001d44:	002f7f7f 	.word	0x002f7f7f

08001d48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691a      	ldr	r2, [r3, #16]
 8001d58:	887b      	ldrh	r3, [r7, #2]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d002      	beq.n	8001d66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d60:	2301      	movs	r3, #1
 8001d62:	73fb      	strb	r3, [r7, #15]
 8001d64:	e001      	b.n	8001d6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	807b      	strh	r3, [r7, #2]
 8001d84:	4613      	mov	r3, r2
 8001d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d88:	787b      	ldrb	r3, [r7, #1]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d8e:	887a      	ldrh	r2, [r7, #2]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d94:	e002      	b.n	8001d9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d96:	887a      	ldrh	r2, [r7, #2]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dba:	887a      	ldrh	r2, [r7, #2]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	041a      	lsls	r2, r3, #16
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	43d9      	mvns	r1, r3
 8001dc6:	887b      	ldrh	r3, [r7, #2]
 8001dc8:	400b      	ands	r3, r1
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	619a      	str	r2, [r3, #24]
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e08d      	b.n	8001f0a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d106      	bne.n	8001e08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7fe fd9c 	bl	8000940 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2224      	movs	r2, #36	@ 0x24
 8001e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0201 	bic.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d107      	bne.n	8001e56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	e006      	b.n	8001e64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001e62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d108      	bne.n	8001e7e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	e007      	b.n	8001e8e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ea0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001eb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691a      	ldr	r2, [r3, #16]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69d9      	ldr	r1, [r3, #28]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a1a      	ldr	r2, [r3, #32]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	460b      	mov	r3, r1
 8001f22:	817b      	strh	r3, [r7, #10]
 8001f24:	4613      	mov	r3, r2
 8001f26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b20      	cmp	r3, #32
 8001f32:	f040 80da 	bne.w	80020ea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_I2C_Master_Transmit+0x30>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e0d3      	b.n	80020ec <HAL_I2C_Master_Transmit+0x1d8>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f4c:	f7ff fc36 	bl	80017bc <HAL_GetTick>
 8001f50:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	2319      	movs	r3, #25
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 f8f0 	bl	8002144 <I2C_WaitOnFlagUntilTimeout>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e0be      	b.n	80020ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2221      	movs	r2, #33	@ 0x21
 8001f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2210      	movs	r2, #16
 8001f7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	893a      	ldrh	r2, [r7, #8]
 8001f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	2bff      	cmp	r3, #255	@ 0xff
 8001f9e:	d90e      	bls.n	8001fbe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	22ff      	movs	r2, #255	@ 0xff
 8001fa4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	8979      	ldrh	r1, [r7, #10]
 8001fae:	4b51      	ldr	r3, [pc, #324]	@ (80020f4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 fa88 	bl	80024cc <I2C_TransferConfig>
 8001fbc:	e06c      	b.n	8002098 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	8979      	ldrh	r1, [r7, #10]
 8001fd0:	4b48      	ldr	r3, [pc, #288]	@ (80020f4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 fa77 	bl	80024cc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001fde:	e05b      	b.n	8002098 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	6a39      	ldr	r1, [r7, #32]
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 f906 	bl	80021f6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e07b      	b.n	80020ec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff8:	781a      	ldrb	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800200e:	b29b      	uxth	r3, r3
 8002010:	3b01      	subs	r3, #1
 8002012:	b29a      	uxth	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800201c:	3b01      	subs	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002028:	b29b      	uxth	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d034      	beq.n	8002098 <HAL_I2C_Master_Transmit+0x184>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002032:	2b00      	cmp	r3, #0
 8002034:	d130      	bne.n	8002098 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	2200      	movs	r2, #0
 800203e:	2180      	movs	r1, #128	@ 0x80
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 f87f 	bl	8002144 <I2C_WaitOnFlagUntilTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e04d      	b.n	80020ec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002054:	b29b      	uxth	r3, r3
 8002056:	2bff      	cmp	r3, #255	@ 0xff
 8002058:	d90e      	bls.n	8002078 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	22ff      	movs	r2, #255	@ 0xff
 800205e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002064:	b2da      	uxtb	r2, r3
 8002066:	8979      	ldrh	r1, [r7, #10]
 8002068:	2300      	movs	r3, #0
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 fa2b 	bl	80024cc <I2C_TransferConfig>
 8002076:	e00f      	b.n	8002098 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800207c:	b29a      	uxth	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002086:	b2da      	uxtb	r2, r3
 8002088:	8979      	ldrh	r1, [r7, #10]
 800208a:	2300      	movs	r3, #0
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 fa1a 	bl	80024cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800209c:	b29b      	uxth	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d19e      	bne.n	8001fe0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	6a39      	ldr	r1, [r7, #32]
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 f8ec 	bl	8002284 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e01a      	b.n	80020ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2220      	movs	r2, #32
 80020bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6859      	ldr	r1, [r3, #4]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b0b      	ldr	r3, [pc, #44]	@ (80020f8 <HAL_I2C_Master_Transmit+0x1e4>)
 80020ca:	400b      	ands	r3, r1
 80020cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2220      	movs	r2, #32
 80020d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	e000      	b.n	80020ec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80020ea:	2302      	movs	r3, #2
  }
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	80002000 	.word	0x80002000
 80020f8:	fe00e800 	.word	0xfe00e800

080020fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b02      	cmp	r3, #2
 8002110:	d103      	bne.n	800211a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2200      	movs	r2, #0
 8002118:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b01      	cmp	r3, #1
 8002126:	d007      	beq.n	8002138 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699a      	ldr	r2, [r3, #24]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0201 	orr.w	r2, r2, #1
 8002136:	619a      	str	r2, [r3, #24]
  }
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	4613      	mov	r3, r2
 8002152:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002154:	e03b      	b.n	80021ce <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	6839      	ldr	r1, [r7, #0]
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 f8d6 	bl	800230c <I2C_IsErrorOccurred>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e041      	b.n	80021ee <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002170:	d02d      	beq.n	80021ce <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002172:	f7ff fb23 	bl	80017bc <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d302      	bcc.n	8002188 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d122      	bne.n	80021ce <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699a      	ldr	r2, [r3, #24]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	4013      	ands	r3, r2
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	429a      	cmp	r2, r3
 8002196:	bf0c      	ite	eq
 8002198:	2301      	moveq	r3, #1
 800219a:	2300      	movne	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	461a      	mov	r2, r3
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d113      	bne.n	80021ce <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021aa:	f043 0220 	orr.w	r2, r3, #32
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2220      	movs	r2, #32
 80021b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e00f      	b.n	80021ee <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	699a      	ldr	r2, [r3, #24]
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	4013      	ands	r3, r2
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	429a      	cmp	r2, r3
 80021dc:	bf0c      	ite	eq
 80021de:	2301      	moveq	r3, #1
 80021e0:	2300      	movne	r3, #0
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	461a      	mov	r2, r3
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d0b4      	beq.n	8002156 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b084      	sub	sp, #16
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002202:	e033      	b.n	800226c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	68b9      	ldr	r1, [r7, #8]
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 f87f 	bl	800230c <I2C_IsErrorOccurred>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e031      	b.n	800227c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221e:	d025      	beq.n	800226c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002220:	f7ff facc 	bl	80017bc <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	429a      	cmp	r2, r3
 800222e:	d302      	bcc.n	8002236 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d11a      	bne.n	800226c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b02      	cmp	r3, #2
 8002242:	d013      	beq.n	800226c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002248:	f043 0220 	orr.w	r2, r3, #32
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e007      	b.n	800227c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b02      	cmp	r3, #2
 8002278:	d1c4      	bne.n	8002204 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002290:	e02f      	b.n	80022f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 f838 	bl	800230c <I2C_IsErrorOccurred>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e02d      	b.n	8002302 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022a6:	f7ff fa89 	bl	80017bc <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d302      	bcc.n	80022bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d11a      	bne.n	80022f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	f003 0320 	and.w	r3, r3, #32
 80022c6:	2b20      	cmp	r3, #32
 80022c8:	d013      	beq.n	80022f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ce:	f043 0220 	orr.w	r2, r3, #32
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2220      	movs	r2, #32
 80022da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e007      	b.n	8002302 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	d1c8      	bne.n	8002292 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08a      	sub	sp, #40	@ 0x28
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b00      	cmp	r3, #0
 8002336:	d068      	beq.n	800240a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2210      	movs	r2, #16
 800233e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002340:	e049      	b.n	80023d6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002348:	d045      	beq.n	80023d6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800234a:	f7ff fa37 	bl	80017bc <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	429a      	cmp	r2, r3
 8002358:	d302      	bcc.n	8002360 <I2C_IsErrorOccurred+0x54>
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d13a      	bne.n	80023d6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800236a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002372:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800237e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002382:	d121      	bne.n	80023c8 <I2C_IsErrorOccurred+0xbc>
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800238a:	d01d      	beq.n	80023c8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800238c:	7cfb      	ldrb	r3, [r7, #19]
 800238e:	2b20      	cmp	r3, #32
 8002390:	d01a      	beq.n	80023c8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80023a2:	f7ff fa0b 	bl	80017bc <HAL_GetTick>
 80023a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023a8:	e00e      	b.n	80023c8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80023aa:	f7ff fa07 	bl	80017bc <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b19      	cmp	r3, #25
 80023b6:	d907      	bls.n	80023c8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	f043 0320 	orr.w	r3, r3, #32
 80023be:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80023c6:	e006      	b.n	80023d6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f003 0320 	and.w	r3, r3, #32
 80023d2:	2b20      	cmp	r3, #32
 80023d4:	d1e9      	bne.n	80023aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	f003 0320 	and.w	r3, r3, #32
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	d003      	beq.n	80023ec <I2C_IsErrorOccurred+0xe0>
 80023e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0aa      	beq.n	8002342 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80023ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d103      	bne.n	80023fc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2220      	movs	r2, #32
 80023fa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	f043 0304 	orr.w	r3, r3, #4
 8002402:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00b      	beq.n	8002434 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800242c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00b      	beq.n	8002456 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	f043 0308 	orr.w	r3, r3, #8
 8002444:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800244e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00b      	beq.n	8002478 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	f043 0302 	orr.w	r3, r3, #2
 8002466:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002470:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002478:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800247c:	2b00      	cmp	r3, #0
 800247e:	d01c      	beq.n	80024ba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f7ff fe3b 	bl	80020fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6859      	ldr	r1, [r3, #4]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b0d      	ldr	r3, [pc, #52]	@ (80024c8 <I2C_IsErrorOccurred+0x1bc>)
 8002492:	400b      	ands	r3, r1
 8002494:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	431a      	orrs	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2220      	movs	r2, #32
 80024a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80024ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3728      	adds	r7, #40	@ 0x28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	fe00e800 	.word	0xfe00e800

080024cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	607b      	str	r3, [r7, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	817b      	strh	r3, [r7, #10]
 80024da:	4613      	mov	r3, r2
 80024dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024de:	897b      	ldrh	r3, [r7, #10]
 80024e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024e4:	7a7b      	ldrb	r3, [r7, #9]
 80024e6:	041b      	lsls	r3, r3, #16
 80024e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024ec:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024fa:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	0d5b      	lsrs	r3, r3, #21
 8002506:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800250a:	4b08      	ldr	r3, [pc, #32]	@ (800252c <I2C_TransferConfig+0x60>)
 800250c:	430b      	orrs	r3, r1
 800250e:	43db      	mvns	r3, r3
 8002510:	ea02 0103 	and.w	r1, r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	430a      	orrs	r2, r1
 800251c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800251e:	bf00      	nop
 8002520:	371c      	adds	r7, #28
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	03ff63ff 	.word	0x03ff63ff

08002530 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b20      	cmp	r3, #32
 8002544:	d138      	bne.n	80025b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002550:	2302      	movs	r3, #2
 8002552:	e032      	b.n	80025ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2224      	movs	r2, #36	@ 0x24
 8002560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0201 	bic.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002582:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6819      	ldr	r1, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0201 	orr.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2220      	movs	r2, #32
 80025a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e000      	b.n	80025ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025b8:	2302      	movs	r3, #2
  }
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b085      	sub	sp, #20
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b20      	cmp	r3, #32
 80025da:	d139      	bne.n	8002650 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e033      	b.n	8002652 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2224      	movs	r2, #36	@ 0x24
 80025f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0201 	bic.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002618:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4313      	orrs	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	e000      	b.n	8002652 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002650:	2302      	movs	r3, #2
  }
}
 8002652:	4618      	mov	r0, r3
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d102      	bne.n	8002674 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	f000 bc28 	b.w	8002ec4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002674:	4b94      	ldr	r3, [pc, #592]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	f003 0318 	and.w	r3, r3, #24
 800267c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800267e:	4b92      	ldr	r3, [pc, #584]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 8002680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2b00      	cmp	r3, #0
 8002692:	d05b      	beq.n	800274c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	2b08      	cmp	r3, #8
 8002698:	d005      	beq.n	80026a6 <HAL_RCC_OscConfig+0x46>
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	2b18      	cmp	r3, #24
 800269e:	d114      	bne.n	80026ca <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d111      	bne.n	80026ca <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d102      	bne.n	80026b4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	f000 bc08 	b.w	8002ec4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80026b4:	4b84      	ldr	r3, [pc, #528]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	041b      	lsls	r3, r3, #16
 80026c2:	4981      	ldr	r1, [pc, #516]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80026c8:	e040      	b.n	800274c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d023      	beq.n	800271a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80026d2:	4b7d      	ldr	r3, [pc, #500]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a7c      	ldr	r2, [pc, #496]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 80026d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026de:	f7ff f86d 	bl	80017bc <HAL_GetTick>
 80026e2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80026e6:	f7ff f869 	bl	80017bc <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e3e5      	b.n	8002ec4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80026f8:	4b73      	ldr	r3, [pc, #460]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002704:	4b70      	ldr	r3, [pc, #448]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	041b      	lsls	r3, r3, #16
 8002712:	496d      	ldr	r1, [pc, #436]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 8002714:	4313      	orrs	r3, r2
 8002716:	618b      	str	r3, [r1, #24]
 8002718:	e018      	b.n	800274c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800271a:	4b6b      	ldr	r3, [pc, #428]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a6a      	ldr	r2, [pc, #424]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 8002720:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002726:	f7ff f849 	bl	80017bc <HAL_GetTick>
 800272a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800272e:	f7ff f845 	bl	80017bc <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e3c1      	b.n	8002ec4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002740:	4b61      	ldr	r3, [pc, #388]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1f0      	bne.n	800272e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80a0 	beq.w	800289a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	2b10      	cmp	r3, #16
 800275e:	d005      	beq.n	800276c <HAL_RCC_OscConfig+0x10c>
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	2b18      	cmp	r3, #24
 8002764:	d109      	bne.n	800277a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	2b03      	cmp	r3, #3
 800276a:	d106      	bne.n	800277a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	f040 8092 	bne.w	800289a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e3a4      	b.n	8002ec4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002782:	d106      	bne.n	8002792 <HAL_RCC_OscConfig+0x132>
 8002784:	4b50      	ldr	r3, [pc, #320]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a4f      	ldr	r2, [pc, #316]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 800278a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	e058      	b.n	8002844 <HAL_RCC_OscConfig+0x1e4>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d112      	bne.n	80027c0 <HAL_RCC_OscConfig+0x160>
 800279a:	4b4b      	ldr	r3, [pc, #300]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a4a      	ldr	r2, [pc, #296]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 80027a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	4b48      	ldr	r3, [pc, #288]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a47      	ldr	r2, [pc, #284]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 80027ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b45      	ldr	r3, [pc, #276]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a44      	ldr	r2, [pc, #272]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 80027b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e041      	b.n	8002844 <HAL_RCC_OscConfig+0x1e4>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027c8:	d112      	bne.n	80027f0 <HAL_RCC_OscConfig+0x190>
 80027ca:	4b3f      	ldr	r3, [pc, #252]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a3e      	ldr	r2, [pc, #248]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 80027d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	4b3c      	ldr	r3, [pc, #240]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a3b      	ldr	r2, [pc, #236]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 80027dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	4b39      	ldr	r3, [pc, #228]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a38      	ldr	r2, [pc, #224]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 80027e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	e029      	b.n	8002844 <HAL_RCC_OscConfig+0x1e4>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80027f8:	d112      	bne.n	8002820 <HAL_RCC_OscConfig+0x1c0>
 80027fa:	4b33      	ldr	r3, [pc, #204]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a32      	ldr	r2, [pc, #200]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 8002800:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	4b30      	ldr	r3, [pc, #192]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a2f      	ldr	r2, [pc, #188]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 800280c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	4b2d      	ldr	r3, [pc, #180]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a2c      	ldr	r2, [pc, #176]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 8002818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	e011      	b.n	8002844 <HAL_RCC_OscConfig+0x1e4>
 8002820:	4b29      	ldr	r3, [pc, #164]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a28      	ldr	r2, [pc, #160]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 8002826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	4b26      	ldr	r3, [pc, #152]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a25      	ldr	r2, [pc, #148]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 8002832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	4b23      	ldr	r3, [pc, #140]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a22      	ldr	r2, [pc, #136]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 800283e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d013      	beq.n	8002874 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7fe ffb6 	bl	80017bc <HAL_GetTick>
 8002850:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002854:	f7fe ffb2 	bl	80017bc <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	@ 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e32e      	b.n	8002ec4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002866:	4b18      	ldr	r3, [pc, #96]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0x1f4>
 8002872:	e012      	b.n	800289a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7fe ffa2 	bl	80017bc <HAL_GetTick>
 8002878:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800287c:	f7fe ff9e 	bl	80017bc <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	@ 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e31a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800288e:	4b0e      	ldr	r3, [pc, #56]	@ (80028c8 <HAL_RCC_OscConfig+0x268>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 809a 	beq.w	80029dc <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d005      	beq.n	80028ba <HAL_RCC_OscConfig+0x25a>
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	2b18      	cmp	r3, #24
 80028b2:	d149      	bne.n	8002948 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d146      	bne.n	8002948 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d104      	bne.n	80028cc <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e2fe      	b.n	8002ec4 <HAL_RCC_OscConfig+0x864>
 80028c6:	bf00      	nop
 80028c8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d11c      	bne.n	800290c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80028d2:	4b9a      	ldr	r3, [pc, #616]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0218 	and.w	r2, r3, #24
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d014      	beq.n	800290c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80028e2:	4b96      	ldr	r3, [pc, #600]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f023 0218 	bic.w	r2, r3, #24
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	4993      	ldr	r1, [pc, #588]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80028f4:	f000 fdd0 	bl	8003498 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80028f8:	4b91      	ldr	r3, [pc, #580]	@ (8002b40 <HAL_RCC_OscConfig+0x4e0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7fe fc69 	bl	80011d4 <HAL_InitTick>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e2db      	b.n	8002ec4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7fe ff56 	bl	80017bc <HAL_GetTick>
 8002910:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002914:	f7fe ff52 	bl	80017bc <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e2ce      	b.n	8002ec4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002926:	4b85      	ldr	r3, [pc, #532]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002932:	4b82      	ldr	r3, [pc, #520]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	041b      	lsls	r3, r3, #16
 8002940:	497e      	ldr	r1, [pc, #504]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 8002942:	4313      	orrs	r3, r2
 8002944:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002946:	e049      	b.n	80029dc <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d02c      	beq.n	80029aa <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002950:	4b7a      	ldr	r3, [pc, #488]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f023 0218 	bic.w	r2, r3, #24
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	4977      	ldr	r1, [pc, #476]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 800295e:	4313      	orrs	r3, r2
 8002960:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002962:	4b76      	ldr	r3, [pc, #472]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a75      	ldr	r2, [pc, #468]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296e:	f7fe ff25 	bl	80017bc <HAL_GetTick>
 8002972:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002976:	f7fe ff21 	bl	80017bc <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e29d      	b.n	8002ec4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002988:	4b6c      	ldr	r3, [pc, #432]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002994:	4b69      	ldr	r3, [pc, #420]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	041b      	lsls	r3, r3, #16
 80029a2:	4966      	ldr	r1, [pc, #408]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	610b      	str	r3, [r1, #16]
 80029a8:	e018      	b.n	80029dc <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029aa:	4b64      	ldr	r3, [pc, #400]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a63      	ldr	r2, [pc, #396]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 80029b0:	f023 0301 	bic.w	r3, r3, #1
 80029b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b6:	f7fe ff01 	bl	80017bc <HAL_GetTick>
 80029ba:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80029be:	f7fe fefd 	bl	80017bc <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e279      	b.n	8002ec4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029d0:	4b5a      	ldr	r3, [pc, #360]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f0      	bne.n	80029be <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d03c      	beq.n	8002a62 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d01c      	beq.n	8002a2a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f0:	4b52      	ldr	r3, [pc, #328]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 80029f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029f6:	4a51      	ldr	r2, [pc, #324]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 80029f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80029fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7fe fedc 	bl	80017bc <HAL_GetTick>
 8002a04:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002a08:	f7fe fed8 	bl	80017bc <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e254      	b.n	8002ec4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002a1a:	4b48      	ldr	r3, [pc, #288]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 8002a1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0ef      	beq.n	8002a08 <HAL_RCC_OscConfig+0x3a8>
 8002a28:	e01b      	b.n	8002a62 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a2a:	4b44      	ldr	r3, [pc, #272]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 8002a2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a30:	4a42      	ldr	r2, [pc, #264]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 8002a32:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3a:	f7fe febf 	bl	80017bc <HAL_GetTick>
 8002a3e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002a42:	f7fe febb 	bl	80017bc <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e237      	b.n	8002ec4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002a54:	4b39      	ldr	r3, [pc, #228]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 8002a56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1ef      	bne.n	8002a42 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 80d2 	beq.w	8002c14 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002a70:	4b34      	ldr	r3, [pc, #208]	@ (8002b44 <HAL_RCC_OscConfig+0x4e4>)
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d118      	bne.n	8002aae <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002a7c:	4b31      	ldr	r3, [pc, #196]	@ (8002b44 <HAL_RCC_OscConfig+0x4e4>)
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	4a30      	ldr	r2, [pc, #192]	@ (8002b44 <HAL_RCC_OscConfig+0x4e4>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a88:	f7fe fe98 	bl	80017bc <HAL_GetTick>
 8002a8c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a90:	f7fe fe94 	bl	80017bc <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e210      	b.n	8002ec4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002aa2:	4b28      	ldr	r3, [pc, #160]	@ (8002b44 <HAL_RCC_OscConfig+0x4e4>)
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d108      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x468>
 8002ab6:	4b21      	ldr	r3, [pc, #132]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 8002ab8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002abc:	4a1f      	ldr	r2, [pc, #124]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ac6:	e074      	b.n	8002bb2 <HAL_RCC_OscConfig+0x552>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d118      	bne.n	8002b02 <HAL_RCC_OscConfig+0x4a2>
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 8002ad2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ad6:	4a19      	ldr	r2, [pc, #100]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 8002ad8:	f023 0301 	bic.w	r3, r3, #1
 8002adc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ae0:	4b16      	ldr	r3, [pc, #88]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 8002ae2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ae6:	4a15      	ldr	r2, [pc, #84]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 8002ae8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002aec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002af0:	4b12      	ldr	r3, [pc, #72]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 8002af2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002af6:	4a11      	ldr	r2, [pc, #68]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 8002af8:	f023 0304 	bic.w	r3, r3, #4
 8002afc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b00:	e057      	b.n	8002bb2 <HAL_RCC_OscConfig+0x552>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b05      	cmp	r3, #5
 8002b08:	d11e      	bne.n	8002b48 <HAL_RCC_OscConfig+0x4e8>
 8002b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 8002b0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b10:	4a0a      	ldr	r2, [pc, #40]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 8002b12:	f043 0304 	orr.w	r3, r3, #4
 8002b16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b1a:	4b08      	ldr	r3, [pc, #32]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 8002b1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b20:	4a06      	ldr	r2, [pc, #24]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 8002b22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b26:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b2a:	4b04      	ldr	r3, [pc, #16]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 8002b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b30:	4a02      	ldr	r2, [pc, #8]	@ (8002b3c <HAL_RCC_OscConfig+0x4dc>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b3a:	e03a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x552>
 8002b3c:	44020c00 	.word	0x44020c00
 8002b40:	2000001c 	.word	0x2000001c
 8002b44:	44020800 	.word	0x44020800
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b85      	cmp	r3, #133	@ 0x85
 8002b4e:	d118      	bne.n	8002b82 <HAL_RCC_OscConfig+0x522>
 8002b50:	4ba2      	ldr	r3, [pc, #648]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002b52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b56:	4aa1      	ldr	r2, [pc, #644]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002b58:	f043 0304 	orr.w	r3, r3, #4
 8002b5c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b60:	4b9e      	ldr	r3, [pc, #632]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002b62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b66:	4a9d      	ldr	r2, [pc, #628]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002b68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b6c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b70:	4b9a      	ldr	r3, [pc, #616]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002b72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b76:	4a99      	ldr	r2, [pc, #612]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b80:	e017      	b.n	8002bb2 <HAL_RCC_OscConfig+0x552>
 8002b82:	4b96      	ldr	r3, [pc, #600]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002b84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b88:	4a94      	ldr	r2, [pc, #592]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002b8a:	f023 0301 	bic.w	r3, r3, #1
 8002b8e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b92:	4b92      	ldr	r3, [pc, #584]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002b94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b98:	4a90      	ldr	r2, [pc, #576]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002b9a:	f023 0304 	bic.w	r3, r3, #4
 8002b9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ba2:	4b8e      	ldr	r3, [pc, #568]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ba8:	4a8c      	ldr	r2, [pc, #560]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002baa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d016      	beq.n	8002be8 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bba:	f7fe fdff 	bl	80017bc <HAL_GetTick>
 8002bbe:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bc0:	e00a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc2:	f7fe fdfb 	bl	80017bc <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e175      	b.n	8002ec4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bd8:	4b80      	ldr	r3, [pc, #512]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002bda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0ed      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x562>
 8002be6:	e015      	b.n	8002c14 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be8:	f7fe fde8 	bl	80017bc <HAL_GetTick>
 8002bec:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bee:	e00a      	b.n	8002c06 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf0:	f7fe fde4 	bl	80017bc <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e15e      	b.n	8002ec4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c06:	4b75      	ldr	r3, [pc, #468]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002c08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1ed      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0320 	and.w	r3, r3, #32
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d036      	beq.n	8002c8e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d019      	beq.n	8002c5c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c28:	4b6c      	ldr	r3, [pc, #432]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a6b      	ldr	r2, [pc, #428]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002c2e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7fe fdc2 	bl	80017bc <HAL_GetTick>
 8002c38:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002c3c:	f7fe fdbe 	bl	80017bc <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e13a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002c4e:	4b63      	ldr	r3, [pc, #396]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x5dc>
 8002c5a:	e018      	b.n	8002c8e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c5c:	4b5f      	ldr	r3, [pc, #380]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a5e      	ldr	r2, [pc, #376]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002c62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c68:	f7fe fda8 	bl	80017bc <HAL_GetTick>
 8002c6c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002c70:	f7fe fda4 	bl	80017bc <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e120      	b.n	8002ec4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002c82:	4b56      	ldr	r3, [pc, #344]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 8115 	beq.w	8002ec2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	2b18      	cmp	r3, #24
 8002c9c:	f000 80af 	beq.w	8002dfe <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	f040 8086 	bne.w	8002db6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002caa:	4b4c      	ldr	r3, [pc, #304]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a4b      	ldr	r2, [pc, #300]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002cb0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb6:	f7fe fd81 	bl	80017bc <HAL_GetTick>
 8002cba:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002cbe:	f7fe fd7d 	bl	80017bc <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e0f9      	b.n	8002ec4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002cd0:	4b42      	ldr	r3, [pc, #264]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f0      	bne.n	8002cbe <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002cdc:	4b3f      	ldr	r3, [pc, #252]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002ce4:	f023 0303 	bic.w	r3, r3, #3
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002cf0:	0212      	lsls	r2, r2, #8
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	4939      	ldr	r1, [pc, #228]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	628b      	str	r3, [r1, #40]	@ 0x28
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	025b      	lsls	r3, r3, #9
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d14:	3b01      	subs	r3, #1
 8002d16:	041b      	lsls	r3, r3, #16
 8002d18:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d22:	3b01      	subs	r3, #1
 8002d24:	061b      	lsls	r3, r3, #24
 8002d26:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002d2a:	492c      	ldr	r1, [pc, #176]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002d30:	4b2a      	ldr	r3, [pc, #168]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d34:	4a29      	ldr	r2, [pc, #164]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002d36:	f023 0310 	bic.w	r3, r3, #16
 8002d3a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d40:	4a26      	ldr	r2, [pc, #152]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002d46:	4b25      	ldr	r3, [pc, #148]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4a:	4a24      	ldr	r2, [pc, #144]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002d4c:	f043 0310 	orr.w	r3, r3, #16
 8002d50:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002d52:	4b22      	ldr	r3, [pc, #136]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d56:	f023 020c 	bic.w	r2, r3, #12
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5e:	491f      	ldr	r1, [pc, #124]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002d64:	4b1d      	ldr	r3, [pc, #116]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d68:	f023 0220 	bic.w	r2, r3, #32
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d70:	491a      	ldr	r1, [pc, #104]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d76:	4b19      	ldr	r3, [pc, #100]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7a:	4a18      	ldr	r2, [pc, #96]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d80:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002d82:	4b16      	ldr	r3, [pc, #88]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a15      	ldr	r2, [pc, #84]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002d88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8e:	f7fe fd15 	bl	80017bc <HAL_GetTick>
 8002d92:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002d96:	f7fe fd11 	bl	80017bc <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e08d      	b.n	8002ec4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002da8:	4b0c      	ldr	r3, [pc, #48]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x736>
 8002db4:	e085      	b.n	8002ec2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002db6:	4b09      	ldr	r3, [pc, #36]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a08      	ldr	r2, [pc, #32]	@ (8002ddc <HAL_RCC_OscConfig+0x77c>)
 8002dbc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc2:	f7fe fcfb 	bl	80017bc <HAL_GetTick>
 8002dc6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002dc8:	e00a      	b.n	8002de0 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002dca:	f7fe fcf7 	bl	80017bc <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d903      	bls.n	8002de0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e073      	b.n	8002ec4 <HAL_RCC_OscConfig+0x864>
 8002ddc:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002de0:	4b3a      	ldr	r3, [pc, #232]	@ (8002ecc <HAL_RCC_OscConfig+0x86c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1ee      	bne.n	8002dca <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002dec:	4b37      	ldr	r3, [pc, #220]	@ (8002ecc <HAL_RCC_OscConfig+0x86c>)
 8002dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df0:	4a36      	ldr	r2, [pc, #216]	@ (8002ecc <HAL_RCC_OscConfig+0x86c>)
 8002df2:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002df6:	f023 0303 	bic.w	r3, r3, #3
 8002dfa:	6293      	str	r3, [r2, #40]	@ 0x28
 8002dfc:	e061      	b.n	8002ec2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002dfe:	4b33      	ldr	r3, [pc, #204]	@ (8002ecc <HAL_RCC_OscConfig+0x86c>)
 8002e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e02:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e04:	4b31      	ldr	r3, [pc, #196]	@ (8002ecc <HAL_RCC_OscConfig+0x86c>)
 8002e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e08:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d031      	beq.n	8002e76 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f003 0203 	and.w	r2, r3, #3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d12a      	bne.n	8002e76 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	0a1b      	lsrs	r3, r3, #8
 8002e24:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d122      	bne.n	8002e76 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e3a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d11a      	bne.n	8002e76 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	0a5b      	lsrs	r3, r3, #9
 8002e44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d111      	bne.n	8002e76 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	0c1b      	lsrs	r3, r3, #16
 8002e56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e5e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d108      	bne.n	8002e76 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	0e1b      	lsrs	r3, r3, #24
 8002e68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e70:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d001      	beq.n	8002e7a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e024      	b.n	8002ec4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002e7a:	4b14      	ldr	r3, [pc, #80]	@ (8002ecc <HAL_RCC_OscConfig+0x86c>)
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7e:	08db      	lsrs	r3, r3, #3
 8002e80:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d01a      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ecc <HAL_RCC_OscConfig+0x86c>)
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e90:	4a0e      	ldr	r2, [pc, #56]	@ (8002ecc <HAL_RCC_OscConfig+0x86c>)
 8002e92:	f023 0310 	bic.w	r3, r3, #16
 8002e96:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fe fc90 	bl	80017bc <HAL_GetTick>
 8002e9c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002e9e:	bf00      	nop
 8002ea0:	f7fe fc8c 	bl	80017bc <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d0f9      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb0:	4a06      	ldr	r2, [pc, #24]	@ (8002ecc <HAL_RCC_OscConfig+0x86c>)
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002eb6:	4b05      	ldr	r3, [pc, #20]	@ (8002ecc <HAL_RCC_OscConfig+0x86c>)
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eba:	4a04      	ldr	r2, [pc, #16]	@ (8002ecc <HAL_RCC_OscConfig+0x86c>)
 8002ebc:	f043 0310 	orr.w	r3, r3, #16
 8002ec0:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3720      	adds	r7, #32
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	44020c00 	.word	0x44020c00

08002ed0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e19e      	b.n	8003222 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee4:	4b83      	ldr	r3, [pc, #524]	@ (80030f4 <HAL_RCC_ClockConfig+0x224>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 030f 	and.w	r3, r3, #15
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d910      	bls.n	8002f14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef2:	4b80      	ldr	r3, [pc, #512]	@ (80030f4 <HAL_RCC_ClockConfig+0x224>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 020f 	bic.w	r2, r3, #15
 8002efa:	497e      	ldr	r1, [pc, #504]	@ (80030f4 <HAL_RCC_ClockConfig+0x224>)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f02:	4b7c      	ldr	r3, [pc, #496]	@ (80030f4 <HAL_RCC_ClockConfig+0x224>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e186      	b.n	8003222 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0310 	and.w	r3, r3, #16
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d012      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	695a      	ldr	r2, [r3, #20]
 8002f24:	4b74      	ldr	r3, [pc, #464]	@ (80030f8 <HAL_RCC_ClockConfig+0x228>)
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	0a1b      	lsrs	r3, r3, #8
 8002f2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d909      	bls.n	8002f46 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002f32:	4b71      	ldr	r3, [pc, #452]	@ (80030f8 <HAL_RCC_ClockConfig+0x228>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	021b      	lsls	r3, r3, #8
 8002f40:	496d      	ldr	r1, [pc, #436]	@ (80030f8 <HAL_RCC_ClockConfig+0x228>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d012      	beq.n	8002f78 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691a      	ldr	r2, [r3, #16]
 8002f56:	4b68      	ldr	r3, [pc, #416]	@ (80030f8 <HAL_RCC_ClockConfig+0x228>)
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	091b      	lsrs	r3, r3, #4
 8002f5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d909      	bls.n	8002f78 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002f64:	4b64      	ldr	r3, [pc, #400]	@ (80030f8 <HAL_RCC_ClockConfig+0x228>)
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	4961      	ldr	r1, [pc, #388]	@ (80030f8 <HAL_RCC_ClockConfig+0x228>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d010      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	4b5b      	ldr	r3, [pc, #364]	@ (80030f8 <HAL_RCC_ClockConfig+0x228>)
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d908      	bls.n	8002fa6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002f94:	4b58      	ldr	r3, [pc, #352]	@ (80030f8 <HAL_RCC_ClockConfig+0x228>)
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	4955      	ldr	r1, [pc, #340]	@ (80030f8 <HAL_RCC_ClockConfig+0x228>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d010      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	4b50      	ldr	r3, [pc, #320]	@ (80030f8 <HAL_RCC_ClockConfig+0x228>)
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d908      	bls.n	8002fd4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002fc2:	4b4d      	ldr	r3, [pc, #308]	@ (80030f8 <HAL_RCC_ClockConfig+0x228>)
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	f023 020f 	bic.w	r2, r3, #15
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	494a      	ldr	r1, [pc, #296]	@ (80030f8 <HAL_RCC_ClockConfig+0x228>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 8093 	beq.w	8003108 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d107      	bne.n	8002ffa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002fea:	4b43      	ldr	r3, [pc, #268]	@ (80030f8 <HAL_RCC_ClockConfig+0x228>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d121      	bne.n	800303a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e113      	b.n	8003222 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d107      	bne.n	8003012 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003002:	4b3d      	ldr	r3, [pc, #244]	@ (80030f8 <HAL_RCC_ClockConfig+0x228>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d115      	bne.n	800303a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e107      	b.n	8003222 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d107      	bne.n	800302a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800301a:	4b37      	ldr	r3, [pc, #220]	@ (80030f8 <HAL_RCC_ClockConfig+0x228>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e0fb      	b.n	8003222 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800302a:	4b33      	ldr	r3, [pc, #204]	@ (80030f8 <HAL_RCC_ClockConfig+0x228>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e0f3      	b.n	8003222 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800303a:	4b2f      	ldr	r3, [pc, #188]	@ (80030f8 <HAL_RCC_ClockConfig+0x228>)
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f023 0203 	bic.w	r2, r3, #3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	492c      	ldr	r1, [pc, #176]	@ (80030f8 <HAL_RCC_ClockConfig+0x228>)
 8003048:	4313      	orrs	r3, r2
 800304a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800304c:	f7fe fbb6 	bl	80017bc <HAL_GetTick>
 8003050:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b03      	cmp	r3, #3
 8003058:	d112      	bne.n	8003080 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800305a:	e00a      	b.n	8003072 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800305c:	f7fe fbae 	bl	80017bc <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e0d7      	b.n	8003222 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003072:	4b21      	ldr	r3, [pc, #132]	@ (80030f8 <HAL_RCC_ClockConfig+0x228>)
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	f003 0318 	and.w	r3, r3, #24
 800307a:	2b18      	cmp	r3, #24
 800307c:	d1ee      	bne.n	800305c <HAL_RCC_ClockConfig+0x18c>
 800307e:	e043      	b.n	8003108 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b02      	cmp	r3, #2
 8003086:	d112      	bne.n	80030ae <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003088:	e00a      	b.n	80030a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800308a:	f7fe fb97 	bl	80017bc <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003098:	4293      	cmp	r3, r2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e0c0      	b.n	8003222 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030a0:	4b15      	ldr	r3, [pc, #84]	@ (80030f8 <HAL_RCC_ClockConfig+0x228>)
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	f003 0318 	and.w	r3, r3, #24
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d1ee      	bne.n	800308a <HAL_RCC_ClockConfig+0x1ba>
 80030ac:	e02c      	b.n	8003108 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d122      	bne.n	80030fc <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80030b6:	e00a      	b.n	80030ce <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80030b8:	f7fe fb80 	bl	80017bc <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e0a9      	b.n	8003222 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80030ce:	4b0a      	ldr	r3, [pc, #40]	@ (80030f8 <HAL_RCC_ClockConfig+0x228>)
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	f003 0318 	and.w	r3, r3, #24
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d1ee      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x1e8>
 80030da:	e015      	b.n	8003108 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80030dc:	f7fe fb6e 	bl	80017bc <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d906      	bls.n	80030fc <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e097      	b.n	8003222 <HAL_RCC_ClockConfig+0x352>
 80030f2:	bf00      	nop
 80030f4:	40022000 	.word	0x40022000
 80030f8:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80030fc:	4b4b      	ldr	r3, [pc, #300]	@ (800322c <HAL_RCC_ClockConfig+0x35c>)
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	f003 0318 	and.w	r3, r3, #24
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1e9      	bne.n	80030dc <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d010      	beq.n	8003136 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	4b44      	ldr	r3, [pc, #272]	@ (800322c <HAL_RCC_ClockConfig+0x35c>)
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	429a      	cmp	r2, r3
 8003122:	d208      	bcs.n	8003136 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003124:	4b41      	ldr	r3, [pc, #260]	@ (800322c <HAL_RCC_ClockConfig+0x35c>)
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	f023 020f 	bic.w	r2, r3, #15
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	493e      	ldr	r1, [pc, #248]	@ (800322c <HAL_RCC_ClockConfig+0x35c>)
 8003132:	4313      	orrs	r3, r2
 8003134:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003136:	4b3e      	ldr	r3, [pc, #248]	@ (8003230 <HAL_RCC_ClockConfig+0x360>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d210      	bcs.n	8003166 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003144:	4b3a      	ldr	r3, [pc, #232]	@ (8003230 <HAL_RCC_ClockConfig+0x360>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f023 020f 	bic.w	r2, r3, #15
 800314c:	4938      	ldr	r1, [pc, #224]	@ (8003230 <HAL_RCC_ClockConfig+0x360>)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	4313      	orrs	r3, r2
 8003152:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003154:	4b36      	ldr	r3, [pc, #216]	@ (8003230 <HAL_RCC_ClockConfig+0x360>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d001      	beq.n	8003166 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e05d      	b.n	8003222 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b00      	cmp	r3, #0
 8003170:	d010      	beq.n	8003194 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	4b2d      	ldr	r3, [pc, #180]	@ (800322c <HAL_RCC_ClockConfig+0x35c>)
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800317e:	429a      	cmp	r2, r3
 8003180:	d208      	bcs.n	8003194 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003182:	4b2a      	ldr	r3, [pc, #168]	@ (800322c <HAL_RCC_ClockConfig+0x35c>)
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	4927      	ldr	r1, [pc, #156]	@ (800322c <HAL_RCC_ClockConfig+0x35c>)
 8003190:	4313      	orrs	r3, r2
 8003192:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b00      	cmp	r3, #0
 800319e:	d012      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	4b21      	ldr	r3, [pc, #132]	@ (800322c <HAL_RCC_ClockConfig+0x35c>)
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	091b      	lsrs	r3, r3, #4
 80031aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d209      	bcs.n	80031c6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80031b2:	4b1e      	ldr	r3, [pc, #120]	@ (800322c <HAL_RCC_ClockConfig+0x35c>)
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	491a      	ldr	r1, [pc, #104]	@ (800322c <HAL_RCC_ClockConfig+0x35c>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d012      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	4b15      	ldr	r3, [pc, #84]	@ (800322c <HAL_RCC_ClockConfig+0x35c>)
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	0a1b      	lsrs	r3, r3, #8
 80031dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d209      	bcs.n	80031f8 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80031e4:	4b11      	ldr	r3, [pc, #68]	@ (800322c <HAL_RCC_ClockConfig+0x35c>)
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	021b      	lsls	r3, r3, #8
 80031f2:	490e      	ldr	r1, [pc, #56]	@ (800322c <HAL_RCC_ClockConfig+0x35c>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80031f8:	f000 f822 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 80031fc:	4602      	mov	r2, r0
 80031fe:	4b0b      	ldr	r3, [pc, #44]	@ (800322c <HAL_RCC_ClockConfig+0x35c>)
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	490b      	ldr	r1, [pc, #44]	@ (8003234 <HAL_RCC_ClockConfig+0x364>)
 8003208:	5ccb      	ldrb	r3, [r1, r3]
 800320a:	fa22 f303 	lsr.w	r3, r2, r3
 800320e:	4a0a      	ldr	r2, [pc, #40]	@ (8003238 <HAL_RCC_ClockConfig+0x368>)
 8003210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003212:	4b0a      	ldr	r3, [pc, #40]	@ (800323c <HAL_RCC_ClockConfig+0x36c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd ffdc 	bl	80011d4 <HAL_InitTick>
 800321c:	4603      	mov	r3, r0
 800321e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003220:	7afb      	ldrb	r3, [r7, #11]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	44020c00 	.word	0x44020c00
 8003230:	40022000 	.word	0x40022000
 8003234:	0800a620 	.word	0x0800a620
 8003238:	20000018 	.word	0x20000018
 800323c:	2000001c 	.word	0x2000001c

08003240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003240:	b480      	push	{r7}
 8003242:	b089      	sub	sp, #36	@ 0x24
 8003244:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003246:	4b8c      	ldr	r3, [pc, #560]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x238>)
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	f003 0318 	and.w	r3, r3, #24
 800324e:	2b08      	cmp	r3, #8
 8003250:	d102      	bne.n	8003258 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003252:	4b8a      	ldr	r3, [pc, #552]	@ (800347c <HAL_RCC_GetSysClockFreq+0x23c>)
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	e107      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003258:	4b87      	ldr	r3, [pc, #540]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x238>)
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	f003 0318 	and.w	r3, r3, #24
 8003260:	2b00      	cmp	r3, #0
 8003262:	d112      	bne.n	800328a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003264:	4b84      	ldr	r3, [pc, #528]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x238>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0320 	and.w	r3, r3, #32
 800326c:	2b00      	cmp	r3, #0
 800326e:	d009      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003270:	4b81      	ldr	r3, [pc, #516]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x238>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	08db      	lsrs	r3, r3, #3
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	4a81      	ldr	r2, [pc, #516]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x240>)
 800327c:	fa22 f303 	lsr.w	r3, r2, r3
 8003280:	61fb      	str	r3, [r7, #28]
 8003282:	e0f1      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003284:	4b7e      	ldr	r3, [pc, #504]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x240>)
 8003286:	61fb      	str	r3, [r7, #28]
 8003288:	e0ee      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800328a:	4b7b      	ldr	r3, [pc, #492]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x238>)
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f003 0318 	and.w	r3, r3, #24
 8003292:	2b10      	cmp	r3, #16
 8003294:	d102      	bne.n	800329c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003296:	4b7b      	ldr	r3, [pc, #492]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x244>)
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	e0e5      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800329c:	4b76      	ldr	r3, [pc, #472]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x238>)
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	f003 0318 	and.w	r3, r3, #24
 80032a4:	2b18      	cmp	r3, #24
 80032a6:	f040 80dd 	bne.w	8003464 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80032aa:	4b73      	ldr	r3, [pc, #460]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x238>)
 80032ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80032b4:	4b70      	ldr	r3, [pc, #448]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x238>)
 80032b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b8:	0a1b      	lsrs	r3, r3, #8
 80032ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032be:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80032c0:	4b6d      	ldr	r3, [pc, #436]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x238>)
 80032c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c4:	091b      	lsrs	r3, r3, #4
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80032cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x238>)
 80032ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80032d0:	08db      	lsrs	r3, r3, #3
 80032d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	fb02 f303 	mul.w	r3, r2, r3
 80032dc:	ee07 3a90 	vmov	s15, r3
 80032e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e4:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 80b7 	beq.w	800345e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d003      	beq.n	80032fe <HAL_RCC_GetSysClockFreq+0xbe>
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d056      	beq.n	80033aa <HAL_RCC_GetSysClockFreq+0x16a>
 80032fc:	e077      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80032fe:	4b5e      	ldr	r3, [pc, #376]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x238>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0320 	and.w	r3, r3, #32
 8003306:	2b00      	cmp	r3, #0
 8003308:	d02d      	beq.n	8003366 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800330a:	4b5b      	ldr	r3, [pc, #364]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x238>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	08db      	lsrs	r3, r3, #3
 8003310:	f003 0303 	and.w	r3, r3, #3
 8003314:	4a5a      	ldr	r2, [pc, #360]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x240>)
 8003316:	fa22 f303 	lsr.w	r3, r2, r3
 800331a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	ee07 3a90 	vmov	s15, r3
 8003322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	ee07 3a90 	vmov	s15, r3
 800332c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003330:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003334:	4b50      	ldr	r3, [pc, #320]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x238>)
 8003336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800333c:	ee07 3a90 	vmov	s15, r3
 8003340:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003344:	ed97 6a02 	vldr	s12, [r7, #8]
 8003348:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8003488 <HAL_RCC_GetSysClockFreq+0x248>
 800334c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003350:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003354:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003358:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800335c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003360:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003364:	e065      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	ee07 3a90 	vmov	s15, r3
 800336c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003370:	eddf 6a46 	vldr	s13, [pc, #280]	@ 800348c <HAL_RCC_GetSysClockFreq+0x24c>
 8003374:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003378:	4b3f      	ldr	r3, [pc, #252]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x238>)
 800337a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800337c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003380:	ee07 3a90 	vmov	s15, r3
 8003384:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003388:	ed97 6a02 	vldr	s12, [r7, #8]
 800338c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003488 <HAL_RCC_GetSysClockFreq+0x248>
 8003390:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003394:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003398:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800339c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80033a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80033a8:	e043      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	ee07 3a90 	vmov	s15, r3
 80033b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8003490 <HAL_RCC_GetSysClockFreq+0x250>
 80033b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033bc:	4b2e      	ldr	r3, [pc, #184]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x238>)
 80033be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033c4:	ee07 3a90 	vmov	s15, r3
 80033c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80033cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80033d0:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8003488 <HAL_RCC_GetSysClockFreq+0x248>
 80033d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80033d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80033dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80033e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e8:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80033ec:	e021      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	ee07 3a90 	vmov	s15, r3
 80033f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003494 <HAL_RCC_GetSysClockFreq+0x254>
 80033fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003400:	4b1d      	ldr	r3, [pc, #116]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x238>)
 8003402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003408:	ee07 3a90 	vmov	s15, r3
 800340c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003410:	ed97 6a02 	vldr	s12, [r7, #8]
 8003414:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8003488 <HAL_RCC_GetSysClockFreq+0x248>
 8003418:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800341c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003420:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003424:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800342c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003430:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003432:	4b11      	ldr	r3, [pc, #68]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x238>)
 8003434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003436:	0a5b      	lsrs	r3, r3, #9
 8003438:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800343c:	3301      	adds	r3, #1
 800343e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	ee07 3a90 	vmov	s15, r3
 8003446:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800344a:	edd7 6a06 	vldr	s13, [r7, #24]
 800344e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003456:	ee17 3a90 	vmov	r3, s15
 800345a:	61fb      	str	r3, [r7, #28]
 800345c:	e004      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
 8003462:	e001      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003464:	4b06      	ldr	r3, [pc, #24]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x240>)
 8003466:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003468:	69fb      	ldr	r3, [r7, #28]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3724      	adds	r7, #36	@ 0x24
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	44020c00 	.word	0x44020c00
 800347c:	003d0900 	.word	0x003d0900
 8003480:	03d09000 	.word	0x03d09000
 8003484:	007a1200 	.word	0x007a1200
 8003488:	46000000 	.word	0x46000000
 800348c:	4c742400 	.word	0x4c742400
 8003490:	4af42400 	.word	0x4af42400
 8003494:	4a742400 	.word	0x4a742400

08003498 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800349c:	f7ff fed0 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 80034a0:	4602      	mov	r2, r0
 80034a2:	4b08      	ldr	r3, [pc, #32]	@ (80034c4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80034a4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80034a6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80034aa:	4907      	ldr	r1, [pc, #28]	@ (80034c8 <HAL_RCC_GetHCLKFreq+0x30>)
 80034ac:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80034ae:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80034b2:	fa22 f303 	lsr.w	r3, r2, r3
 80034b6:	4a05      	ldr	r2, [pc, #20]	@ (80034cc <HAL_RCC_GetHCLKFreq+0x34>)
 80034b8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80034ba:	4b04      	ldr	r3, [pc, #16]	@ (80034cc <HAL_RCC_GetHCLKFreq+0x34>)
 80034bc:	681b      	ldr	r3, [r3, #0]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	44020c00 	.word	0x44020c00
 80034c8:	0800a620 	.word	0x0800a620
 80034cc:	20000018 	.word	0x20000018

080034d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80034d4:	f7ff ffe0 	bl	8003498 <HAL_RCC_GetHCLKFreq>
 80034d8:	4602      	mov	r2, r0
 80034da:	4b06      	ldr	r3, [pc, #24]	@ (80034f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	091b      	lsrs	r3, r3, #4
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	4904      	ldr	r1, [pc, #16]	@ (80034f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034e6:	5ccb      	ldrb	r3, [r1, r3]
 80034e8:	f003 031f 	and.w	r3, r3, #31
 80034ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	44020c00 	.word	0x44020c00
 80034f8:	0800a630 	.word	0x0800a630

080034fc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	221f      	movs	r2, #31
 800350a:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800350c:	4b15      	ldr	r3, [pc, #84]	@ (8003564 <HAL_RCC_GetClockConfig+0x68>)
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	f003 0203 	and.w	r2, r3, #3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8003518:	4b12      	ldr	r3, [pc, #72]	@ (8003564 <HAL_RCC_GetClockConfig+0x68>)
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f003 020f 	and.w	r2, r3, #15
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	0a1b      	lsrs	r3, r3, #8
 8003542:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800354a:	4b07      	ldr	r3, [pc, #28]	@ (8003568 <HAL_RCC_GetClockConfig+0x6c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 020f 	and.w	r2, r3, #15
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	601a      	str	r2, [r3, #0]
}
 8003556:	bf00      	nop
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	44020c00 	.word	0x44020c00
 8003568:	40022000 	.word	0x40022000

0800356c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800356c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003570:	b0d8      	sub	sp, #352	@ 0x160
 8003572:	af00      	add	r7, sp, #0
 8003574:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003578:	2300      	movs	r3, #0
 800357a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800357e:	2300      	movs	r3, #0
 8003580:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003584:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8003590:	2500      	movs	r5, #0
 8003592:	ea54 0305 	orrs.w	r3, r4, r5
 8003596:	d00b      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003598:	4bcd      	ldr	r3, [pc, #820]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800359a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800359e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80035a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a8:	4ac9      	ldr	r2, [pc, #804]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80035aa:	430b      	orrs	r3, r1
 80035ac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b8:	f002 0801 	and.w	r8, r2, #1
 80035bc:	f04f 0900 	mov.w	r9, #0
 80035c0:	ea58 0309 	orrs.w	r3, r8, r9
 80035c4:	d042      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80035c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035cc:	2b05      	cmp	r3, #5
 80035ce:	d823      	bhi.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80035d0:	a201      	add	r2, pc, #4	@ (adr r2, 80035d8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80035d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d6:	bf00      	nop
 80035d8:	08003621 	.word	0x08003621
 80035dc:	080035f1 	.word	0x080035f1
 80035e0:	08003605 	.word	0x08003605
 80035e4:	08003621 	.word	0x08003621
 80035e8:	08003621 	.word	0x08003621
 80035ec:	08003621 	.word	0x08003621
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035f4:	3308      	adds	r3, #8
 80035f6:	4618      	mov	r0, r3
 80035f8:	f001 ff42 	bl	8005480 <RCCEx_PLL2_Config>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8003602:	e00e      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003604:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003608:	3330      	adds	r3, #48	@ 0x30
 800360a:	4618      	mov	r0, r3
 800360c:	f001 ffd0 	bl	80055b0 <RCCEx_PLL3_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8003616:	e004      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800361e:	e000      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8003620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003622:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10c      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800362a:	4ba9      	ldr	r3, [pc, #676]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800362c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003630:	f023 0107 	bic.w	r1, r3, #7
 8003634:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363a:	4aa5      	ldr	r2, [pc, #660]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800363c:	430b      	orrs	r3, r1
 800363e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003642:	e003      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003644:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003648:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800364c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003654:	f002 0a02 	and.w	sl, r2, #2
 8003658:	f04f 0b00 	mov.w	fp, #0
 800365c:	ea5a 030b 	orrs.w	r3, sl, fp
 8003660:	f000 8088 	beq.w	8003774 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003664:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800366a:	2b28      	cmp	r3, #40	@ 0x28
 800366c:	d868      	bhi.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800366e:	a201      	add	r2, pc, #4	@ (adr r2, 8003674 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003674:	08003749 	.word	0x08003749
 8003678:	08003741 	.word	0x08003741
 800367c:	08003741 	.word	0x08003741
 8003680:	08003741 	.word	0x08003741
 8003684:	08003741 	.word	0x08003741
 8003688:	08003741 	.word	0x08003741
 800368c:	08003741 	.word	0x08003741
 8003690:	08003741 	.word	0x08003741
 8003694:	08003719 	.word	0x08003719
 8003698:	08003741 	.word	0x08003741
 800369c:	08003741 	.word	0x08003741
 80036a0:	08003741 	.word	0x08003741
 80036a4:	08003741 	.word	0x08003741
 80036a8:	08003741 	.word	0x08003741
 80036ac:	08003741 	.word	0x08003741
 80036b0:	08003741 	.word	0x08003741
 80036b4:	0800372d 	.word	0x0800372d
 80036b8:	08003741 	.word	0x08003741
 80036bc:	08003741 	.word	0x08003741
 80036c0:	08003741 	.word	0x08003741
 80036c4:	08003741 	.word	0x08003741
 80036c8:	08003741 	.word	0x08003741
 80036cc:	08003741 	.word	0x08003741
 80036d0:	08003741 	.word	0x08003741
 80036d4:	08003749 	.word	0x08003749
 80036d8:	08003741 	.word	0x08003741
 80036dc:	08003741 	.word	0x08003741
 80036e0:	08003741 	.word	0x08003741
 80036e4:	08003741 	.word	0x08003741
 80036e8:	08003741 	.word	0x08003741
 80036ec:	08003741 	.word	0x08003741
 80036f0:	08003741 	.word	0x08003741
 80036f4:	08003749 	.word	0x08003749
 80036f8:	08003741 	.word	0x08003741
 80036fc:	08003741 	.word	0x08003741
 8003700:	08003741 	.word	0x08003741
 8003704:	08003741 	.word	0x08003741
 8003708:	08003741 	.word	0x08003741
 800370c:	08003741 	.word	0x08003741
 8003710:	08003741 	.word	0x08003741
 8003714:	08003749 	.word	0x08003749
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003718:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800371c:	3308      	adds	r3, #8
 800371e:	4618      	mov	r0, r3
 8003720:	f001 feae 	bl	8005480 <RCCEx_PLL2_Config>
 8003724:	4603      	mov	r3, r0
 8003726:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800372a:	e00e      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800372c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003730:	3330      	adds	r3, #48	@ 0x30
 8003732:	4618      	mov	r0, r3
 8003734:	f001 ff3c 	bl	80055b0 <RCCEx_PLL3_Config>
 8003738:	4603      	mov	r3, r0
 800373a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800373e:	e004      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003746:	e000      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8003748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800374a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10c      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003752:	4b5f      	ldr	r3, [pc, #380]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003754:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003758:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800375c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003762:	4a5b      	ldr	r2, [pc, #364]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003764:	430b      	orrs	r3, r1
 8003766:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800376a:	e003      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800376c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003770:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003774:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377c:	f002 0304 	and.w	r3, r2, #4
 8003780:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8003784:	2300      	movs	r3, #0
 8003786:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800378a:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 800378e:	460b      	mov	r3, r1
 8003790:	4313      	orrs	r3, r2
 8003792:	d04e      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003794:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003798:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800379a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800379e:	d02c      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80037a0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80037a4:	d825      	bhi.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80037a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037aa:	d028      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x292>
 80037ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037b0:	d81f      	bhi.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80037b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80037b4:	d025      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80037b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80037b8:	d81b      	bhi.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80037ba:	2b80      	cmp	r3, #128	@ 0x80
 80037bc:	d00f      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x272>
 80037be:	2b80      	cmp	r3, #128	@ 0x80
 80037c0:	d817      	bhi.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d01f      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80037c6:	2b40      	cmp	r3, #64	@ 0x40
 80037c8:	d113      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037ce:	3308      	adds	r3, #8
 80037d0:	4618      	mov	r0, r3
 80037d2:	f001 fe55 	bl	8005480 <RCCEx_PLL2_Config>
 80037d6:	4603      	mov	r3, r0
 80037d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80037dc:	e014      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80037de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037e2:	3330      	adds	r3, #48	@ 0x30
 80037e4:	4618      	mov	r0, r3
 80037e6:	f001 fee3 	bl	80055b0 <RCCEx_PLL3_Config>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80037f0:	e00a      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80037f8:	e006      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80037fa:	bf00      	nop
 80037fc:	e004      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80037fe:	bf00      	nop
 8003800:	e002      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003802:	bf00      	nop
 8003804:	e000      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003806:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003808:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10c      	bne.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003810:	4b2f      	ldr	r3, [pc, #188]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003812:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003816:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800381a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800381e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003820:	4a2b      	ldr	r2, [pc, #172]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003822:	430b      	orrs	r3, r1
 8003824:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003828:	e003      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800382e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003832:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383a:	f002 0308 	and.w	r3, r2, #8
 800383e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003842:	2300      	movs	r3, #0
 8003844:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003848:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 800384c:	460b      	mov	r3, r1
 800384e:	4313      	orrs	r3, r2
 8003850:	d056      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8003852:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003856:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003858:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800385c:	d031      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800385e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003862:	d82a      	bhi.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003864:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003868:	d02d      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800386a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800386e:	d824      	bhi.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003870:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003874:	d029      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003876:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800387a:	d81e      	bhi.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800387c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003880:	d011      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8003882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003886:	d818      	bhi.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003888:	2b00      	cmp	r3, #0
 800388a:	d023      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800388c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003890:	d113      	bne.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003892:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003896:	3308      	adds	r3, #8
 8003898:	4618      	mov	r0, r3
 800389a:	f001 fdf1 	bl	8005480 <RCCEx_PLL2_Config>
 800389e:	4603      	mov	r3, r0
 80038a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80038a4:	e017      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80038a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038aa:	3330      	adds	r3, #48	@ 0x30
 80038ac:	4618      	mov	r0, r3
 80038ae:	f001 fe7f 	bl	80055b0 <RCCEx_PLL3_Config>
 80038b2:	4603      	mov	r3, r0
 80038b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80038b8:	e00d      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80038c0:	e009      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80038c2:	bf00      	nop
 80038c4:	e007      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80038c6:	bf00      	nop
 80038c8:	e005      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80038ca:	bf00      	nop
 80038cc:	e003      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80038ce:	bf00      	nop
 80038d0:	44020c00 	.word	0x44020c00
        break;
 80038d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10c      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80038de:	4bbb      	ldr	r3, [pc, #748]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80038e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80038e4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80038e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038ee:	4ab7      	ldr	r2, [pc, #732]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80038f0:	430b      	orrs	r3, r1
 80038f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80038f6:	e003      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80038fc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003900:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003908:	f002 0310 	and.w	r3, r2, #16
 800390c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003910:	2300      	movs	r3, #0
 8003912:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003916:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 800391a:	460b      	mov	r3, r1
 800391c:	4313      	orrs	r3, r2
 800391e:	d053      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8003920:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003924:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003926:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800392a:	d031      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800392c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003930:	d82a      	bhi.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003932:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003936:	d02d      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003938:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800393c:	d824      	bhi.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800393e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003942:	d029      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003944:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003948:	d81e      	bhi.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800394a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800394e:	d011      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003950:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003954:	d818      	bhi.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003956:	2b00      	cmp	r3, #0
 8003958:	d020      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x430>
 800395a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800395e:	d113      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003960:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003964:	3308      	adds	r3, #8
 8003966:	4618      	mov	r0, r3
 8003968:	f001 fd8a 	bl	8005480 <RCCEx_PLL2_Config>
 800396c:	4603      	mov	r3, r0
 800396e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8003972:	e014      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003974:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003978:	3330      	adds	r3, #48	@ 0x30
 800397a:	4618      	mov	r0, r3
 800397c:	f001 fe18 	bl	80055b0 <RCCEx_PLL3_Config>
 8003980:	4603      	mov	r3, r0
 8003982:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8003986:	e00a      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800398e:	e006      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003990:	bf00      	nop
 8003992:	e004      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003994:	bf00      	nop
 8003996:	e002      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003998:	bf00      	nop
 800399a:	e000      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800399c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800399e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10c      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80039a6:	4b89      	ldr	r3, [pc, #548]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80039a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80039ac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80039b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039b6:	4a85      	ldr	r2, [pc, #532]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80039b8:	430b      	orrs	r3, r1
 80039ba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80039be:	e003      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80039c4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80039c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d0:	f002 0320 	and.w	r3, r2, #32
 80039d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80039d8:	2300      	movs	r3, #0
 80039da:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80039de:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 80039e2:	460b      	mov	r3, r1
 80039e4:	4313      	orrs	r3, r2
 80039e6:	d053      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80039e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ee:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80039f2:	d031      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80039f4:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80039f8:	d82a      	bhi.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80039fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039fe:	d02d      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003a00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a04:	d824      	bhi.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003a06:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003a0a:	d029      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003a0c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003a10:	d81e      	bhi.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003a12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a16:	d011      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003a18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a1c:	d818      	bhi.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d020      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8003a22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a26:	d113      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a2c:	3308      	adds	r3, #8
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f001 fd26 	bl	8005480 <RCCEx_PLL2_Config>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8003a3a:	e014      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a40:	3330      	adds	r3, #48	@ 0x30
 8003a42:	4618      	mov	r0, r3
 8003a44:	f001 fdb4 	bl	80055b0 <RCCEx_PLL3_Config>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8003a4e:	e00a      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003a56:	e006      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003a58:	bf00      	nop
 8003a5a:	e004      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003a5c:	bf00      	nop
 8003a5e:	e002      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003a60:	bf00      	nop
 8003a62:	e000      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003a64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a66:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10c      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8003a6e:	4b57      	ldr	r3, [pc, #348]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003a70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003a74:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8003a78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7e:	4a53      	ldr	r2, [pc, #332]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003a80:	430b      	orrs	r3, r1
 8003a82:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003a86:	e003      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a88:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a8c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a98:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003a9c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003aa6:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4313      	orrs	r3, r2
 8003aae:	d053      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8003ab0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ab6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003aba:	d031      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8003abc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003ac0:	d82a      	bhi.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003ac2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ac6:	d02d      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8003ac8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003acc:	d824      	bhi.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003ace:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003ad2:	d029      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003ad4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003ad8:	d81e      	bhi.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003ada:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ade:	d011      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003ae0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ae4:	d818      	bhi.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d020      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003aea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003aee:	d113      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003af0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003af4:	3308      	adds	r3, #8
 8003af6:	4618      	mov	r0, r3
 8003af8:	f001 fcc2 	bl	8005480 <RCCEx_PLL2_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8003b02:	e014      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b08:	3330      	adds	r3, #48	@ 0x30
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f001 fd50 	bl	80055b0 <RCCEx_PLL3_Config>
 8003b10:	4603      	mov	r3, r0
 8003b12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8003b16:	e00a      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003b1e:	e006      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003b20:	bf00      	nop
 8003b22:	e004      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003b24:	bf00      	nop
 8003b26:	e002      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003b28:	bf00      	nop
 8003b2a:	e000      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003b2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b2e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10c      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8003b36:	4b25      	ldr	r3, [pc, #148]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003b38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003b3c:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8003b40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b46:	4a21      	ldr	r2, [pc, #132]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003b4e:	e003      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b50:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b54:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b60:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003b64:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003b6e:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8003b72:	460b      	mov	r3, r1
 8003b74:	4313      	orrs	r3, r2
 8003b76:	d055      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8003b78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b7e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003b82:	d033      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x680>
 8003b84:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003b88:	d82c      	bhi.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003b8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b8e:	d02f      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003b90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b94:	d826      	bhi.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003b96:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003b9a:	d02b      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8003b9c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003ba0:	d820      	bhi.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003ba2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ba6:	d013      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003ba8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bac:	d81a      	bhi.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d022      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8003bb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bb6:	d115      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003bb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bbc:	3308      	adds	r3, #8
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f001 fc5e 	bl	8005480 <RCCEx_PLL2_Config>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8003bca:	e016      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003bcc:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003bd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bd4:	3330      	adds	r3, #48	@ 0x30
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f001 fcea 	bl	80055b0 <RCCEx_PLL3_Config>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8003be2:	e00a      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003bea:	e006      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003bec:	bf00      	nop
 8003bee:	e004      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003bf0:	bf00      	nop
 8003bf2:	e002      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003bf4:	bf00      	nop
 8003bf6:	e000      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003bf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bfa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8003c02:	4bbb      	ldr	r3, [pc, #748]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003c04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003c08:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003c0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c12:	4ab7      	ldr	r2, [pc, #732]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003c14:	430b      	orrs	r3, r1
 8003c16:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003c1a:	e003      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c20:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8003c24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8003c30:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003c34:	2300      	movs	r3, #0
 8003c36:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003c3a:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4313      	orrs	r3, r2
 8003c42:	d053      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8003c44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c4a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003c4e:	d031      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003c50:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003c54:	d82a      	bhi.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003c56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c5a:	d02d      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003c5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c60:	d824      	bhi.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003c62:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c66:	d029      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x750>
 8003c68:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c6c:	d81e      	bhi.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003c6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c72:	d011      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8003c74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c78:	d818      	bhi.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d020      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8003c7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c82:	d113      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c88:	3308      	adds	r3, #8
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f001 fbf8 	bl	8005480 <RCCEx_PLL2_Config>
 8003c90:	4603      	mov	r3, r0
 8003c92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8003c96:	e014      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c9c:	3330      	adds	r3, #48	@ 0x30
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f001 fc86 	bl	80055b0 <RCCEx_PLL3_Config>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8003caa:	e00a      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003cb2:	e006      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003cb4:	bf00      	nop
 8003cb6:	e004      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003cb8:	bf00      	nop
 8003cba:	e002      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003cbc:	bf00      	nop
 8003cbe:	e000      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cc2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10c      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8003cca:	4b89      	ldr	r3, [pc, #548]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003ccc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003cd0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003cd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cda:	4a85      	ldr	r2, [pc, #532]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003cdc:	430b      	orrs	r3, r1
 8003cde:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003ce2:	e003      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ce8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8003cec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8003cf8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003d02:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003d06:	460b      	mov	r3, r1
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	d055      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8003d0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d14:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8003d18:	d031      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x812>
 8003d1a:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8003d1e:	d82a      	bhi.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003d20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d24:	d02d      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8003d26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d2a:	d824      	bhi.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003d2c:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003d30:	d029      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8003d32:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003d36:	d81e      	bhi.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003d38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d3c:	d011      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8003d3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d42:	d818      	bhi.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d020      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8003d48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d4c:	d113      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d52:	3308      	adds	r3, #8
 8003d54:	4618      	mov	r0, r3
 8003d56:	f001 fb93 	bl	8005480 <RCCEx_PLL2_Config>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003d60:	e014      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d66:	3330      	adds	r3, #48	@ 0x30
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f001 fc21 	bl	80055b0 <RCCEx_PLL3_Config>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003d74:	e00a      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003d7c:	e006      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003d7e:	bf00      	nop
 8003d80:	e004      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003d82:	bf00      	nop
 8003d84:	e002      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003d86:	bf00      	nop
 8003d88:	e000      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d8c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10d      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8003d94:	4b56      	ldr	r3, [pc, #344]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003d96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003d9a:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8003d9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003da6:	4a52      	ldr	r2, [pc, #328]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003da8:	430b      	orrs	r3, r1
 8003daa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003dae:	e003      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003db4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8003db8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003dc4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003dce:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	d044      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8003dd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003de0:	2b05      	cmp	r3, #5
 8003de2:	d823      	bhi.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8003de4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dec <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dea:	bf00      	nop
 8003dec:	08003e35 	.word	0x08003e35
 8003df0:	08003e05 	.word	0x08003e05
 8003df4:	08003e19 	.word	0x08003e19
 8003df8:	08003e35 	.word	0x08003e35
 8003dfc:	08003e35 	.word	0x08003e35
 8003e00:	08003e35 	.word	0x08003e35
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e08:	3308      	adds	r3, #8
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f001 fb38 	bl	8005480 <RCCEx_PLL2_Config>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003e16:	e00e      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e1c:	3330      	adds	r3, #48	@ 0x30
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f001 fbc6 	bl	80055b0 <RCCEx_PLL3_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003e2a:	e004      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003e32:	e000      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8003e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10d      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8003e3e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003e40:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003e44:	f023 0107 	bic.w	r1, r3, #7
 8003e48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e50:	4a27      	ldr	r2, [pc, #156]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003e52:	430b      	orrs	r3, r1
 8003e54:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003e58:	e003      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e5e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8003e62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003e6e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003e72:	2300      	movs	r3, #0
 8003e74:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003e78:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	d04f      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8003e82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8a:	2b50      	cmp	r3, #80	@ 0x50
 8003e8c:	d029      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003e8e:	2b50      	cmp	r3, #80	@ 0x50
 8003e90:	d823      	bhi.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003e92:	2b40      	cmp	r3, #64	@ 0x40
 8003e94:	d027      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8003e96:	2b40      	cmp	r3, #64	@ 0x40
 8003e98:	d81f      	bhi.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003e9a:	2b30      	cmp	r3, #48	@ 0x30
 8003e9c:	d025      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8003e9e:	2b30      	cmp	r3, #48	@ 0x30
 8003ea0:	d81b      	bhi.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003ea2:	2b20      	cmp	r3, #32
 8003ea4:	d00f      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003ea6:	2b20      	cmp	r3, #32
 8003ea8:	d817      	bhi.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d022      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003eae:	2b10      	cmp	r3, #16
 8003eb0:	d113      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003eb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003eb6:	3308      	adds	r3, #8
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f001 fae1 	bl	8005480 <RCCEx_PLL2_Config>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003ec4:	e017      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ec6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003eca:	3330      	adds	r3, #48	@ 0x30
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f001 fb6f 	bl	80055b0 <RCCEx_PLL3_Config>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003ed8:	e00d      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003ee0:	e009      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003ee2:	bf00      	nop
 8003ee4:	e007      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003ee6:	bf00      	nop
 8003ee8:	e005      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003eea:	bf00      	nop
 8003eec:	e003      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8003eee:	bf00      	nop
 8003ef0:	44020c00 	.word	0x44020c00
        break;
 8003ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ef6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10d      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8003efe:	4baf      	ldr	r3, [pc, #700]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003f00:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003f04:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003f08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f10:	4aaa      	ldr	r2, [pc, #680]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003f12:	430b      	orrs	r3, r1
 8003f14:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003f18:	e003      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f1e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003f2e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003f32:	2300      	movs	r3, #0
 8003f34:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003f38:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	d055      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003f42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f4a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003f4e:	d031      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8003f50:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003f54:	d82a      	bhi.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003f56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f5a:	d02d      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003f5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f60:	d824      	bhi.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003f62:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f66:	d029      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003f68:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f6c:	d81e      	bhi.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003f6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f72:	d011      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8003f74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f78:	d818      	bhi.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d020      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8003f7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f82:	d113      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f88:	3308      	adds	r3, #8
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f001 fa78 	bl	8005480 <RCCEx_PLL2_Config>
 8003f90:	4603      	mov	r3, r0
 8003f92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003f96:	e014      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f9c:	3330      	adds	r3, #48	@ 0x30
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f001 fb06 	bl	80055b0 <RCCEx_PLL3_Config>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003faa:	e00a      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003fb2:	e006      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003fb4:	bf00      	nop
 8003fb6:	e004      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003fb8:	bf00      	nop
 8003fba:	e002      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003fbc:	bf00      	nop
 8003fbe:	e000      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fc2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10d      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003fca:	4b7c      	ldr	r3, [pc, #496]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fd0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003fd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fdc:	4a77      	ldr	r2, [pc, #476]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003fde:	430b      	orrs	r3, r1
 8003fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003fe4:	e003      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003fea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003ffa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ffe:	2300      	movs	r3, #0
 8004000:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004004:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004008:	460b      	mov	r3, r1
 800400a:	4313      	orrs	r3, r2
 800400c:	d03d      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800400e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004016:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800401a:	d01b      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 800401c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004020:	d814      	bhi.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004022:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004026:	d017      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8004028:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800402c:	d80e      	bhi.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800402e:	2b00      	cmp	r3, #0
 8004030:	d014      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8004032:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004036:	d109      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004038:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800403c:	3330      	adds	r3, #48	@ 0x30
 800403e:	4618      	mov	r0, r3
 8004040:	f001 fab6 	bl	80055b0 <RCCEx_PLL3_Config>
 8004044:	4603      	mov	r3, r0
 8004046:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800404a:	e008      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004052:	e004      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004054:	bf00      	nop
 8004056:	e002      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004058:	bf00      	nop
 800405a:	e000      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800405c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800405e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10d      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004066:	4b55      	ldr	r3, [pc, #340]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004068:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800406c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004070:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004078:	4a50      	ldr	r2, [pc, #320]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800407a:	430b      	orrs	r3, r1
 800407c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004080:	e003      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004082:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004086:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800408a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800408e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004092:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004096:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800409a:	2300      	movs	r3, #0
 800409c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040a0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4313      	orrs	r3, r2
 80040a8:	d03d      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80040aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040b2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80040b6:	d01b      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 80040b8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80040bc:	d814      	bhi.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80040be:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80040c2:	d017      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80040c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80040c8:	d80e      	bhi.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d014      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80040ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040d2:	d109      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040d8:	3330      	adds	r3, #48	@ 0x30
 80040da:	4618      	mov	r0, r3
 80040dc:	f001 fa68 	bl	80055b0 <RCCEx_PLL3_Config>
 80040e0:	4603      	mov	r3, r0
 80040e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80040e6:	e008      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80040ee:	e004      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80040f0:	bf00      	nop
 80040f2:	e002      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80040f4:	bf00      	nop
 80040f6:	e000      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80040f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10d      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004102:	4b2e      	ldr	r3, [pc, #184]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004104:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004108:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800410c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004110:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004114:	4a29      	ldr	r2, [pc, #164]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004116:	430b      	orrs	r3, r1
 8004118:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800411c:	e003      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004122:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004126:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004132:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004136:	2300      	movs	r3, #0
 8004138:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800413c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004140:	460b      	mov	r3, r1
 8004142:	4313      	orrs	r3, r2
 8004144:	d040      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8004146:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800414a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800414e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004152:	d01b      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8004154:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004158:	d814      	bhi.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800415a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800415e:	d017      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004160:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004164:	d80e      	bhi.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d014      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800416a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800416e:	d109      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004170:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004174:	3330      	adds	r3, #48	@ 0x30
 8004176:	4618      	mov	r0, r3
 8004178:	f001 fa1a 	bl	80055b0 <RCCEx_PLL3_Config>
 800417c:	4603      	mov	r3, r0
 800417e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8004182:	e008      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800418a:	e004      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800418c:	bf00      	nop
 800418e:	e002      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004190:	bf00      	nop
 8004192:	e000      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004194:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004196:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800419a:	2b00      	cmp	r3, #0
 800419c:	d110      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800419e:	4b07      	ldr	r3, [pc, #28]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80041a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80041a4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80041a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041b0:	4a02      	ldr	r2, [pc, #8]	@ (80041bc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80041b2:	430b      	orrs	r3, r1
 80041b4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80041b8:	e006      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80041ba:	bf00      	nop
 80041bc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80041c4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d0:	2100      	movs	r1, #0
 80041d2:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80041d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80041de:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4313      	orrs	r3, r2
 80041e6:	d03d      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80041e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041f0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80041f4:	d01b      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80041f6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80041fa:	d814      	bhi.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80041fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004200:	d017      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8004202:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004206:	d80e      	bhi.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8004208:	2b00      	cmp	r3, #0
 800420a:	d014      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 800420c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004210:	d109      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004212:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004216:	3330      	adds	r3, #48	@ 0x30
 8004218:	4618      	mov	r0, r3
 800421a:	f001 f9c9 	bl	80055b0 <RCCEx_PLL3_Config>
 800421e:	4603      	mov	r3, r0
 8004220:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8004224:	e008      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800422c:	e004      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800422e:	bf00      	nop
 8004230:	e002      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004232:	bf00      	nop
 8004234:	e000      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004236:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004238:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10d      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004240:	4bbe      	ldr	r3, [pc, #760]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004242:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004246:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800424a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800424e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004252:	4aba      	ldr	r2, [pc, #744]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004254:	430b      	orrs	r3, r1
 8004256:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800425a:	e003      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004260:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004264:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004270:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004274:	2300      	movs	r3, #0
 8004276:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800427a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800427e:	460b      	mov	r3, r1
 8004280:	4313      	orrs	r3, r2
 8004282:	d035      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8004284:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004288:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800428c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004290:	d015      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8004292:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004296:	d80e      	bhi.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004298:	2b00      	cmp	r3, #0
 800429a:	d012      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 800429c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042a0:	d109      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042a6:	3330      	adds	r3, #48	@ 0x30
 80042a8:	4618      	mov	r0, r3
 80042aa:	f001 f981 	bl	80055b0 <RCCEx_PLL3_Config>
 80042ae:	4603      	mov	r3, r0
 80042b0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80042b4:	e006      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80042bc:	e002      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80042be:	bf00      	nop
 80042c0:	e000      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80042c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042c4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10d      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80042cc:	4b9b      	ldr	r3, [pc, #620]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80042ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80042d2:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80042d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80042de:	4a97      	ldr	r2, [pc, #604]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80042e0:	430b      	orrs	r3, r1
 80042e2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80042e6:	e003      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80042ec:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80042f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f8:	2100      	movs	r1, #0
 80042fa:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 80042fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004302:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004306:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800430a:	460b      	mov	r3, r1
 800430c:	4313      	orrs	r3, r2
 800430e:	d00e      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004310:	4b8a      	ldr	r3, [pc, #552]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	4a89      	ldr	r2, [pc, #548]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004316:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800431a:	61d3      	str	r3, [r2, #28]
 800431c:	4b87      	ldr	r3, [pc, #540]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800431e:	69d9      	ldr	r1, [r3, #28]
 8004320:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004324:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8004328:	4a84      	ldr	r2, [pc, #528]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800432a:	430b      	orrs	r3, r1
 800432c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800432e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004336:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800433a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800433e:	2300      	movs	r3, #0
 8004340:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004344:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004348:	460b      	mov	r3, r1
 800434a:	4313      	orrs	r3, r2
 800434c:	d055      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800434e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004352:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004356:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800435a:	d031      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 800435c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004360:	d82a      	bhi.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004366:	d02d      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004368:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800436c:	d824      	bhi.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800436e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004372:	d029      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004374:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004378:	d81e      	bhi.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800437a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800437e:	d011      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8004380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004384:	d818      	bhi.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004386:	2b00      	cmp	r3, #0
 8004388:	d020      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800438a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800438e:	d113      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004390:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004394:	3308      	adds	r3, #8
 8004396:	4618      	mov	r0, r3
 8004398:	f001 f872 	bl	8005480 <RCCEx_PLL2_Config>
 800439c:	4603      	mov	r3, r0
 800439e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80043a2:	e014      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043a8:	3330      	adds	r3, #48	@ 0x30
 80043aa:	4618      	mov	r0, r3
 80043ac:	f001 f900 	bl	80055b0 <RCCEx_PLL3_Config>
 80043b0:	4603      	mov	r3, r0
 80043b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80043b6:	e00a      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80043be:	e006      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80043c0:	bf00      	nop
 80043c2:	e004      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80043c4:	bf00      	nop
 80043c6:	e002      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80043c8:	bf00      	nop
 80043ca:	e000      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80043cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10d      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80043d6:	4b59      	ldr	r3, [pc, #356]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80043d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80043dc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80043e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043e8:	4a54      	ldr	r2, [pc, #336]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80043ea:	430b      	orrs	r3, r1
 80043ec:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80043f0:	e003      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80043f6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80043fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004402:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004406:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800440a:	2300      	movs	r3, #0
 800440c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004410:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004414:	460b      	mov	r3, r1
 8004416:	4313      	orrs	r3, r2
 8004418:	d055      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800441a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800441e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004422:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004426:	d031      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8004428:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800442c:	d82a      	bhi.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800442e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004432:	d02d      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8004434:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004438:	d824      	bhi.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800443a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800443e:	d029      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8004440:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004444:	d81e      	bhi.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800444a:	d011      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 800444c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004450:	d818      	bhi.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004452:	2b00      	cmp	r3, #0
 8004454:	d020      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004456:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800445a:	d113      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800445c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004460:	3308      	adds	r3, #8
 8004462:	4618      	mov	r0, r3
 8004464:	f001 f80c 	bl	8005480 <RCCEx_PLL2_Config>
 8004468:	4603      	mov	r3, r0
 800446a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800446e:	e014      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004470:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004474:	3330      	adds	r3, #48	@ 0x30
 8004476:	4618      	mov	r0, r3
 8004478:	f001 f89a 	bl	80055b0 <RCCEx_PLL3_Config>
 800447c:	4603      	mov	r3, r0
 800447e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004482:	e00a      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800448a:	e006      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800448c:	bf00      	nop
 800448e:	e004      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004490:	bf00      	nop
 8004492:	e002      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004494:	bf00      	nop
 8004496:	e000      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800449a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10d      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80044a2:	4b26      	ldr	r3, [pc, #152]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80044a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80044a8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80044ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80044b4:	4a21      	ldr	r2, [pc, #132]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80044b6:	430b      	orrs	r3, r1
 80044b8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80044bc:	e003      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80044c2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80044c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	2100      	movs	r1, #0
 80044d0:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 80044d4:	f003 0320 	and.w	r3, r3, #32
 80044d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80044dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80044e0:	460b      	mov	r3, r1
 80044e2:	4313      	orrs	r3, r2
 80044e4:	d057      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 80044e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80044ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044f2:	d033      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xff0>
 80044f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044f8:	d82c      	bhi.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80044fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80044fe:	d02f      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8004500:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004504:	d826      	bhi.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004506:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800450a:	d02b      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 800450c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004510:	d820      	bhi.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004512:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004516:	d013      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004518:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800451c:	d81a      	bhi.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800451e:	2b00      	cmp	r3, #0
 8004520:	d022      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8004522:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004526:	d115      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004528:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800452c:	3308      	adds	r3, #8
 800452e:	4618      	mov	r0, r3
 8004530:	f000 ffa6 	bl	8005480 <RCCEx_PLL2_Config>
 8004534:	4603      	mov	r3, r0
 8004536:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800453a:	e016      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xffe>
 800453c:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004540:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004544:	3330      	adds	r3, #48	@ 0x30
 8004546:	4618      	mov	r0, r3
 8004548:	f001 f832 	bl	80055b0 <RCCEx_PLL3_Config>
 800454c:	4603      	mov	r3, r0
 800454e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004552:	e00a      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800455a:	e006      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800455c:	bf00      	nop
 800455e:	e004      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004560:	bf00      	nop
 8004562:	e002      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004564:	bf00      	nop
 8004566:	e000      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800456a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10d      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8004572:	4bbb      	ldr	r3, [pc, #748]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004574:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004578:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800457c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004580:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004584:	4ab6      	ldr	r2, [pc, #728]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004586:	430b      	orrs	r3, r1
 8004588:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800458c:	e003      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004592:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8004596:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800459a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459e:	2100      	movs	r1, #0
 80045a0:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80045a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80045ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80045b0:	460b      	mov	r3, r1
 80045b2:	4313      	orrs	r3, r2
 80045b4:	d055      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80045b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80045be:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80045c2:	d031      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80045c4:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80045c8:	d82a      	bhi.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80045ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045ce:	d02d      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80045d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045d4:	d824      	bhi.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80045d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045da:	d029      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80045dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045e0:	d81e      	bhi.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80045e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045e6:	d011      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 80045e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045ec:	d818      	bhi.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d020      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80045f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045f6:	d113      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045fc:	3308      	adds	r3, #8
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 ff3e 	bl	8005480 <RCCEx_PLL2_Config>
 8004604:	4603      	mov	r3, r0
 8004606:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800460a:	e014      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800460c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004610:	3330      	adds	r3, #48	@ 0x30
 8004612:	4618      	mov	r0, r3
 8004614:	f000 ffcc 	bl	80055b0 <RCCEx_PLL3_Config>
 8004618:	4603      	mov	r3, r0
 800461a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800461e:	e00a      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004626:	e006      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004628:	bf00      	nop
 800462a:	e004      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800462c:	bf00      	nop
 800462e:	e002      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004630:	bf00      	nop
 8004632:	e000      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004636:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10d      	bne.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800463e:	4b88      	ldr	r3, [pc, #544]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004640:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004644:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8004648:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800464c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004650:	4a83      	ldr	r2, [pc, #524]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004652:	430b      	orrs	r3, r1
 8004654:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004658:	e003      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800465a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800465e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8004662:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466a:	2100      	movs	r1, #0
 800466c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8004670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004674:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004678:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800467c:	460b      	mov	r3, r1
 800467e:	4313      	orrs	r3, r2
 8004680:	d055      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8004682:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004686:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800468a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800468e:	d031      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8004690:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004694:	d82a      	bhi.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004696:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800469a:	d02d      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 800469c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046a0:	d824      	bhi.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80046a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046a6:	d029      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80046a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046ac:	d81e      	bhi.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80046ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046b2:	d011      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80046b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046b8:	d818      	bhi.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d020      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80046be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046c2:	d113      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046c8:	3308      	adds	r3, #8
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fed8 	bl	8005480 <RCCEx_PLL2_Config>
 80046d0:	4603      	mov	r3, r0
 80046d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80046d6:	e014      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80046d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046dc:	3330      	adds	r3, #48	@ 0x30
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 ff66 	bl	80055b0 <RCCEx_PLL3_Config>
 80046e4:	4603      	mov	r3, r0
 80046e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80046ea:	e00a      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80046f2:	e006      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80046f4:	bf00      	nop
 80046f6:	e004      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80046f8:	bf00      	nop
 80046fa:	e002      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80046fc:	bf00      	nop
 80046fe:	e000      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004702:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10d      	bne.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800470a:	4b55      	ldr	r3, [pc, #340]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800470c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004710:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004714:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004718:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800471c:	4a50      	ldr	r2, [pc, #320]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800471e:	430b      	orrs	r3, r1
 8004720:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004724:	e003      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004726:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800472a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800472e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004736:	2100      	movs	r1, #0
 8004738:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800473c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004740:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004744:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004748:	460b      	mov	r3, r1
 800474a:	4313      	orrs	r3, r2
 800474c:	d055      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800474e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004752:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004756:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800475a:	d031      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800475c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004760:	d82a      	bhi.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004766:	d02d      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8004768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800476c:	d824      	bhi.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800476e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004772:	d029      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8004774:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004778:	d81e      	bhi.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800477a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800477e:	d011      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8004780:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004784:	d818      	bhi.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004786:	2b00      	cmp	r3, #0
 8004788:	d020      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800478a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800478e:	d113      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004790:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004794:	3308      	adds	r3, #8
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fe72 	bl	8005480 <RCCEx_PLL2_Config>
 800479c:	4603      	mov	r3, r0
 800479e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80047a2:	e014      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047a8:	3330      	adds	r3, #48	@ 0x30
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 ff00 	bl	80055b0 <RCCEx_PLL3_Config>
 80047b0:	4603      	mov	r3, r0
 80047b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80047b6:	e00a      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80047be:	e006      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80047c0:	bf00      	nop
 80047c2:	e004      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80047c4:	bf00      	nop
 80047c6:	e002      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80047c8:	bf00      	nop
 80047ca:	e000      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80047cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10d      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80047d6:	4b22      	ldr	r3, [pc, #136]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80047d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80047dc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80047e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80047e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80047ea:	430b      	orrs	r3, r1
 80047ec:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80047f0:	e003      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80047f6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80047fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004802:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004806:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800480a:	2300      	movs	r3, #0
 800480c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004810:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004814:	460b      	mov	r3, r1
 8004816:	4313      	orrs	r3, r2
 8004818:	d055      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800481a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800481e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004822:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004826:	d035      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8004828:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800482c:	d82e      	bhi.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800482e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004832:	d031      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8004834:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004838:	d828      	bhi.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800483a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800483e:	d01b      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8004840:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004844:	d822      	bhi.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800484a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800484e:	d009      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8004850:	e01c      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004852:	4b03      	ldr	r3, [pc, #12]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004856:	4a02      	ldr	r2, [pc, #8]	@ (8004860 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800485c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800485e:	e01c      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8004860:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004864:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004868:	3308      	adds	r3, #8
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fe08 	bl	8005480 <RCCEx_PLL2_Config>
 8004870:	4603      	mov	r3, r0
 8004872:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004876:	e010      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004878:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800487c:	3330      	adds	r3, #48	@ 0x30
 800487e:	4618      	mov	r0, r3
 8004880:	f000 fe96 	bl	80055b0 <RCCEx_PLL3_Config>
 8004884:	4603      	mov	r3, r0
 8004886:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800488a:	e006      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004892:	e002      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004894:	bf00      	nop
 8004896:	e000      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800489a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10d      	bne.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80048a2:	4bc3      	ldr	r3, [pc, #780]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80048a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80048a8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80048ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80048b4:	4abe      	ldr	r2, [pc, #760]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80048b6:	430b      	orrs	r3, r1
 80048b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80048bc:	e003      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80048c2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80048c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ce:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80048d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048d6:	2300      	movs	r3, #0
 80048d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048dc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80048e0:	460b      	mov	r3, r1
 80048e2:	4313      	orrs	r3, r2
 80048e4:	d051      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80048e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80048ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048f2:	d033      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80048f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048f8:	d82c      	bhi.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80048fa:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80048fe:	d02d      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004900:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004904:	d826      	bhi.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004906:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800490a:	d019      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 800490c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004910:	d820      	bhi.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8004916:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800491a:	d007      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 800491c:	e01a      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800491e:	4ba4      	ldr	r3, [pc, #656]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004922:	4aa3      	ldr	r2, [pc, #652]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004928:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800492a:	e018      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800492c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004930:	3308      	adds	r3, #8
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fda4 	bl	8005480 <RCCEx_PLL2_Config>
 8004938:	4603      	mov	r3, r0
 800493a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800493e:	e00e      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004940:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004944:	3330      	adds	r3, #48	@ 0x30
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fe32 	bl	80055b0 <RCCEx_PLL3_Config>
 800494c:	4603      	mov	r3, r0
 800494e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004952:	e004      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800495a:	e000      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 800495c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800495e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10d      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004966:	4b92      	ldr	r3, [pc, #584]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004968:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800496c:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8004970:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004974:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004978:	4a8d      	ldr	r2, [pc, #564]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800497a:	430b      	orrs	r3, r1
 800497c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004980:	e003      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004982:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004986:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800498a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004992:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004996:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004998:	2300      	movs	r3, #0
 800499a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800499c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80049a0:	460b      	mov	r3, r1
 80049a2:	4313      	orrs	r3, r2
 80049a4:	d032      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80049a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80049ae:	2b05      	cmp	r3, #5
 80049b0:	d80f      	bhi.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80049b2:	2b03      	cmp	r3, #3
 80049b4:	d211      	bcs.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d911      	bls.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d109      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049c2:	3308      	adds	r3, #8
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 fd5b 	bl	8005480 <RCCEx_PLL2_Config>
 80049ca:	4603      	mov	r3, r0
 80049cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80049d0:	e006      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80049d8:	e002      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80049da:	bf00      	nop
 80049dc:	e000      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80049de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049e0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10d      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80049e8:	4b71      	ldr	r3, [pc, #452]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80049ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049ee:	f023 0107 	bic.w	r1, r3, #7
 80049f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80049fa:	4a6d      	ldr	r2, [pc, #436]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80049fc:	430b      	orrs	r3, r1
 80049fe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004a02:	e003      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a04:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a08:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004a0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a14:	2100      	movs	r1, #0
 8004a16:	6739      	str	r1, [r7, #112]	@ 0x70
 8004a18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a1c:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a1e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004a22:	460b      	mov	r3, r1
 8004a24:	4313      	orrs	r3, r2
 8004a26:	d024      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004a28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d005      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004a3e:	e002      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004a40:	bf00      	nop
 8004a42:	e000      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004a44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a46:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10d      	bne.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004a4e:	4b58      	ldr	r3, [pc, #352]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004a50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a54:	f023 0108 	bic.w	r1, r3, #8
 8004a58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a60:	4a53      	ldr	r2, [pc, #332]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004a62:	430b      	orrs	r3, r1
 8004a64:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004a68:	e003      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a6a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a6e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004a7e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a80:	2300      	movs	r3, #0
 8004a82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a84:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004a88:	460b      	mov	r3, r1
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f000 80b9 	beq.w	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004a90:	4b48      	ldr	r3, [pc, #288]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8004a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a94:	4a47      	ldr	r2, [pc, #284]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8004a96:	f043 0301 	orr.w	r3, r3, #1
 8004a9a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a9c:	f7fc fe8e 	bl	80017bc <HAL_GetTick>
 8004aa0:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004aa4:	e00b      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aa6:	f7fc fe89 	bl	80017bc <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d903      	bls.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004abc:	e005      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004abe:	4b3d      	ldr	r3, [pc, #244]	@ (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0ed      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8004aca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f040 8093 	bne.w	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ad4:	4b36      	ldr	r3, [pc, #216]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004ad6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ada:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ade:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004ae2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d023      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8004aea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004aee:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8004af2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d01b      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004afa:	4b2d      	ldr	r3, [pc, #180]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004afc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b04:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b08:	4b29      	ldr	r3, [pc, #164]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004b0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b0e:	4a28      	ldr	r2, [pc, #160]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b14:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b18:	4b25      	ldr	r3, [pc, #148]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004b1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b1e:	4a24      	ldr	r2, [pc, #144]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004b20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b24:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b28:	4a21      	ldr	r2, [pc, #132]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004b2a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004b2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b32:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d019      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fc fe3d 	bl	80017bc <HAL_GetTick>
 8004b42:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b46:	e00d      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b48:	f7fc fe38 	bl	80017bc <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004b52:	1ad2      	subs	r2, r2, r3
 8004b54:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d903      	bls.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8004b62:	e006      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b64:	4b12      	ldr	r3, [pc, #72]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004b66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0ea      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8004b72:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d13a      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004b7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b7e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8004b82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b8a:	d115      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8004b8c:	4b08      	ldr	r3, [pc, #32]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004b94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b98:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8004b9c:	091b      	lsrs	r3, r3, #4
 8004b9e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004ba2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004ba6:	4a02      	ldr	r2, [pc, #8]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004ba8:	430b      	orrs	r3, r1
 8004baa:	61d3      	str	r3, [r2, #28]
 8004bac:	e00a      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8004bae:	bf00      	nop
 8004bb0:	44020c00 	.word	0x44020c00
 8004bb4:	44020800 	.word	0x44020800
 8004bb8:	4b9f      	ldr	r3, [pc, #636]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	4a9e      	ldr	r2, [pc, #632]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004bbe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004bc2:	61d3      	str	r3, [r2, #28]
 8004bc4:	4b9c      	ldr	r3, [pc, #624]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004bc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bca:	4a9b      	ldr	r2, [pc, #620]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004bcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bd0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004bd4:	4b98      	ldr	r3, [pc, #608]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004bd6:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8004bda:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bde:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8004be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be6:	4a94      	ldr	r2, [pc, #592]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004be8:	430b      	orrs	r3, r1
 8004bea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004bee:	e008      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bf0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004bf4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8004bf8:	e003      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004bfe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0a:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004c0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c10:	2300      	movs	r3, #0
 8004c12:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c14:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	d035      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004c1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c22:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004c26:	2b30      	cmp	r3, #48	@ 0x30
 8004c28:	d014      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8004c2a:	2b30      	cmp	r3, #48	@ 0x30
 8004c2c:	d80e      	bhi.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8004c2e:	2b20      	cmp	r3, #32
 8004c30:	d012      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8004c32:	2b20      	cmp	r3, #32
 8004c34:	d80a      	bhi.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d010      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8004c3a:	2b10      	cmp	r3, #16
 8004c3c:	d106      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c3e:	4b7e      	ldr	r3, [pc, #504]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c42:	4a7d      	ldr	r2, [pc, #500]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c48:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8004c4a:	e008      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004c52:	e004      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004c54:	bf00      	nop
 8004c56:	e002      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004c58:	bf00      	nop
 8004c5a:	e000      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004c5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c5e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10d      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004c66:	4b74      	ldr	r3, [pc, #464]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004c68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c6c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004c70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c74:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004c78:	4a6f      	ldr	r2, [pc, #444]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004c7a:	430b      	orrs	r3, r1
 8004c7c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004c80:	e003      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c82:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c86:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004c8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c92:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004c96:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c98:	2300      	movs	r3, #0
 8004c9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c9c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	d033      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8004ca6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004caa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8004cb2:	2b40      	cmp	r3, #64	@ 0x40
 8004cb4:	d007      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8004cb6:	e010      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cb8:	4b5f      	ldr	r3, [pc, #380]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cbc:	4a5e      	ldr	r2, [pc, #376]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004cbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cc2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004cc4:	e00d      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cca:	3308      	adds	r3, #8
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fbd7 	bl	8005480 <RCCEx_PLL2_Config>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004cd8:	e003      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ce2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10d      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8004cea:	4b53      	ldr	r3, [pc, #332]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004cec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004cf0:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004cf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cf8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004cfc:	4a4e      	ldr	r2, [pc, #312]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004cfe:	430b      	orrs	r3, r1
 8004d00:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004d04:	e003      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d0a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004d0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d16:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004d1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d20:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004d24:	460b      	mov	r3, r1
 8004d26:	4313      	orrs	r3, r2
 8004d28:	d033      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8004d2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d2e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8004d36:	2b80      	cmp	r3, #128	@ 0x80
 8004d38:	d007      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8004d3a:	e010      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d3c:	4b3e      	ldr	r3, [pc, #248]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d40:	4a3d      	ldr	r2, [pc, #244]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004d42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d46:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004d48:	e00d      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d4e:	3308      	adds	r3, #8
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 fb95 	bl	8005480 <RCCEx_PLL2_Config>
 8004d56:	4603      	mov	r3, r0
 8004d58:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004d5c:	e003      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d66:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10d      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8004d6e:	4b32      	ldr	r3, [pc, #200]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004d70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d74:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004d78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d7c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004d80:	4a2d      	ldr	r2, [pc, #180]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004d82:	430b      	orrs	r3, r1
 8004d84:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004d88:	e003      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d8e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004d92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004da0:	2300      	movs	r3, #0
 8004da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004da4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004da8:	460b      	mov	r3, r1
 8004daa:	4313      	orrs	r3, r2
 8004dac:	d04a      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8004dae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d827      	bhi.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8004dba:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8004dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc0:	08004dd5 	.word	0x08004dd5
 8004dc4:	08004de3 	.word	0x08004de3
 8004dc8:	08004df7 	.word	0x08004df7
 8004dcc:	08004e13 	.word	0x08004e13
 8004dd0:	08004e13 	.word	0x08004e13
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dd4:	4b18      	ldr	r3, [pc, #96]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd8:	4a17      	ldr	r2, [pc, #92]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dde:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004de0:	e018      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004de2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004de6:	3308      	adds	r3, #8
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 fb49 	bl	8005480 <RCCEx_PLL2_Config>
 8004dee:	4603      	mov	r3, r0
 8004df0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004df4:	e00e      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004df6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dfa:	3330      	adds	r3, #48	@ 0x30
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fbd7 	bl	80055b0 <RCCEx_PLL3_Config>
 8004e02:	4603      	mov	r3, r0
 8004e04:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004e08:	e004      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004e10:	e000      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8004e12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e14:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10f      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004e1c:	4b06      	ldr	r3, [pc, #24]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e22:	f023 0107 	bic.w	r1, r3, #7
 8004e26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e2e:	4a02      	ldr	r2, [pc, #8]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004e30:	430b      	orrs	r3, r1
 8004e32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e36:	e005      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8004e38:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e3c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e40:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004e44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004e50:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e52:	2300      	movs	r3, #0
 8004e54:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e56:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f000 8081 	beq.w	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8004e62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e6a:	2b20      	cmp	r3, #32
 8004e6c:	d85f      	bhi.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8004e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8004e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e74:	08004ef9 	.word	0x08004ef9
 8004e78:	08004f2f 	.word	0x08004f2f
 8004e7c:	08004f2f 	.word	0x08004f2f
 8004e80:	08004f2f 	.word	0x08004f2f
 8004e84:	08004f2f 	.word	0x08004f2f
 8004e88:	08004f2f 	.word	0x08004f2f
 8004e8c:	08004f2f 	.word	0x08004f2f
 8004e90:	08004f2f 	.word	0x08004f2f
 8004e94:	08004f07 	.word	0x08004f07
 8004e98:	08004f2f 	.word	0x08004f2f
 8004e9c:	08004f2f 	.word	0x08004f2f
 8004ea0:	08004f2f 	.word	0x08004f2f
 8004ea4:	08004f2f 	.word	0x08004f2f
 8004ea8:	08004f2f 	.word	0x08004f2f
 8004eac:	08004f2f 	.word	0x08004f2f
 8004eb0:	08004f2f 	.word	0x08004f2f
 8004eb4:	08004f1b 	.word	0x08004f1b
 8004eb8:	08004f2f 	.word	0x08004f2f
 8004ebc:	08004f2f 	.word	0x08004f2f
 8004ec0:	08004f2f 	.word	0x08004f2f
 8004ec4:	08004f2f 	.word	0x08004f2f
 8004ec8:	08004f2f 	.word	0x08004f2f
 8004ecc:	08004f2f 	.word	0x08004f2f
 8004ed0:	08004f2f 	.word	0x08004f2f
 8004ed4:	08004f37 	.word	0x08004f37
 8004ed8:	08004f2f 	.word	0x08004f2f
 8004edc:	08004f2f 	.word	0x08004f2f
 8004ee0:	08004f2f 	.word	0x08004f2f
 8004ee4:	08004f2f 	.word	0x08004f2f
 8004ee8:	08004f2f 	.word	0x08004f2f
 8004eec:	08004f2f 	.word	0x08004f2f
 8004ef0:	08004f2f 	.word	0x08004f2f
 8004ef4:	08004f37 	.word	0x08004f37
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ef8:	4bab      	ldr	r3, [pc, #684]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efc:	4aaa      	ldr	r2, [pc, #680]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004efe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f02:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004f04:	e018      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f0a:	3308      	adds	r3, #8
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 fab7 	bl	8005480 <RCCEx_PLL2_Config>
 8004f12:	4603      	mov	r3, r0
 8004f14:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004f18:	e00e      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f1e:	3330      	adds	r3, #48	@ 0x30
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 fb45 	bl	80055b0 <RCCEx_PLL3_Config>
 8004f26:	4603      	mov	r3, r0
 8004f28:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004f2c:	e004      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004f34:	e000      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8004f36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f38:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10d      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004f40:	4b99      	ldr	r3, [pc, #612]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f46:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004f4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f52:	4a95      	ldr	r2, [pc, #596]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004f54:	430b      	orrs	r3, r1
 8004f56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004f5a:	e003      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f60:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004f64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004f70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f72:	2300      	movs	r3, #0
 8004f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f76:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	d04e      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004f80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f8c:	d02e      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8004f8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f92:	d827      	bhi.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004f94:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f96:	d02b      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8004f98:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f9a:	d823      	bhi.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004f9c:	2b80      	cmp	r3, #128	@ 0x80
 8004f9e:	d017      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8004fa0:	2b80      	cmp	r3, #128	@ 0x80
 8004fa2:	d81f      	bhi.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8004fa8:	2b40      	cmp	r3, #64	@ 0x40
 8004faa:	d007      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8004fac:	e01a      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fae:	4b7e      	ldr	r3, [pc, #504]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb2:	4a7d      	ldr	r2, [pc, #500]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fb8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004fba:	e01a      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fc0:	3308      	adds	r3, #8
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 fa5c 	bl	8005480 <RCCEx_PLL2_Config>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004fce:	e010      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004fd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fd4:	3330      	adds	r3, #48	@ 0x30
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 faea 	bl	80055b0 <RCCEx_PLL3_Config>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004fe2:	e006      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004fea:	e002      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004fec:	bf00      	nop
 8004fee:	e000      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ff2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10d      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004ffa:	4b6b      	ldr	r3, [pc, #428]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005000:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005004:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005008:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800500c:	4a66      	ldr	r2, [pc, #408]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800500e:	430b      	orrs	r3, r1
 8005010:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005014:	e003      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005016:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800501a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800501e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005026:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800502a:	633b      	str	r3, [r7, #48]	@ 0x30
 800502c:	2300      	movs	r3, #0
 800502e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005030:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005034:	460b      	mov	r3, r1
 8005036:	4313      	orrs	r3, r2
 8005038:	d055      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800503a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800503e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8005042:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005046:	d031      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8005048:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800504c:	d82a      	bhi.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800504e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005052:	d02d      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8005054:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005058:	d824      	bhi.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800505a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800505e:	d029      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8005060:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005064:	d81e      	bhi.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800506a:	d011      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 800506c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005070:	d818      	bhi.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005072:	2b00      	cmp	r3, #0
 8005074:	d020      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8005076:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800507a:	d113      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800507c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005080:	3308      	adds	r3, #8
 8005082:	4618      	mov	r0, r3
 8005084:	f000 f9fc 	bl	8005480 <RCCEx_PLL2_Config>
 8005088:	4603      	mov	r3, r0
 800508a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800508e:	e014      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005090:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005094:	3330      	adds	r3, #48	@ 0x30
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fa8a 	bl	80055b0 <RCCEx_PLL3_Config>
 800509c:	4603      	mov	r3, r0
 800509e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80050a2:	e00a      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80050aa:	e006      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80050ac:	bf00      	nop
 80050ae:	e004      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80050b0:	bf00      	nop
 80050b2:	e002      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80050b4:	bf00      	nop
 80050b6:	e000      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80050b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10d      	bne.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80050c2:	4b39      	ldr	r3, [pc, #228]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80050c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050c8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80050cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050d0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80050d4:	4a34      	ldr	r2, [pc, #208]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80050d6:	430b      	orrs	r3, r1
 80050d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80050dc:	e003      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80050e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80050e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ee:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80050f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050f4:	2300      	movs	r3, #0
 80050f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050f8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80050fc:	460b      	mov	r3, r1
 80050fe:	4313      	orrs	r3, r2
 8005100:	d058      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8005102:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005106:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800510a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800510e:	d031      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8005110:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005114:	d82a      	bhi.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005116:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800511a:	d02d      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 800511c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005120:	d824      	bhi.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005122:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005126:	d029      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8005128:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800512c:	d81e      	bhi.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800512e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005132:	d011      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8005134:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005138:	d818      	bhi.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800513a:	2b00      	cmp	r3, #0
 800513c:	d020      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 800513e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005142:	d113      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005144:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005148:	3308      	adds	r3, #8
 800514a:	4618      	mov	r0, r3
 800514c:	f000 f998 	bl	8005480 <RCCEx_PLL2_Config>
 8005150:	4603      	mov	r3, r0
 8005152:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8005156:	e014      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005158:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800515c:	3330      	adds	r3, #48	@ 0x30
 800515e:	4618      	mov	r0, r3
 8005160:	f000 fa26 	bl	80055b0 <RCCEx_PLL3_Config>
 8005164:	4603      	mov	r3, r0
 8005166:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800516a:	e00a      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005172:	e006      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005174:	bf00      	nop
 8005176:	e004      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005178:	bf00      	nop
 800517a:	e002      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800517c:	bf00      	nop
 800517e:	e000      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005182:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005186:	2b00      	cmp	r3, #0
 8005188:	d110      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800518a:	4b07      	ldr	r3, [pc, #28]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800518c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005190:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005194:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005198:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800519c:	4902      	ldr	r1, [pc, #8]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80051a4:	e006      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 80051a6:	bf00      	nop
 80051a8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051b0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80051b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051bc:	2100      	movs	r1, #0
 80051be:	6239      	str	r1, [r7, #32]
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80051c6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80051ca:	460b      	mov	r3, r1
 80051cc:	4313      	orrs	r3, r2
 80051ce:	d055      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80051d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80051d8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80051dc:	d031      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 80051de:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80051e2:	d82a      	bhi.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80051e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051e8:	d02d      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 80051ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051ee:	d824      	bhi.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80051f0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80051f4:	d029      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 80051f6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80051fa:	d81e      	bhi.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80051fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005200:	d011      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8005202:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005206:	d818      	bhi.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005208:	2b00      	cmp	r3, #0
 800520a:	d020      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 800520c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005210:	d113      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005212:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005216:	3308      	adds	r3, #8
 8005218:	4618      	mov	r0, r3
 800521a:	f000 f931 	bl	8005480 <RCCEx_PLL2_Config>
 800521e:	4603      	mov	r3, r0
 8005220:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005224:	e014      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005226:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800522a:	3330      	adds	r3, #48	@ 0x30
 800522c:	4618      	mov	r0, r3
 800522e:	f000 f9bf 	bl	80055b0 <RCCEx_PLL3_Config>
 8005232:	4603      	mov	r3, r0
 8005234:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005238:	e00a      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005240:	e006      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005242:	bf00      	nop
 8005244:	e004      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005246:	bf00      	nop
 8005248:	e002      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800524a:	bf00      	nop
 800524c:	e000      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800524e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005250:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10d      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8005258:	4b88      	ldr	r3, [pc, #544]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800525a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800525e:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8005262:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005266:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800526a:	4984      	ldr	r1, [pc, #528]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005272:	e003      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005274:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005278:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800527c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005284:	2100      	movs	r1, #0
 8005286:	61b9      	str	r1, [r7, #24]
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	61fb      	str	r3, [r7, #28]
 800528e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005292:	460b      	mov	r3, r1
 8005294:	4313      	orrs	r3, r2
 8005296:	d03d      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8005298:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800529c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	d81c      	bhi.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 80052a4:	a201      	add	r2, pc, #4	@ (adr r2, 80052ac <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 80052a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052aa:	bf00      	nop
 80052ac:	080052e7 	.word	0x080052e7
 80052b0:	080052bd 	.word	0x080052bd
 80052b4:	080052cb 	.word	0x080052cb
 80052b8:	080052e7 	.word	0x080052e7
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052bc:	4b6f      	ldr	r3, [pc, #444]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80052be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c0:	4a6e      	ldr	r2, [pc, #440]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80052c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052c6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80052c8:	e00e      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052ce:	3308      	adds	r3, #8
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 f8d5 	bl	8005480 <RCCEx_PLL2_Config>
 80052d6:	4603      	mov	r3, r0
 80052d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80052dc:	e004      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80052e4:	e000      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 80052e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10d      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80052f0:	4b62      	ldr	r3, [pc, #392]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80052f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80052f6:	f023 0203 	bic.w	r2, r3, #3
 80052fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052fe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005302:	495e      	ldr	r1, [pc, #376]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005304:	4313      	orrs	r3, r2
 8005306:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800530a:	e003      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005310:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005314:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531c:	2100      	movs	r1, #0
 800531e:	6139      	str	r1, [r7, #16]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	617b      	str	r3, [r7, #20]
 8005326:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800532a:	460b      	mov	r3, r1
 800532c:	4313      	orrs	r3, r2
 800532e:	d03a      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005330:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005334:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800533c:	d00e      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 800533e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005342:	d815      	bhi.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8005344:	2b00      	cmp	r3, #0
 8005346:	d017      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8005348:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800534c:	d110      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800534e:	4b4b      	ldr	r3, [pc, #300]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005352:	4a4a      	ldr	r2, [pc, #296]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005354:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005358:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800535a:	e00e      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800535c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005360:	3308      	adds	r3, #8
 8005362:	4618      	mov	r0, r3
 8005364:	f000 f88c 	bl	8005480 <RCCEx_PLL2_Config>
 8005368:	4603      	mov	r3, r0
 800536a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800536e:	e004      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005376:	e000      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8005378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800537a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10d      	bne.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005382:	4b3e      	ldr	r3, [pc, #248]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005388:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800538c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005390:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005394:	4939      	ldr	r1, [pc, #228]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005396:	4313      	orrs	r3, r2
 8005398:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800539c:	e003      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800539e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80053a2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ae:	2100      	movs	r1, #0
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	f003 0310 	and.w	r3, r3, #16
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80053bc:	460b      	mov	r3, r1
 80053be:	4313      	orrs	r3, r2
 80053c0:	d038      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80053c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053c6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80053ca:	2b30      	cmp	r3, #48	@ 0x30
 80053cc:	d01b      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 80053ce:	2b30      	cmp	r3, #48	@ 0x30
 80053d0:	d815      	bhi.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 80053d2:	2b10      	cmp	r3, #16
 80053d4:	d002      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	d007      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 80053da:	e010      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053dc:	4b27      	ldr	r3, [pc, #156]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80053de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e0:	4a26      	ldr	r2, [pc, #152]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80053e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053e6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80053e8:	e00e      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053ee:	3330      	adds	r3, #48	@ 0x30
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 f8dd 	bl	80055b0 <RCCEx_PLL3_Config>
 80053f6:	4603      	mov	r3, r0
 80053f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80053fc:	e004      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005404:	e000      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8005406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005408:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10d      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005410:	4b1a      	ldr	r3, [pc, #104]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005412:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005416:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800541a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800541e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005422:	4916      	ldr	r1, [pc, #88]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005424:	4313      	orrs	r3, r2
 8005426:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800542a:	e003      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005430:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005434:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543c:	2100      	movs	r1, #0
 800543e:	6039      	str	r1, [r7, #0]
 8005440:	f003 0308 	and.w	r3, r3, #8
 8005444:	607b      	str	r3, [r7, #4]
 8005446:	e9d7 1200 	ldrd	r1, r2, [r7]
 800544a:	460b      	mov	r3, r1
 800544c:	4313      	orrs	r3, r2
 800544e:	d00c      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005450:	4b0a      	ldr	r3, [pc, #40]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005452:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005456:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800545a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800545e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8005462:	4906      	ldr	r1, [pc, #24]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005464:	4313      	orrs	r3, r2
 8005466:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800546a:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 800546e:	4618      	mov	r0, r3
 8005470:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8005474:	46bd      	mov	sp, r7
 8005476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800547a:	bf00      	nop
 800547c:	44020c00 	.word	0x44020c00

08005480 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005488:	4b48      	ldr	r3, [pc, #288]	@ (80055ac <RCCEx_PLL2_Config+0x12c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a47      	ldr	r2, [pc, #284]	@ (80055ac <RCCEx_PLL2_Config+0x12c>)
 800548e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005492:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005494:	f7fc f992 	bl	80017bc <HAL_GetTick>
 8005498:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800549a:	e008      	b.n	80054ae <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800549c:	f7fc f98e 	bl	80017bc <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e07a      	b.n	80055a4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054ae:	4b3f      	ldr	r3, [pc, #252]	@ (80055ac <RCCEx_PLL2_Config+0x12c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1f0      	bne.n	800549c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80054ba:	4b3c      	ldr	r3, [pc, #240]	@ (80055ac <RCCEx_PLL2_Config+0x12c>)
 80054bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054be:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80054c2:	f023 0303 	bic.w	r3, r3, #3
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6811      	ldr	r1, [r2, #0]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6852      	ldr	r2, [r2, #4]
 80054ce:	0212      	lsls	r2, r2, #8
 80054d0:	430a      	orrs	r2, r1
 80054d2:	4936      	ldr	r1, [pc, #216]	@ (80055ac <RCCEx_PLL2_Config+0x12c>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	3b01      	subs	r3, #1
 80054de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	3b01      	subs	r3, #1
 80054e8:	025b      	lsls	r3, r3, #9
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	431a      	orrs	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	041b      	lsls	r3, r3, #16
 80054f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80054fa:	431a      	orrs	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	3b01      	subs	r3, #1
 8005502:	061b      	lsls	r3, r3, #24
 8005504:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005508:	4928      	ldr	r1, [pc, #160]	@ (80055ac <RCCEx_PLL2_Config+0x12c>)
 800550a:	4313      	orrs	r3, r2
 800550c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800550e:	4b27      	ldr	r3, [pc, #156]	@ (80055ac <RCCEx_PLL2_Config+0x12c>)
 8005510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005512:	f023 020c 	bic.w	r2, r3, #12
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	4924      	ldr	r1, [pc, #144]	@ (80055ac <RCCEx_PLL2_Config+0x12c>)
 800551c:	4313      	orrs	r3, r2
 800551e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005520:	4b22      	ldr	r3, [pc, #136]	@ (80055ac <RCCEx_PLL2_Config+0x12c>)
 8005522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005524:	f023 0220 	bic.w	r2, r3, #32
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	491f      	ldr	r1, [pc, #124]	@ (80055ac <RCCEx_PLL2_Config+0x12c>)
 800552e:	4313      	orrs	r3, r2
 8005530:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005532:	4b1e      	ldr	r3, [pc, #120]	@ (80055ac <RCCEx_PLL2_Config+0x12c>)
 8005534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553a:	491c      	ldr	r1, [pc, #112]	@ (80055ac <RCCEx_PLL2_Config+0x12c>)
 800553c:	4313      	orrs	r3, r2
 800553e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005540:	4b1a      	ldr	r3, [pc, #104]	@ (80055ac <RCCEx_PLL2_Config+0x12c>)
 8005542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005544:	4a19      	ldr	r2, [pc, #100]	@ (80055ac <RCCEx_PLL2_Config+0x12c>)
 8005546:	f023 0310 	bic.w	r3, r3, #16
 800554a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800554c:	4b17      	ldr	r3, [pc, #92]	@ (80055ac <RCCEx_PLL2_Config+0x12c>)
 800554e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005550:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005554:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6a12      	ldr	r2, [r2, #32]
 800555c:	00d2      	lsls	r2, r2, #3
 800555e:	4913      	ldr	r1, [pc, #76]	@ (80055ac <RCCEx_PLL2_Config+0x12c>)
 8005560:	4313      	orrs	r3, r2
 8005562:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005564:	4b11      	ldr	r3, [pc, #68]	@ (80055ac <RCCEx_PLL2_Config+0x12c>)
 8005566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005568:	4a10      	ldr	r2, [pc, #64]	@ (80055ac <RCCEx_PLL2_Config+0x12c>)
 800556a:	f043 0310 	orr.w	r3, r3, #16
 800556e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005570:	4b0e      	ldr	r3, [pc, #56]	@ (80055ac <RCCEx_PLL2_Config+0x12c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a0d      	ldr	r2, [pc, #52]	@ (80055ac <RCCEx_PLL2_Config+0x12c>)
 8005576:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800557a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800557c:	f7fc f91e 	bl	80017bc <HAL_GetTick>
 8005580:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005582:	e008      	b.n	8005596 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005584:	f7fc f91a 	bl	80017bc <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d901      	bls.n	8005596 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e006      	b.n	80055a4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005596:	4b05      	ldr	r3, [pc, #20]	@ (80055ac <RCCEx_PLL2_Config+0x12c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0f0      	beq.n	8005584 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80055a2:	2300      	movs	r3, #0

}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	44020c00 	.word	0x44020c00

080055b0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 80055b8:	4b48      	ldr	r3, [pc, #288]	@ (80056dc <RCCEx_PLL3_Config+0x12c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a47      	ldr	r2, [pc, #284]	@ (80056dc <RCCEx_PLL3_Config+0x12c>)
 80055be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055c2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055c4:	f7fc f8fa 	bl	80017bc <HAL_GetTick>
 80055c8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055ca:	e008      	b.n	80055de <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80055cc:	f7fc f8f6 	bl	80017bc <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d901      	bls.n	80055de <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e07a      	b.n	80056d4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055de:	4b3f      	ldr	r3, [pc, #252]	@ (80056dc <RCCEx_PLL3_Config+0x12c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1f0      	bne.n	80055cc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80055ea:	4b3c      	ldr	r3, [pc, #240]	@ (80056dc <RCCEx_PLL3_Config+0x12c>)
 80055ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ee:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80055f2:	f023 0303 	bic.w	r3, r3, #3
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6811      	ldr	r1, [r2, #0]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	6852      	ldr	r2, [r2, #4]
 80055fe:	0212      	lsls	r2, r2, #8
 8005600:	430a      	orrs	r2, r1
 8005602:	4936      	ldr	r1, [pc, #216]	@ (80056dc <RCCEx_PLL3_Config+0x12c>)
 8005604:	4313      	orrs	r3, r2
 8005606:	630b      	str	r3, [r1, #48]	@ 0x30
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	3b01      	subs	r3, #1
 800560e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	3b01      	subs	r3, #1
 8005618:	025b      	lsls	r3, r3, #9
 800561a:	b29b      	uxth	r3, r3
 800561c:	431a      	orrs	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	3b01      	subs	r3, #1
 8005624:	041b      	lsls	r3, r3, #16
 8005626:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	3b01      	subs	r3, #1
 8005632:	061b      	lsls	r3, r3, #24
 8005634:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005638:	4928      	ldr	r1, [pc, #160]	@ (80056dc <RCCEx_PLL3_Config+0x12c>)
 800563a:	4313      	orrs	r3, r2
 800563c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800563e:	4b27      	ldr	r3, [pc, #156]	@ (80056dc <RCCEx_PLL3_Config+0x12c>)
 8005640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005642:	f023 020c 	bic.w	r2, r3, #12
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	4924      	ldr	r1, [pc, #144]	@ (80056dc <RCCEx_PLL3_Config+0x12c>)
 800564c:	4313      	orrs	r3, r2
 800564e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8005650:	4b22      	ldr	r3, [pc, #136]	@ (80056dc <RCCEx_PLL3_Config+0x12c>)
 8005652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005654:	f023 0220 	bic.w	r2, r3, #32
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	491f      	ldr	r1, [pc, #124]	@ (80056dc <RCCEx_PLL3_Config+0x12c>)
 800565e:	4313      	orrs	r3, r2
 8005660:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005662:	4b1e      	ldr	r3, [pc, #120]	@ (80056dc <RCCEx_PLL3_Config+0x12c>)
 8005664:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566a:	491c      	ldr	r1, [pc, #112]	@ (80056dc <RCCEx_PLL3_Config+0x12c>)
 800566c:	4313      	orrs	r3, r2
 800566e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8005670:	4b1a      	ldr	r3, [pc, #104]	@ (80056dc <RCCEx_PLL3_Config+0x12c>)
 8005672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005674:	4a19      	ldr	r2, [pc, #100]	@ (80056dc <RCCEx_PLL3_Config+0x12c>)
 8005676:	f023 0310 	bic.w	r3, r3, #16
 800567a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800567c:	4b17      	ldr	r3, [pc, #92]	@ (80056dc <RCCEx_PLL3_Config+0x12c>)
 800567e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005680:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005684:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	6a12      	ldr	r2, [r2, #32]
 800568c:	00d2      	lsls	r2, r2, #3
 800568e:	4913      	ldr	r1, [pc, #76]	@ (80056dc <RCCEx_PLL3_Config+0x12c>)
 8005690:	4313      	orrs	r3, r2
 8005692:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8005694:	4b11      	ldr	r3, [pc, #68]	@ (80056dc <RCCEx_PLL3_Config+0x12c>)
 8005696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005698:	4a10      	ldr	r2, [pc, #64]	@ (80056dc <RCCEx_PLL3_Config+0x12c>)
 800569a:	f043 0310 	orr.w	r3, r3, #16
 800569e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80056a0:	4b0e      	ldr	r3, [pc, #56]	@ (80056dc <RCCEx_PLL3_Config+0x12c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a0d      	ldr	r2, [pc, #52]	@ (80056dc <RCCEx_PLL3_Config+0x12c>)
 80056a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056aa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80056ac:	f7fc f886 	bl	80017bc <HAL_GetTick>
 80056b0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056b2:	e008      	b.n	80056c6 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80056b4:	f7fc f882 	bl	80017bc <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e006      	b.n	80056d4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056c6:	4b05      	ldr	r3, [pc, #20]	@ (80056dc <RCCEx_PLL3_Config+0x12c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0f0      	beq.n	80056b4 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	44020c00 	.word	0x44020c00

080056e0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d071      	beq.n	80057d6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d106      	bne.n	800570c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7fb fcfa 	bl	8001100 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005714:	4b32      	ldr	r3, [pc, #200]	@ (80057e0 <HAL_RTC_Init+0x100>)
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f003 0310 	and.w	r3, r3, #16
 800571c:	2b10      	cmp	r3, #16
 800571e:	d051      	beq.n	80057c4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005720:	4b2f      	ldr	r3, [pc, #188]	@ (80057e0 <HAL_RTC_Init+0x100>)
 8005722:	22ca      	movs	r2, #202	@ 0xca
 8005724:	625a      	str	r2, [r3, #36]	@ 0x24
 8005726:	4b2e      	ldr	r3, [pc, #184]	@ (80057e0 <HAL_RTC_Init+0x100>)
 8005728:	2253      	movs	r2, #83	@ 0x53
 800572a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 fa53 	bl	8005bd8 <RTC_EnterInitMode>
 8005732:	4603      	mov	r3, r0
 8005734:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8005736:	7bfb      	ldrb	r3, [r7, #15]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d13f      	bne.n	80057bc <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800573c:	4b28      	ldr	r3, [pc, #160]	@ (80057e0 <HAL_RTC_Init+0x100>)
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	4a27      	ldr	r2, [pc, #156]	@ (80057e0 <HAL_RTC_Init+0x100>)
 8005742:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8005746:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800574a:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800574c:	4b24      	ldr	r3, [pc, #144]	@ (80057e0 <HAL_RTC_Init+0x100>)
 800574e:	699a      	ldr	r2, [r3, #24]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6859      	ldr	r1, [r3, #4]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	4319      	orrs	r1, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	430b      	orrs	r3, r1
 8005760:	491f      	ldr	r1, [pc, #124]	@ (80057e0 <HAL_RTC_Init+0x100>)
 8005762:	4313      	orrs	r3, r2
 8005764:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	041b      	lsls	r3, r3, #16
 8005770:	491b      	ldr	r1, [pc, #108]	@ (80057e0 <HAL_RTC_Init+0x100>)
 8005772:	4313      	orrs	r3, r2
 8005774:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8005776:	4b1a      	ldr	r3, [pc, #104]	@ (80057e0 <HAL_RTC_Init+0x100>)
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005786:	430b      	orrs	r3, r1
 8005788:	4915      	ldr	r1, [pc, #84]	@ (80057e0 <HAL_RTC_Init+0x100>)
 800578a:	4313      	orrs	r3, r2
 800578c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fa5e 	bl	8005c50 <RTC_ExitInitMode>
 8005794:	4603      	mov	r3, r0
 8005796:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 8005798:	7bfb      	ldrb	r3, [r7, #15]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10e      	bne.n	80057bc <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 800579e:	4b10      	ldr	r3, [pc, #64]	@ (80057e0 <HAL_RTC_Init+0x100>)
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a19      	ldr	r1, [r3, #32]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	4319      	orrs	r1, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	430b      	orrs	r3, r1
 80057b6:	490a      	ldr	r1, [pc, #40]	@ (80057e0 <HAL_RTC_Init+0x100>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057bc:	4b08      	ldr	r3, [pc, #32]	@ (80057e0 <HAL_RTC_Init+0x100>)
 80057be:	22ff      	movs	r2, #255	@ 0xff
 80057c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80057c2:	e001      	b.n	80057c8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d103      	bne.n	80057d6 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	44007800 	.word	0x44007800

080057e4 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80057e4:	b590      	push	{r4, r7, lr}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d101      	bne.n	80057fe <HAL_RTC_SetTime+0x1a>
 80057fa:	2302      	movs	r3, #2
 80057fc:	e07e      	b.n	80058fc <HAL_RTC_SetTime+0x118>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2202      	movs	r2, #2
 800580a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800580e:	4b3d      	ldr	r3, [pc, #244]	@ (8005904 <HAL_RTC_SetTime+0x120>)
 8005810:	22ca      	movs	r2, #202	@ 0xca
 8005812:	625a      	str	r2, [r3, #36]	@ 0x24
 8005814:	4b3b      	ldr	r3, [pc, #236]	@ (8005904 <HAL_RTC_SetTime+0x120>)
 8005816:	2253      	movs	r2, #83	@ 0x53
 8005818:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 f9dc 	bl	8005bd8 <RTC_EnterInitMode>
 8005820:	4603      	mov	r3, r0
 8005822:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005824:	7cfb      	ldrb	r3, [r7, #19]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d159      	bne.n	80058de <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800582a:	4b36      	ldr	r3, [pc, #216]	@ (8005904 <HAL_RTC_SetTime+0x120>)
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005832:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005836:	d04d      	beq.n	80058d4 <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d125      	bne.n	800588a <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800583e:	4b31      	ldr	r3, [pc, #196]	@ (8005904 <HAL_RTC_SetTime+0x120>)
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005846:	2b00      	cmp	r3, #0
 8005848:	d102      	bne.n	8005850 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2200      	movs	r2, #0
 800584e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	4618      	mov	r0, r3
 8005856:	f000 fa39 	bl	8005ccc <RTC_ByteToBcd2>
 800585a:	4603      	mov	r3, r0
 800585c:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	785b      	ldrb	r3, [r3, #1]
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fa32 	bl	8005ccc <RTC_ByteToBcd2>
 8005868:	4603      	mov	r3, r0
 800586a:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800586c:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	789b      	ldrb	r3, [r3, #2]
 8005872:	4618      	mov	r0, r3
 8005874:	f000 fa2a 	bl	8005ccc <RTC_ByteToBcd2>
 8005878:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800587a:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	78db      	ldrb	r3, [r3, #3]
 8005882:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005884:	4313      	orrs	r3, r2
 8005886:	617b      	str	r3, [r7, #20]
 8005888:	e017      	b.n	80058ba <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800588a:	4b1e      	ldr	r3, [pc, #120]	@ (8005904 <HAL_RTC_SetTime+0x120>)
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005892:	2b00      	cmp	r3, #0
 8005894:	d102      	bne.n	800589c <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	2200      	movs	r2, #0
 800589a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	785b      	ldrb	r3, [r3, #1]
 80058a6:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80058a8:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80058ae:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	78db      	ldrb	r3, [r3, #3]
 80058b4:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80058b6:	4313      	orrs	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80058ba:	4a12      	ldr	r2, [pc, #72]	@ (8005904 <HAL_RTC_SetTime+0x120>)
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80058c2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80058c6:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80058c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005904 <HAL_RTC_SetTime+0x120>)
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	4a0d      	ldr	r2, [pc, #52]	@ (8005904 <HAL_RTC_SetTime+0x120>)
 80058ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058d2:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 f9bb 	bl	8005c50 <RTC_ExitInitMode>
 80058da:	4603      	mov	r3, r0
 80058dc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058de:	4b09      	ldr	r3, [pc, #36]	@ (8005904 <HAL_RTC_SetTime+0x120>)
 80058e0:	22ff      	movs	r2, #255	@ 0xff
 80058e2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80058e4:	7cfb      	ldrb	r3, [r7, #19]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d103      	bne.n	80058f2 <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 80058fa:	7cfb      	ldrb	r3, [r7, #19]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	371c      	adds	r7, #28
 8005900:	46bd      	mov	sp, r7
 8005902:	bd90      	pop	{r4, r7, pc}
 8005904:	44007800 	.word	0x44007800

08005908 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8005914:	4b2c      	ldr	r3, [pc, #176]	@ (80059c8 <HAL_RTC_GetTime+0xc0>)
 8005916:	689a      	ldr	r2, [r3, #8]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800591c:	4b2a      	ldr	r3, [pc, #168]	@ (80059c8 <HAL_RTC_GetTime+0xc0>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005924:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005928:	d049      	beq.n	80059be <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800592a:	4b27      	ldr	r3, [pc, #156]	@ (80059c8 <HAL_RTC_GetTime+0xc0>)
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8005936:	4b24      	ldr	r3, [pc, #144]	@ (80059c8 <HAL_RTC_GetTime+0xc0>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800593e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005942:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	0c1b      	lsrs	r3, r3, #16
 8005948:	b2db      	uxtb	r3, r3
 800594a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800594e:	b2da      	uxtb	r2, r3
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	0a1b      	lsrs	r3, r3, #8
 8005958:	b2db      	uxtb	r3, r3
 800595a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800595e:	b2da      	uxtb	r2, r3
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800596c:	b2da      	uxtb	r2, r3
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	0d9b      	lsrs	r3, r3, #22
 8005976:	b2db      	uxtb	r3, r3
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	b2da      	uxtb	r2, r3
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d11a      	bne.n	80059be <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	4618      	mov	r0, r3
 800598e:	f000 f9bd 	bl	8005d0c <RTC_Bcd2ToByte>
 8005992:	4603      	mov	r3, r0
 8005994:	461a      	mov	r2, r3
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	785b      	ldrb	r3, [r3, #1]
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 f9b4 	bl	8005d0c <RTC_Bcd2ToByte>
 80059a4:	4603      	mov	r3, r0
 80059a6:	461a      	mov	r2, r3
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	789b      	ldrb	r3, [r3, #2]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 f9ab 	bl	8005d0c <RTC_Bcd2ToByte>
 80059b6:	4603      	mov	r3, r0
 80059b8:	461a      	mov	r2, r3
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3718      	adds	r7, #24
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	44007800 	.word	0x44007800

080059cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80059cc:	b590      	push	{r4, r7, lr}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d101      	bne.n	80059e6 <HAL_RTC_SetDate+0x1a>
 80059e2:	2302      	movs	r3, #2
 80059e4:	e071      	b.n	8005aca <HAL_RTC_SetDate+0xfe>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2202      	movs	r2, #2
 80059f2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10e      	bne.n	8005a1a <HAL_RTC_SetDate+0x4e>
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	785b      	ldrb	r3, [r3, #1]
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d008      	beq.n	8005a1a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	785b      	ldrb	r3, [r3, #1]
 8005a0c:	f023 0310 	bic.w	r3, r3, #16
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	330a      	adds	r3, #10
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d11c      	bne.n	8005a5a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	78db      	ldrb	r3, [r3, #3]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 f951 	bl	8005ccc <RTC_ByteToBcd2>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	785b      	ldrb	r3, [r3, #1]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 f94a 	bl	8005ccc <RTC_ByteToBcd2>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005a3c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	789b      	ldrb	r3, [r3, #2]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 f942 	bl	8005ccc <RTC_ByteToBcd2>
 8005a48:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a4a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005a54:	4313      	orrs	r3, r2
 8005a56:	617b      	str	r3, [r7, #20]
 8005a58:	e00e      	b.n	8005a78 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	78db      	ldrb	r3, [r3, #3]
 8005a5e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	785b      	ldrb	r3, [r3, #1]
 8005a64:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a66:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005a6c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a74:	4313      	orrs	r3, r2
 8005a76:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a78:	4b16      	ldr	r3, [pc, #88]	@ (8005ad4 <HAL_RTC_SetDate+0x108>)
 8005a7a:	22ca      	movs	r2, #202	@ 0xca
 8005a7c:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a7e:	4b15      	ldr	r3, [pc, #84]	@ (8005ad4 <HAL_RTC_SetDate+0x108>)
 8005a80:	2253      	movs	r2, #83	@ 0x53
 8005a82:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f8a7 	bl	8005bd8 <RTC_EnterInitMode>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005a8e:	7cfb      	ldrb	r3, [r7, #19]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10b      	bne.n	8005aac <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8005a94:	4a0f      	ldr	r2, [pc, #60]	@ (8005ad4 <HAL_RTC_SetDate+0x108>)
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005a9c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005aa0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 f8d4 	bl	8005c50 <RTC_ExitInitMode>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005aac:	4b09      	ldr	r3, [pc, #36]	@ (8005ad4 <HAL_RTC_SetDate+0x108>)
 8005aae:	22ff      	movs	r2, #255	@ 0xff
 8005ab0:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005ab2:	7cfb      	ldrb	r3, [r7, #19]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d103      	bne.n	8005ac0 <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8005ac8:	7cfb      	ldrb	r3, [r7, #19]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	371c      	adds	r7, #28
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd90      	pop	{r4, r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	44007800 	.word	0x44007800

08005ad8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8005ae4:	4b22      	ldr	r3, [pc, #136]	@ (8005b70 <HAL_RTC_GetDate+0x98>)
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005aec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005af0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	0c1b      	lsrs	r3, r3, #16
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	0a1b      	lsrs	r3, r3, #8
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	f003 031f 	and.w	r3, r3, #31
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	0b5b      	lsrs	r3, r3, #13
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	f003 0307 	and.w	r3, r3, #7
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d11a      	bne.n	8005b66 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	78db      	ldrb	r3, [r3, #3]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f000 f8e9 	bl	8005d0c <RTC_Bcd2ToByte>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	785b      	ldrb	r3, [r3, #1]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 f8e0 	bl	8005d0c <RTC_Bcd2ToByte>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	461a      	mov	r2, r3
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	789b      	ldrb	r3, [r3, #2]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 f8d7 	bl	8005d0c <RTC_Bcd2ToByte>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	461a      	mov	r2, r3
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3718      	adds	r7, #24
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	44007800 	.word	0x44007800

08005b74 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8005b7c:	4b15      	ldr	r3, [pc, #84]	@ (8005bd4 <HAL_RTC_WaitForSynchro+0x60>)
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	4a14      	ldr	r2, [pc, #80]	@ (8005bd4 <HAL_RTC_WaitForSynchro+0x60>)
 8005b82:	f023 0320 	bic.w	r3, r3, #32
 8005b86:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005b88:	f7fb fe18 	bl	80017bc <HAL_GetTick>
 8005b8c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005b8e:	e013      	b.n	8005bb8 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b90:	f7fb fe14 	bl	80017bc <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b9e:	d90b      	bls.n	8005bb8 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd4 <HAL_RTC_WaitForSynchro+0x60>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f003 0320 	and.w	r3, r3, #32
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10c      	bne.n	8005bc6 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2203      	movs	r2, #3
 8005bb0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e008      	b.n	8005bca <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005bb8:	4b06      	ldr	r3, [pc, #24]	@ (8005bd4 <HAL_RTC_WaitForSynchro+0x60>)
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f003 0320 	and.w	r3, r3, #32
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d0e5      	beq.n	8005b90 <HAL_RTC_WaitForSynchro+0x1c>
 8005bc4:	e000      	b.n	8005bc8 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 8005bc6:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	44007800 	.word	0x44007800

08005bd8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005be0:	2300      	movs	r3, #0
 8005be2:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005be4:	4b19      	ldr	r3, [pc, #100]	@ (8005c4c <RTC_EnterInitMode+0x74>)
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d128      	bne.n	8005c42 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005bf0:	4b16      	ldr	r3, [pc, #88]	@ (8005c4c <RTC_EnterInitMode+0x74>)
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	4a15      	ldr	r2, [pc, #84]	@ (8005c4c <RTC_EnterInitMode+0x74>)
 8005bf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bfa:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005bfc:	f7fb fdde 	bl	80017bc <HAL_GetTick>
 8005c00:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005c02:	e013      	b.n	8005c2c <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005c04:	f7fb fdda 	bl	80017bc <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c12:	d90b      	bls.n	8005c2c <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005c14:	4b0d      	ldr	r3, [pc, #52]	@ (8005c4c <RTC_EnterInitMode+0x74>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10f      	bne.n	8005c40 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2203      	movs	r2, #3
 8005c28:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005c2c:	4b07      	ldr	r3, [pc, #28]	@ (8005c4c <RTC_EnterInitMode+0x74>)
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d104      	bne.n	8005c42 <RTC_EnterInitMode+0x6a>
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d1e2      	bne.n	8005c04 <RTC_EnterInitMode+0x2c>
 8005c3e:	e000      	b.n	8005c42 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 8005c40:	bf00      	nop
        }
      }
    }
  }

  return status;
 8005c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	44007800 	.word	0x44007800

08005c50 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8005cc8 <RTC_ExitInitMode+0x78>)
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	4a19      	ldr	r2, [pc, #100]	@ (8005cc8 <RTC_ExitInitMode+0x78>)
 8005c62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c66:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005c68:	4b17      	ldr	r3, [pc, #92]	@ (8005cc8 <RTC_ExitInitMode+0x78>)
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	f003 0320 	and.w	r3, r3, #32
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10c      	bne.n	8005c8e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f7ff ff7d 	bl	8005b74 <HAL_RTC_WaitForSynchro>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01e      	beq.n	8005cbe <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2203      	movs	r2, #3
 8005c84:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	73fb      	strb	r3, [r7, #15]
 8005c8c:	e017      	b.n	8005cbe <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8005cc8 <RTC_ExitInitMode+0x78>)
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	4a0d      	ldr	r2, [pc, #52]	@ (8005cc8 <RTC_ExitInitMode+0x78>)
 8005c94:	f023 0320 	bic.w	r3, r3, #32
 8005c98:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7ff ff6a 	bl	8005b74 <HAL_RTC_WaitForSynchro>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d005      	beq.n	8005cb2 <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2203      	movs	r2, #3
 8005caa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005cb2:	4b05      	ldr	r3, [pc, #20]	@ (8005cc8 <RTC_ExitInitMode+0x78>)
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	4a04      	ldr	r2, [pc, #16]	@ (8005cc8 <RTC_ExitInitMode+0x78>)
 8005cb8:	f043 0320 	orr.w	r3, r3, #32
 8005cbc:	6193      	str	r3, [r2, #24]
  }
  return status;
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	44007800 	.word	0x44007800

08005ccc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 8005cda:	79fb      	ldrb	r3, [r7, #7]
 8005cdc:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 8005cde:	e005      	b.n	8005cec <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 8005ce6:	7afb      	ldrb	r3, [r7, #11]
 8005ce8:	3b0a      	subs	r3, #10
 8005cea:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 8005cec:	7afb      	ldrb	r3, [r7, #11]
 8005cee:	2b09      	cmp	r3, #9
 8005cf0:	d8f6      	bhi.n	8005ce0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	7afb      	ldrb	r3, [r7, #11]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	b2db      	uxtb	r3, r3
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	4603      	mov	r3, r0
 8005d14:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;

  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8005d16:	79fb      	ldrb	r3, [r7, #7]
 8005d18:	091b      	lsrs	r3, r3, #4
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	4613      	mov	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	60fb      	str	r3, [r7, #12]

  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	79fb      	ldrb	r3, [r7, #7]
 8005d2e:	f003 030f 	and.w	r3, r3, #15
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	4413      	add	r3, r2
 8005d36:	b2db      	uxtb	r3, r3
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	4910      	ldr	r1, [pc, #64]	@ (8005d98 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	431a      	orrs	r2, r3
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	490c      	ldr	r1, [pc, #48]	@ (8005d9c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 8005d70:	4b0a      	ldr	r3, [pc, #40]	@ (8005d9c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	6919      	ldr	r1, [r3, #16]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	041b      	lsls	r3, r3, #16
 8005d82:	430b      	orrs	r3, r1
 8005d84:	4905      	ldr	r1, [pc, #20]	@ (8005d9c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	44007800 	.word	0x44007800
 8005d9c:	44007c00 	.word	0x44007c00

08005da0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e049      	b.n	8005e46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d106      	bne.n	8005dcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7fb fc18 	bl	80015fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	3304      	adds	r3, #4
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4610      	mov	r0, r2
 8005de0:	f000 fe50 	bl	8006a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
	...

08005e50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d001      	beq.n	8005e68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e07c      	b.n	8005f62 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68da      	ldr	r2, [r3, #12]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f042 0201 	orr.w	r2, r2, #1
 8005e7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a3a      	ldr	r2, [pc, #232]	@ (8005f70 <HAL_TIM_Base_Start_IT+0x120>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d04a      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0xd0>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a39      	ldr	r2, [pc, #228]	@ (8005f74 <HAL_TIM_Base_Start_IT+0x124>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d045      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0xd0>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e9c:	d040      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0xd0>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ea6:	d03b      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0xd0>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a32      	ldr	r2, [pc, #200]	@ (8005f78 <HAL_TIM_Base_Start_IT+0x128>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d036      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0xd0>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a31      	ldr	r2, [pc, #196]	@ (8005f7c <HAL_TIM_Base_Start_IT+0x12c>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d031      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0xd0>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a2f      	ldr	r2, [pc, #188]	@ (8005f80 <HAL_TIM_Base_Start_IT+0x130>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d02c      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0xd0>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a2e      	ldr	r2, [pc, #184]	@ (8005f84 <HAL_TIM_Base_Start_IT+0x134>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d027      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0xd0>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a2c      	ldr	r2, [pc, #176]	@ (8005f88 <HAL_TIM_Base_Start_IT+0x138>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d022      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0xd0>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a2b      	ldr	r2, [pc, #172]	@ (8005f8c <HAL_TIM_Base_Start_IT+0x13c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d01d      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0xd0>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a29      	ldr	r2, [pc, #164]	@ (8005f90 <HAL_TIM_Base_Start_IT+0x140>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d018      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0xd0>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a28      	ldr	r2, [pc, #160]	@ (8005f94 <HAL_TIM_Base_Start_IT+0x144>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d013      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0xd0>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a26      	ldr	r2, [pc, #152]	@ (8005f98 <HAL_TIM_Base_Start_IT+0x148>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d00e      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0xd0>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a25      	ldr	r2, [pc, #148]	@ (8005f9c <HAL_TIM_Base_Start_IT+0x14c>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d009      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0xd0>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a23      	ldr	r2, [pc, #140]	@ (8005fa0 <HAL_TIM_Base_Start_IT+0x150>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d004      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0xd0>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a22      	ldr	r2, [pc, #136]	@ (8005fa4 <HAL_TIM_Base_Start_IT+0x154>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d115      	bne.n	8005f4c <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689a      	ldr	r2, [r3, #8]
 8005f26:	4b20      	ldr	r3, [pc, #128]	@ (8005fa8 <HAL_TIM_Base_Start_IT+0x158>)
 8005f28:	4013      	ands	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2b06      	cmp	r3, #6
 8005f30:	d015      	beq.n	8005f5e <HAL_TIM_Base_Start_IT+0x10e>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f38:	d011      	beq.n	8005f5e <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f042 0201 	orr.w	r2, r2, #1
 8005f48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f4a:	e008      	b.n	8005f5e <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0201 	orr.w	r2, r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	e000      	b.n	8005f60 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	40012c00 	.word	0x40012c00
 8005f74:	50012c00 	.word	0x50012c00
 8005f78:	40000400 	.word	0x40000400
 8005f7c:	50000400 	.word	0x50000400
 8005f80:	40000800 	.word	0x40000800
 8005f84:	50000800 	.word	0x50000800
 8005f88:	40000c00 	.word	0x40000c00
 8005f8c:	50000c00 	.word	0x50000c00
 8005f90:	40013400 	.word	0x40013400
 8005f94:	50013400 	.word	0x50013400
 8005f98:	40001800 	.word	0x40001800
 8005f9c:	50001800 	.word	0x50001800
 8005fa0:	40014000 	.word	0x40014000
 8005fa4:	50014000 	.word	0x50014000
 8005fa8:	00010007 	.word	0x00010007

08005fac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e049      	b.n	8006052 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d106      	bne.n	8005fd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f841 	bl	800605a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	4619      	mov	r1, r3
 8005fea:	4610      	mov	r0, r2
 8005fec:	f000 fd4a 	bl	8006a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800605a:	b480      	push	{r7}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006062:	bf00      	nop
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
	...

08006070 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d109      	bne.n	8006094 <HAL_TIM_PWM_Start+0x24>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b01      	cmp	r3, #1
 800608a:	bf14      	ite	ne
 800608c:	2301      	movne	r3, #1
 800608e:	2300      	moveq	r3, #0
 8006090:	b2db      	uxtb	r3, r3
 8006092:	e03c      	b.n	800610e <HAL_TIM_PWM_Start+0x9e>
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	2b04      	cmp	r3, #4
 8006098:	d109      	bne.n	80060ae <HAL_TIM_PWM_Start+0x3e>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	bf14      	ite	ne
 80060a6:	2301      	movne	r3, #1
 80060a8:	2300      	moveq	r3, #0
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	e02f      	b.n	800610e <HAL_TIM_PWM_Start+0x9e>
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	d109      	bne.n	80060c8 <HAL_TIM_PWM_Start+0x58>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b01      	cmp	r3, #1
 80060be:	bf14      	ite	ne
 80060c0:	2301      	movne	r3, #1
 80060c2:	2300      	moveq	r3, #0
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	e022      	b.n	800610e <HAL_TIM_PWM_Start+0x9e>
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	2b0c      	cmp	r3, #12
 80060cc:	d109      	bne.n	80060e2 <HAL_TIM_PWM_Start+0x72>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	bf14      	ite	ne
 80060da:	2301      	movne	r3, #1
 80060dc:	2300      	moveq	r3, #0
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	e015      	b.n	800610e <HAL_TIM_PWM_Start+0x9e>
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b10      	cmp	r3, #16
 80060e6:	d109      	bne.n	80060fc <HAL_TIM_PWM_Start+0x8c>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	bf14      	ite	ne
 80060f4:	2301      	movne	r3, #1
 80060f6:	2300      	moveq	r3, #0
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	e008      	b.n	800610e <HAL_TIM_PWM_Start+0x9e>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006102:	b2db      	uxtb	r3, r3
 8006104:	2b01      	cmp	r3, #1
 8006106:	bf14      	ite	ne
 8006108:	2301      	movne	r3, #1
 800610a:	2300      	moveq	r3, #0
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e0e2      	b.n	80062dc <HAL_TIM_PWM_Start+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d104      	bne.n	8006126 <HAL_TIM_PWM_Start+0xb6>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2202      	movs	r2, #2
 8006120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006124:	e023      	b.n	800616e <HAL_TIM_PWM_Start+0xfe>
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b04      	cmp	r3, #4
 800612a:	d104      	bne.n	8006136 <HAL_TIM_PWM_Start+0xc6>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006134:	e01b      	b.n	800616e <HAL_TIM_PWM_Start+0xfe>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b08      	cmp	r3, #8
 800613a:	d104      	bne.n	8006146 <HAL_TIM_PWM_Start+0xd6>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2202      	movs	r2, #2
 8006140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006144:	e013      	b.n	800616e <HAL_TIM_PWM_Start+0xfe>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b0c      	cmp	r3, #12
 800614a:	d104      	bne.n	8006156 <HAL_TIM_PWM_Start+0xe6>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2202      	movs	r2, #2
 8006150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006154:	e00b      	b.n	800616e <HAL_TIM_PWM_Start+0xfe>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b10      	cmp	r3, #16
 800615a:	d104      	bne.n	8006166 <HAL_TIM_PWM_Start+0xf6>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006164:	e003      	b.n	800616e <HAL_TIM_PWM_Start+0xfe>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2202      	movs	r2, #2
 800616a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2201      	movs	r2, #1
 8006174:	6839      	ldr	r1, [r7, #0]
 8006176:	4618      	mov	r0, r3
 8006178:	f001 fa20 	bl	80075bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a58      	ldr	r2, [pc, #352]	@ (80062e4 <HAL_TIM_PWM_Start+0x274>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d02c      	beq.n	80061e0 <HAL_TIM_PWM_Start+0x170>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a57      	ldr	r2, [pc, #348]	@ (80062e8 <HAL_TIM_PWM_Start+0x278>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d027      	beq.n	80061e0 <HAL_TIM_PWM_Start+0x170>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a55      	ldr	r2, [pc, #340]	@ (80062ec <HAL_TIM_PWM_Start+0x27c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d022      	beq.n	80061e0 <HAL_TIM_PWM_Start+0x170>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a54      	ldr	r2, [pc, #336]	@ (80062f0 <HAL_TIM_PWM_Start+0x280>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d01d      	beq.n	80061e0 <HAL_TIM_PWM_Start+0x170>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a52      	ldr	r2, [pc, #328]	@ (80062f4 <HAL_TIM_PWM_Start+0x284>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d018      	beq.n	80061e0 <HAL_TIM_PWM_Start+0x170>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a51      	ldr	r2, [pc, #324]	@ (80062f8 <HAL_TIM_PWM_Start+0x288>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d013      	beq.n	80061e0 <HAL_TIM_PWM_Start+0x170>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a4f      	ldr	r2, [pc, #316]	@ (80062fc <HAL_TIM_PWM_Start+0x28c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00e      	beq.n	80061e0 <HAL_TIM_PWM_Start+0x170>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a4e      	ldr	r2, [pc, #312]	@ (8006300 <HAL_TIM_PWM_Start+0x290>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d009      	beq.n	80061e0 <HAL_TIM_PWM_Start+0x170>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a4c      	ldr	r2, [pc, #304]	@ (8006304 <HAL_TIM_PWM_Start+0x294>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d004      	beq.n	80061e0 <HAL_TIM_PWM_Start+0x170>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a4b      	ldr	r2, [pc, #300]	@ (8006308 <HAL_TIM_PWM_Start+0x298>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d101      	bne.n	80061e4 <HAL_TIM_PWM_Start+0x174>
 80061e0:	2301      	movs	r3, #1
 80061e2:	e000      	b.n	80061e6 <HAL_TIM_PWM_Start+0x176>
 80061e4:	2300      	movs	r3, #0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d007      	beq.n	80061fa <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a39      	ldr	r2, [pc, #228]	@ (80062e4 <HAL_TIM_PWM_Start+0x274>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d04a      	beq.n	800629a <HAL_TIM_PWM_Start+0x22a>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a37      	ldr	r2, [pc, #220]	@ (80062e8 <HAL_TIM_PWM_Start+0x278>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d045      	beq.n	800629a <HAL_TIM_PWM_Start+0x22a>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006216:	d040      	beq.n	800629a <HAL_TIM_PWM_Start+0x22a>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006220:	d03b      	beq.n	800629a <HAL_TIM_PWM_Start+0x22a>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a39      	ldr	r2, [pc, #228]	@ (800630c <HAL_TIM_PWM_Start+0x29c>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d036      	beq.n	800629a <HAL_TIM_PWM_Start+0x22a>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a37      	ldr	r2, [pc, #220]	@ (8006310 <HAL_TIM_PWM_Start+0x2a0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d031      	beq.n	800629a <HAL_TIM_PWM_Start+0x22a>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a36      	ldr	r2, [pc, #216]	@ (8006314 <HAL_TIM_PWM_Start+0x2a4>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d02c      	beq.n	800629a <HAL_TIM_PWM_Start+0x22a>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a34      	ldr	r2, [pc, #208]	@ (8006318 <HAL_TIM_PWM_Start+0x2a8>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d027      	beq.n	800629a <HAL_TIM_PWM_Start+0x22a>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a33      	ldr	r2, [pc, #204]	@ (800631c <HAL_TIM_PWM_Start+0x2ac>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d022      	beq.n	800629a <HAL_TIM_PWM_Start+0x22a>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a31      	ldr	r2, [pc, #196]	@ (8006320 <HAL_TIM_PWM_Start+0x2b0>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d01d      	beq.n	800629a <HAL_TIM_PWM_Start+0x22a>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a22      	ldr	r2, [pc, #136]	@ (80062ec <HAL_TIM_PWM_Start+0x27c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d018      	beq.n	800629a <HAL_TIM_PWM_Start+0x22a>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a20      	ldr	r2, [pc, #128]	@ (80062f0 <HAL_TIM_PWM_Start+0x280>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d013      	beq.n	800629a <HAL_TIM_PWM_Start+0x22a>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a2b      	ldr	r2, [pc, #172]	@ (8006324 <HAL_TIM_PWM_Start+0x2b4>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00e      	beq.n	800629a <HAL_TIM_PWM_Start+0x22a>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a29      	ldr	r2, [pc, #164]	@ (8006328 <HAL_TIM_PWM_Start+0x2b8>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d009      	beq.n	800629a <HAL_TIM_PWM_Start+0x22a>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a1a      	ldr	r2, [pc, #104]	@ (80062f4 <HAL_TIM_PWM_Start+0x284>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d004      	beq.n	800629a <HAL_TIM_PWM_Start+0x22a>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a18      	ldr	r2, [pc, #96]	@ (80062f8 <HAL_TIM_PWM_Start+0x288>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d115      	bne.n	80062c6 <HAL_TIM_PWM_Start+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	4b22      	ldr	r3, [pc, #136]	@ (800632c <HAL_TIM_PWM_Start+0x2bc>)
 80062a2:	4013      	ands	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2b06      	cmp	r3, #6
 80062aa:	d015      	beq.n	80062d8 <HAL_TIM_PWM_Start+0x268>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062b2:	d011      	beq.n	80062d8 <HAL_TIM_PWM_Start+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0201 	orr.w	r2, r2, #1
 80062c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c4:	e008      	b.n	80062d8 <HAL_TIM_PWM_Start+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f042 0201 	orr.w	r2, r2, #1
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	e000      	b.n	80062da <HAL_TIM_PWM_Start+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	40012c00 	.word	0x40012c00
 80062e8:	50012c00 	.word	0x50012c00
 80062ec:	40013400 	.word	0x40013400
 80062f0:	50013400 	.word	0x50013400
 80062f4:	40014000 	.word	0x40014000
 80062f8:	50014000 	.word	0x50014000
 80062fc:	40014400 	.word	0x40014400
 8006300:	50014400 	.word	0x50014400
 8006304:	40014800 	.word	0x40014800
 8006308:	50014800 	.word	0x50014800
 800630c:	40000400 	.word	0x40000400
 8006310:	50000400 	.word	0x50000400
 8006314:	40000800 	.word	0x40000800
 8006318:	50000800 	.word	0x50000800
 800631c:	40000c00 	.word	0x40000c00
 8006320:	50000c00 	.word	0x50000c00
 8006324:	40001800 	.word	0x40001800
 8006328:	50001800 	.word	0x50001800
 800632c:	00010007 	.word	0x00010007

08006330 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d020      	beq.n	8006394 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f003 0302 	and.w	r3, r3, #2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d01b      	beq.n	8006394 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f06f 0202 	mvn.w	r2, #2
 8006364:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d003      	beq.n	8006382 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fb64 	bl	8006a48 <HAL_TIM_IC_CaptureCallback>
 8006380:	e005      	b.n	800638e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fb56 	bl	8006a34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fb67 	bl	8006a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	f003 0304 	and.w	r3, r3, #4
 800639a:	2b00      	cmp	r3, #0
 800639c:	d020      	beq.n	80063e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f003 0304 	and.w	r3, r3, #4
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d01b      	beq.n	80063e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f06f 0204 	mvn.w	r2, #4
 80063b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2202      	movs	r2, #2
 80063b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fb3e 	bl	8006a48 <HAL_TIM_IC_CaptureCallback>
 80063cc:	e005      	b.n	80063da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fb30 	bl	8006a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fb41 	bl	8006a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f003 0308 	and.w	r3, r3, #8
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d020      	beq.n	800642c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f003 0308 	and.w	r3, r3, #8
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d01b      	beq.n	800642c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f06f 0208 	mvn.w	r2, #8
 80063fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2204      	movs	r2, #4
 8006402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	f003 0303 	and.w	r3, r3, #3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fb18 	bl	8006a48 <HAL_TIM_IC_CaptureCallback>
 8006418:	e005      	b.n	8006426 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fb0a 	bl	8006a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 fb1b 	bl	8006a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	f003 0310 	and.w	r3, r3, #16
 8006432:	2b00      	cmp	r3, #0
 8006434:	d020      	beq.n	8006478 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f003 0310 	and.w	r3, r3, #16
 800643c:	2b00      	cmp	r3, #0
 800643e:	d01b      	beq.n	8006478 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f06f 0210 	mvn.w	r2, #16
 8006448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2208      	movs	r2, #8
 800644e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 faf2 	bl	8006a48 <HAL_TIM_IC_CaptureCallback>
 8006464:	e005      	b.n	8006472 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fae4 	bl	8006a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 faf5 	bl	8006a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00c      	beq.n	800649c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b00      	cmp	r3, #0
 800648a:	d007      	beq.n	800649c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f06f 0201 	mvn.w	r2, #1
 8006494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7fa fd84 	bl	8000fa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d104      	bne.n	80064b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00c      	beq.n	80064ca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d007      	beq.n	80064ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80064c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f001 f979 	bl	80077bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00c      	beq.n	80064ee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d007      	beq.n	80064ee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80064e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f001 f971 	bl	80077d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00c      	beq.n	8006512 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d007      	beq.n	8006512 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800650a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 faaf 	bl	8006a70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	f003 0320 	and.w	r3, r3, #32
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00c      	beq.n	8006536 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f003 0320 	and.w	r3, r3, #32
 8006522:	2b00      	cmp	r3, #0
 8006524:	d007      	beq.n	8006536 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f06f 0220 	mvn.w	r2, #32
 800652e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f001 f939 	bl	80077a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00c      	beq.n	800655a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d007      	beq.n	800655a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f001 f945 	bl	80077e4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00c      	beq.n	800657e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d007      	beq.n	800657e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f001 f93d 	bl	80077f8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00c      	beq.n	80065a2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d007      	beq.n	80065a2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800659a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f001 f935 	bl	800780c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00c      	beq.n	80065c6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d007      	beq.n	80065c6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80065be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f001 f92d 	bl	8007820 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065c6:	bf00      	nop
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
	...

080065d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d101      	bne.n	80065ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065ea:	2302      	movs	r3, #2
 80065ec:	e0ff      	b.n	80067ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b14      	cmp	r3, #20
 80065fa:	f200 80f0 	bhi.w	80067de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80065fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006604 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006604:	08006659 	.word	0x08006659
 8006608:	080067df 	.word	0x080067df
 800660c:	080067df 	.word	0x080067df
 8006610:	080067df 	.word	0x080067df
 8006614:	08006699 	.word	0x08006699
 8006618:	080067df 	.word	0x080067df
 800661c:	080067df 	.word	0x080067df
 8006620:	080067df 	.word	0x080067df
 8006624:	080066db 	.word	0x080066db
 8006628:	080067df 	.word	0x080067df
 800662c:	080067df 	.word	0x080067df
 8006630:	080067df 	.word	0x080067df
 8006634:	0800671b 	.word	0x0800671b
 8006638:	080067df 	.word	0x080067df
 800663c:	080067df 	.word	0x080067df
 8006640:	080067df 	.word	0x080067df
 8006644:	0800675d 	.word	0x0800675d
 8006648:	080067df 	.word	0x080067df
 800664c:	080067df 	.word	0x080067df
 8006650:	080067df 	.word	0x080067df
 8006654:	0800679d 	.word	0x0800679d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68b9      	ldr	r1, [r7, #8]
 800665e:	4618      	mov	r0, r3
 8006660:	f000 fb3a 	bl	8006cd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	699a      	ldr	r2, [r3, #24]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0208 	orr.w	r2, r2, #8
 8006672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	699a      	ldr	r2, [r3, #24]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f022 0204 	bic.w	r2, r2, #4
 8006682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6999      	ldr	r1, [r3, #24]
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	691a      	ldr	r2, [r3, #16]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	619a      	str	r2, [r3, #24]
      break;
 8006696:	e0a5      	b.n	80067e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68b9      	ldr	r1, [r7, #8]
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fbdc 	bl	8006e5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	699a      	ldr	r2, [r3, #24]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	699a      	ldr	r2, [r3, #24]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6999      	ldr	r1, [r3, #24]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	021a      	lsls	r2, r3, #8
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	619a      	str	r2, [r3, #24]
      break;
 80066d8:	e084      	b.n	80067e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68b9      	ldr	r1, [r7, #8]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 fc6b 	bl	8006fbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	69da      	ldr	r2, [r3, #28]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f042 0208 	orr.w	r2, r2, #8
 80066f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	69da      	ldr	r2, [r3, #28]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f022 0204 	bic.w	r2, r2, #4
 8006704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69d9      	ldr	r1, [r3, #28]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	691a      	ldr	r2, [r3, #16]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	61da      	str	r2, [r3, #28]
      break;
 8006718:	e064      	b.n	80067e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68b9      	ldr	r1, [r7, #8]
 8006720:	4618      	mov	r0, r3
 8006722:	f000 fcf9 	bl	8007118 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	69da      	ldr	r2, [r3, #28]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69da      	ldr	r2, [r3, #28]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	69d9      	ldr	r1, [r3, #28]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	021a      	lsls	r2, r3, #8
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	61da      	str	r2, [r3, #28]
      break;
 800675a:	e043      	b.n	80067e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68b9      	ldr	r1, [r7, #8]
 8006762:	4618      	mov	r0, r3
 8006764:	f000 fd88 	bl	8007278 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0208 	orr.w	r2, r2, #8
 8006776:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0204 	bic.w	r2, r2, #4
 8006786:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	691a      	ldr	r2, [r3, #16]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800679a:	e023      	b.n	80067e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68b9      	ldr	r1, [r7, #8]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 fdea 	bl	800737c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067c6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	021a      	lsls	r2, r3, #8
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80067dc:	e002      	b.n	80067e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	75fb      	strb	r3, [r7, #23]
      break;
 80067e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3718      	adds	r7, #24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop

080067f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800680c:	2b01      	cmp	r3, #1
 800680e:	d101      	bne.n	8006814 <HAL_TIM_ConfigClockSource+0x1c>
 8006810:	2302      	movs	r3, #2
 8006812:	e0fe      	b.n	8006a12 <HAL_TIM_ConfigClockSource+0x21a>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006832:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800683e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006850:	f000 80c9 	beq.w	80069e6 <HAL_TIM_ConfigClockSource+0x1ee>
 8006854:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006858:	f200 80ce 	bhi.w	80069f8 <HAL_TIM_ConfigClockSource+0x200>
 800685c:	4a6f      	ldr	r2, [pc, #444]	@ (8006a1c <HAL_TIM_ConfigClockSource+0x224>)
 800685e:	4293      	cmp	r3, r2
 8006860:	f000 80c1 	beq.w	80069e6 <HAL_TIM_ConfigClockSource+0x1ee>
 8006864:	4a6d      	ldr	r2, [pc, #436]	@ (8006a1c <HAL_TIM_ConfigClockSource+0x224>)
 8006866:	4293      	cmp	r3, r2
 8006868:	f200 80c6 	bhi.w	80069f8 <HAL_TIM_ConfigClockSource+0x200>
 800686c:	4a6c      	ldr	r2, [pc, #432]	@ (8006a20 <HAL_TIM_ConfigClockSource+0x228>)
 800686e:	4293      	cmp	r3, r2
 8006870:	f000 80b9 	beq.w	80069e6 <HAL_TIM_ConfigClockSource+0x1ee>
 8006874:	4a6a      	ldr	r2, [pc, #424]	@ (8006a20 <HAL_TIM_ConfigClockSource+0x228>)
 8006876:	4293      	cmp	r3, r2
 8006878:	f200 80be 	bhi.w	80069f8 <HAL_TIM_ConfigClockSource+0x200>
 800687c:	4a69      	ldr	r2, [pc, #420]	@ (8006a24 <HAL_TIM_ConfigClockSource+0x22c>)
 800687e:	4293      	cmp	r3, r2
 8006880:	f000 80b1 	beq.w	80069e6 <HAL_TIM_ConfigClockSource+0x1ee>
 8006884:	4a67      	ldr	r2, [pc, #412]	@ (8006a24 <HAL_TIM_ConfigClockSource+0x22c>)
 8006886:	4293      	cmp	r3, r2
 8006888:	f200 80b6 	bhi.w	80069f8 <HAL_TIM_ConfigClockSource+0x200>
 800688c:	4a66      	ldr	r2, [pc, #408]	@ (8006a28 <HAL_TIM_ConfigClockSource+0x230>)
 800688e:	4293      	cmp	r3, r2
 8006890:	f000 80a9 	beq.w	80069e6 <HAL_TIM_ConfigClockSource+0x1ee>
 8006894:	4a64      	ldr	r2, [pc, #400]	@ (8006a28 <HAL_TIM_ConfigClockSource+0x230>)
 8006896:	4293      	cmp	r3, r2
 8006898:	f200 80ae 	bhi.w	80069f8 <HAL_TIM_ConfigClockSource+0x200>
 800689c:	4a63      	ldr	r2, [pc, #396]	@ (8006a2c <HAL_TIM_ConfigClockSource+0x234>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	f000 80a1 	beq.w	80069e6 <HAL_TIM_ConfigClockSource+0x1ee>
 80068a4:	4a61      	ldr	r2, [pc, #388]	@ (8006a2c <HAL_TIM_ConfigClockSource+0x234>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	f200 80a6 	bhi.w	80069f8 <HAL_TIM_ConfigClockSource+0x200>
 80068ac:	4a60      	ldr	r2, [pc, #384]	@ (8006a30 <HAL_TIM_ConfigClockSource+0x238>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	f000 8099 	beq.w	80069e6 <HAL_TIM_ConfigClockSource+0x1ee>
 80068b4:	4a5e      	ldr	r2, [pc, #376]	@ (8006a30 <HAL_TIM_ConfigClockSource+0x238>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	f200 809e 	bhi.w	80069f8 <HAL_TIM_ConfigClockSource+0x200>
 80068bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80068c0:	f000 8091 	beq.w	80069e6 <HAL_TIM_ConfigClockSource+0x1ee>
 80068c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80068c8:	f200 8096 	bhi.w	80069f8 <HAL_TIM_ConfigClockSource+0x200>
 80068cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068d0:	f000 8089 	beq.w	80069e6 <HAL_TIM_ConfigClockSource+0x1ee>
 80068d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068d8:	f200 808e 	bhi.w	80069f8 <HAL_TIM_ConfigClockSource+0x200>
 80068dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068e0:	d03e      	beq.n	8006960 <HAL_TIM_ConfigClockSource+0x168>
 80068e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068e6:	f200 8087 	bhi.w	80069f8 <HAL_TIM_ConfigClockSource+0x200>
 80068ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068ee:	f000 8086 	beq.w	80069fe <HAL_TIM_ConfigClockSource+0x206>
 80068f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068f6:	d87f      	bhi.n	80069f8 <HAL_TIM_ConfigClockSource+0x200>
 80068f8:	2b70      	cmp	r3, #112	@ 0x70
 80068fa:	d01a      	beq.n	8006932 <HAL_TIM_ConfigClockSource+0x13a>
 80068fc:	2b70      	cmp	r3, #112	@ 0x70
 80068fe:	d87b      	bhi.n	80069f8 <HAL_TIM_ConfigClockSource+0x200>
 8006900:	2b60      	cmp	r3, #96	@ 0x60
 8006902:	d050      	beq.n	80069a6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006904:	2b60      	cmp	r3, #96	@ 0x60
 8006906:	d877      	bhi.n	80069f8 <HAL_TIM_ConfigClockSource+0x200>
 8006908:	2b50      	cmp	r3, #80	@ 0x50
 800690a:	d03c      	beq.n	8006986 <HAL_TIM_ConfigClockSource+0x18e>
 800690c:	2b50      	cmp	r3, #80	@ 0x50
 800690e:	d873      	bhi.n	80069f8 <HAL_TIM_ConfigClockSource+0x200>
 8006910:	2b40      	cmp	r3, #64	@ 0x40
 8006912:	d058      	beq.n	80069c6 <HAL_TIM_ConfigClockSource+0x1ce>
 8006914:	2b40      	cmp	r3, #64	@ 0x40
 8006916:	d86f      	bhi.n	80069f8 <HAL_TIM_ConfigClockSource+0x200>
 8006918:	2b30      	cmp	r3, #48	@ 0x30
 800691a:	d064      	beq.n	80069e6 <HAL_TIM_ConfigClockSource+0x1ee>
 800691c:	2b30      	cmp	r3, #48	@ 0x30
 800691e:	d86b      	bhi.n	80069f8 <HAL_TIM_ConfigClockSource+0x200>
 8006920:	2b20      	cmp	r3, #32
 8006922:	d060      	beq.n	80069e6 <HAL_TIM_ConfigClockSource+0x1ee>
 8006924:	2b20      	cmp	r3, #32
 8006926:	d867      	bhi.n	80069f8 <HAL_TIM_ConfigClockSource+0x200>
 8006928:	2b00      	cmp	r3, #0
 800692a:	d05c      	beq.n	80069e6 <HAL_TIM_ConfigClockSource+0x1ee>
 800692c:	2b10      	cmp	r3, #16
 800692e:	d05a      	beq.n	80069e6 <HAL_TIM_ConfigClockSource+0x1ee>
 8006930:	e062      	b.n	80069f8 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006942:	f000 fe1b 	bl	800757c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006954:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	609a      	str	r2, [r3, #8]
      break;
 800695e:	e04f      	b.n	8006a00 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006970:	f000 fe04 	bl	800757c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689a      	ldr	r2, [r3, #8]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006982:	609a      	str	r2, [r3, #8]
      break;
 8006984:	e03c      	b.n	8006a00 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006992:	461a      	mov	r2, r3
 8006994:	f000 fd76 	bl	8007484 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2150      	movs	r1, #80	@ 0x50
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fdcf 	bl	8007542 <TIM_ITRx_SetConfig>
      break;
 80069a4:	e02c      	b.n	8006a00 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069b2:	461a      	mov	r2, r3
 80069b4:	f000 fd95 	bl	80074e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2160      	movs	r1, #96	@ 0x60
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 fdbf 	bl	8007542 <TIM_ITRx_SetConfig>
      break;
 80069c4:	e01c      	b.n	8006a00 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069d2:	461a      	mov	r2, r3
 80069d4:	f000 fd56 	bl	8007484 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2140      	movs	r1, #64	@ 0x40
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 fdaf 	bl	8007542 <TIM_ITRx_SetConfig>
      break;
 80069e4:	e00c      	b.n	8006a00 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4619      	mov	r1, r3
 80069f0:	4610      	mov	r0, r2
 80069f2:	f000 fda6 	bl	8007542 <TIM_ITRx_SetConfig>
      break;
 80069f6:	e003      	b.n	8006a00 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	73fb      	strb	r3, [r7, #15]
      break;
 80069fc:	e000      	b.n	8006a00 <HAL_TIM_ConfigClockSource+0x208>
      break;
 80069fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	00100070 	.word	0x00100070
 8006a20:	00100060 	.word	0x00100060
 8006a24:	00100050 	.word	0x00100050
 8006a28:	00100040 	.word	0x00100040
 8006a2c:	00100030 	.word	0x00100030
 8006a30:	00100020 	.word	0x00100020

08006a34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a7a      	ldr	r2, [pc, #488]	@ (8006c80 <TIM_Base_SetConfig+0x1fc>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d02b      	beq.n	8006af4 <TIM_Base_SetConfig+0x70>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a79      	ldr	r2, [pc, #484]	@ (8006c84 <TIM_Base_SetConfig+0x200>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d027      	beq.n	8006af4 <TIM_Base_SetConfig+0x70>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aaa:	d023      	beq.n	8006af4 <TIM_Base_SetConfig+0x70>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ab2:	d01f      	beq.n	8006af4 <TIM_Base_SetConfig+0x70>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a74      	ldr	r2, [pc, #464]	@ (8006c88 <TIM_Base_SetConfig+0x204>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d01b      	beq.n	8006af4 <TIM_Base_SetConfig+0x70>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a73      	ldr	r2, [pc, #460]	@ (8006c8c <TIM_Base_SetConfig+0x208>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d017      	beq.n	8006af4 <TIM_Base_SetConfig+0x70>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a72      	ldr	r2, [pc, #456]	@ (8006c90 <TIM_Base_SetConfig+0x20c>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d013      	beq.n	8006af4 <TIM_Base_SetConfig+0x70>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a71      	ldr	r2, [pc, #452]	@ (8006c94 <TIM_Base_SetConfig+0x210>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d00f      	beq.n	8006af4 <TIM_Base_SetConfig+0x70>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a70      	ldr	r2, [pc, #448]	@ (8006c98 <TIM_Base_SetConfig+0x214>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d00b      	beq.n	8006af4 <TIM_Base_SetConfig+0x70>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a6f      	ldr	r2, [pc, #444]	@ (8006c9c <TIM_Base_SetConfig+0x218>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d007      	beq.n	8006af4 <TIM_Base_SetConfig+0x70>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a6e      	ldr	r2, [pc, #440]	@ (8006ca0 <TIM_Base_SetConfig+0x21c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d003      	beq.n	8006af4 <TIM_Base_SetConfig+0x70>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a6d      	ldr	r2, [pc, #436]	@ (8006ca4 <TIM_Base_SetConfig+0x220>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d108      	bne.n	8006b06 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a5d      	ldr	r2, [pc, #372]	@ (8006c80 <TIM_Base_SetConfig+0x1fc>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d05b      	beq.n	8006bc6 <TIM_Base_SetConfig+0x142>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a5c      	ldr	r2, [pc, #368]	@ (8006c84 <TIM_Base_SetConfig+0x200>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d057      	beq.n	8006bc6 <TIM_Base_SetConfig+0x142>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b1c:	d053      	beq.n	8006bc6 <TIM_Base_SetConfig+0x142>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b24:	d04f      	beq.n	8006bc6 <TIM_Base_SetConfig+0x142>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a57      	ldr	r2, [pc, #348]	@ (8006c88 <TIM_Base_SetConfig+0x204>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d04b      	beq.n	8006bc6 <TIM_Base_SetConfig+0x142>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a56      	ldr	r2, [pc, #344]	@ (8006c8c <TIM_Base_SetConfig+0x208>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d047      	beq.n	8006bc6 <TIM_Base_SetConfig+0x142>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a55      	ldr	r2, [pc, #340]	@ (8006c90 <TIM_Base_SetConfig+0x20c>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d043      	beq.n	8006bc6 <TIM_Base_SetConfig+0x142>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a54      	ldr	r2, [pc, #336]	@ (8006c94 <TIM_Base_SetConfig+0x210>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d03f      	beq.n	8006bc6 <TIM_Base_SetConfig+0x142>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a53      	ldr	r2, [pc, #332]	@ (8006c98 <TIM_Base_SetConfig+0x214>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d03b      	beq.n	8006bc6 <TIM_Base_SetConfig+0x142>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a52      	ldr	r2, [pc, #328]	@ (8006c9c <TIM_Base_SetConfig+0x218>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d037      	beq.n	8006bc6 <TIM_Base_SetConfig+0x142>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a51      	ldr	r2, [pc, #324]	@ (8006ca0 <TIM_Base_SetConfig+0x21c>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d033      	beq.n	8006bc6 <TIM_Base_SetConfig+0x142>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a50      	ldr	r2, [pc, #320]	@ (8006ca4 <TIM_Base_SetConfig+0x220>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d02f      	beq.n	8006bc6 <TIM_Base_SetConfig+0x142>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a4f      	ldr	r2, [pc, #316]	@ (8006ca8 <TIM_Base_SetConfig+0x224>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d02b      	beq.n	8006bc6 <TIM_Base_SetConfig+0x142>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a4e      	ldr	r2, [pc, #312]	@ (8006cac <TIM_Base_SetConfig+0x228>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d027      	beq.n	8006bc6 <TIM_Base_SetConfig+0x142>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a4d      	ldr	r2, [pc, #308]	@ (8006cb0 <TIM_Base_SetConfig+0x22c>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d023      	beq.n	8006bc6 <TIM_Base_SetConfig+0x142>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a4c      	ldr	r2, [pc, #304]	@ (8006cb4 <TIM_Base_SetConfig+0x230>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d01f      	beq.n	8006bc6 <TIM_Base_SetConfig+0x142>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a4b      	ldr	r2, [pc, #300]	@ (8006cb8 <TIM_Base_SetConfig+0x234>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d01b      	beq.n	8006bc6 <TIM_Base_SetConfig+0x142>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a4a      	ldr	r2, [pc, #296]	@ (8006cbc <TIM_Base_SetConfig+0x238>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d017      	beq.n	8006bc6 <TIM_Base_SetConfig+0x142>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a49      	ldr	r2, [pc, #292]	@ (8006cc0 <TIM_Base_SetConfig+0x23c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d013      	beq.n	8006bc6 <TIM_Base_SetConfig+0x142>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a48      	ldr	r2, [pc, #288]	@ (8006cc4 <TIM_Base_SetConfig+0x240>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d00f      	beq.n	8006bc6 <TIM_Base_SetConfig+0x142>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a47      	ldr	r2, [pc, #284]	@ (8006cc8 <TIM_Base_SetConfig+0x244>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d00b      	beq.n	8006bc6 <TIM_Base_SetConfig+0x142>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a46      	ldr	r2, [pc, #280]	@ (8006ccc <TIM_Base_SetConfig+0x248>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d007      	beq.n	8006bc6 <TIM_Base_SetConfig+0x142>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a45      	ldr	r2, [pc, #276]	@ (8006cd0 <TIM_Base_SetConfig+0x24c>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d003      	beq.n	8006bc6 <TIM_Base_SetConfig+0x142>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a44      	ldr	r2, [pc, #272]	@ (8006cd4 <TIM_Base_SetConfig+0x250>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d108      	bne.n	8006bd8 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	689a      	ldr	r2, [r3, #8]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a20      	ldr	r2, [pc, #128]	@ (8006c80 <TIM_Base_SetConfig+0x1fc>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d023      	beq.n	8006c4c <TIM_Base_SetConfig+0x1c8>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a1f      	ldr	r2, [pc, #124]	@ (8006c84 <TIM_Base_SetConfig+0x200>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d01f      	beq.n	8006c4c <TIM_Base_SetConfig+0x1c8>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a24      	ldr	r2, [pc, #144]	@ (8006ca0 <TIM_Base_SetConfig+0x21c>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d01b      	beq.n	8006c4c <TIM_Base_SetConfig+0x1c8>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a23      	ldr	r2, [pc, #140]	@ (8006ca4 <TIM_Base_SetConfig+0x220>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d017      	beq.n	8006c4c <TIM_Base_SetConfig+0x1c8>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a28      	ldr	r2, [pc, #160]	@ (8006cc0 <TIM_Base_SetConfig+0x23c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d013      	beq.n	8006c4c <TIM_Base_SetConfig+0x1c8>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a27      	ldr	r2, [pc, #156]	@ (8006cc4 <TIM_Base_SetConfig+0x240>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d00f      	beq.n	8006c4c <TIM_Base_SetConfig+0x1c8>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a26      	ldr	r2, [pc, #152]	@ (8006cc8 <TIM_Base_SetConfig+0x244>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d00b      	beq.n	8006c4c <TIM_Base_SetConfig+0x1c8>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a25      	ldr	r2, [pc, #148]	@ (8006ccc <TIM_Base_SetConfig+0x248>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d007      	beq.n	8006c4c <TIM_Base_SetConfig+0x1c8>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a24      	ldr	r2, [pc, #144]	@ (8006cd0 <TIM_Base_SetConfig+0x24c>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d003      	beq.n	8006c4c <TIM_Base_SetConfig+0x1c8>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a23      	ldr	r2, [pc, #140]	@ (8006cd4 <TIM_Base_SetConfig+0x250>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d103      	bne.n	8006c54 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	691a      	ldr	r2, [r3, #16]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d105      	bne.n	8006c72 <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	f023 0201 	bic.w	r2, r3, #1
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	611a      	str	r2, [r3, #16]
  }
}
 8006c72:	bf00      	nop
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	40012c00 	.word	0x40012c00
 8006c84:	50012c00 	.word	0x50012c00
 8006c88:	40000400 	.word	0x40000400
 8006c8c:	50000400 	.word	0x50000400
 8006c90:	40000800 	.word	0x40000800
 8006c94:	50000800 	.word	0x50000800
 8006c98:	40000c00 	.word	0x40000c00
 8006c9c:	50000c00 	.word	0x50000c00
 8006ca0:	40013400 	.word	0x40013400
 8006ca4:	50013400 	.word	0x50013400
 8006ca8:	40001800 	.word	0x40001800
 8006cac:	50001800 	.word	0x50001800
 8006cb0:	40001c00 	.word	0x40001c00
 8006cb4:	50001c00 	.word	0x50001c00
 8006cb8:	40002000 	.word	0x40002000
 8006cbc:	50002000 	.word	0x50002000
 8006cc0:	40014000 	.word	0x40014000
 8006cc4:	50014000 	.word	0x50014000
 8006cc8:	40014400 	.word	0x40014400
 8006ccc:	50014400 	.word	0x50014400
 8006cd0:	40014800 	.word	0x40014800
 8006cd4:	50014800 	.word	0x50014800

08006cd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	f023 0201 	bic.w	r2, r3, #1
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f023 0303 	bic.w	r3, r3, #3
 8006d12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f023 0302 	bic.w	r3, r3, #2
 8006d24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a40      	ldr	r2, [pc, #256]	@ (8006e34 <TIM_OC1_SetConfig+0x15c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d023      	beq.n	8006d80 <TIM_OC1_SetConfig+0xa8>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a3f      	ldr	r2, [pc, #252]	@ (8006e38 <TIM_OC1_SetConfig+0x160>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d01f      	beq.n	8006d80 <TIM_OC1_SetConfig+0xa8>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a3e      	ldr	r2, [pc, #248]	@ (8006e3c <TIM_OC1_SetConfig+0x164>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d01b      	beq.n	8006d80 <TIM_OC1_SetConfig+0xa8>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a3d      	ldr	r2, [pc, #244]	@ (8006e40 <TIM_OC1_SetConfig+0x168>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d017      	beq.n	8006d80 <TIM_OC1_SetConfig+0xa8>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a3c      	ldr	r2, [pc, #240]	@ (8006e44 <TIM_OC1_SetConfig+0x16c>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d013      	beq.n	8006d80 <TIM_OC1_SetConfig+0xa8>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a3b      	ldr	r2, [pc, #236]	@ (8006e48 <TIM_OC1_SetConfig+0x170>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d00f      	beq.n	8006d80 <TIM_OC1_SetConfig+0xa8>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a3a      	ldr	r2, [pc, #232]	@ (8006e4c <TIM_OC1_SetConfig+0x174>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00b      	beq.n	8006d80 <TIM_OC1_SetConfig+0xa8>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a39      	ldr	r2, [pc, #228]	@ (8006e50 <TIM_OC1_SetConfig+0x178>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d007      	beq.n	8006d80 <TIM_OC1_SetConfig+0xa8>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a38      	ldr	r2, [pc, #224]	@ (8006e54 <TIM_OC1_SetConfig+0x17c>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d003      	beq.n	8006d80 <TIM_OC1_SetConfig+0xa8>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a37      	ldr	r2, [pc, #220]	@ (8006e58 <TIM_OC1_SetConfig+0x180>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d10c      	bne.n	8006d9a <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f023 0308 	bic.w	r3, r3, #8
 8006d86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f023 0304 	bic.w	r3, r3, #4
 8006d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a25      	ldr	r2, [pc, #148]	@ (8006e34 <TIM_OC1_SetConfig+0x15c>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d023      	beq.n	8006dea <TIM_OC1_SetConfig+0x112>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a24      	ldr	r2, [pc, #144]	@ (8006e38 <TIM_OC1_SetConfig+0x160>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d01f      	beq.n	8006dea <TIM_OC1_SetConfig+0x112>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a23      	ldr	r2, [pc, #140]	@ (8006e3c <TIM_OC1_SetConfig+0x164>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d01b      	beq.n	8006dea <TIM_OC1_SetConfig+0x112>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a22      	ldr	r2, [pc, #136]	@ (8006e40 <TIM_OC1_SetConfig+0x168>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d017      	beq.n	8006dea <TIM_OC1_SetConfig+0x112>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a21      	ldr	r2, [pc, #132]	@ (8006e44 <TIM_OC1_SetConfig+0x16c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d013      	beq.n	8006dea <TIM_OC1_SetConfig+0x112>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a20      	ldr	r2, [pc, #128]	@ (8006e48 <TIM_OC1_SetConfig+0x170>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d00f      	beq.n	8006dea <TIM_OC1_SetConfig+0x112>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8006e4c <TIM_OC1_SetConfig+0x174>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d00b      	beq.n	8006dea <TIM_OC1_SetConfig+0x112>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a1e      	ldr	r2, [pc, #120]	@ (8006e50 <TIM_OC1_SetConfig+0x178>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d007      	beq.n	8006dea <TIM_OC1_SetConfig+0x112>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8006e54 <TIM_OC1_SetConfig+0x17c>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d003      	beq.n	8006dea <TIM_OC1_SetConfig+0x112>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a1c      	ldr	r2, [pc, #112]	@ (8006e58 <TIM_OC1_SetConfig+0x180>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d111      	bne.n	8006e0e <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006df0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006df8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	621a      	str	r2, [r3, #32]
}
 8006e28:	bf00      	nop
 8006e2a:	371c      	adds	r7, #28
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr
 8006e34:	40012c00 	.word	0x40012c00
 8006e38:	50012c00 	.word	0x50012c00
 8006e3c:	40013400 	.word	0x40013400
 8006e40:	50013400 	.word	0x50013400
 8006e44:	40014000 	.word	0x40014000
 8006e48:	50014000 	.word	0x50014000
 8006e4c:	40014400 	.word	0x40014400
 8006e50:	50014400 	.word	0x50014400
 8006e54:	40014800 	.word	0x40014800
 8006e58:	50014800 	.word	0x50014800

08006e5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	f023 0210 	bic.w	r2, r3, #16
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	021b      	lsls	r3, r3, #8
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	f023 0320 	bic.w	r3, r3, #32
 8006eaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	011b      	lsls	r3, r3, #4
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a36      	ldr	r2, [pc, #216]	@ (8006f94 <TIM_OC2_SetConfig+0x138>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d00b      	beq.n	8006ed8 <TIM_OC2_SetConfig+0x7c>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a35      	ldr	r2, [pc, #212]	@ (8006f98 <TIM_OC2_SetConfig+0x13c>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d007      	beq.n	8006ed8 <TIM_OC2_SetConfig+0x7c>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a34      	ldr	r2, [pc, #208]	@ (8006f9c <TIM_OC2_SetConfig+0x140>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d003      	beq.n	8006ed8 <TIM_OC2_SetConfig+0x7c>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a33      	ldr	r2, [pc, #204]	@ (8006fa0 <TIM_OC2_SetConfig+0x144>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d10d      	bne.n	8006ef4 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ede:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	011b      	lsls	r3, r3, #4
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ef2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a27      	ldr	r2, [pc, #156]	@ (8006f94 <TIM_OC2_SetConfig+0x138>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d023      	beq.n	8006f44 <TIM_OC2_SetConfig+0xe8>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a26      	ldr	r2, [pc, #152]	@ (8006f98 <TIM_OC2_SetConfig+0x13c>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d01f      	beq.n	8006f44 <TIM_OC2_SetConfig+0xe8>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a25      	ldr	r2, [pc, #148]	@ (8006f9c <TIM_OC2_SetConfig+0x140>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d01b      	beq.n	8006f44 <TIM_OC2_SetConfig+0xe8>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a24      	ldr	r2, [pc, #144]	@ (8006fa0 <TIM_OC2_SetConfig+0x144>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d017      	beq.n	8006f44 <TIM_OC2_SetConfig+0xe8>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a23      	ldr	r2, [pc, #140]	@ (8006fa4 <TIM_OC2_SetConfig+0x148>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d013      	beq.n	8006f44 <TIM_OC2_SetConfig+0xe8>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a22      	ldr	r2, [pc, #136]	@ (8006fa8 <TIM_OC2_SetConfig+0x14c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d00f      	beq.n	8006f44 <TIM_OC2_SetConfig+0xe8>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a21      	ldr	r2, [pc, #132]	@ (8006fac <TIM_OC2_SetConfig+0x150>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d00b      	beq.n	8006f44 <TIM_OC2_SetConfig+0xe8>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a20      	ldr	r2, [pc, #128]	@ (8006fb0 <TIM_OC2_SetConfig+0x154>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d007      	beq.n	8006f44 <TIM_OC2_SetConfig+0xe8>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a1f      	ldr	r2, [pc, #124]	@ (8006fb4 <TIM_OC2_SetConfig+0x158>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d003      	beq.n	8006f44 <TIM_OC2_SetConfig+0xe8>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8006fb8 <TIM_OC2_SetConfig+0x15c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d113      	bne.n	8006f6c <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	621a      	str	r2, [r3, #32]
}
 8006f86:	bf00      	nop
 8006f88:	371c      	adds	r7, #28
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	40012c00 	.word	0x40012c00
 8006f98:	50012c00 	.word	0x50012c00
 8006f9c:	40013400 	.word	0x40013400
 8006fa0:	50013400 	.word	0x50013400
 8006fa4:	40014000 	.word	0x40014000
 8006fa8:	50014000 	.word	0x50014000
 8006fac:	40014400 	.word	0x40014400
 8006fb0:	50014400 	.word	0x50014400
 8006fb4:	40014800 	.word	0x40014800
 8006fb8:	50014800 	.word	0x50014800

08006fbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b087      	sub	sp, #28
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a1b      	ldr	r3, [r3, #32]
 8006fd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f023 0303 	bic.w	r3, r3, #3
 8006ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	021b      	lsls	r3, r3, #8
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	4313      	orrs	r3, r2
 8007014:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a35      	ldr	r2, [pc, #212]	@ (80070f0 <TIM_OC3_SetConfig+0x134>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d00b      	beq.n	8007036 <TIM_OC3_SetConfig+0x7a>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a34      	ldr	r2, [pc, #208]	@ (80070f4 <TIM_OC3_SetConfig+0x138>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d007      	beq.n	8007036 <TIM_OC3_SetConfig+0x7a>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a33      	ldr	r2, [pc, #204]	@ (80070f8 <TIM_OC3_SetConfig+0x13c>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d003      	beq.n	8007036 <TIM_OC3_SetConfig+0x7a>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a32      	ldr	r2, [pc, #200]	@ (80070fc <TIM_OC3_SetConfig+0x140>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d10d      	bne.n	8007052 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800703c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	021b      	lsls	r3, r3, #8
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	4313      	orrs	r3, r2
 8007048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a26      	ldr	r2, [pc, #152]	@ (80070f0 <TIM_OC3_SetConfig+0x134>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d023      	beq.n	80070a2 <TIM_OC3_SetConfig+0xe6>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a25      	ldr	r2, [pc, #148]	@ (80070f4 <TIM_OC3_SetConfig+0x138>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d01f      	beq.n	80070a2 <TIM_OC3_SetConfig+0xe6>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a24      	ldr	r2, [pc, #144]	@ (80070f8 <TIM_OC3_SetConfig+0x13c>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d01b      	beq.n	80070a2 <TIM_OC3_SetConfig+0xe6>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a23      	ldr	r2, [pc, #140]	@ (80070fc <TIM_OC3_SetConfig+0x140>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d017      	beq.n	80070a2 <TIM_OC3_SetConfig+0xe6>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a22      	ldr	r2, [pc, #136]	@ (8007100 <TIM_OC3_SetConfig+0x144>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d013      	beq.n	80070a2 <TIM_OC3_SetConfig+0xe6>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a21      	ldr	r2, [pc, #132]	@ (8007104 <TIM_OC3_SetConfig+0x148>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d00f      	beq.n	80070a2 <TIM_OC3_SetConfig+0xe6>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a20      	ldr	r2, [pc, #128]	@ (8007108 <TIM_OC3_SetConfig+0x14c>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d00b      	beq.n	80070a2 <TIM_OC3_SetConfig+0xe6>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a1f      	ldr	r2, [pc, #124]	@ (800710c <TIM_OC3_SetConfig+0x150>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d007      	beq.n	80070a2 <TIM_OC3_SetConfig+0xe6>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a1e      	ldr	r2, [pc, #120]	@ (8007110 <TIM_OC3_SetConfig+0x154>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d003      	beq.n	80070a2 <TIM_OC3_SetConfig+0xe6>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a1d      	ldr	r2, [pc, #116]	@ (8007114 <TIM_OC3_SetConfig+0x158>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d113      	bne.n	80070ca <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80070b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	011b      	lsls	r3, r3, #4
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	011b      	lsls	r3, r3, #4
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	621a      	str	r2, [r3, #32]
}
 80070e4:	bf00      	nop
 80070e6:	371c      	adds	r7, #28
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	40012c00 	.word	0x40012c00
 80070f4:	50012c00 	.word	0x50012c00
 80070f8:	40013400 	.word	0x40013400
 80070fc:	50013400 	.word	0x50013400
 8007100:	40014000 	.word	0x40014000
 8007104:	50014000 	.word	0x50014000
 8007108:	40014400 	.word	0x40014400
 800710c:	50014400 	.word	0x50014400
 8007110:	40014800 	.word	0x40014800
 8007114:	50014800 	.word	0x50014800

08007118 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007118:	b480      	push	{r7}
 800711a:	b087      	sub	sp, #28
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a1b      	ldr	r3, [r3, #32]
 800712c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	69db      	ldr	r3, [r3, #28]
 800713e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007146:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800714a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	021b      	lsls	r3, r3, #8
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	4313      	orrs	r3, r2
 800715e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007166:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	031b      	lsls	r3, r3, #12
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	4313      	orrs	r3, r2
 8007172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a36      	ldr	r2, [pc, #216]	@ (8007250 <TIM_OC4_SetConfig+0x138>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d00b      	beq.n	8007194 <TIM_OC4_SetConfig+0x7c>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a35      	ldr	r2, [pc, #212]	@ (8007254 <TIM_OC4_SetConfig+0x13c>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d007      	beq.n	8007194 <TIM_OC4_SetConfig+0x7c>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a34      	ldr	r2, [pc, #208]	@ (8007258 <TIM_OC4_SetConfig+0x140>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d003      	beq.n	8007194 <TIM_OC4_SetConfig+0x7c>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a33      	ldr	r2, [pc, #204]	@ (800725c <TIM_OC4_SetConfig+0x144>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d10d      	bne.n	80071b0 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800719a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	031b      	lsls	r3, r3, #12
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a27      	ldr	r2, [pc, #156]	@ (8007250 <TIM_OC4_SetConfig+0x138>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d023      	beq.n	8007200 <TIM_OC4_SetConfig+0xe8>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a26      	ldr	r2, [pc, #152]	@ (8007254 <TIM_OC4_SetConfig+0x13c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d01f      	beq.n	8007200 <TIM_OC4_SetConfig+0xe8>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a25      	ldr	r2, [pc, #148]	@ (8007258 <TIM_OC4_SetConfig+0x140>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d01b      	beq.n	8007200 <TIM_OC4_SetConfig+0xe8>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a24      	ldr	r2, [pc, #144]	@ (800725c <TIM_OC4_SetConfig+0x144>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d017      	beq.n	8007200 <TIM_OC4_SetConfig+0xe8>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a23      	ldr	r2, [pc, #140]	@ (8007260 <TIM_OC4_SetConfig+0x148>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d013      	beq.n	8007200 <TIM_OC4_SetConfig+0xe8>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a22      	ldr	r2, [pc, #136]	@ (8007264 <TIM_OC4_SetConfig+0x14c>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d00f      	beq.n	8007200 <TIM_OC4_SetConfig+0xe8>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a21      	ldr	r2, [pc, #132]	@ (8007268 <TIM_OC4_SetConfig+0x150>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d00b      	beq.n	8007200 <TIM_OC4_SetConfig+0xe8>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a20      	ldr	r2, [pc, #128]	@ (800726c <TIM_OC4_SetConfig+0x154>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d007      	beq.n	8007200 <TIM_OC4_SetConfig+0xe8>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a1f      	ldr	r2, [pc, #124]	@ (8007270 <TIM_OC4_SetConfig+0x158>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d003      	beq.n	8007200 <TIM_OC4_SetConfig+0xe8>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a1e      	ldr	r2, [pc, #120]	@ (8007274 <TIM_OC4_SetConfig+0x15c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d113      	bne.n	8007228 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007206:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800720e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	695b      	ldr	r3, [r3, #20]
 8007214:	019b      	lsls	r3, r3, #6
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	4313      	orrs	r3, r2
 800721a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	019b      	lsls	r3, r3, #6
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	4313      	orrs	r3, r2
 8007226:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	685a      	ldr	r2, [r3, #4]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	621a      	str	r2, [r3, #32]
}
 8007242:	bf00      	nop
 8007244:	371c      	adds	r7, #28
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	40012c00 	.word	0x40012c00
 8007254:	50012c00 	.word	0x50012c00
 8007258:	40013400 	.word	0x40013400
 800725c:	50013400 	.word	0x50013400
 8007260:	40014000 	.word	0x40014000
 8007264:	50014000 	.word	0x50014000
 8007268:	40014400 	.word	0x40014400
 800726c:	50014400 	.word	0x50014400
 8007270:	40014800 	.word	0x40014800
 8007274:	50014800 	.word	0x50014800

08007278 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007278:	b480      	push	{r7}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800729e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80072bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	041b      	lsls	r3, r3, #16
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a21      	ldr	r2, [pc, #132]	@ (8007354 <TIM_OC5_SetConfig+0xdc>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d023      	beq.n	800731a <TIM_OC5_SetConfig+0xa2>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a20      	ldr	r2, [pc, #128]	@ (8007358 <TIM_OC5_SetConfig+0xe0>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d01f      	beq.n	800731a <TIM_OC5_SetConfig+0xa2>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a1f      	ldr	r2, [pc, #124]	@ (800735c <TIM_OC5_SetConfig+0xe4>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d01b      	beq.n	800731a <TIM_OC5_SetConfig+0xa2>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a1e      	ldr	r2, [pc, #120]	@ (8007360 <TIM_OC5_SetConfig+0xe8>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d017      	beq.n	800731a <TIM_OC5_SetConfig+0xa2>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a1d      	ldr	r2, [pc, #116]	@ (8007364 <TIM_OC5_SetConfig+0xec>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d013      	beq.n	800731a <TIM_OC5_SetConfig+0xa2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a1c      	ldr	r2, [pc, #112]	@ (8007368 <TIM_OC5_SetConfig+0xf0>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d00f      	beq.n	800731a <TIM_OC5_SetConfig+0xa2>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a1b      	ldr	r2, [pc, #108]	@ (800736c <TIM_OC5_SetConfig+0xf4>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d00b      	beq.n	800731a <TIM_OC5_SetConfig+0xa2>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a1a      	ldr	r2, [pc, #104]	@ (8007370 <TIM_OC5_SetConfig+0xf8>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d007      	beq.n	800731a <TIM_OC5_SetConfig+0xa2>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a19      	ldr	r2, [pc, #100]	@ (8007374 <TIM_OC5_SetConfig+0xfc>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d003      	beq.n	800731a <TIM_OC5_SetConfig+0xa2>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a18      	ldr	r2, [pc, #96]	@ (8007378 <TIM_OC5_SetConfig+0x100>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d109      	bne.n	800732e <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007320:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	021b      	lsls	r3, r3, #8
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	4313      	orrs	r3, r2
 800732c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	685a      	ldr	r2, [r3, #4]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	621a      	str	r2, [r3, #32]
}
 8007348:	bf00      	nop
 800734a:	371c      	adds	r7, #28
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	40012c00 	.word	0x40012c00
 8007358:	50012c00 	.word	0x50012c00
 800735c:	40013400 	.word	0x40013400
 8007360:	50013400 	.word	0x50013400
 8007364:	40014000 	.word	0x40014000
 8007368:	50014000 	.word	0x50014000
 800736c:	40014400 	.word	0x40014400
 8007370:	50014400 	.word	0x50014400
 8007374:	40014800 	.word	0x40014800
 8007378:	50014800 	.word	0x50014800

0800737c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a1b      	ldr	r3, [r3, #32]
 8007390:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	021b      	lsls	r3, r3, #8
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80073c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	051b      	lsls	r3, r3, #20
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a22      	ldr	r2, [pc, #136]	@ (800745c <TIM_OC6_SetConfig+0xe0>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d023      	beq.n	8007420 <TIM_OC6_SetConfig+0xa4>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a21      	ldr	r2, [pc, #132]	@ (8007460 <TIM_OC6_SetConfig+0xe4>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d01f      	beq.n	8007420 <TIM_OC6_SetConfig+0xa4>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a20      	ldr	r2, [pc, #128]	@ (8007464 <TIM_OC6_SetConfig+0xe8>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d01b      	beq.n	8007420 <TIM_OC6_SetConfig+0xa4>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a1f      	ldr	r2, [pc, #124]	@ (8007468 <TIM_OC6_SetConfig+0xec>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d017      	beq.n	8007420 <TIM_OC6_SetConfig+0xa4>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a1e      	ldr	r2, [pc, #120]	@ (800746c <TIM_OC6_SetConfig+0xf0>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d013      	beq.n	8007420 <TIM_OC6_SetConfig+0xa4>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a1d      	ldr	r2, [pc, #116]	@ (8007470 <TIM_OC6_SetConfig+0xf4>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d00f      	beq.n	8007420 <TIM_OC6_SetConfig+0xa4>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a1c      	ldr	r2, [pc, #112]	@ (8007474 <TIM_OC6_SetConfig+0xf8>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d00b      	beq.n	8007420 <TIM_OC6_SetConfig+0xa4>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a1b      	ldr	r2, [pc, #108]	@ (8007478 <TIM_OC6_SetConfig+0xfc>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d007      	beq.n	8007420 <TIM_OC6_SetConfig+0xa4>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a1a      	ldr	r2, [pc, #104]	@ (800747c <TIM_OC6_SetConfig+0x100>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d003      	beq.n	8007420 <TIM_OC6_SetConfig+0xa4>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a19      	ldr	r2, [pc, #100]	@ (8007480 <TIM_OC6_SetConfig+0x104>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d109      	bne.n	8007434 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007426:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	029b      	lsls	r3, r3, #10
 800742e:	697a      	ldr	r2, [r7, #20]
 8007430:	4313      	orrs	r3, r2
 8007432:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	685a      	ldr	r2, [r3, #4]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	621a      	str	r2, [r3, #32]
}
 800744e:	bf00      	nop
 8007450:	371c      	adds	r7, #28
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	40012c00 	.word	0x40012c00
 8007460:	50012c00 	.word	0x50012c00
 8007464:	40013400 	.word	0x40013400
 8007468:	50013400 	.word	0x50013400
 800746c:	40014000 	.word	0x40014000
 8007470:	50014000 	.word	0x50014000
 8007474:	40014400 	.word	0x40014400
 8007478:	50014400 	.word	0x50014400
 800747c:	40014800 	.word	0x40014800
 8007480:	50014800 	.word	0x50014800

08007484 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007484:	b480      	push	{r7}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	f023 0201 	bic.w	r2, r3, #1
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	011b      	lsls	r3, r3, #4
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	f023 030a 	bic.w	r3, r3, #10
 80074c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	621a      	str	r2, [r3, #32]
}
 80074d6:	bf00      	nop
 80074d8:	371c      	adds	r7, #28
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b087      	sub	sp, #28
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	60f8      	str	r0, [r7, #12]
 80074ea:	60b9      	str	r1, [r7, #8]
 80074ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	f023 0210 	bic.w	r2, r3, #16
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800750c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	031b      	lsls	r3, r3, #12
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	4313      	orrs	r3, r2
 8007516:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800751e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	011b      	lsls	r3, r3, #4
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	4313      	orrs	r3, r2
 8007528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	621a      	str	r2, [r3, #32]
}
 8007536:	bf00      	nop
 8007538:	371c      	adds	r7, #28
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007542:	b480      	push	{r7}
 8007544:	b085      	sub	sp, #20
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007558:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800755c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	4313      	orrs	r3, r2
 8007564:	f043 0307 	orr.w	r3, r3, #7
 8007568:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	609a      	str	r2, [r3, #8]
}
 8007570:	bf00      	nop
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800757c:	b480      	push	{r7}
 800757e:	b087      	sub	sp, #28
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
 8007588:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007596:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	021a      	lsls	r2, r3, #8
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	431a      	orrs	r2, r3
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	609a      	str	r2, [r3, #8]
}
 80075b0:	bf00      	nop
 80075b2:	371c      	adds	r7, #28
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075bc:	b480      	push	{r7}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	f003 031f 	and.w	r3, r3, #31
 80075ce:	2201      	movs	r2, #1
 80075d0:	fa02 f303 	lsl.w	r3, r2, r3
 80075d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6a1a      	ldr	r2, [r3, #32]
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	43db      	mvns	r3, r3
 80075de:	401a      	ands	r2, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6a1a      	ldr	r2, [r3, #32]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f003 031f 	and.w	r3, r3, #31
 80075ee:	6879      	ldr	r1, [r7, #4]
 80075f0:	fa01 f303 	lsl.w	r3, r1, r3
 80075f4:	431a      	orrs	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	621a      	str	r2, [r3, #32]
}
 80075fa:	bf00      	nop
 80075fc:	371c      	adds	r7, #28
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
	...

08007608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007618:	2b01      	cmp	r3, #1
 800761a:	d101      	bne.n	8007620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800761c:	2302      	movs	r3, #2
 800761e:	e0a1      	b.n	8007764 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2202      	movs	r2, #2
 800762c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a4a      	ldr	r2, [pc, #296]	@ (8007770 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d00e      	beq.n	8007668 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a49      	ldr	r2, [pc, #292]	@ (8007774 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d009      	beq.n	8007668 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a47      	ldr	r2, [pc, #284]	@ (8007778 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d004      	beq.n	8007668 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a46      	ldr	r2, [pc, #280]	@ (800777c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d108      	bne.n	800767a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800766e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	4313      	orrs	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007680:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007684:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	4313      	orrs	r3, r2
 800768e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a34      	ldr	r2, [pc, #208]	@ (8007770 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d04a      	beq.n	8007738 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a33      	ldr	r2, [pc, #204]	@ (8007774 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d045      	beq.n	8007738 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076b4:	d040      	beq.n	8007738 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076be:	d03b      	beq.n	8007738 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a2e      	ldr	r2, [pc, #184]	@ (8007780 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d036      	beq.n	8007738 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a2d      	ldr	r2, [pc, #180]	@ (8007784 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d031      	beq.n	8007738 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a2b      	ldr	r2, [pc, #172]	@ (8007788 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d02c      	beq.n	8007738 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a2a      	ldr	r2, [pc, #168]	@ (800778c <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d027      	beq.n	8007738 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a28      	ldr	r2, [pc, #160]	@ (8007790 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d022      	beq.n	8007738 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a27      	ldr	r2, [pc, #156]	@ (8007794 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d01d      	beq.n	8007738 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a1d      	ldr	r2, [pc, #116]	@ (8007778 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d018      	beq.n	8007738 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a1c      	ldr	r2, [pc, #112]	@ (800777c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d013      	beq.n	8007738 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a20      	ldr	r2, [pc, #128]	@ (8007798 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d00e      	beq.n	8007738 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a1f      	ldr	r2, [pc, #124]	@ (800779c <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d009      	beq.n	8007738 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a1d      	ldr	r2, [pc, #116]	@ (80077a0 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d004      	beq.n	8007738 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a1c      	ldr	r2, [pc, #112]	@ (80077a4 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d10c      	bne.n	8007752 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800773e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	4313      	orrs	r3, r2
 8007748:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	40012c00 	.word	0x40012c00
 8007774:	50012c00 	.word	0x50012c00
 8007778:	40013400 	.word	0x40013400
 800777c:	50013400 	.word	0x50013400
 8007780:	40000400 	.word	0x40000400
 8007784:	50000400 	.word	0x50000400
 8007788:	40000800 	.word	0x40000800
 800778c:	50000800 	.word	0x50000800
 8007790:	40000c00 	.word	0x40000c00
 8007794:	50000c00 	.word	0x50000c00
 8007798:	40001800 	.word	0x40001800
 800779c:	50001800 	.word	0x50001800
 80077a0:	40014000 	.word	0x40014000
 80077a4:	50014000 	.word	0x50014000

080077a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <__NVIC_SetPriority>:
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	4603      	mov	r3, r0
 800783c:	6039      	str	r1, [r7, #0]
 800783e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007840:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007844:	2b00      	cmp	r3, #0
 8007846:	db0a      	blt.n	800785e <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	b2da      	uxtb	r2, r3
 800784c:	490c      	ldr	r1, [pc, #48]	@ (8007880 <__NVIC_SetPriority+0x4c>)
 800784e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007852:	0112      	lsls	r2, r2, #4
 8007854:	b2d2      	uxtb	r2, r2
 8007856:	440b      	add	r3, r1
 8007858:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800785c:	e00a      	b.n	8007874 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	b2da      	uxtb	r2, r3
 8007862:	4908      	ldr	r1, [pc, #32]	@ (8007884 <__NVIC_SetPriority+0x50>)
 8007864:	88fb      	ldrh	r3, [r7, #6]
 8007866:	f003 030f 	and.w	r3, r3, #15
 800786a:	3b04      	subs	r3, #4
 800786c:	0112      	lsls	r2, r2, #4
 800786e:	b2d2      	uxtb	r2, r2
 8007870:	440b      	add	r3, r1
 8007872:	761a      	strb	r2, [r3, #24]
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	e000e100 	.word	0xe000e100
 8007884:	e000ed00 	.word	0xe000ed00

08007888 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007888:	b580      	push	{r7, lr}
 800788a:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 800788c:	4b05      	ldr	r3, [pc, #20]	@ (80078a4 <SysTick_Handler+0x1c>)
 800788e:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007890:	f001 fba6 	bl	8008fe0 <xTaskGetSchedulerState>
 8007894:	4603      	mov	r3, r0
 8007896:	2b01      	cmp	r3, #1
 8007898:	d001      	beq.n	800789e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800789a:	f001 ff51 	bl	8009740 <xPortSysTickHandler>
  }
}
 800789e:	bf00      	nop
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	e000e010 	.word	0xe000e010

080078a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80078a8:	b580      	push	{r7, lr}
 80078aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 80078ac:	2100      	movs	r1, #0
 80078ae:	f06f 0004 	mvn.w	r0, #4
 80078b2:	f7ff ffbf 	bl	8007834 <__NVIC_SetPriority>
#endif
}
 80078b6:	bf00      	nop
 80078b8:	bd80      	pop	{r7, pc}

080078ba <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b086      	sub	sp, #24
 80078be:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 80078c0:	2300      	movs	r3, #0
 80078c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078c4:	f3ef 8305 	mrs	r3, IPSR
 80078c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80078ca:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 80078d0:	2301      	movs	r3, #1
 80078d2:	617b      	str	r3, [r7, #20]
 80078d4:	e013      	b.n	80078fe <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 80078d6:	f001 fb83 	bl	8008fe0 <xTaskGetSchedulerState>
 80078da:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d00d      	beq.n	80078fe <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80078e2:	f3ef 8310 	mrs	r3, PRIMASK
 80078e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80078e8:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d105      	bne.n	80078fa <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078ee:	f3ef 8311 	mrs	r3, BASEPRI
 80078f2:	607b      	str	r3, [r7, #4]
  return(result);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d001      	beq.n	80078fe <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 80078fa:	2301      	movs	r3, #1
 80078fc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 80078fe:	697b      	ldr	r3, [r7, #20]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3718      	adds	r7, #24
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800790e:	f7ff ffd4 	bl	80078ba <IRQ_Context>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d003      	beq.n	8007920 <osKernelInitialize+0x18>
    stat = osErrorISR;
 8007918:	f06f 0305 	mvn.w	r3, #5
 800791c:	607b      	str	r3, [r7, #4]
 800791e:	e012      	b.n	8007946 <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 8007920:	f001 fb5e 	bl	8008fe0 <xTaskGetSchedulerState>
 8007924:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d109      	bne.n	8007940 <osKernelInitialize+0x38>
 800792c:	4b08      	ldr	r3, [pc, #32]	@ (8007950 <osKernelInitialize+0x48>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d105      	bne.n	8007940 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007934:	4b06      	ldr	r3, [pc, #24]	@ (8007950 <osKernelInitialize+0x48>)
 8007936:	2201      	movs	r2, #1
 8007938:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800793a:	2300      	movs	r3, #0
 800793c:	607b      	str	r3, [r7, #4]
 800793e:	e002      	b.n	8007946 <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 8007940:	f04f 33ff 	mov.w	r3, #4294967295
 8007944:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8007946:	687b      	ldr	r3, [r7, #4]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	2000029c 	.word	0x2000029c

08007954 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800795a:	f7ff ffae 	bl	80078ba <IRQ_Context>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d003      	beq.n	800796c <osKernelStart+0x18>
    stat = osErrorISR;
 8007964:	f06f 0305 	mvn.w	r3, #5
 8007968:	607b      	str	r3, [r7, #4]
 800796a:	e016      	b.n	800799a <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 800796c:	f001 fb38 	bl	8008fe0 <xTaskGetSchedulerState>
 8007970:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d10d      	bne.n	8007994 <osKernelStart+0x40>
 8007978:	4b0a      	ldr	r3, [pc, #40]	@ (80079a4 <osKernelStart+0x50>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d109      	bne.n	8007994 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007980:	f7ff ff92 	bl	80078a8 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 8007984:	4b07      	ldr	r3, [pc, #28]	@ (80079a4 <osKernelStart+0x50>)
 8007986:	2202      	movs	r2, #2
 8007988:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800798a:	f000 fdf7 	bl	800857c <vTaskStartScheduler>
      stat = osOK;
 800798e:	2300      	movs	r3, #0
 8007990:	607b      	str	r3, [r7, #4]
 8007992:	e002      	b.n	800799a <osKernelStart+0x46>
    } else {
      stat = osError;
 8007994:	f04f 33ff 	mov.w	r3, #4294967295
 8007998:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800799a:	687b      	ldr	r3, [r7, #4]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	2000029c 	.word	0x2000029c

080079a8 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b08e      	sub	sp, #56	@ 0x38
 80079ac:	af04      	add	r7, sp, #16
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80079b4:	2300      	movs	r3, #0
 80079b6:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 80079b8:	f7ff ff7f 	bl	80078ba <IRQ_Context>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d17e      	bne.n	8007ac0 <osThreadNew+0x118>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d07b      	beq.n	8007ac0 <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 80079c8:	2380      	movs	r3, #128	@ 0x80
 80079ca:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80079cc:	2318      	movs	r3, #24
 80079ce:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80079d0:	2300      	movs	r3, #0
 80079d2:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80079d4:	f04f 33ff 	mov.w	r3, #4294967295
 80079d8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d045      	beq.n	8007a6c <osThreadNew+0xc4>
      if (attr->name != NULL) {
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d002      	beq.n	80079ee <osThreadNew+0x46>
        name = attr->name;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d002      	beq.n	80079fc <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d008      	beq.n	8007a14 <osThreadNew+0x6c>
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	2b38      	cmp	r3, #56	@ 0x38
 8007a06:	d805      	bhi.n	8007a14 <osThreadNew+0x6c>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	f003 0301 	and.w	r3, r3, #1
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 8007a14:	2300      	movs	r3, #0
 8007a16:	e054      	b.n	8007ac2 <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	695b      	ldr	r3, [r3, #20]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d003      	beq.n	8007a28 <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	089b      	lsrs	r3, r3, #2
 8007a26:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00e      	beq.n	8007a4e <osThreadNew+0xa6>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	2b5b      	cmp	r3, #91	@ 0x5b
 8007a36:	d90a      	bls.n	8007a4e <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d006      	beq.n	8007a4e <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d002      	beq.n	8007a4e <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	61bb      	str	r3, [r7, #24]
 8007a4c:	e010      	b.n	8007a70 <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10c      	bne.n	8007a70 <osThreadNew+0xc8>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d108      	bne.n	8007a70 <osThreadNew+0xc8>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d104      	bne.n	8007a70 <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 8007a66:	2300      	movs	r3, #0
 8007a68:	61bb      	str	r3, [r7, #24]
 8007a6a:	e001      	b.n	8007a70 <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d110      	bne.n	8007a98 <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a7e:	9202      	str	r2, [sp, #8]
 8007a80:	9301      	str	r3, [sp, #4]
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	6a3a      	ldr	r2, [r7, #32]
 8007a8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f000 fba5 	bl	80081dc <xTaskCreateStatic>
 8007a92:	4603      	mov	r3, r0
 8007a94:	617b      	str	r3, [r7, #20]
 8007a96:	e013      	b.n	8007ac0 <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d110      	bne.n	8007ac0 <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 8007a9e:	6a3b      	ldr	r3, [r7, #32]
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	f107 0314 	add.w	r3, r7, #20
 8007aa6:	9301      	str	r3, [sp, #4]
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 fbe0 	bl	8008276 <xTaskCreate>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d001      	beq.n	8007ac0 <osThreadNew+0x118>
            hTask = NULL;
 8007abc:	2300      	movs	r3, #0
 8007abe:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 8007ac0:	697b      	ldr	r3, [r7, #20]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3728      	adds	r7, #40	@ 0x28
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b084      	sub	sp, #16
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 8007ad2:	f7ff fef2 	bl	80078ba <IRQ_Context>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d003      	beq.n	8007ae4 <osDelay+0x1a>
    stat = osErrorISR;
 8007adc:	f06f 0305 	mvn.w	r3, #5
 8007ae0:	60fb      	str	r3, [r7, #12]
 8007ae2:	e007      	b.n	8007af4 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d002      	beq.n	8007af4 <osDelay+0x2a>
      vTaskDelay(ticks);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fd1e 	bl	8008530 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 8007af4:	68fb      	ldr	r3, [r7, #12]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
	...

08007b00 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4a07      	ldr	r2, [pc, #28]	@ (8007b2c <vApplicationGetIdleTaskMemory+0x2c>)
 8007b10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	4a06      	ldr	r2, [pc, #24]	@ (8007b30 <vApplicationGetIdleTaskMemory+0x30>)
 8007b16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2280      	movs	r2, #128	@ 0x80
 8007b1c:	601a      	str	r2, [r3, #0]
}
 8007b1e:	bf00      	nop
 8007b20:	3714      	adds	r7, #20
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	200002a0 	.word	0x200002a0
 8007b30:	200002fc 	.word	0x200002fc

08007b34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	4a07      	ldr	r2, [pc, #28]	@ (8007b60 <vApplicationGetTimerTaskMemory+0x2c>)
 8007b44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	4a06      	ldr	r2, [pc, #24]	@ (8007b64 <vApplicationGetTimerTaskMemory+0x30>)
 8007b4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2280      	movs	r2, #128	@ 0x80
 8007b50:	601a      	str	r2, [r3, #0]
}
 8007b52:	bf00      	nop
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	200004fc 	.word	0x200004fc
 8007b64:	20000558 	.word	0x20000558

08007b68 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f103 0208 	add.w	r2, r3, #8
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b80:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f103 0208 	add.w	r2, r3, #8
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f103 0208 	add.w	r2, r3, #8
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007bb6:	bf00      	nop
 8007bb8:	370c      	adds	r7, #12
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr

08007bc2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8007bc2:	b480      	push	{r7}
 8007bc4:	b085      	sub	sp, #20
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
 8007bca:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd8:	d103      	bne.n	8007be2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	60fb      	str	r3, [r7, #12]
 8007be0:	e00c      	b.n	8007bfc <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	3308      	adds	r3, #8
 8007be6:	60fb      	str	r3, [r7, #12]
 8007be8:	e002      	b.n	8007bf0 <vListInsert+0x2e>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	60fb      	str	r3, [r7, #12]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d2f6      	bcs.n	8007bea <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	683a      	ldr	r2, [r7, #0]
 8007c0a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	683a      	ldr	r2, [r7, #0]
 8007c16:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	1c5a      	adds	r2, r3, #1
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	601a      	str	r2, [r3, #0]
}
 8007c28:	bf00      	nop
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	6892      	ldr	r2, [r2, #8]
 8007c4a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	6852      	ldr	r2, [r2, #4]
 8007c54:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d103      	bne.n	8007c68 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	689a      	ldr	r2, [r3, #8]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	1e5a      	subs	r2, r3, #1
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8007c92:	2301      	movs	r3, #1
 8007c94:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d103      	bne.n	8007ca8 <xQueueGenericReset+0x20>
 8007ca0:	f001 feba 	bl	8009a18 <ulSetInterruptMask>
 8007ca4:	bf00      	nop
 8007ca6:	e7fd      	b.n	8007ca4 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d057      	beq.n	8007d5e <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d053      	beq.n	8007d5e <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	fba3 2302 	umull	r2, r3, r3, r2
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d000      	beq.n	8007cca <xQueueGenericReset+0x42>
 8007cc8:	2101      	movs	r1, #1
 8007cca:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d146      	bne.n	8007d5e <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 8007cd0:	f001 fd0a 	bl	80096e8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cdc:	68b9      	ldr	r1, [r7, #8]
 8007cde:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007ce0:	fb01 f303 	mul.w	r3, r1, r3
 8007ce4:	441a      	add	r2, r3
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	2200      	movs	r2, #0
 8007cee:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d00:	3b01      	subs	r3, #1
 8007d02:	68b9      	ldr	r1, [r7, #8]
 8007d04:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007d06:	fb01 f303 	mul.w	r3, r1, r3
 8007d0a:	441a      	add	r2, r3
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	22ff      	movs	r2, #255	@ 0xff
 8007d14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	22ff      	movs	r2, #255	@ 0xff
 8007d1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10e      	bne.n	8007d44 <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d014      	beq.n	8007d58 <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	3310      	adds	r3, #16
 8007d32:	4618      	mov	r0, r3
 8007d34:	f000 ff4a 	bl	8008bcc <xTaskRemoveFromEventList>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00c      	beq.n	8007d58 <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8007d3e:	f001 fcc1 	bl	80096c4 <vPortYield>
 8007d42:	e009      	b.n	8007d58 <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	3310      	adds	r3, #16
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7ff ff0d 	bl	8007b68 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	3324      	adds	r3, #36	@ 0x24
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7ff ff08 	bl	8007b68 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8007d58:	f001 fcd8 	bl	800970c <vPortExitCritical>
 8007d5c:	e001      	b.n	8007d62 <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d103      	bne.n	8007d70 <xQueueGenericReset+0xe8>
 8007d68:	f001 fe56 	bl	8009a18 <ulSetInterruptMask>
 8007d6c:	bf00      	nop
 8007d6e:	e7fd      	b.n	8007d6c <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8007d70:	68fb      	ldr	r3, [r7, #12]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b088      	sub	sp, #32
 8007d7e:	af02      	add	r7, sp, #8
 8007d80:	60f8      	str	r0, [r7, #12]
 8007d82:	60b9      	str	r1, [r7, #8]
 8007d84:	607a      	str	r2, [r7, #4]
 8007d86:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d103      	bne.n	8007d9a <xQueueGenericCreateStatic+0x20>
 8007d92:	f001 fe41 	bl	8009a18 <ulSetInterruptMask>
 8007d96:	bf00      	nop
 8007d98:	e7fd      	b.n	8007d96 <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d029      	beq.n	8007df4 <xQueueGenericCreateStatic+0x7a>
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d026      	beq.n	8007df4 <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d002      	beq.n	8007db2 <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d020      	beq.n	8007df4 <xQueueGenericCreateStatic+0x7a>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d102      	bne.n	8007dbe <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d11a      	bne.n	8007df4 <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8007dbe:	2350      	movs	r3, #80	@ 0x50
 8007dc0:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	2b50      	cmp	r3, #80	@ 0x50
 8007dc6:	d003      	beq.n	8007dd0 <xQueueGenericCreateStatic+0x56>
 8007dc8:	f001 fe26 	bl	8009a18 <ulSetInterruptMask>
 8007dcc:	bf00      	nop
 8007dce:	e7fd      	b.n	8007dcc <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8007dd0:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007dde:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	9300      	str	r3, [sp, #0]
 8007de6:	4613      	mov	r3, r2
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	68b9      	ldr	r1, [r7, #8]
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f000 f80d 	bl	8007e0c <prvInitialiseNewQueue>
 8007df2:	e006      	b.n	8007e02 <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d103      	bne.n	8007e02 <xQueueGenericCreateStatic+0x88>
 8007dfa:	f001 fe0d 	bl	8009a18 <ulSetInterruptMask>
 8007dfe:	bf00      	nop
 8007e00:	e7fd      	b.n	8007dfe <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8007e02:	697b      	ldr	r3, [r7, #20]
    }
 8007e04:	4618      	mov	r0, r3
 8007e06:	3718      	adds	r7, #24
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
 8007e18:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d103      	bne.n	8007e28 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	69ba      	ldr	r2, [r7, #24]
 8007e24:	601a      	str	r2, [r3, #0]
 8007e26:	e002      	b.n	8007e2e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e3a:	2101      	movs	r1, #1
 8007e3c:	69b8      	ldr	r0, [r7, #24]
 8007e3e:	f7ff ff23 	bl	8007c88 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	78fa      	ldrb	r2, [r7, #3]
 8007e46:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8007e4a:	bf00      	nop
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b08a      	sub	sp, #40	@ 0x28
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	60f8      	str	r0, [r7, #12]
 8007e5a:	60b9      	str	r1, [r7, #8]
 8007e5c:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8007e66:	6a3b      	ldr	r3, [r7, #32]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d103      	bne.n	8007e74 <xQueueReceive+0x22>
 8007e6c:	f001 fdd4 	bl	8009a18 <ulSetInterruptMask>
 8007e70:	bf00      	nop
 8007e72:	e7fd      	b.n	8007e70 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d103      	bne.n	8007e82 <xQueueReceive+0x30>
 8007e7a:	6a3b      	ldr	r3, [r7, #32]
 8007e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d101      	bne.n	8007e86 <xQueueReceive+0x34>
 8007e82:	2301      	movs	r3, #1
 8007e84:	e000      	b.n	8007e88 <xQueueReceive+0x36>
 8007e86:	2300      	movs	r3, #0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d103      	bne.n	8007e94 <xQueueReceive+0x42>
 8007e8c:	f001 fdc4 	bl	8009a18 <ulSetInterruptMask>
 8007e90:	bf00      	nop
 8007e92:	e7fd      	b.n	8007e90 <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e94:	f001 f8a4 	bl	8008fe0 <xTaskGetSchedulerState>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d102      	bne.n	8007ea4 <xQueueReceive+0x52>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d101      	bne.n	8007ea8 <xQueueReceive+0x56>
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e000      	b.n	8007eaa <xQueueReceive+0x58>
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d103      	bne.n	8007eb6 <xQueueReceive+0x64>
 8007eae:	f001 fdb3 	bl	8009a18 <ulSetInterruptMask>
 8007eb2:	bf00      	nop
 8007eb4:	e7fd      	b.n	8007eb2 <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8007eb6:	f001 fc17 	bl	80096e8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007eba:	6a3b      	ldr	r3, [r7, #32]
 8007ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ebe:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d019      	beq.n	8007efa <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ec6:	68b9      	ldr	r1, [r7, #8]
 8007ec8:	6a38      	ldr	r0, [r7, #32]
 8007eca:	f000 f87e 	bl	8007fca <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	1e5a      	subs	r2, r3, #1
 8007ed2:	6a3b      	ldr	r3, [r7, #32]
 8007ed4:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ed6:	6a3b      	ldr	r3, [r7, #32]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d009      	beq.n	8007ef2 <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	3310      	adds	r3, #16
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 fe72 	bl	8008bcc <xTaskRemoveFromEventList>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8007eee:	f001 fbe9 	bl	80096c4 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8007ef2:	f001 fc0b 	bl	800970c <vPortExitCritical>
                return pdPASS;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e063      	b.n	8007fc2 <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d103      	bne.n	8007f08 <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8007f00:	f001 fc04 	bl	800970c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8007f04:	2300      	movs	r3, #0
 8007f06:	e05c      	b.n	8007fc2 <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 8007f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d106      	bne.n	8007f1c <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007f0e:	f107 0314 	add.w	r3, r7, #20
 8007f12:	4618      	mov	r0, r3
 8007f14:	f000 ff28 	bl	8008d68 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8007f1c:	f001 fbf6 	bl	800970c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8007f20:	f000 fb88 	bl	8008634 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8007f24:	f001 fbe0 	bl	80096e8 <vPortEnterCritical>
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f2e:	b25b      	sxtb	r3, r3
 8007f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f34:	d103      	bne.n	8007f3e <xQueueReceive+0xec>
 8007f36:	6a3b      	ldr	r3, [r7, #32]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f44:	b25b      	sxtb	r3, r3
 8007f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f4a:	d103      	bne.n	8007f54 <xQueueReceive+0x102>
 8007f4c:	6a3b      	ldr	r3, [r7, #32]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f54:	f001 fbda 	bl	800970c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f58:	1d3a      	adds	r2, r7, #4
 8007f5a:	f107 0314 	add.w	r3, r7, #20
 8007f5e:	4611      	mov	r1, r2
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 ff17 	bl	8008d94 <xTaskCheckForTimeOut>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d11d      	bne.n	8007fa8 <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f6c:	6a38      	ldr	r0, [r7, #32]
 8007f6e:	f000 f8a4 	bl	80080ba <prvIsQueueEmpty>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d011      	beq.n	8007f9c <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f78:	6a3b      	ldr	r3, [r7, #32]
 8007f7a:	3324      	adds	r3, #36	@ 0x24
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	4611      	mov	r1, r2
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 fdc7 	bl	8008b14 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8007f86:	6a38      	ldr	r0, [r7, #32]
 8007f88:	f000 f845 	bl	8008016 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8007f8c:	f000 fb60 	bl	8008650 <xTaskResumeAll>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d18f      	bne.n	8007eb6 <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 8007f96:	f001 fb95 	bl	80096c4 <vPortYield>
 8007f9a:	e78c      	b.n	8007eb6 <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8007f9c:	6a38      	ldr	r0, [r7, #32]
 8007f9e:	f000 f83a 	bl	8008016 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8007fa2:	f000 fb55 	bl	8008650 <xTaskResumeAll>
 8007fa6:	e786      	b.n	8007eb6 <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8007fa8:	6a38      	ldr	r0, [r7, #32]
 8007faa:	f000 f834 	bl	8008016 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8007fae:	f000 fb4f 	bl	8008650 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fb2:	6a38      	ldr	r0, [r7, #32]
 8007fb4:	f000 f881 	bl	80080ba <prvIsQueueEmpty>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f43f af7b 	beq.w	8007eb6 <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8007fc0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3728      	adds	r7, #40	@ 0x28
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b082      	sub	sp, #8
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d018      	beq.n	800800e <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68da      	ldr	r2, [r3, #12]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fe4:	441a      	add	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68da      	ldr	r2, [r3, #12]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d303      	bcc.n	8007ffe <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68d9      	ldr	r1, [r3, #12]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008006:	461a      	mov	r2, r3
 8008008:	6838      	ldr	r0, [r7, #0]
 800800a:	f001 fe31 	bl	8009c70 <memcpy>
    }
}
 800800e:	bf00      	nop
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b084      	sub	sp, #16
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800801e:	f001 fb63 	bl	80096e8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008028:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800802a:	e011      	b.n	8008050 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008030:	2b00      	cmp	r3, #0
 8008032:	d012      	beq.n	800805a <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	3324      	adds	r3, #36	@ 0x24
 8008038:	4618      	mov	r0, r3
 800803a:	f000 fdc7 	bl	8008bcc <xTaskRemoveFromEventList>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8008044:	f000 fefe 	bl	8008e44 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8008048:	7bfb      	ldrb	r3, [r7, #15]
 800804a:	3b01      	subs	r3, #1
 800804c:	b2db      	uxtb	r3, r3
 800804e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008050:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008054:	2b00      	cmp	r3, #0
 8008056:	dce9      	bgt.n	800802c <prvUnlockQueue+0x16>
 8008058:	e000      	b.n	800805c <prvUnlockQueue+0x46>
                    break;
 800805a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	22ff      	movs	r2, #255	@ 0xff
 8008060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8008064:	f001 fb52 	bl	800970c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8008068:	f001 fb3e 	bl	80096e8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008072:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008074:	e011      	b.n	800809a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d012      	beq.n	80080a4 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	3310      	adds	r3, #16
 8008082:	4618      	mov	r0, r3
 8008084:	f000 fda2 	bl	8008bcc <xTaskRemoveFromEventList>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800808e:	f000 fed9 	bl	8008e44 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8008092:	7bbb      	ldrb	r3, [r7, #14]
 8008094:	3b01      	subs	r3, #1
 8008096:	b2db      	uxtb	r3, r3
 8008098:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800809a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	dce9      	bgt.n	8008076 <prvUnlockQueue+0x60>
 80080a2:	e000      	b.n	80080a6 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80080a4:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	22ff      	movs	r2, #255	@ 0xff
 80080aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80080ae:	f001 fb2d 	bl	800970c <vPortExitCritical>
}
 80080b2:	bf00      	nop
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b084      	sub	sp, #16
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80080c2:	f001 fb11 	bl	80096e8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d102      	bne.n	80080d4 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80080ce:	2301      	movs	r3, #1
 80080d0:	60fb      	str	r3, [r7, #12]
 80080d2:	e001      	b.n	80080d8 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80080d4:	2300      	movs	r3, #0
 80080d6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80080d8:	f001 fb18 	bl	800970c <vPortExitCritical>

    return xReturn;
 80080dc:	68fb      	ldr	r3, [r7, #12]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
	...

080080e8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80080f2:	2300      	movs	r3, #0
 80080f4:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d103      	bne.n	8008104 <vQueueAddToRegistry+0x1c>
 80080fc:	f001 fc8c 	bl	8009a18 <ulSetInterruptMask>
 8008100:	bf00      	nop
 8008102:	e7fd      	b.n	8008100 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d024      	beq.n	8008154 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800810a:	2300      	movs	r3, #0
 800810c:	60fb      	str	r3, [r7, #12]
 800810e:	e01e      	b.n	800814e <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008110:	4a17      	ldr	r2, [pc, #92]	@ (8008170 <vQueueAddToRegistry+0x88>)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	00db      	lsls	r3, r3, #3
 8008116:	4413      	add	r3, r2
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	429a      	cmp	r2, r3
 800811e:	d105      	bne.n	800812c <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	00db      	lsls	r3, r3, #3
 8008124:	4a12      	ldr	r2, [pc, #72]	@ (8008170 <vQueueAddToRegistry+0x88>)
 8008126:	4413      	add	r3, r2
 8008128:	60bb      	str	r3, [r7, #8]
                    break;
 800812a:	e013      	b.n	8008154 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10a      	bne.n	8008148 <vQueueAddToRegistry+0x60>
 8008132:	4a0f      	ldr	r2, [pc, #60]	@ (8008170 <vQueueAddToRegistry+0x88>)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d104      	bne.n	8008148 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	00db      	lsls	r3, r3, #3
 8008142:	4a0b      	ldr	r2, [pc, #44]	@ (8008170 <vQueueAddToRegistry+0x88>)
 8008144:	4413      	add	r3, r2
 8008146:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	3301      	adds	r3, #1
 800814c:	60fb      	str	r3, [r7, #12]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2b07      	cmp	r3, #7
 8008152:	d9dd      	bls.n	8008110 <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d005      	beq.n	8008166 <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	683a      	ldr	r2, [r7, #0]
 800815e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8008166:	bf00      	nop
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	20000758 	.word	0x20000758

08008174 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8008184:	f001 fab0 	bl	80096e8 <vPortEnterCritical>
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800818e:	b25b      	sxtb	r3, r3
 8008190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008194:	d103      	bne.n	800819e <vQueueWaitForMessageRestricted+0x2a>
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081a4:	b25b      	sxtb	r3, r3
 80081a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081aa:	d103      	bne.n	80081b4 <vQueueWaitForMessageRestricted+0x40>
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081b4:	f001 faaa 	bl	800970c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d106      	bne.n	80081ce <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	3324      	adds	r3, #36	@ 0x24
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	68b9      	ldr	r1, [r7, #8]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f000 fcc1 	bl	8008b50 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80081ce:	6978      	ldr	r0, [r7, #20]
 80081d0:	f7ff ff21 	bl	8008016 <prvUnlockQueue>
    }
 80081d4:	bf00      	nop
 80081d6:	3718      	adds	r7, #24
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 80081dc:	b580      	push	{r7, lr}
 80081de:	b08c      	sub	sp, #48	@ 0x30
 80081e0:	af04      	add	r7, sp, #16
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	607a      	str	r2, [r7, #4]
 80081e8:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 80081ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d103      	bne.n	80081f8 <xTaskCreateStatic+0x1c>
 80081f0:	f001 fc12 	bl	8009a18 <ulSetInterruptMask>
 80081f4:	bf00      	nop
 80081f6:	e7fd      	b.n	80081f4 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 80081f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d103      	bne.n	8008206 <xTaskCreateStatic+0x2a>
 80081fe:	f001 fc0b 	bl	8009a18 <ulSetInterruptMask>
 8008202:	bf00      	nop
 8008204:	e7fd      	b.n	8008202 <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8008206:	235c      	movs	r3, #92	@ 0x5c
 8008208:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	2b5c      	cmp	r3, #92	@ 0x5c
 800820e:	d003      	beq.n	8008218 <xTaskCreateStatic+0x3c>
 8008210:	f001 fc02 	bl	8009a18 <ulSetInterruptMask>
 8008214:	bf00      	nop
 8008216:	e7fd      	b.n	8008214 <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008218:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800821a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821c:	2b00      	cmp	r3, #0
 800821e:	d023      	beq.n	8008268 <xTaskCreateStatic+0x8c>
 8008220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008222:	2b00      	cmp	r3, #0
 8008224:	d020      	beq.n	8008268 <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008228:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800822a:	225c      	movs	r2, #92	@ 0x5c
 800822c:	2100      	movs	r1, #0
 800822e:	69f8      	ldr	r0, [r7, #28]
 8008230:	f001 fcea 	bl	8009c08 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008238:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	2202      	movs	r2, #2
 800823e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008242:	2300      	movs	r3, #0
 8008244:	9303      	str	r3, [sp, #12]
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	9302      	str	r3, [sp, #8]
 800824a:	f107 0318 	add.w	r3, r7, #24
 800824e:	9301      	str	r3, [sp, #4]
 8008250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	68b9      	ldr	r1, [r7, #8]
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 f855 	bl	800830a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8008260:	69f8      	ldr	r0, [r7, #28]
 8008262:	f000 f8d5 	bl	8008410 <prvAddNewTaskToReadyList>
 8008266:	e001      	b.n	800826c <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 8008268:	2300      	movs	r3, #0
 800826a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800826c:	69bb      	ldr	r3, [r7, #24]
    }
 800826e:	4618      	mov	r0, r3
 8008270:	3720      	adds	r7, #32
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8008276:	b580      	push	{r7, lr}
 8008278:	b08c      	sub	sp, #48	@ 0x30
 800827a:	af04      	add	r7, sp, #16
 800827c:	60f8      	str	r0, [r7, #12]
 800827e:	60b9      	str	r1, [r7, #8]
 8008280:	603b      	str	r3, [r7, #0]
 8008282:	4613      	mov	r3, r2
 8008284:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008286:	88fb      	ldrh	r3, [r7, #6]
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4618      	mov	r0, r3
 800828c:	f001 fc24 	bl	8009ad8 <pvPortMalloc>
 8008290:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d013      	beq.n	80082c0 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008298:	205c      	movs	r0, #92	@ 0x5c
 800829a:	f001 fc1d 	bl	8009ad8 <pvPortMalloc>
 800829e:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d008      	beq.n	80082b8 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80082a6:	225c      	movs	r2, #92	@ 0x5c
 80082a8:	2100      	movs	r1, #0
 80082aa:	69f8      	ldr	r0, [r7, #28]
 80082ac:	f001 fcac 	bl	8009c08 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80082b6:	e005      	b.n	80082c4 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80082b8:	6978      	ldr	r0, [r7, #20]
 80082ba:	f001 fc5f 	bl	8009b7c <vPortFree>
 80082be:	e001      	b.n	80082c4 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80082c0:	2300      	movs	r3, #0
 80082c2:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d017      	beq.n	80082fa <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80082d2:	88fa      	ldrh	r2, [r7, #6]
 80082d4:	2300      	movs	r3, #0
 80082d6:	9303      	str	r3, [sp, #12]
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	9302      	str	r3, [sp, #8]
 80082dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082de:	9301      	str	r3, [sp, #4]
 80082e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e2:	9300      	str	r3, [sp, #0]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	68b9      	ldr	r1, [r7, #8]
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f000 f80e 	bl	800830a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80082ee:	69f8      	ldr	r0, [r7, #28]
 80082f0:	f000 f88e 	bl	8008410 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80082f4:	2301      	movs	r3, #1
 80082f6:	61bb      	str	r3, [r7, #24]
 80082f8:	e002      	b.n	8008300 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80082fa:	f04f 33ff 	mov.w	r3, #4294967295
 80082fe:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8008300:	69bb      	ldr	r3, [r7, #24]
    }
 8008302:	4618      	mov	r0, r3
 8008304:	3720      	adds	r7, #32
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b086      	sub	sp, #24
 800830e:	af00      	add	r7, sp, #0
 8008310:	60f8      	str	r0, [r7, #12]
 8008312:	60b9      	str	r1, [r7, #8]
 8008314:	607a      	str	r2, [r7, #4]
 8008316:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800831a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	461a      	mov	r2, r3
 8008322:	21a5      	movs	r1, #165	@ 0xa5
 8008324:	f001 fc70 	bl	8009c08 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008332:	3b01      	subs	r3, #1
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	f023 0307 	bic.w	r3, r3, #7
 8008340:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	f003 0307 	and.w	r3, r3, #7
 8008348:	2b00      	cmp	r3, #0
 800834a:	d003      	beq.n	8008354 <prvInitialiseNewTask+0x4a>
 800834c:	f001 fb64 	bl	8009a18 <ulSetInterruptMask>
 8008350:	bf00      	nop
 8008352:	e7fd      	b.n	8008350 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d01e      	beq.n	8008398 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800835a:	2300      	movs	r3, #0
 800835c:	617b      	str	r3, [r7, #20]
 800835e:	e012      	b.n	8008386 <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	4413      	add	r3, r2
 8008366:	7819      	ldrb	r1, [r3, #0]
 8008368:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	4413      	add	r3, r2
 800836e:	3334      	adds	r3, #52	@ 0x34
 8008370:	460a      	mov	r2, r1
 8008372:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	4413      	add	r3, r2
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d006      	beq.n	800838e <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	3301      	adds	r3, #1
 8008384:	617b      	str	r3, [r7, #20]
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	2b0f      	cmp	r3, #15
 800838a:	d9e9      	bls.n	8008360 <prvInitialiseNewTask+0x56>
 800838c:	e000      	b.n	8008390 <prvInitialiseNewTask+0x86>
            {
                break;
 800838e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008392:	2200      	movs	r2, #0
 8008394:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8008398:	6a3b      	ldr	r3, [r7, #32]
 800839a:	2b37      	cmp	r3, #55	@ 0x37
 800839c:	d903      	bls.n	80083a6 <prvInitialiseNewTask+0x9c>
 800839e:	f001 fb3b 	bl	8009a18 <ulSetInterruptMask>
 80083a2:	bf00      	nop
 80083a4:	e7fd      	b.n	80083a2 <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80083a6:	6a3b      	ldr	r3, [r7, #32]
 80083a8:	2b37      	cmp	r3, #55	@ 0x37
 80083aa:	d901      	bls.n	80083b0 <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80083ac:	2337      	movs	r3, #55	@ 0x37
 80083ae:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80083b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b2:	6a3a      	ldr	r2, [r7, #32]
 80083b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80083b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b8:	6a3a      	ldr	r2, [r7, #32]
 80083ba:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80083bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083be:	3304      	adds	r3, #4
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7ff fbf1 	bl	8007ba8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80083c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c8:	3318      	adds	r3, #24
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7ff fbec 	bl	8007ba8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80083d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083d4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083d6:	6a3b      	ldr	r3, [r7, #32]
 80083d8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80083dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083de:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80083e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083e4:	625a      	str	r2, [r3, #36]	@ 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 80083e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	6938      	ldr	r0, [r7, #16]
 80083f0:	f001 f9d8 	bl	80097a4 <pxPortInitialiseStack>
 80083f4:	4602      	mov	r2, r0
 80083f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f8:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80083fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d002      	beq.n	8008406 <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008402:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008404:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008406:	bf00      	nop
 8008408:	3718      	adds	r7, #24
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
	...

08008410 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8008418:	f001 f966 	bl	80096e8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800841c:	4b3e      	ldr	r3, [pc, #248]	@ (8008518 <prvAddNewTaskToReadyList+0x108>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3301      	adds	r3, #1
 8008422:	4a3d      	ldr	r2, [pc, #244]	@ (8008518 <prvAddNewTaskToReadyList+0x108>)
 8008424:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8008426:	4b3d      	ldr	r3, [pc, #244]	@ (800851c <prvAddNewTaskToReadyList+0x10c>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d109      	bne.n	8008442 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800842e:	4a3b      	ldr	r2, [pc, #236]	@ (800851c <prvAddNewTaskToReadyList+0x10c>)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008434:	4b38      	ldr	r3, [pc, #224]	@ (8008518 <prvAddNewTaskToReadyList+0x108>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d110      	bne.n	800845e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800843c:	f000 fd1e 	bl	8008e7c <prvInitialiseTaskLists>
 8008440:	e00d      	b.n	800845e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8008442:	4b37      	ldr	r3, [pc, #220]	@ (8008520 <prvAddNewTaskToReadyList+0x110>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d109      	bne.n	800845e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800844a:	4b34      	ldr	r3, [pc, #208]	@ (800851c <prvAddNewTaskToReadyList+0x10c>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008454:	429a      	cmp	r2, r3
 8008456:	d802      	bhi.n	800845e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8008458:	4a30      	ldr	r2, [pc, #192]	@ (800851c <prvAddNewTaskToReadyList+0x10c>)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800845e:	4b31      	ldr	r3, [pc, #196]	@ (8008524 <prvAddNewTaskToReadyList+0x114>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	3301      	adds	r3, #1
 8008464:	4a2f      	ldr	r2, [pc, #188]	@ (8008524 <prvAddNewTaskToReadyList+0x114>)
 8008466:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008468:	4b2e      	ldr	r3, [pc, #184]	@ (8008524 <prvAddNewTaskToReadyList+0x114>)
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008474:	4b2c      	ldr	r3, [pc, #176]	@ (8008528 <prvAddNewTaskToReadyList+0x118>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	429a      	cmp	r2, r3
 800847a:	d903      	bls.n	8008484 <prvAddNewTaskToReadyList+0x74>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008480:	4a29      	ldr	r2, [pc, #164]	@ (8008528 <prvAddNewTaskToReadyList+0x118>)
 8008482:	6013      	str	r3, [r2, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008488:	4928      	ldr	r1, [pc, #160]	@ (800852c <prvAddNewTaskToReadyList+0x11c>)
 800848a:	4613      	mov	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4413      	add	r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	440b      	add	r3, r1
 8008494:	3304      	adds	r3, #4
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	60fb      	str	r3, [r7, #12]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	609a      	str	r2, [r3, #8]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	689a      	ldr	r2, [r3, #8]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	60da      	str	r2, [r3, #12]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	3204      	adds	r2, #4
 80084b0:	605a      	str	r2, [r3, #4]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	1d1a      	adds	r2, r3, #4
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	609a      	str	r2, [r3, #8]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084be:	4613      	mov	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4a19      	ldr	r2, [pc, #100]	@ (800852c <prvAddNewTaskToReadyList+0x11c>)
 80084c8:	441a      	add	r2, r3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	615a      	str	r2, [r3, #20]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084d2:	4916      	ldr	r1, [pc, #88]	@ (800852c <prvAddNewTaskToReadyList+0x11c>)
 80084d4:	4613      	mov	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	4413      	add	r3, r2
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	440b      	add	r3, r1
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	1c59      	adds	r1, r3, #1
 80084e2:	4812      	ldr	r0, [pc, #72]	@ (800852c <prvAddNewTaskToReadyList+0x11c>)
 80084e4:	4613      	mov	r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	4413      	add	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4403      	add	r3, r0
 80084ee:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80084f0:	f001 f90c 	bl	800970c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80084f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008520 <prvAddNewTaskToReadyList+0x110>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d008      	beq.n	800850e <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80084fc:	4b07      	ldr	r3, [pc, #28]	@ (800851c <prvAddNewTaskToReadyList+0x10c>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008506:	429a      	cmp	r2, r3
 8008508:	d201      	bcs.n	800850e <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800850a:	f001 f8db 	bl	80096c4 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800850e:	bf00      	nop
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	20000c6c 	.word	0x20000c6c
 800851c:	20000798 	.word	0x20000798
 8008520:	20000c78 	.word	0x20000c78
 8008524:	20000c88 	.word	0x20000c88
 8008528:	20000c74 	.word	0x20000c74
 800852c:	2000079c 	.word	0x2000079c

08008530 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8008538:	2300      	movs	r3, #0
 800853a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d010      	beq.n	8008564 <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 8008542:	4b0d      	ldr	r3, [pc, #52]	@ (8008578 <vTaskDelay+0x48>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d003      	beq.n	8008552 <vTaskDelay+0x22>
 800854a:	f001 fa65 	bl	8009a18 <ulSetInterruptMask>
 800854e:	bf00      	nop
 8008550:	e7fd      	b.n	800854e <vTaskDelay+0x1e>
            vTaskSuspendAll();
 8008552:	f000 f86f 	bl	8008634 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008556:	2100      	movs	r1, #0
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fd5f 	bl	800901c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800855e:	f000 f877 	bl	8008650 <xTaskResumeAll>
 8008562:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d101      	bne.n	800856e <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 800856a:	f001 f8ab 	bl	80096c4 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800856e:	bf00      	nop
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	20000c94 	.word	0x20000c94

0800857c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b088      	sub	sp, #32
 8008580:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8008582:	2300      	movs	r3, #0
 8008584:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8008586:	2300      	movs	r3, #0
 8008588:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800858a:	463a      	mov	r2, r7
 800858c:	1d39      	adds	r1, r7, #4
 800858e:	f107 0308 	add.w	r3, r7, #8
 8008592:	4618      	mov	r0, r3
 8008594:	f7ff fab4 	bl	8007b00 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	9202      	str	r2, [sp, #8]
 80085a0:	9301      	str	r3, [sp, #4]
 80085a2:	2300      	movs	r3, #0
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	2300      	movs	r3, #0
 80085a8:	460a      	mov	r2, r1
 80085aa:	491b      	ldr	r1, [pc, #108]	@ (8008618 <vTaskStartScheduler+0x9c>)
 80085ac:	481b      	ldr	r0, [pc, #108]	@ (800861c <vTaskStartScheduler+0xa0>)
 80085ae:	f7ff fe15 	bl	80081dc <xTaskCreateStatic>
 80085b2:	4603      	mov	r3, r0
 80085b4:	4a1a      	ldr	r2, [pc, #104]	@ (8008620 <vTaskStartScheduler+0xa4>)
 80085b6:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 80085b8:	4b19      	ldr	r3, [pc, #100]	@ (8008620 <vTaskStartScheduler+0xa4>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d002      	beq.n	80085c6 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 80085c0:	2301      	movs	r3, #1
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	e001      	b.n	80085ca <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 80085c6:	2300      	movs	r3, #0
 80085c8:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d102      	bne.n	80085d6 <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 80085d0:	f000 fd92 	bl	80090f8 <xTimerCreateTimerTask>
 80085d4:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d10e      	bne.n	80085fa <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 80085dc:	f001 fa1c 	bl	8009a18 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80085e0:	4b10      	ldr	r3, [pc, #64]	@ (8008624 <vTaskStartScheduler+0xa8>)
 80085e2:	f04f 32ff 	mov.w	r2, #4294967295
 80085e6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80085e8:	4b0f      	ldr	r3, [pc, #60]	@ (8008628 <vTaskStartScheduler+0xac>)
 80085ea:	2201      	movs	r2, #1
 80085ec:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80085ee:	4b0f      	ldr	r3, [pc, #60]	@ (800862c <vTaskStartScheduler+0xb0>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80085f4:	f001 f960 	bl	80098b8 <xPortStartScheduler>
 80085f8:	e007      	b.n	800860a <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008600:	d103      	bne.n	800860a <vTaskStartScheduler+0x8e>
 8008602:	f001 fa09 	bl	8009a18 <ulSetInterruptMask>
 8008606:	bf00      	nop
 8008608:	e7fd      	b.n	8008606 <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800860a:	4b09      	ldr	r3, [pc, #36]	@ (8008630 <vTaskStartScheduler+0xb4>)
 800860c:	681b      	ldr	r3, [r3, #0]
}
 800860e:	bf00      	nop
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	0800a5c0 	.word	0x0800a5c0
 800861c:	08008e5d 	.word	0x08008e5d
 8008620:	20000c90 	.word	0x20000c90
 8008624:	20000c8c 	.word	0x20000c8c
 8008628:	20000c78 	.word	0x20000c78
 800862c:	20000c70 	.word	0x20000c70
 8008630:	0800a638 	.word	0x0800a638

08008634 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008634:	b480      	push	{r7}
 8008636:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8008638:	4b04      	ldr	r3, [pc, #16]	@ (800864c <vTaskSuspendAll+0x18>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	3301      	adds	r3, #1
 800863e:	4a03      	ldr	r2, [pc, #12]	@ (800864c <vTaskSuspendAll+0x18>)
 8008640:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8008642:	bf00      	nop
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr
 800864c:	20000c94 	.word	0x20000c94

08008650 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8008656:	2300      	movs	r3, #0
 8008658:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800865a:	2300      	movs	r3, #0
 800865c:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 800865e:	4b6b      	ldr	r3, [pc, #428]	@ (800880c <xTaskResumeAll+0x1bc>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d103      	bne.n	800866e <xTaskResumeAll+0x1e>
 8008666:	f001 f9d7 	bl	8009a18 <ulSetInterruptMask>
 800866a:	bf00      	nop
 800866c:	e7fd      	b.n	800866a <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800866e:	f001 f83b 	bl	80096e8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8008672:	4b66      	ldr	r3, [pc, #408]	@ (800880c <xTaskResumeAll+0x1bc>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	3b01      	subs	r3, #1
 8008678:	4a64      	ldr	r2, [pc, #400]	@ (800880c <xTaskResumeAll+0x1bc>)
 800867a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800867c:	4b63      	ldr	r3, [pc, #396]	@ (800880c <xTaskResumeAll+0x1bc>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	f040 80bb 	bne.w	80087fc <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008686:	4b62      	ldr	r3, [pc, #392]	@ (8008810 <xTaskResumeAll+0x1c0>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	f000 80b6 	beq.w	80087fc <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008690:	e08b      	b.n	80087aa <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008692:	4b60      	ldr	r3, [pc, #384]	@ (8008814 <xTaskResumeAll+0x1c4>)
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800869e:	60bb      	str	r3, [r7, #8]
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	69db      	ldr	r3, [r3, #28]
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	6a12      	ldr	r2, [r2, #32]
 80086a8:	609a      	str	r2, [r3, #8]
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	6a1b      	ldr	r3, [r3, #32]
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	69d2      	ldr	r2, [r2, #28]
 80086b2:	605a      	str	r2, [r3, #4]
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	685a      	ldr	r2, [r3, #4]
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	3318      	adds	r3, #24
 80086bc:	429a      	cmp	r2, r3
 80086be:	d103      	bne.n	80086c8 <xTaskResumeAll+0x78>
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	6a1a      	ldr	r2, [r3, #32]
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	605a      	str	r2, [r3, #4]
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	2200      	movs	r2, #0
 80086cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	1e5a      	subs	r2, r3, #1
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	695b      	ldr	r3, [r3, #20]
 80086dc:	607b      	str	r3, [r7, #4]
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	68d2      	ldr	r2, [r2, #12]
 80086e6:	609a      	str	r2, [r3, #8]
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	6892      	ldr	r2, [r2, #8]
 80086f0:	605a      	str	r2, [r3, #4]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	685a      	ldr	r2, [r3, #4]
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	3304      	adds	r3, #4
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d103      	bne.n	8008706 <xTaskResumeAll+0xb6>
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	68da      	ldr	r2, [r3, #12]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	605a      	str	r2, [r3, #4]
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	2200      	movs	r2, #0
 800870a:	615a      	str	r2, [r3, #20]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	1e5a      	subs	r2, r3, #1
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800871a:	4b3f      	ldr	r3, [pc, #252]	@ (8008818 <xTaskResumeAll+0x1c8>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	429a      	cmp	r2, r3
 8008720:	d903      	bls.n	800872a <xTaskResumeAll+0xda>
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008726:	4a3c      	ldr	r2, [pc, #240]	@ (8008818 <xTaskResumeAll+0x1c8>)
 8008728:	6013      	str	r3, [r2, #0]
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800872e:	493b      	ldr	r1, [pc, #236]	@ (800881c <xTaskResumeAll+0x1cc>)
 8008730:	4613      	mov	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	440b      	add	r3, r1
 800873a:	3304      	adds	r3, #4
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	603b      	str	r3, [r7, #0]
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	609a      	str	r2, [r3, #8]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	689a      	ldr	r2, [r3, #8]
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	60da      	str	r2, [r3, #12]
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	3204      	adds	r2, #4
 8008756:	605a      	str	r2, [r3, #4]
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	1d1a      	adds	r2, r3, #4
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	609a      	str	r2, [r3, #8]
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008764:	4613      	mov	r3, r2
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4413      	add	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4a2b      	ldr	r2, [pc, #172]	@ (800881c <xTaskResumeAll+0x1cc>)
 800876e:	441a      	add	r2, r3
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	615a      	str	r2, [r3, #20]
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008778:	4928      	ldr	r1, [pc, #160]	@ (800881c <xTaskResumeAll+0x1cc>)
 800877a:	4613      	mov	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	440b      	add	r3, r1
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	1c59      	adds	r1, r3, #1
 8008788:	4824      	ldr	r0, [pc, #144]	@ (800881c <xTaskResumeAll+0x1cc>)
 800878a:	4613      	mov	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4413      	add	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4403      	add	r3, r0
 8008794:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800879a:	4b21      	ldr	r3, [pc, #132]	@ (8008820 <xTaskResumeAll+0x1d0>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d902      	bls.n	80087aa <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 80087a4:	4b1f      	ldr	r3, [pc, #124]	@ (8008824 <xTaskResumeAll+0x1d4>)
 80087a6:	2201      	movs	r2, #1
 80087a8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087aa:	4b1a      	ldr	r3, [pc, #104]	@ (8008814 <xTaskResumeAll+0x1c4>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	f47f af6f 	bne.w	8008692 <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80087ba:	f000 fbf5 	bl	8008fa8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80087be:	4b1a      	ldr	r3, [pc, #104]	@ (8008828 <xTaskResumeAll+0x1d8>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d010      	beq.n	80087ec <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80087ca:	f000 f83f 	bl	800884c <xTaskIncrementTick>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d002      	beq.n	80087da <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 80087d4:	4b13      	ldr	r3, [pc, #76]	@ (8008824 <xTaskResumeAll+0x1d4>)
 80087d6:	2201      	movs	r2, #1
 80087d8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	3b01      	subs	r3, #1
 80087de:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1f1      	bne.n	80087ca <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 80087e6:	4b10      	ldr	r3, [pc, #64]	@ (8008828 <xTaskResumeAll+0x1d8>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80087ec:	4b0d      	ldr	r3, [pc, #52]	@ (8008824 <xTaskResumeAll+0x1d4>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d003      	beq.n	80087fc <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80087f4:	2301      	movs	r3, #1
 80087f6:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80087f8:	f000 ff64 	bl	80096c4 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80087fc:	f000 ff86 	bl	800970c <vPortExitCritical>

    return xAlreadyYielded;
 8008800:	693b      	ldr	r3, [r7, #16]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3718      	adds	r7, #24
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	20000c94 	.word	0x20000c94
 8008810:	20000c6c 	.word	0x20000c6c
 8008814:	20000c2c 	.word	0x20000c2c
 8008818:	20000c74 	.word	0x20000c74
 800881c:	2000079c 	.word	0x2000079c
 8008820:	20000798 	.word	0x20000798
 8008824:	20000c80 	.word	0x20000c80
 8008828:	20000c7c 	.word	0x20000c7c

0800882c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8008832:	4b05      	ldr	r3, [pc, #20]	@ (8008848 <xTaskGetTickCount+0x1c>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8008838:	687b      	ldr	r3, [r7, #4]
}
 800883a:	4618      	mov	r0, r3
 800883c:	370c      	adds	r7, #12
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	20000c70 	.word	0x20000c70

0800884c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b088      	sub	sp, #32
 8008850:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8008852:	2300      	movs	r3, #0
 8008854:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8008856:	4b7a      	ldr	r3, [pc, #488]	@ (8008a40 <xTaskIncrementTick+0x1f4>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	f040 80e6 	bne.w	8008a2c <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008860:	4b78      	ldr	r3, [pc, #480]	@ (8008a44 <xTaskIncrementTick+0x1f8>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	3301      	adds	r3, #1
 8008866:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8008868:	4a76      	ldr	r2, [pc, #472]	@ (8008a44 <xTaskIncrementTick+0x1f8>)
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d119      	bne.n	80088a8 <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 8008874:	4b74      	ldr	r3, [pc, #464]	@ (8008a48 <xTaskIncrementTick+0x1fc>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <xTaskIncrementTick+0x3a>
 800887e:	f001 f8cb 	bl	8009a18 <ulSetInterruptMask>
 8008882:	bf00      	nop
 8008884:	e7fd      	b.n	8008882 <xTaskIncrementTick+0x36>
 8008886:	4b70      	ldr	r3, [pc, #448]	@ (8008a48 <xTaskIncrementTick+0x1fc>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	617b      	str	r3, [r7, #20]
 800888c:	4b6f      	ldr	r3, [pc, #444]	@ (8008a4c <xTaskIncrementTick+0x200>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a6d      	ldr	r2, [pc, #436]	@ (8008a48 <xTaskIncrementTick+0x1fc>)
 8008892:	6013      	str	r3, [r2, #0]
 8008894:	4a6d      	ldr	r2, [pc, #436]	@ (8008a4c <xTaskIncrementTick+0x200>)
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	6013      	str	r3, [r2, #0]
 800889a:	4b6d      	ldr	r3, [pc, #436]	@ (8008a50 <xTaskIncrementTick+0x204>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	3301      	adds	r3, #1
 80088a0:	4a6b      	ldr	r2, [pc, #428]	@ (8008a50 <xTaskIncrementTick+0x204>)
 80088a2:	6013      	str	r3, [r2, #0]
 80088a4:	f000 fb80 	bl	8008fa8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80088a8:	4b6a      	ldr	r3, [pc, #424]	@ (8008a54 <xTaskIncrementTick+0x208>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	69ba      	ldr	r2, [r7, #24]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	f0c0 80a7 	bcc.w	8008a02 <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088b4:	4b64      	ldr	r3, [pc, #400]	@ (8008a48 <xTaskIncrementTick+0x1fc>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d104      	bne.n	80088c8 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088be:	4b65      	ldr	r3, [pc, #404]	@ (8008a54 <xTaskIncrementTick+0x208>)
 80088c0:	f04f 32ff 	mov.w	r2, #4294967295
 80088c4:	601a      	str	r2, [r3, #0]
                    break;
 80088c6:	e09c      	b.n	8008a02 <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088c8:	4b5f      	ldr	r3, [pc, #380]	@ (8008a48 <xTaskIncrementTick+0x1fc>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80088d8:	69ba      	ldr	r2, [r7, #24]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d203      	bcs.n	80088e8 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80088e0:	4a5c      	ldr	r2, [pc, #368]	@ (8008a54 <xTaskIncrementTick+0x208>)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80088e6:	e08c      	b.n	8008a02 <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	695b      	ldr	r3, [r3, #20]
 80088ec:	60bb      	str	r3, [r7, #8]
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	693a      	ldr	r2, [r7, #16]
 80088f4:	68d2      	ldr	r2, [r2, #12]
 80088f6:	609a      	str	r2, [r3, #8]
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	693a      	ldr	r2, [r7, #16]
 80088fe:	6892      	ldr	r2, [r2, #8]
 8008900:	605a      	str	r2, [r3, #4]
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	3304      	adds	r3, #4
 800890a:	429a      	cmp	r2, r3
 800890c:	d103      	bne.n	8008916 <xTaskIncrementTick+0xca>
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	68da      	ldr	r2, [r3, #12]
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	605a      	str	r2, [r3, #4]
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	2200      	movs	r2, #0
 800891a:	615a      	str	r2, [r3, #20]
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	1e5a      	subs	r2, r3, #1
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800892a:	2b00      	cmp	r3, #0
 800892c:	d01e      	beq.n	800896c <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008932:	607b      	str	r3, [r7, #4]
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	69db      	ldr	r3, [r3, #28]
 8008938:	693a      	ldr	r2, [r7, #16]
 800893a:	6a12      	ldr	r2, [r2, #32]
 800893c:	609a      	str	r2, [r3, #8]
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	6a1b      	ldr	r3, [r3, #32]
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	69d2      	ldr	r2, [r2, #28]
 8008946:	605a      	str	r2, [r3, #4]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	685a      	ldr	r2, [r3, #4]
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	3318      	adds	r3, #24
 8008950:	429a      	cmp	r2, r3
 8008952:	d103      	bne.n	800895c <xTaskIncrementTick+0x110>
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	6a1a      	ldr	r2, [r3, #32]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	605a      	str	r2, [r3, #4]
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	2200      	movs	r2, #0
 8008960:	629a      	str	r2, [r3, #40]	@ 0x28
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	1e5a      	subs	r2, r3, #1
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008970:	4b39      	ldr	r3, [pc, #228]	@ (8008a58 <xTaskIncrementTick+0x20c>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	429a      	cmp	r2, r3
 8008976:	d903      	bls.n	8008980 <xTaskIncrementTick+0x134>
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800897c:	4a36      	ldr	r2, [pc, #216]	@ (8008a58 <xTaskIncrementTick+0x20c>)
 800897e:	6013      	str	r3, [r2, #0]
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008984:	4935      	ldr	r1, [pc, #212]	@ (8008a5c <xTaskIncrementTick+0x210>)
 8008986:	4613      	mov	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	440b      	add	r3, r1
 8008990:	3304      	adds	r3, #4
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	603b      	str	r3, [r7, #0]
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	683a      	ldr	r2, [r7, #0]
 800899a:	609a      	str	r2, [r3, #8]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	689a      	ldr	r2, [r3, #8]
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	60da      	str	r2, [r3, #12]
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	693a      	ldr	r2, [r7, #16]
 80089aa:	3204      	adds	r2, #4
 80089ac:	605a      	str	r2, [r3, #4]
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	1d1a      	adds	r2, r3, #4
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	609a      	str	r2, [r3, #8]
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089ba:	4613      	mov	r3, r2
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	4413      	add	r3, r2
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4a26      	ldr	r2, [pc, #152]	@ (8008a5c <xTaskIncrementTick+0x210>)
 80089c4:	441a      	add	r2, r3
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	615a      	str	r2, [r3, #20]
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089ce:	4923      	ldr	r1, [pc, #140]	@ (8008a5c <xTaskIncrementTick+0x210>)
 80089d0:	4613      	mov	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4413      	add	r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	440b      	add	r3, r1
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	1c59      	adds	r1, r3, #1
 80089de:	481f      	ldr	r0, [pc, #124]	@ (8008a5c <xTaskIncrementTick+0x210>)
 80089e0:	4613      	mov	r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4403      	add	r3, r0
 80089ea:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089f0:	4b1b      	ldr	r3, [pc, #108]	@ (8008a60 <xTaskIncrementTick+0x214>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f6:	429a      	cmp	r2, r3
 80089f8:	f67f af5c 	bls.w	80088b4 <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 80089fc:	2301      	movs	r3, #1
 80089fe:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a00:	e758      	b.n	80088b4 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a02:	4b17      	ldr	r3, [pc, #92]	@ (8008a60 <xTaskIncrementTick+0x214>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a08:	4914      	ldr	r1, [pc, #80]	@ (8008a5c <xTaskIncrementTick+0x210>)
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4413      	add	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	440b      	add	r3, r1
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d901      	bls.n	8008a1e <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8008a1e:	4b11      	ldr	r3, [pc, #68]	@ (8008a64 <xTaskIncrementTick+0x218>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d007      	beq.n	8008a36 <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 8008a26:	2301      	movs	r3, #1
 8008a28:	61fb      	str	r3, [r7, #28]
 8008a2a:	e004      	b.n	8008a36 <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8008a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8008a68 <xTaskIncrementTick+0x21c>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	3301      	adds	r3, #1
 8008a32:	4a0d      	ldr	r2, [pc, #52]	@ (8008a68 <xTaskIncrementTick+0x21c>)
 8008a34:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8008a36:	69fb      	ldr	r3, [r7, #28]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3720      	adds	r7, #32
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	20000c94 	.word	0x20000c94
 8008a44:	20000c70 	.word	0x20000c70
 8008a48:	20000c24 	.word	0x20000c24
 8008a4c:	20000c28 	.word	0x20000c28
 8008a50:	20000c84 	.word	0x20000c84
 8008a54:	20000c8c 	.word	0x20000c8c
 8008a58:	20000c74 	.word	0x20000c74
 8008a5c:	2000079c 	.word	0x2000079c
 8008a60:	20000798 	.word	0x20000798
 8008a64:	20000c80 	.word	0x20000c80
 8008a68:	20000c7c 	.word	0x20000c7c

08008a6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8008a72:	4b23      	ldr	r3, [pc, #140]	@ (8008b00 <vTaskSwitchContext+0x94>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d003      	beq.n	8008a82 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8008a7a:	4b22      	ldr	r3, [pc, #136]	@ (8008b04 <vTaskSwitchContext+0x98>)
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8008a80:	e039      	b.n	8008af6 <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 8008a82:	4b20      	ldr	r3, [pc, #128]	@ (8008b04 <vTaskSwitchContext+0x98>)
 8008a84:	2200      	movs	r2, #0
 8008a86:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a88:	4b1f      	ldr	r3, [pc, #124]	@ (8008b08 <vTaskSwitchContext+0x9c>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	607b      	str	r3, [r7, #4]
 8008a8e:	e009      	b.n	8008aa4 <vTaskSwitchContext+0x38>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d103      	bne.n	8008a9e <vTaskSwitchContext+0x32>
 8008a96:	f000 ffbf 	bl	8009a18 <ulSetInterruptMask>
 8008a9a:	bf00      	nop
 8008a9c:	e7fd      	b.n	8008a9a <vTaskSwitchContext+0x2e>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	607b      	str	r3, [r7, #4]
 8008aa4:	4919      	ldr	r1, [pc, #100]	@ (8008b0c <vTaskSwitchContext+0xa0>)
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4413      	add	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	440b      	add	r3, r1
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d0eb      	beq.n	8008a90 <vTaskSwitchContext+0x24>
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	4613      	mov	r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	4413      	add	r3, r2
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	4a12      	ldr	r2, [pc, #72]	@ (8008b0c <vTaskSwitchContext+0xa0>)
 8008ac4:	4413      	add	r3, r2
 8008ac6:	603b      	str	r3, [r7, #0]
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	685a      	ldr	r2, [r3, #4]
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	605a      	str	r2, [r3, #4]
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	685a      	ldr	r2, [r3, #4]
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	3308      	adds	r3, #8
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d103      	bne.n	8008ae6 <vTaskSwitchContext+0x7a>
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	68da      	ldr	r2, [r3, #12]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	605a      	str	r2, [r3, #4]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	4a08      	ldr	r2, [pc, #32]	@ (8008b10 <vTaskSwitchContext+0xa4>)
 8008aee:	6013      	str	r3, [r2, #0]
 8008af0:	4a05      	ldr	r2, [pc, #20]	@ (8008b08 <vTaskSwitchContext+0x9c>)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6013      	str	r3, [r2, #0]
}
 8008af6:	bf00      	nop
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	20000c94 	.word	0x20000c94
 8008b04:	20000c80 	.word	0x20000c80
 8008b08:	20000c74 	.word	0x20000c74
 8008b0c:	2000079c 	.word	0x2000079c
 8008b10:	20000798 	.word	0x20000798

08008b14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d103      	bne.n	8008b2c <vTaskPlaceOnEventList+0x18>
 8008b24:	f000 ff78 	bl	8009a18 <ulSetInterruptMask>
 8008b28:	bf00      	nop
 8008b2a:	e7fd      	b.n	8008b28 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b2c:	4b07      	ldr	r3, [pc, #28]	@ (8008b4c <vTaskPlaceOnEventList+0x38>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	3318      	adds	r3, #24
 8008b32:	4619      	mov	r1, r3
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f7ff f844 	bl	8007bc2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	6838      	ldr	r0, [r7, #0]
 8008b3e:	f000 fa6d 	bl	800901c <prvAddCurrentTaskToDelayedList>
}
 8008b42:	bf00      	nop
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	20000798 	.word	0x20000798

08008b50 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d103      	bne.n	8008b6a <vTaskPlaceOnEventListRestricted+0x1a>
 8008b62:	f000 ff59 	bl	8009a18 <ulSetInterruptMask>
 8008b66:	bf00      	nop
 8008b68:	e7fd      	b.n	8008b66 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	617b      	str	r3, [r7, #20]
 8008b70:	4b15      	ldr	r3, [pc, #84]	@ (8008bc8 <vTaskPlaceOnEventListRestricted+0x78>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	697a      	ldr	r2, [r7, #20]
 8008b76:	61da      	str	r2, [r3, #28]
 8008b78:	4b13      	ldr	r3, [pc, #76]	@ (8008bc8 <vTaskPlaceOnEventListRestricted+0x78>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	6892      	ldr	r2, [r2, #8]
 8008b80:	621a      	str	r2, [r3, #32]
 8008b82:	4b11      	ldr	r3, [pc, #68]	@ (8008bc8 <vTaskPlaceOnEventListRestricted+0x78>)
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	3218      	adds	r2, #24
 8008b8c:	605a      	str	r2, [r3, #4]
 8008b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8008bc8 <vTaskPlaceOnEventListRestricted+0x78>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f103 0218 	add.w	r2, r3, #24
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	609a      	str	r2, [r3, #8]
 8008b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8008bc8 <vTaskPlaceOnEventListRestricted+0x78>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	629a      	str	r2, [r3, #40]	@ 0x28
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	1c5a      	adds	r2, r3, #1
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d002      	beq.n	8008bb8 <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 8008bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8008bb6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008bb8:	6879      	ldr	r1, [r7, #4]
 8008bba:	68b8      	ldr	r0, [r7, #8]
 8008bbc:	f000 fa2e 	bl	800901c <prvAddCurrentTaskToDelayedList>
    }
 8008bc0:	bf00      	nop
 8008bc2:	3718      	adds	r7, #24
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	20000798 	.word	0x20000798

08008bcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b088      	sub	sp, #32
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d103      	bne.n	8008bea <xTaskRemoveFromEventList+0x1e>
 8008be2:	f000 ff19 	bl	8009a18 <ulSetInterruptMask>
 8008be6:	bf00      	nop
 8008be8:	e7fd      	b.n	8008be6 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bee:	617b      	str	r3, [r7, #20]
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	69db      	ldr	r3, [r3, #28]
 8008bf4:	69ba      	ldr	r2, [r7, #24]
 8008bf6:	6a12      	ldr	r2, [r2, #32]
 8008bf8:	609a      	str	r2, [r3, #8]
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	69ba      	ldr	r2, [r7, #24]
 8008c00:	69d2      	ldr	r2, [r2, #28]
 8008c02:	605a      	str	r2, [r3, #4]
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	685a      	ldr	r2, [r3, #4]
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	3318      	adds	r3, #24
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d103      	bne.n	8008c18 <xTaskRemoveFromEventList+0x4c>
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	6a1a      	ldr	r2, [r3, #32]
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	605a      	str	r2, [r3, #4]
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	629a      	str	r2, [r3, #40]	@ 0x28
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	1e5a      	subs	r2, r3, #1
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8008c28:	4b49      	ldr	r3, [pc, #292]	@ (8008d50 <xTaskRemoveFromEventList+0x184>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d15f      	bne.n	8008cf0 <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	695b      	ldr	r3, [r3, #20]
 8008c34:	60fb      	str	r3, [r7, #12]
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	69ba      	ldr	r2, [r7, #24]
 8008c3c:	68d2      	ldr	r2, [r2, #12]
 8008c3e:	609a      	str	r2, [r3, #8]
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	69ba      	ldr	r2, [r7, #24]
 8008c46:	6892      	ldr	r2, [r2, #8]
 8008c48:	605a      	str	r2, [r3, #4]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	685a      	ldr	r2, [r3, #4]
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	3304      	adds	r3, #4
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d103      	bne.n	8008c5e <xTaskRemoveFromEventList+0x92>
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	68da      	ldr	r2, [r3, #12]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	605a      	str	r2, [r3, #4]
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	2200      	movs	r2, #0
 8008c62:	615a      	str	r2, [r3, #20]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	1e5a      	subs	r2, r3, #1
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c72:	4b38      	ldr	r3, [pc, #224]	@ (8008d54 <xTaskRemoveFromEventList+0x188>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d903      	bls.n	8008c82 <xTaskRemoveFromEventList+0xb6>
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c7e:	4a35      	ldr	r2, [pc, #212]	@ (8008d54 <xTaskRemoveFromEventList+0x188>)
 8008c80:	6013      	str	r3, [r2, #0]
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c86:	4934      	ldr	r1, [pc, #208]	@ (8008d58 <xTaskRemoveFromEventList+0x18c>)
 8008c88:	4613      	mov	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	4413      	add	r3, r2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	440b      	add	r3, r1
 8008c92:	3304      	adds	r3, #4
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	60bb      	str	r3, [r7, #8]
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	68ba      	ldr	r2, [r7, #8]
 8008c9c:	609a      	str	r2, [r3, #8]
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	689a      	ldr	r2, [r3, #8]
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	60da      	str	r2, [r3, #12]
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	69ba      	ldr	r2, [r7, #24]
 8008cac:	3204      	adds	r2, #4
 8008cae:	605a      	str	r2, [r3, #4]
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	1d1a      	adds	r2, r3, #4
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	609a      	str	r2, [r3, #8]
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	4413      	add	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4a24      	ldr	r2, [pc, #144]	@ (8008d58 <xTaskRemoveFromEventList+0x18c>)
 8008cc6:	441a      	add	r2, r3
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	615a      	str	r2, [r3, #20]
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cd0:	4921      	ldr	r1, [pc, #132]	@ (8008d58 <xTaskRemoveFromEventList+0x18c>)
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4413      	add	r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	440b      	add	r3, r1
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	1c59      	adds	r1, r3, #1
 8008ce0:	481d      	ldr	r0, [pc, #116]	@ (8008d58 <xTaskRemoveFromEventList+0x18c>)
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	4413      	add	r3, r2
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	4403      	add	r3, r0
 8008cec:	6019      	str	r1, [r3, #0]
 8008cee:	e01b      	b.n	8008d28 <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8008d5c <xTaskRemoveFromEventList+0x190>)
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	613b      	str	r3, [r7, #16]
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	693a      	ldr	r2, [r7, #16]
 8008cfa:	61da      	str	r2, [r3, #28]
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	689a      	ldr	r2, [r3, #8]
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	621a      	str	r2, [r3, #32]
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	69ba      	ldr	r2, [r7, #24]
 8008d0a:	3218      	adds	r2, #24
 8008d0c:	605a      	str	r2, [r3, #4]
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	f103 0218 	add.w	r2, r3, #24
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	609a      	str	r2, [r3, #8]
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	4a10      	ldr	r2, [pc, #64]	@ (8008d5c <xTaskRemoveFromEventList+0x190>)
 8008d1c:	629a      	str	r2, [r3, #40]	@ 0x28
 8008d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8008d5c <xTaskRemoveFromEventList+0x190>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	3301      	adds	r3, #1
 8008d24:	4a0d      	ldr	r2, [pc, #52]	@ (8008d5c <xTaskRemoveFromEventList+0x190>)
 8008d26:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8008d60 <xTaskRemoveFromEventList+0x194>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d905      	bls.n	8008d42 <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8008d36:	2301      	movs	r3, #1
 8008d38:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8008d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8008d64 <xTaskRemoveFromEventList+0x198>)
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	e001      	b.n	8008d46 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 8008d42:	2300      	movs	r3, #0
 8008d44:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8008d46:	69fb      	ldr	r3, [r7, #28]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3720      	adds	r7, #32
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	20000c94 	.word	0x20000c94
 8008d54:	20000c74 	.word	0x20000c74
 8008d58:	2000079c 	.word	0x2000079c
 8008d5c:	20000c2c 	.word	0x20000c2c
 8008d60:	20000798 	.word	0x20000798
 8008d64:	20000c80 	.word	0x20000c80

08008d68 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d70:	4b06      	ldr	r3, [pc, #24]	@ (8008d8c <vTaskInternalSetTimeOutState+0x24>)
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8008d78:	4b05      	ldr	r3, [pc, #20]	@ (8008d90 <vTaskInternalSetTimeOutState+0x28>)
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	605a      	str	r2, [r3, #4]
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr
 8008d8c:	20000c84 	.word	0x20000c84
 8008d90:	20000c70 	.word	0x20000c70

08008d94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b086      	sub	sp, #24
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d103      	bne.n	8008dac <xTaskCheckForTimeOut+0x18>
 8008da4:	f000 fe38 	bl	8009a18 <ulSetInterruptMask>
 8008da8:	bf00      	nop
 8008daa:	e7fd      	b.n	8008da8 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d103      	bne.n	8008dba <xTaskCheckForTimeOut+0x26>
 8008db2:	f000 fe31 	bl	8009a18 <ulSetInterruptMask>
 8008db6:	bf00      	nop
 8008db8:	e7fd      	b.n	8008db6 <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 8008dba:	f000 fc95 	bl	80096e8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8008dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8008e3c <xTaskCheckForTimeOut+0xa8>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	693a      	ldr	r2, [r7, #16]
 8008dca:	1ad3      	subs	r3, r2, r3
 8008dcc:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd6:	d102      	bne.n	8008dde <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	617b      	str	r3, [r7, #20]
 8008ddc:	e026      	b.n	8008e2c <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	4b17      	ldr	r3, [pc, #92]	@ (8008e40 <xTaskCheckForTimeOut+0xac>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d00a      	beq.n	8008e00 <xTaskCheckForTimeOut+0x6c>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d305      	bcc.n	8008e00 <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8008df4:	2301      	movs	r3, #1
 8008df6:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	601a      	str	r2, [r3, #0]
 8008dfe:	e015      	b.n	8008e2c <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d20b      	bcs.n	8008e22 <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	1ad2      	subs	r2, r2, r3
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7ff ffa6 	bl	8008d68 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	617b      	str	r3, [r7, #20]
 8008e20:	e004      	b.n	8008e2c <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	2200      	movs	r2, #0
 8008e26:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8008e2c:	f000 fc6e 	bl	800970c <vPortExitCritical>

    return xReturn;
 8008e30:	697b      	ldr	r3, [r7, #20]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3718      	adds	r7, #24
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	20000c70 	.word	0x20000c70
 8008e40:	20000c84 	.word	0x20000c84

08008e44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e44:	b480      	push	{r7}
 8008e46:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8008e48:	4b03      	ldr	r3, [pc, #12]	@ (8008e58 <vTaskMissedYield+0x14>)
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	601a      	str	r2, [r3, #0]
}
 8008e4e:	bf00      	nop
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr
 8008e58:	20000c80 	.word	0x20000c80

08008e5c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8008e64:	f000 f84a 	bl	8008efc <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e68:	4b03      	ldr	r3, [pc, #12]	@ (8008e78 <prvIdleTask+0x1c>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d9f9      	bls.n	8008e64 <prvIdleTask+0x8>
            {
                taskYIELD();
 8008e70:	f000 fc28 	bl	80096c4 <vPortYield>
        prvCheckTasksWaitingTermination();
 8008e74:	e7f6      	b.n	8008e64 <prvIdleTask+0x8>
 8008e76:	bf00      	nop
 8008e78:	2000079c 	.word	0x2000079c

08008e7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e82:	2300      	movs	r3, #0
 8008e84:	607b      	str	r3, [r7, #4]
 8008e86:	e00c      	b.n	8008ea2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4413      	add	r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	4a12      	ldr	r2, [pc, #72]	@ (8008edc <prvInitialiseTaskLists+0x60>)
 8008e94:	4413      	add	r3, r2
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fe fe66 	bl	8007b68 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	607b      	str	r3, [r7, #4]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2b37      	cmp	r3, #55	@ 0x37
 8008ea6:	d9ef      	bls.n	8008e88 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8008ea8:	480d      	ldr	r0, [pc, #52]	@ (8008ee0 <prvInitialiseTaskLists+0x64>)
 8008eaa:	f7fe fe5d 	bl	8007b68 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8008eae:	480d      	ldr	r0, [pc, #52]	@ (8008ee4 <prvInitialiseTaskLists+0x68>)
 8008eb0:	f7fe fe5a 	bl	8007b68 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8008eb4:	480c      	ldr	r0, [pc, #48]	@ (8008ee8 <prvInitialiseTaskLists+0x6c>)
 8008eb6:	f7fe fe57 	bl	8007b68 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8008eba:	480c      	ldr	r0, [pc, #48]	@ (8008eec <prvInitialiseTaskLists+0x70>)
 8008ebc:	f7fe fe54 	bl	8007b68 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8008ec0:	480b      	ldr	r0, [pc, #44]	@ (8008ef0 <prvInitialiseTaskLists+0x74>)
 8008ec2:	f7fe fe51 	bl	8007b68 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8008ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8008ef4 <prvInitialiseTaskLists+0x78>)
 8008ec8:	4a05      	ldr	r2, [pc, #20]	@ (8008ee0 <prvInitialiseTaskLists+0x64>)
 8008eca:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8008ef8 <prvInitialiseTaskLists+0x7c>)
 8008ece:	4a05      	ldr	r2, [pc, #20]	@ (8008ee4 <prvInitialiseTaskLists+0x68>)
 8008ed0:	601a      	str	r2, [r3, #0]
}
 8008ed2:	bf00      	nop
 8008ed4:	3708      	adds	r7, #8
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	2000079c 	.word	0x2000079c
 8008ee0:	20000bfc 	.word	0x20000bfc
 8008ee4:	20000c10 	.word	0x20000c10
 8008ee8:	20000c2c 	.word	0x20000c2c
 8008eec:	20000c40 	.word	0x20000c40
 8008ef0:	20000c58 	.word	0x20000c58
 8008ef4:	20000c24 	.word	0x20000c24
 8008ef8:	20000c28 	.word	0x20000c28

08008efc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f02:	e019      	b.n	8008f38 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8008f04:	f000 fbf0 	bl	80096e8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f08:	4b10      	ldr	r3, [pc, #64]	@ (8008f4c <prvCheckTasksWaitingTermination+0x50>)
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	3304      	adds	r3, #4
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7fe fe8d 	bl	8007c34 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8008f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8008f50 <prvCheckTasksWaitingTermination+0x54>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	4a0b      	ldr	r2, [pc, #44]	@ (8008f50 <prvCheckTasksWaitingTermination+0x54>)
 8008f22:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8008f24:	4b0b      	ldr	r3, [pc, #44]	@ (8008f54 <prvCheckTasksWaitingTermination+0x58>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8008f54 <prvCheckTasksWaitingTermination+0x58>)
 8008f2c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8008f2e:	f000 fbed 	bl	800970c <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f810 	bl	8008f58 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f38:	4b06      	ldr	r3, [pc, #24]	@ (8008f54 <prvCheckTasksWaitingTermination+0x58>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1e1      	bne.n	8008f04 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8008f40:	bf00      	nop
 8008f42:	bf00      	nop
 8008f44:	3708      	adds	r7, #8
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	20000c40 	.word	0x20000c40
 8008f50:	20000c6c 	.word	0x20000c6c
 8008f54:	20000c54 	.word	0x20000c54

08008f58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d108      	bne.n	8008f7c <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f000 fe04 	bl	8009b7c <vPortFree>
                vPortFree( pxTCB );
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 fe01 	bl	8009b7c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8008f7a:	e011      	b.n	8008fa0 <prvDeleteTCB+0x48>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d103      	bne.n	8008f8e <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 fdf8 	bl	8009b7c <vPortFree>
    }
 8008f8c:	e008      	b.n	8008fa0 <prvDeleteTCB+0x48>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	d003      	beq.n	8008fa0 <prvDeleteTCB+0x48>
 8008f98:	f000 fd3e 	bl	8009a18 <ulSetInterruptMask>
 8008f9c:	bf00      	nop
 8008f9e:	e7fd      	b.n	8008f9c <prvDeleteTCB+0x44>
    }
 8008fa0:	bf00      	nop
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008fa8:	b480      	push	{r7}
 8008faa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fac:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd8 <prvResetNextTaskUnblockTime+0x30>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d104      	bne.n	8008fc0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8008fb6:	4b09      	ldr	r3, [pc, #36]	@ (8008fdc <prvResetNextTaskUnblockTime+0x34>)
 8008fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fbc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8008fbe:	e005      	b.n	8008fcc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008fc0:	4b05      	ldr	r3, [pc, #20]	@ (8008fd8 <prvResetNextTaskUnblockTime+0x30>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a04      	ldr	r2, [pc, #16]	@ (8008fdc <prvResetNextTaskUnblockTime+0x34>)
 8008fca:	6013      	str	r3, [r2, #0]
}
 8008fcc:	bf00      	nop
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	20000c24 	.word	0x20000c24
 8008fdc:	20000c8c 	.word	0x20000c8c

08008fe0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8008fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8009014 <xTaskGetSchedulerState+0x34>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d102      	bne.n	8008ff4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	607b      	str	r3, [r7, #4]
 8008ff2:	e008      	b.n	8009006 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8008ff4:	4b08      	ldr	r3, [pc, #32]	@ (8009018 <xTaskGetSchedulerState+0x38>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d102      	bne.n	8009002 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8008ffc:	2302      	movs	r3, #2
 8008ffe:	607b      	str	r3, [r7, #4]
 8009000:	e001      	b.n	8009006 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8009002:	2300      	movs	r3, #0
 8009004:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8009006:	687b      	ldr	r3, [r7, #4]
    }
 8009008:	4618      	mov	r0, r3
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr
 8009014:	20000c78 	.word	0x20000c78
 8009018:	20000c94 	.word	0x20000c94

0800901c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8009026:	4b2e      	ldr	r3, [pc, #184]	@ (80090e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800902c:	4b2d      	ldr	r3, [pc, #180]	@ (80090e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3304      	adds	r3, #4
 8009032:	4618      	mov	r0, r3
 8009034:	f7fe fdfe 	bl	8007c34 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800903e:	d124      	bne.n	800908a <prvAddCurrentTaskToDelayedList+0x6e>
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d021      	beq.n	800908a <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009046:	4b28      	ldr	r3, [pc, #160]	@ (80090e8 <prvAddCurrentTaskToDelayedList+0xcc>)
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	613b      	str	r3, [r7, #16]
 800904c:	4b25      	ldr	r3, [pc, #148]	@ (80090e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	693a      	ldr	r2, [r7, #16]
 8009052:	609a      	str	r2, [r3, #8]
 8009054:	4b23      	ldr	r3, [pc, #140]	@ (80090e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	693a      	ldr	r2, [r7, #16]
 800905a:	6892      	ldr	r2, [r2, #8]
 800905c:	60da      	str	r2, [r3, #12]
 800905e:	4b21      	ldr	r3, [pc, #132]	@ (80090e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	3204      	adds	r2, #4
 8009068:	605a      	str	r2, [r3, #4]
 800906a:	4b1e      	ldr	r3, [pc, #120]	@ (80090e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	1d1a      	adds	r2, r3, #4
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	609a      	str	r2, [r3, #8]
 8009074:	4b1b      	ldr	r3, [pc, #108]	@ (80090e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a1b      	ldr	r2, [pc, #108]	@ (80090e8 <prvAddCurrentTaskToDelayedList+0xcc>)
 800907a:	615a      	str	r2, [r3, #20]
 800907c:	4b1a      	ldr	r3, [pc, #104]	@ (80090e8 <prvAddCurrentTaskToDelayedList+0xcc>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	3301      	adds	r3, #1
 8009082:	4a19      	ldr	r2, [pc, #100]	@ (80090e8 <prvAddCurrentTaskToDelayedList+0xcc>)
 8009084:	6013      	str	r3, [r2, #0]
 8009086:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8009088:	e026      	b.n	80090d8 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4413      	add	r3, r2
 8009090:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009092:	4b14      	ldr	r3, [pc, #80]	@ (80090e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d209      	bcs.n	80090b6 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090a2:	4b12      	ldr	r3, [pc, #72]	@ (80090ec <prvAddCurrentTaskToDelayedList+0xd0>)
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	4b0f      	ldr	r3, [pc, #60]	@ (80090e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	3304      	adds	r3, #4
 80090ac:	4619      	mov	r1, r3
 80090ae:	4610      	mov	r0, r2
 80090b0:	f7fe fd87 	bl	8007bc2 <vListInsert>
}
 80090b4:	e010      	b.n	80090d8 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090b6:	4b0e      	ldr	r3, [pc, #56]	@ (80090f0 <prvAddCurrentTaskToDelayedList+0xd4>)
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	4b0a      	ldr	r3, [pc, #40]	@ (80090e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	3304      	adds	r3, #4
 80090c0:	4619      	mov	r1, r3
 80090c2:	4610      	mov	r0, r2
 80090c4:	f7fe fd7d 	bl	8007bc2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80090c8:	4b0a      	ldr	r3, [pc, #40]	@ (80090f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d202      	bcs.n	80090d8 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 80090d2:	4a08      	ldr	r2, [pc, #32]	@ (80090f4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6013      	str	r3, [r2, #0]
}
 80090d8:	bf00      	nop
 80090da:	3718      	adds	r7, #24
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	20000c70 	.word	0x20000c70
 80090e4:	20000798 	.word	0x20000798
 80090e8:	20000c58 	.word	0x20000c58
 80090ec:	20000c28 	.word	0x20000c28
 80090f0:	20000c24 	.word	0x20000c24
 80090f4:	20000c8c 	.word	0x20000c8c

080090f8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b088      	sub	sp, #32
 80090fc:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 80090fe:	2300      	movs	r3, #0
 8009100:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8009102:	f000 fa5f 	bl	80095c4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8009106:	4b18      	ldr	r3, [pc, #96]	@ (8009168 <xTimerCreateTimerTask+0x70>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d020      	beq.n	8009150 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800910e:	2300      	movs	r3, #0
 8009110:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 8009112:	2300      	movs	r3, #0
 8009114:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009116:	463a      	mov	r2, r7
 8009118:	1d39      	adds	r1, r7, #4
 800911a:	f107 0308 	add.w	r3, r7, #8
 800911e:	4618      	mov	r0, r3
 8009120:	f7fe fd08 	bl	8007b34 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8009124:	6839      	ldr	r1, [r7, #0]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68ba      	ldr	r2, [r7, #8]
 800912a:	9202      	str	r2, [sp, #8]
 800912c:	9301      	str	r3, [sp, #4]
 800912e:	2302      	movs	r3, #2
 8009130:	9300      	str	r3, [sp, #0]
 8009132:	2300      	movs	r3, #0
 8009134:	460a      	mov	r2, r1
 8009136:	490d      	ldr	r1, [pc, #52]	@ (800916c <xTimerCreateTimerTask+0x74>)
 8009138:	480d      	ldr	r0, [pc, #52]	@ (8009170 <xTimerCreateTimerTask+0x78>)
 800913a:	f7ff f84f 	bl	80081dc <xTaskCreateStatic>
 800913e:	4603      	mov	r3, r0
 8009140:	4a0c      	ldr	r2, [pc, #48]	@ (8009174 <xTimerCreateTimerTask+0x7c>)
 8009142:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 8009144:	4b0b      	ldr	r3, [pc, #44]	@ (8009174 <xTimerCreateTimerTask+0x7c>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 800914c:	2301      	movs	r3, #1
 800914e:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d103      	bne.n	800915e <xTimerCreateTimerTask+0x66>
 8009156:	f000 fc5f 	bl	8009a18 <ulSetInterruptMask>
 800915a:	bf00      	nop
 800915c:	e7fd      	b.n	800915a <xTimerCreateTimerTask+0x62>
        return xReturn;
 800915e:	68fb      	ldr	r3, [r7, #12]
    }
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	20000cc8 	.word	0x20000cc8
 800916c:	0800a5c8 	.word	0x0800a5c8
 8009170:	0800921d 	.word	0x0800921d
 8009174:	20000ccc 	.word	0x20000ccc

08009178 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8009184:	e008      	b.n	8009198 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	699b      	ldr	r3, [r3, #24]
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	4413      	add	r3, r2
 800918e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6a1b      	ldr	r3, [r3, #32]
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	699a      	ldr	r2, [r3, #24]
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	18d1      	adds	r1, r2, r3
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	f000 f8d7 	bl	8009358 <prvInsertTimerInActiveList>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1ea      	bne.n	8009186 <prvReloadTimer+0xe>
        }
    }
 80091b0:	bf00      	nop
 80091b2:	bf00      	nop
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
	...

080091bc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091c6:	4b14      	ldr	r3, [pc, #80]	@ (8009218 <prvProcessExpiredTimer+0x5c>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	3304      	adds	r3, #4
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7fe fd2d 	bl	8007c34 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091e0:	f003 0304 	and.w	r3, r3, #4
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d005      	beq.n	80091f4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80091e8:	683a      	ldr	r2, [r7, #0]
 80091ea:	6879      	ldr	r1, [r7, #4]
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f7ff ffc3 	bl	8009178 <prvReloadTimer>
 80091f2:	e008      	b.n	8009206 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091fa:	f023 0301 	bic.w	r3, r3, #1
 80091fe:	b2da      	uxtb	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	4798      	blx	r3
    }
 800920e:	bf00      	nop
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	20000cc0 	.word	0x20000cc0

0800921c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009224:	f107 0308 	add.w	r3, r7, #8
 8009228:	4618      	mov	r0, r3
 800922a:	f000 f851 	bl	80092d0 <prvGetNextExpireTime>
 800922e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	4619      	mov	r1, r3
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 f805 	bl	8009244 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800923a:	f000 f8cf 	bl	80093dc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800923e:	bf00      	nop
 8009240:	e7f0      	b.n	8009224 <prvTimerTask+0x8>
	...

08009244 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800924e:	f7ff f9f1 	bl	8008634 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009252:	f107 0308 	add.w	r3, r7, #8
 8009256:	4618      	mov	r0, r3
 8009258:	f000 f85e 	bl	8009318 <prvSampleTimeNow>
 800925c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d12a      	bne.n	80092ba <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10a      	bne.n	8009280 <prvProcessTimerOrBlockTask+0x3c>
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	429a      	cmp	r2, r3
 8009270:	d806      	bhi.n	8009280 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8009272:	f7ff f9ed 	bl	8008650 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009276:	68f9      	ldr	r1, [r7, #12]
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f7ff ff9f 	bl	80091bc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800927e:	e01e      	b.n	80092be <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d008      	beq.n	8009298 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009286:	4b10      	ldr	r3, [pc, #64]	@ (80092c8 <prvProcessTimerOrBlockTask+0x84>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d101      	bne.n	8009294 <prvProcessTimerOrBlockTask+0x50>
 8009290:	2301      	movs	r3, #1
 8009292:	e000      	b.n	8009296 <prvProcessTimerOrBlockTask+0x52>
 8009294:	2300      	movs	r3, #0
 8009296:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009298:	4b0c      	ldr	r3, [pc, #48]	@ (80092cc <prvProcessTimerOrBlockTask+0x88>)
 800929a:	6818      	ldr	r0, [r3, #0]
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	4619      	mov	r1, r3
 80092a6:	f7fe ff65 	bl	8008174 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80092aa:	f7ff f9d1 	bl	8008650 <xTaskResumeAll>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d104      	bne.n	80092be <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 80092b4:	f000 fa06 	bl	80096c4 <vPortYield>
    }
 80092b8:	e001      	b.n	80092be <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 80092ba:	f7ff f9c9 	bl	8008650 <xTaskResumeAll>
    }
 80092be:	bf00      	nop
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	20000cc4 	.word	0x20000cc4
 80092cc:	20000cc8 	.word	0x20000cc8

080092d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80092d8:	4b0e      	ldr	r3, [pc, #56]	@ (8009314 <prvGetNextExpireTime+0x44>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d101      	bne.n	80092e6 <prvGetNextExpireTime+0x16>
 80092e2:	2201      	movs	r2, #1
 80092e4:	e000      	b.n	80092e8 <prvGetNextExpireTime+0x18>
 80092e6:	2200      	movs	r2, #0
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d105      	bne.n	8009300 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092f4:	4b07      	ldr	r3, [pc, #28]	@ (8009314 <prvGetNextExpireTime+0x44>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	60fb      	str	r3, [r7, #12]
 80092fe:	e001      	b.n	8009304 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8009300:	2300      	movs	r3, #0
 8009302:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8009304:	68fb      	ldr	r3, [r7, #12]
    }
 8009306:	4618      	mov	r0, r3
 8009308:	3714      	adds	r7, #20
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	20000cc0 	.word	0x20000cc0

08009318 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8009320:	f7ff fa84 	bl	800882c <xTaskGetTickCount>
 8009324:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8009326:	4b0b      	ldr	r3, [pc, #44]	@ (8009354 <prvSampleTimeNow+0x3c>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	429a      	cmp	r2, r3
 800932e:	d205      	bcs.n	800933c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8009330:	f000 f922 	bl	8009578 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	601a      	str	r2, [r3, #0]
 800933a:	e002      	b.n	8009342 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8009342:	4a04      	ldr	r2, [pc, #16]	@ (8009354 <prvSampleTimeNow+0x3c>)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8009348:	68fb      	ldr	r3, [r7, #12]
    }
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	20000cd0 	.word	0x20000cd0

08009358 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8009358:	b580      	push	{r7, lr}
 800935a:	b086      	sub	sp, #24
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
 8009364:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8009366:	2300      	movs	r3, #0
 8009368:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	68fa      	ldr	r2, [r7, #12]
 8009374:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	429a      	cmp	r2, r3
 800937c:	d812      	bhi.n	80093a4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	1ad2      	subs	r2, r2, r3
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	699b      	ldr	r3, [r3, #24]
 8009388:	429a      	cmp	r2, r3
 800938a:	d302      	bcc.n	8009392 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800938c:	2301      	movs	r3, #1
 800938e:	617b      	str	r3, [r7, #20]
 8009390:	e01b      	b.n	80093ca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009392:	4b10      	ldr	r3, [pc, #64]	@ (80093d4 <prvInsertTimerInActiveList+0x7c>)
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	3304      	adds	r3, #4
 800939a:	4619      	mov	r1, r3
 800939c:	4610      	mov	r0, r2
 800939e:	f7fe fc10 	bl	8007bc2 <vListInsert>
 80093a2:	e012      	b.n	80093ca <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d206      	bcs.n	80093ba <prvInsertTimerInActiveList+0x62>
 80093ac:	68ba      	ldr	r2, [r7, #8]
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d302      	bcc.n	80093ba <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80093b4:	2301      	movs	r3, #1
 80093b6:	617b      	str	r3, [r7, #20]
 80093b8:	e007      	b.n	80093ca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093ba:	4b07      	ldr	r3, [pc, #28]	@ (80093d8 <prvInsertTimerInActiveList+0x80>)
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	3304      	adds	r3, #4
 80093c2:	4619      	mov	r1, r3
 80093c4:	4610      	mov	r0, r2
 80093c6:	f7fe fbfc 	bl	8007bc2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80093ca:	697b      	ldr	r3, [r7, #20]
    }
 80093cc:	4618      	mov	r0, r3
 80093ce:	3718      	adds	r7, #24
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	20000cc4 	.word	0x20000cc4
 80093d8:	20000cc0 	.word	0x20000cc0

080093dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80093dc:	b580      	push	{r7, lr}
 80093de:	b088      	sub	sp, #32
 80093e0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093e2:	e0b7      	b.n	8009554 <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	da11      	bge.n	800940e <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80093ea:	1d3b      	adds	r3, r7, #4
 80093ec:	3304      	adds	r3, #4
 80093ee:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d103      	bne.n	80093fe <prvProcessReceivedCommands+0x22>
 80093f6:	f000 fb0f 	bl	8009a18 <ulSetInterruptMask>
 80093fa:	bf00      	nop
 80093fc:	e7fd      	b.n	80093fa <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	69fa      	ldr	r2, [r7, #28]
 8009404:	6850      	ldr	r0, [r2, #4]
 8009406:	69fa      	ldr	r2, [r7, #28]
 8009408:	6892      	ldr	r2, [r2, #8]
 800940a:	4611      	mov	r1, r2
 800940c:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	f2c0 809f 	blt.w	8009554 <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	695b      	ldr	r3, [r3, #20]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d004      	beq.n	800942c <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	3304      	adds	r3, #4
 8009426:	4618      	mov	r0, r3
 8009428:	f7fe fc04 	bl	8007c34 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800942c:	463b      	mov	r3, r7
 800942e:	4618      	mov	r0, r3
 8009430:	f7ff ff72 	bl	8009318 <prvSampleTimeNow>
 8009434:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	3b01      	subs	r3, #1
 800943a:	2b08      	cmp	r3, #8
 800943c:	f200 8087 	bhi.w	800954e <prvProcessReceivedCommands+0x172>
 8009440:	a201      	add	r2, pc, #4	@ (adr r2, 8009448 <prvProcessReceivedCommands+0x6c>)
 8009442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009446:	bf00      	nop
 8009448:	0800946d 	.word	0x0800946d
 800944c:	0800946d 	.word	0x0800946d
 8009450:	080094d5 	.word	0x080094d5
 8009454:	080094e9 	.word	0x080094e9
 8009458:	08009525 	.word	0x08009525
 800945c:	0800946d 	.word	0x0800946d
 8009460:	0800946d 	.word	0x0800946d
 8009464:	080094d5 	.word	0x080094d5
 8009468:	080094e9 	.word	0x080094e9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009472:	f043 0301 	orr.w	r3, r3, #1
 8009476:	b2da      	uxtb	r2, r3
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	18d1      	adds	r1, r2, r3
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	697a      	ldr	r2, [r7, #20]
 800948a:	69b8      	ldr	r0, [r7, #24]
 800948c:	f7ff ff64 	bl	8009358 <prvInsertTimerInActiveList>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d05d      	beq.n	8009552 <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800949c:	f003 0304 	and.w	r3, r3, #4
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d009      	beq.n	80094b8 <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	699b      	ldr	r3, [r3, #24]
 80094aa:	4413      	add	r3, r2
 80094ac:	697a      	ldr	r2, [r7, #20]
 80094ae:	4619      	mov	r1, r3
 80094b0:	69b8      	ldr	r0, [r7, #24]
 80094b2:	f7ff fe61 	bl	8009178 <prvReloadTimer>
 80094b6:	e008      	b.n	80094ca <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094be:	f023 0301 	bic.w	r3, r3, #1
 80094c2:	b2da      	uxtb	r2, r3
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	69b8      	ldr	r0, [r7, #24]
 80094d0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80094d2:	e03e      	b.n	8009552 <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094da:	f023 0301 	bic.w	r3, r3, #1
 80094de:	b2da      	uxtb	r2, r3
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80094e6:	e035      	b.n	8009554 <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094ee:	f043 0301 	orr.w	r3, r3, #1
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80094fa:	68ba      	ldr	r2, [r7, #8]
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d103      	bne.n	8009510 <prvProcessReceivedCommands+0x134>
 8009508:	f000 fa86 	bl	8009a18 <ulSetInterruptMask>
 800950c:	bf00      	nop
 800950e:	e7fd      	b.n	800950c <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009510:	69bb      	ldr	r3, [r7, #24]
 8009512:	699a      	ldr	r2, [r3, #24]
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	18d1      	adds	r1, r2, r3
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	697a      	ldr	r2, [r7, #20]
 800951c:	69b8      	ldr	r0, [r7, #24]
 800951e:	f7ff ff1b 	bl	8009358 <prvInsertTimerInActiveList>
                        break;
 8009522:	e017      	b.n	8009554 <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800952a:	f003 0302 	and.w	r3, r3, #2
 800952e:	2b00      	cmp	r3, #0
 8009530:	d103      	bne.n	800953a <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 8009532:	69b8      	ldr	r0, [r7, #24]
 8009534:	f000 fb22 	bl	8009b7c <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8009538:	e00c      	b.n	8009554 <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009540:	f023 0301 	bic.w	r3, r3, #1
 8009544:	b2da      	uxtb	r2, r3
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800954c:	e002      	b.n	8009554 <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 800954e:	bf00      	nop
 8009550:	e000      	b.n	8009554 <prvProcessReceivedCommands+0x178>
                        break;
 8009552:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009554:	4b07      	ldr	r3, [pc, #28]	@ (8009574 <prvProcessReceivedCommands+0x198>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	1d39      	adds	r1, r7, #4
 800955a:	2200      	movs	r2, #0
 800955c:	4618      	mov	r0, r3
 800955e:	f7fe fc78 	bl	8007e52 <xQueueReceive>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	f47f af3d 	bne.w	80093e4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800956a:	bf00      	nop
 800956c:	bf00      	nop
 800956e:	3720      	adds	r7, #32
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	20000cc8 	.word	0x20000cc8

08009578 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800957e:	e009      	b.n	8009594 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009580:	4b0e      	ldr	r3, [pc, #56]	@ (80095bc <prvSwitchTimerLists+0x44>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800958a:	f04f 31ff 	mov.w	r1, #4294967295
 800958e:	6838      	ldr	r0, [r7, #0]
 8009590:	f7ff fe14 	bl	80091bc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009594:	4b09      	ldr	r3, [pc, #36]	@ (80095bc <prvSwitchTimerLists+0x44>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d1f0      	bne.n	8009580 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800959e:	4b07      	ldr	r3, [pc, #28]	@ (80095bc <prvSwitchTimerLists+0x44>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80095a4:	4b06      	ldr	r3, [pc, #24]	@ (80095c0 <prvSwitchTimerLists+0x48>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a04      	ldr	r2, [pc, #16]	@ (80095bc <prvSwitchTimerLists+0x44>)
 80095aa:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80095ac:	4a04      	ldr	r2, [pc, #16]	@ (80095c0 <prvSwitchTimerLists+0x48>)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6013      	str	r3, [r2, #0]
    }
 80095b2:	bf00      	nop
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	20000cc0 	.word	0x20000cc0
 80095c0:	20000cc4 	.word	0x20000cc4

080095c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80095ca:	f000 f88d 	bl	80096e8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80095ce:	4b15      	ldr	r3, [pc, #84]	@ (8009624 <prvCheckForValidListAndQueue+0x60>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d120      	bne.n	8009618 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 80095d6:	4814      	ldr	r0, [pc, #80]	@ (8009628 <prvCheckForValidListAndQueue+0x64>)
 80095d8:	f7fe fac6 	bl	8007b68 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80095dc:	4813      	ldr	r0, [pc, #76]	@ (800962c <prvCheckForValidListAndQueue+0x68>)
 80095de:	f7fe fac3 	bl	8007b68 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80095e2:	4b13      	ldr	r3, [pc, #76]	@ (8009630 <prvCheckForValidListAndQueue+0x6c>)
 80095e4:	4a10      	ldr	r2, [pc, #64]	@ (8009628 <prvCheckForValidListAndQueue+0x64>)
 80095e6:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80095e8:	4b12      	ldr	r3, [pc, #72]	@ (8009634 <prvCheckForValidListAndQueue+0x70>)
 80095ea:	4a10      	ldr	r2, [pc, #64]	@ (800962c <prvCheckForValidListAndQueue+0x68>)
 80095ec:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80095ee:	2300      	movs	r3, #0
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	4b11      	ldr	r3, [pc, #68]	@ (8009638 <prvCheckForValidListAndQueue+0x74>)
 80095f4:	4a11      	ldr	r2, [pc, #68]	@ (800963c <prvCheckForValidListAndQueue+0x78>)
 80095f6:	2110      	movs	r1, #16
 80095f8:	200a      	movs	r0, #10
 80095fa:	f7fe fbbe 	bl	8007d7a <xQueueGenericCreateStatic>
 80095fe:	4603      	mov	r3, r0
 8009600:	4a08      	ldr	r2, [pc, #32]	@ (8009624 <prvCheckForValidListAndQueue+0x60>)
 8009602:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8009604:	4b07      	ldr	r3, [pc, #28]	@ (8009624 <prvCheckForValidListAndQueue+0x60>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d005      	beq.n	8009618 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800960c:	4b05      	ldr	r3, [pc, #20]	@ (8009624 <prvCheckForValidListAndQueue+0x60>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	490b      	ldr	r1, [pc, #44]	@ (8009640 <prvCheckForValidListAndQueue+0x7c>)
 8009612:	4618      	mov	r0, r3
 8009614:	f7fe fd68 	bl	80080e8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8009618:	f000 f878 	bl	800970c <vPortExitCritical>
    }
 800961c:	bf00      	nop
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	20000cc8 	.word	0x20000cc8
 8009628:	20000c98 	.word	0x20000c98
 800962c:	20000cac 	.word	0x20000cac
 8009630:	20000cc0 	.word	0x20000cc0
 8009634:	20000cc4 	.word	0x20000cc4
 8009638:	20000d74 	.word	0x20000d74
 800963c:	20000cd4 	.word	0x20000cd4
 8009640:	0800a5d0 	.word	0x0800a5d0

08009644 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8009644:	b480      	push	{r7}
 8009646:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009648:	4b0b      	ldr	r3, [pc, #44]	@ (8009678 <vPortSetupTimerInterrupt+0x34>)
 800964a:	2200      	movs	r2, #0
 800964c:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800964e:	4b0b      	ldr	r3, [pc, #44]	@ (800967c <vPortSetupTimerInterrupt+0x38>)
 8009650:	2200      	movs	r2, #0
 8009652:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009654:	4b0a      	ldr	r3, [pc, #40]	@ (8009680 <vPortSetupTimerInterrupt+0x3c>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a0a      	ldr	r2, [pc, #40]	@ (8009684 <vPortSetupTimerInterrupt+0x40>)
 800965a:	fba2 2303 	umull	r2, r3, r2, r3
 800965e:	099b      	lsrs	r3, r3, #6
 8009660:	4a09      	ldr	r2, [pc, #36]	@ (8009688 <vPortSetupTimerInterrupt+0x44>)
 8009662:	3b01      	subs	r3, #1
 8009664:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8009666:	4b04      	ldr	r3, [pc, #16]	@ (8009678 <vPortSetupTimerInterrupt+0x34>)
 8009668:	2207      	movs	r2, #7
 800966a:	601a      	str	r2, [r3, #0]
}
 800966c:	bf00      	nop
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	e000e010 	.word	0xe000e010
 800967c:	e000e018 	.word	0xe000e018
 8009680:	20000018 	.word	0x20000018
 8009684:	10624dd3 	.word	0x10624dd3
 8009688:	e000e014 	.word	0xe000e014

0800968c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8009692:	2300      	movs	r3, #0
 8009694:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 8009696:	4b0a      	ldr	r3, [pc, #40]	@ (80096c0 <prvTaskExitError+0x34>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800969e:	d003      	beq.n	80096a8 <prvTaskExitError+0x1c>
 80096a0:	f000 f9ba 	bl	8009a18 <ulSetInterruptMask>
 80096a4:	bf00      	nop
 80096a6:	e7fd      	b.n	80096a4 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 80096a8:	f000 f9b6 	bl	8009a18 <ulSetInterruptMask>

    while( ulDummy == 0 )
 80096ac:	bf00      	nop
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d0fc      	beq.n	80096ae <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 80096b4:	bf00      	nop
 80096b6:	bf00      	nop
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	20000024 	.word	0x20000024

080096c4 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 80096c4:	b480      	push	{r7}
 80096c6:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80096c8:	4b06      	ldr	r3, [pc, #24]	@ (80096e4 <vPortYield+0x20>)
 80096ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096ce:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 80096d0:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 80096d4:	f3bf 8f6f 	isb	sy
}
 80096d8:	bf00      	nop
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	e000ed04 	.word	0xe000ed04

080096e8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80096ec:	f000 f994 	bl	8009a18 <ulSetInterruptMask>
    ulCriticalNesting++;
 80096f0:	4b05      	ldr	r3, [pc, #20]	@ (8009708 <vPortEnterCritical+0x20>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	3301      	adds	r3, #1
 80096f6:	4a04      	ldr	r2, [pc, #16]	@ (8009708 <vPortEnterCritical+0x20>)
 80096f8:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 80096fa:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 80096fe:	f3bf 8f6f 	isb	sy
}
 8009702:	bf00      	nop
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	20000024 	.word	0x20000024

0800970c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800970c:	b580      	push	{r7, lr}
 800970e:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 8009710:	4b0a      	ldr	r3, [pc, #40]	@ (800973c <vPortExitCritical+0x30>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d103      	bne.n	8009720 <vPortExitCritical+0x14>
 8009718:	f000 f97e 	bl	8009a18 <ulSetInterruptMask>
 800971c:	bf00      	nop
 800971e:	e7fd      	b.n	800971c <vPortExitCritical+0x10>
    ulCriticalNesting--;
 8009720:	4b06      	ldr	r3, [pc, #24]	@ (800973c <vPortExitCritical+0x30>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	3b01      	subs	r3, #1
 8009726:	4a05      	ldr	r2, [pc, #20]	@ (800973c <vPortExitCritical+0x30>)
 8009728:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800972a:	4b04      	ldr	r3, [pc, #16]	@ (800973c <vPortExitCritical+0x30>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d102      	bne.n	8009738 <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 8009732:	2000      	movs	r0, #0
 8009734:	f000 f97d 	bl	8009a32 <vClearInterruptMask>
    }
}
 8009738:	bf00      	nop
 800973a:	bd80      	pop	{r7, pc}
 800973c:	20000024 	.word	0x20000024

08009740 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8009746:	f000 f967 	bl	8009a18 <ulSetInterruptMask>
 800974a:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800974c:	f7ff f87e 	bl	800884c <xTaskIncrementTick>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d003      	beq.n	800975e <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009756:	4b05      	ldr	r3, [pc, #20]	@ (800976c <xPortSysTickHandler+0x2c>)
 8009758:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800975c:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f967 	bl	8009a32 <vClearInterruptMask>
}
 8009764:	bf00      	nop
 8009766:	3708      	adds	r7, #8
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	e000ed04 	.word	0xe000ed04

08009770 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	699b      	ldr	r3, [r3, #24]
 800977c:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	3b02      	subs	r3, #2
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 8009786:	7afb      	ldrb	r3, [r7, #11]
 8009788:	2b66      	cmp	r3, #102	@ 0x66
 800978a:	d102      	bne.n	8009792 <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800978c:	f000 f910 	bl	80099b0 <vRestoreContextOfFirstTask>
            break;
 8009790:	e003      	b.n	800979a <vPortSVCHandler_C+0x2a>
                break;
        #endif /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 1 ) */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 8009792:	f000 f941 	bl	8009a18 <ulSetInterruptMask>
 8009796:	bf00      	nop
 8009798:	e7fd      	b.n	8009796 <vPortSVCHandler_C+0x26>
    }
}
 800979a:	bf00      	nop
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
	...

080097a4 <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	607a      	str	r2, [r7, #4]
 80097b0:	603b      	str	r3, [r7, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	3b04      	subs	r3, #4
 80097b6:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80097be:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	3b04      	subs	r3, #4
 80097c4:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	3b04      	subs	r3, #4
 80097d0:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
 80097d2:	4a38      	ldr	r2, [pc, #224]	@ (80098b4 <pxPortInitialiseStack+0x110>)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	3b04      	subs	r3, #4
 80097dc:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 80097e4:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	3b04      	subs	r3, #4
 80097ea:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 80097f2:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	3b04      	subs	r3, #4
 80097f8:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 8009800:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	3b04      	subs	r3, #4
 8009806:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 800980e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	3b04      	subs	r3, #4
 8009814:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	3b04      	subs	r3, #4
 8009820:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8009828:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	3b04      	subs	r3, #4
 800982e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8009836:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	3b04      	subs	r3, #4
 800983c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 8009844:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	3b04      	subs	r3, #4
 800984a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 8009852:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	3b04      	subs	r3, #4
 8009858:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 8009860:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	3b04      	subs	r3, #4
 8009866:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 800986e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	3b04      	subs	r3, #4
 8009874:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 800987c:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	3b04      	subs	r3, #4
 8009882:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 800988a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	3b04      	subs	r3, #4
 8009890:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 8009898:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	3b04      	subs	r3, #4
 800989e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 80098a0:	68ba      	ldr	r2, [r7, #8]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	601a      	str	r2, [r3, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
 80098a6:	68fb      	ldr	r3, [r7, #12]
    }
 80098a8:	4618      	mov	r0, r3
 80098aa:	3714      	adds	r7, #20
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr
 80098b4:	0800968d 	.word	0x0800968d

080098b8 <xPortStartScheduler>:

#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80098be:	2300      	movs	r3, #0
 80098c0:	60bb      	str	r3, [r7, #8]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = portNVIC_SHPR2_REG;
 80098c2:	4b35      	ldr	r3, [pc, #212]	@ (8009998 <xPortStartScheduler+0xe0>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	60fb      	str	r3, [r7, #12]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        portNVIC_SHPR2_REG = 0xFF000000;
 80098c8:	4b33      	ldr	r3, [pc, #204]	@ (8009998 <xPortStartScheduler+0xe0>)
 80098ca:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80098ce:	601a      	str	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 80098d0:	4b31      	ldr	r3, [pc, #196]	@ (8009998 <xPortStartScheduler+0xe0>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	0e1b      	lsrs	r3, r3, #24
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80098da:	79fb      	ldrb	r3, [r7, #7]
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80098e2:	b2da      	uxtb	r2, r3
 80098e4:	4b2d      	ldr	r3, [pc, #180]	@ (800999c <xPortStartScheduler+0xe4>)
 80098e6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80098e8:	4b2c      	ldr	r3, [pc, #176]	@ (800999c <xPortStartScheduler+0xe4>)
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d103      	bne.n	80098f8 <xPortStartScheduler+0x40>
 80098f0:	f000 f892 	bl	8009a18 <ulSetInterruptMask>
 80098f4:	bf00      	nop
 80098f6:	e7fd      	b.n	80098f4 <xPortStartScheduler+0x3c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 80098f8:	79fb      	ldrb	r3, [r7, #7]
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	43db      	mvns	r3, r3
 80098fe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00b      	beq.n	800991e <xPortStartScheduler+0x66>
 8009906:	f000 f887 	bl	8009a18 <ulSetInterruptMask>
 800990a:	bf00      	nop
 800990c:	e7fd      	b.n	800990a <xPortStartScheduler+0x52>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	3301      	adds	r3, #1
 8009912:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009914:	79fb      	ldrb	r3, [r7, #7]
 8009916:	b2db      	uxtb	r3, r3
 8009918:	005b      	lsls	r3, r3, #1
 800991a:	b2db      	uxtb	r3, r3
 800991c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800991e:	79fb      	ldrb	r3, [r7, #7]
 8009920:	b2db      	uxtb	r3, r3
 8009922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009926:	2b80      	cmp	r3, #128	@ 0x80
 8009928:	d0f1      	beq.n	800990e <xPortStartScheduler+0x56>
        }

        if( ulImplementedPrioBits == 8 )
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	2b08      	cmp	r3, #8
 800992e:	d103      	bne.n	8009938 <xPortStartScheduler+0x80>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8009930:	4b1b      	ldr	r3, [pc, #108]	@ (80099a0 <xPortStartScheduler+0xe8>)
 8009932:	2200      	movs	r2, #0
 8009934:	601a      	str	r2, [r3, #0]
 8009936:	e004      	b.n	8009942 <xPortStartScheduler+0x8a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	f1c3 0307 	rsb	r3, r3, #7
 800993e:	4a18      	ldr	r2, [pc, #96]	@ (80099a0 <xPortStartScheduler+0xe8>)
 8009940:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009942:	4b17      	ldr	r3, [pc, #92]	@ (80099a0 <xPortStartScheduler+0xe8>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	021b      	lsls	r3, r3, #8
 8009948:	4a15      	ldr	r2, [pc, #84]	@ (80099a0 <xPortStartScheduler+0xe8>)
 800994a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800994c:	4b14      	ldr	r3, [pc, #80]	@ (80099a0 <xPortStartScheduler+0xe8>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009954:	4a12      	ldr	r2, [pc, #72]	@ (80099a0 <xPortStartScheduler+0xe8>)
 8009956:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        portNVIC_SHPR2_REG = ulOriginalPriority;
 8009958:	4a0f      	ldr	r2, [pc, #60]	@ (8009998 <xPortStartScheduler+0xe0>)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	6013      	str	r3, [r2, #0]
    }
    #endif /* #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) ) */

    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800995e:	4b11      	ldr	r3, [pc, #68]	@ (80099a4 <xPortStartScheduler+0xec>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a10      	ldr	r2, [pc, #64]	@ (80099a4 <xPortStartScheduler+0xec>)
 8009964:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009968:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800996a:	4b0e      	ldr	r3, [pc, #56]	@ (80099a4 <xPortStartScheduler+0xec>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a0d      	ldr	r2, [pc, #52]	@ (80099a4 <xPortStartScheduler+0xec>)
 8009970:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009974:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8009976:	f7ff fe65 	bl	8009644 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800997a:	4b0b      	ldr	r3, [pc, #44]	@ (80099a8 <xPortStartScheduler+0xf0>)
 800997c:	2200      	movs	r2, #0
 800997e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif

    /* Start the first task. */
    vStartFirstTask();
 8009980:	f000 f836 	bl	80099f0 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 8009984:	f7ff f872 	bl	8008a6c <vTaskSwitchContext>
    prvTaskExitError();
 8009988:	f7ff fe80 	bl	800968c <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	e000ed1c 	.word	0xe000ed1c
 800999c:	20000dc4 	.word	0x20000dc4
 80099a0:	20000dc8 	.word	0x20000dc8
 80099a4:	e000ed20 	.word	0xe000ed20
 80099a8:	20000024 	.word	0x20000024
 80099ac:	00000000 	.word	0x00000000

080099b0 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 80099b0:	4a0b      	ldr	r2, [pc, #44]	@ (80099e0 <pxCurrentTCBConst2>)
 80099b2:	6811      	ldr	r1, [r2, #0]
 80099b4:	6808      	ldr	r0, [r1, #0]
 80099b6:	c806      	ldmia	r0!, {r1, r2}
 80099b8:	f381 880b 	msr	PSPLIM, r1
 80099bc:	2102      	movs	r1, #2
 80099be:	f381 8814 	msr	CONTROL, r1
 80099c2:	3020      	adds	r0, #32
 80099c4:	f380 8809 	msr	PSP, r0
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f04f 0000 	mov.w	r0, #0
 80099d0:	f380 8811 	msr	BASEPRI, r0
 80099d4:	4710      	bx	r2
 80099d6:	bf00      	nop
 80099d8:	f3af 8000 	nop.w
 80099dc:	f3af 8000 	nop.w

080099e0 <pxCurrentTCBConst2>:
 80099e0:	20000798 	.word	0x20000798
            "   bx   r2                                         \n" /* Finally, branch to EXC_RETURN. */
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
    }
 80099e4:	bf00      	nop
 80099e6:	bf00      	nop
	...

080099f0 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 80099f0:	4807      	ldr	r0, [pc, #28]	@ (8009a10 <xVTORConst>)
 80099f2:	6800      	ldr	r0, [r0, #0]
 80099f4:	6800      	ldr	r0, [r0, #0]
 80099f6:	f380 8808 	msr	MSP, r0
 80099fa:	b662      	cpsie	i
 80099fc:	b661      	cpsie	f
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	df66      	svc	102	@ 0x66
 8009a08:	bf00      	nop
 8009a0a:	bf00      	nop
 8009a0c:	f3af 8000 	nop.w

08009a10 <xVTORConst>:
 8009a10:	e000ed08 	.word	0xe000ed08
        "                                                   \n"
        "   .align 4                                        \n"
        "xVTORConst: .word 0xe000ed08                       \n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 8009a14:	bf00      	nop
 8009a16:	bf00      	nop

08009a18 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8009a18:	f3ef 8011 	mrs	r0, BASEPRI
 8009a1c:	f04f 0150 	mov.w	r1, #80	@ 0x50
 8009a20:	f381 8811 	msr	BASEPRI, r1
 8009a24:	f3bf 8f4f 	dsb	sy
 8009a28:	f3bf 8f6f 	isb	sy
 8009a2c:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8009a2e:	bf00      	nop
 8009a30:	4618      	mov	r0, r3

08009a32 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8009a32:	f380 8811 	msr	BASEPRI, r0
 8009a36:	f3bf 8f4f 	dsb	sy
 8009a3a:	f3bf 8f6f 	isb	sy
 8009a3e:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::: "memory"
    );
}
 8009a40:	bf00      	nop
	...

08009a50 <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8009a50:	f3ef 8009 	mrs	r0, PSP
 8009a54:	f3ef 820b 	mrs	r2, PSPLIM
 8009a58:	4673      	mov	r3, lr
 8009a5a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8009a5e:	4a10      	ldr	r2, [pc, #64]	@ (8009aa0 <pxCurrentTCBConst>)
 8009a60:	6811      	ldr	r1, [r2, #0]
 8009a62:	6008      	str	r0, [r1, #0]
 8009a64:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009a68:	f380 8811 	msr	BASEPRI, r0
 8009a6c:	f3bf 8f4f 	dsb	sy
 8009a70:	f3bf 8f6f 	isb	sy
 8009a74:	f7fe fffa 	bl	8008a6c <vTaskSwitchContext>
 8009a78:	f04f 0000 	mov.w	r0, #0
 8009a7c:	f380 8811 	msr	BASEPRI, r0
 8009a80:	4a07      	ldr	r2, [pc, #28]	@ (8009aa0 <pxCurrentTCBConst>)
 8009a82:	6811      	ldr	r1, [r2, #0]
 8009a84:	6808      	ldr	r0, [r1, #0]
 8009a86:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8009a8a:	f382 880b 	msr	PSPLIM, r2
 8009a8e:	f380 8809 	msr	PSP, r0
 8009a92:	4718      	bx	r3
 8009a94:	f3af 8000 	nop.w
 8009a98:	f3af 8000 	nop.w
 8009a9c:	f3af 8000 	nop.w

08009aa0 <pxCurrentTCBConst>:
 8009aa0:	20000798 	.word	0x20000798
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst: .word pxCurrentTCB              \n"
            ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
        );
    }
 8009aa4:	bf00      	nop
 8009aa6:	bf00      	nop
	...

08009ab0 <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8009ab0:	f01e 0f04 	tst.w	lr, #4
 8009ab4:	bf0c      	ite	eq
 8009ab6:	f3ef 8008 	mrseq	r0, MSP
 8009aba:	f3ef 8009 	mrsne	r0, PSP
 8009abe:	4904      	ldr	r1, [pc, #16]	@ (8009ad0 <svchandler_address_const>)
 8009ac0:	4708      	bx	r1
 8009ac2:	bf00      	nop
 8009ac4:	f3af 8000 	nop.w
 8009ac8:	f3af 8000 	nop.w
 8009acc:	f3af 8000 	nop.w

08009ad0 <svchandler_address_const>:
 8009ad0:	08009771 	.word	0x08009771
            "   bx r1                                           \n"
            "                                                   \n"
            "   .align 4                                        \n"
            "svchandler_address_const: .word vPortSVCHandler_C  \n"
        );
    }
 8009ad4:	bf00      	nop
 8009ad6:	bf00      	nop

08009ad8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f003 0307 	and.w	r3, r3, #7
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00e      	beq.n	8009b0c <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f023 0307 	bic.w	r3, r3, #7
 8009af4:	3308      	adds	r3, #8
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d205      	bcs.n	8009b08 <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f023 0307 	bic.w	r3, r3, #7
 8009b02:	3308      	adds	r3, #8
 8009b04:	607b      	str	r3, [r7, #4]
 8009b06:	e001      	b.n	8009b0c <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8009b0c:	f7fe fd92 	bl	8008634 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8009b10:	4b17      	ldr	r3, [pc, #92]	@ (8009b70 <pvPortMalloc+0x98>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d105      	bne.n	8009b24 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8009b18:	4b16      	ldr	r3, [pc, #88]	@ (8009b74 <pvPortMalloc+0x9c>)
 8009b1a:	f023 0307 	bic.w	r3, r3, #7
 8009b1e:	461a      	mov	r2, r3
 8009b20:	4b13      	ldr	r3, [pc, #76]	@ (8009b70 <pvPortMalloc+0x98>)
 8009b22:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d01b      	beq.n	8009b62 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8009b2a:	4b13      	ldr	r3, [pc, #76]	@ (8009b78 <pvPortMalloc+0xa0>)
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8009b32:	f641 72f7 	movw	r2, #8183	@ 0x1ff7
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d813      	bhi.n	8009b62 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8009b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8009b78 <pvPortMalloc+0xa0>)
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	441a      	add	r2, r3
 8009b42:	4b0d      	ldr	r3, [pc, #52]	@ (8009b78 <pvPortMalloc+0xa0>)
 8009b44:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d90b      	bls.n	8009b62 <pvPortMalloc+0x8a>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8009b4a:	4b09      	ldr	r3, [pc, #36]	@ (8009b70 <pvPortMalloc+0x98>)
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8009b78 <pvPortMalloc+0xa0>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4413      	add	r3, r2
 8009b54:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8009b56:	4b08      	ldr	r3, [pc, #32]	@ (8009b78 <pvPortMalloc+0xa0>)
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	4a06      	ldr	r2, [pc, #24]	@ (8009b78 <pvPortMalloc+0xa0>)
 8009b60:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8009b62:	f7fe fd75 	bl	8008650 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8009b66:	68fb      	ldr	r3, [r7, #12]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3710      	adds	r7, #16
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	20002dd0 	.word	0x20002dd0
 8009b74:	20000dd3 	.word	0x20000dd3
 8009b78:	20002dcc 	.word	0x20002dcc

08009b7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d003      	beq.n	8009b92 <vPortFree+0x16>
 8009b8a:	f7ff ff45 	bl	8009a18 <ulSetInterruptMask>
 8009b8e:	bf00      	nop
 8009b90:	e7fd      	b.n	8009b8e <vPortFree+0x12>
}
 8009b92:	bf00      	nop
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
	...

08009b9c <sniprintf>:
 8009b9c:	b40c      	push	{r2, r3}
 8009b9e:	4b19      	ldr	r3, [pc, #100]	@ (8009c04 <sniprintf+0x68>)
 8009ba0:	b530      	push	{r4, r5, lr}
 8009ba2:	1e0c      	subs	r4, r1, #0
 8009ba4:	b09d      	sub	sp, #116	@ 0x74
 8009ba6:	681d      	ldr	r5, [r3, #0]
 8009ba8:	da08      	bge.n	8009bbc <sniprintf+0x20>
 8009baa:	238b      	movs	r3, #139	@ 0x8b
 8009bac:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb0:	602b      	str	r3, [r5, #0]
 8009bb2:	b01d      	add	sp, #116	@ 0x74
 8009bb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bb8:	b002      	add	sp, #8
 8009bba:	4770      	bx	lr
 8009bbc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009bc0:	9002      	str	r0, [sp, #8]
 8009bc2:	9006      	str	r0, [sp, #24]
 8009bc4:	a902      	add	r1, sp, #8
 8009bc6:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009bca:	f04f 0300 	mov.w	r3, #0
 8009bce:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009bd4:	bf14      	ite	ne
 8009bd6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009bda:	4623      	moveq	r3, r4
 8009bdc:	9304      	str	r3, [sp, #16]
 8009bde:	9307      	str	r3, [sp, #28]
 8009be0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009be4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009be8:	ab21      	add	r3, sp, #132	@ 0x84
 8009bea:	9301      	str	r3, [sp, #4]
 8009bec:	f000 f9a2 	bl	8009f34 <_svfiprintf_r>
 8009bf0:	1c43      	adds	r3, r0, #1
 8009bf2:	bfbc      	itt	lt
 8009bf4:	238b      	movlt	r3, #139	@ 0x8b
 8009bf6:	602b      	strlt	r3, [r5, #0]
 8009bf8:	2c00      	cmp	r4, #0
 8009bfa:	d0da      	beq.n	8009bb2 <sniprintf+0x16>
 8009bfc:	9b02      	ldr	r3, [sp, #8]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	701a      	strb	r2, [r3, #0]
 8009c02:	e7d6      	b.n	8009bb2 <sniprintf+0x16>
 8009c04:	20000028 	.word	0x20000028

08009c08 <memset>:
 8009c08:	4402      	add	r2, r0
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d100      	bne.n	8009c12 <memset+0xa>
 8009c10:	4770      	bx	lr
 8009c12:	f803 1b01 	strb.w	r1, [r3], #1
 8009c16:	e7f9      	b.n	8009c0c <memset+0x4>

08009c18 <__errno>:
 8009c18:	4b01      	ldr	r3, [pc, #4]	@ (8009c20 <__errno+0x8>)
 8009c1a:	6818      	ldr	r0, [r3, #0]
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	20000028 	.word	0x20000028

08009c24 <__libc_init_array>:
 8009c24:	b570      	push	{r4, r5, r6, lr}
 8009c26:	4d0d      	ldr	r5, [pc, #52]	@ (8009c5c <__libc_init_array+0x38>)
 8009c28:	2600      	movs	r6, #0
 8009c2a:	4c0d      	ldr	r4, [pc, #52]	@ (8009c60 <__libc_init_array+0x3c>)
 8009c2c:	1b64      	subs	r4, r4, r5
 8009c2e:	10a4      	asrs	r4, r4, #2
 8009c30:	42a6      	cmp	r6, r4
 8009c32:	d109      	bne.n	8009c48 <__libc_init_array+0x24>
 8009c34:	4d0b      	ldr	r5, [pc, #44]	@ (8009c64 <__libc_init_array+0x40>)
 8009c36:	2600      	movs	r6, #0
 8009c38:	4c0b      	ldr	r4, [pc, #44]	@ (8009c68 <__libc_init_array+0x44>)
 8009c3a:	f000 fc75 	bl	800a528 <_init>
 8009c3e:	1b64      	subs	r4, r4, r5
 8009c40:	10a4      	asrs	r4, r4, #2
 8009c42:	42a6      	cmp	r6, r4
 8009c44:	d105      	bne.n	8009c52 <__libc_init_array+0x2e>
 8009c46:	bd70      	pop	{r4, r5, r6, pc}
 8009c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c4c:	3601      	adds	r6, #1
 8009c4e:	4798      	blx	r3
 8009c50:	e7ee      	b.n	8009c30 <__libc_init_array+0xc>
 8009c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c56:	3601      	adds	r6, #1
 8009c58:	4798      	blx	r3
 8009c5a:	e7f2      	b.n	8009c42 <__libc_init_array+0x1e>
 8009c5c:	0800a670 	.word	0x0800a670
 8009c60:	0800a670 	.word	0x0800a670
 8009c64:	0800a670 	.word	0x0800a670
 8009c68:	0800a674 	.word	0x0800a674

08009c6c <__retarget_lock_acquire_recursive>:
 8009c6c:	4770      	bx	lr

08009c6e <__retarget_lock_release_recursive>:
 8009c6e:	4770      	bx	lr

08009c70 <memcpy>:
 8009c70:	440a      	add	r2, r1
 8009c72:	1e43      	subs	r3, r0, #1
 8009c74:	4291      	cmp	r1, r2
 8009c76:	d100      	bne.n	8009c7a <memcpy+0xa>
 8009c78:	4770      	bx	lr
 8009c7a:	b510      	push	{r4, lr}
 8009c7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c80:	4291      	cmp	r1, r2
 8009c82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c86:	d1f9      	bne.n	8009c7c <memcpy+0xc>
 8009c88:	bd10      	pop	{r4, pc}
	...

08009c8c <_free_r>:
 8009c8c:	b538      	push	{r3, r4, r5, lr}
 8009c8e:	4605      	mov	r5, r0
 8009c90:	2900      	cmp	r1, #0
 8009c92:	d041      	beq.n	8009d18 <_free_r+0x8c>
 8009c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c98:	1f0c      	subs	r4, r1, #4
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	bfb8      	it	lt
 8009c9e:	18e4      	addlt	r4, r4, r3
 8009ca0:	f000 f8e0 	bl	8009e64 <__malloc_lock>
 8009ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8009d1c <_free_r+0x90>)
 8009ca6:	6813      	ldr	r3, [r2, #0]
 8009ca8:	b933      	cbnz	r3, 8009cb8 <_free_r+0x2c>
 8009caa:	6063      	str	r3, [r4, #4]
 8009cac:	6014      	str	r4, [r2, #0]
 8009cae:	4628      	mov	r0, r5
 8009cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cb4:	f000 b8dc 	b.w	8009e70 <__malloc_unlock>
 8009cb8:	42a3      	cmp	r3, r4
 8009cba:	d908      	bls.n	8009cce <_free_r+0x42>
 8009cbc:	6820      	ldr	r0, [r4, #0]
 8009cbe:	1821      	adds	r1, r4, r0
 8009cc0:	428b      	cmp	r3, r1
 8009cc2:	bf01      	itttt	eq
 8009cc4:	6819      	ldreq	r1, [r3, #0]
 8009cc6:	685b      	ldreq	r3, [r3, #4]
 8009cc8:	1809      	addeq	r1, r1, r0
 8009cca:	6021      	streq	r1, [r4, #0]
 8009ccc:	e7ed      	b.n	8009caa <_free_r+0x1e>
 8009cce:	461a      	mov	r2, r3
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	b10b      	cbz	r3, 8009cd8 <_free_r+0x4c>
 8009cd4:	42a3      	cmp	r3, r4
 8009cd6:	d9fa      	bls.n	8009cce <_free_r+0x42>
 8009cd8:	6811      	ldr	r1, [r2, #0]
 8009cda:	1850      	adds	r0, r2, r1
 8009cdc:	42a0      	cmp	r0, r4
 8009cde:	d10b      	bne.n	8009cf8 <_free_r+0x6c>
 8009ce0:	6820      	ldr	r0, [r4, #0]
 8009ce2:	4401      	add	r1, r0
 8009ce4:	1850      	adds	r0, r2, r1
 8009ce6:	6011      	str	r1, [r2, #0]
 8009ce8:	4283      	cmp	r3, r0
 8009cea:	d1e0      	bne.n	8009cae <_free_r+0x22>
 8009cec:	6818      	ldr	r0, [r3, #0]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	4408      	add	r0, r1
 8009cf2:	6053      	str	r3, [r2, #4]
 8009cf4:	6010      	str	r0, [r2, #0]
 8009cf6:	e7da      	b.n	8009cae <_free_r+0x22>
 8009cf8:	d902      	bls.n	8009d00 <_free_r+0x74>
 8009cfa:	230c      	movs	r3, #12
 8009cfc:	602b      	str	r3, [r5, #0]
 8009cfe:	e7d6      	b.n	8009cae <_free_r+0x22>
 8009d00:	6820      	ldr	r0, [r4, #0]
 8009d02:	1821      	adds	r1, r4, r0
 8009d04:	428b      	cmp	r3, r1
 8009d06:	bf02      	ittt	eq
 8009d08:	6819      	ldreq	r1, [r3, #0]
 8009d0a:	685b      	ldreq	r3, [r3, #4]
 8009d0c:	1809      	addeq	r1, r1, r0
 8009d0e:	6063      	str	r3, [r4, #4]
 8009d10:	bf08      	it	eq
 8009d12:	6021      	streq	r1, [r4, #0]
 8009d14:	6054      	str	r4, [r2, #4]
 8009d16:	e7ca      	b.n	8009cae <_free_r+0x22>
 8009d18:	bd38      	pop	{r3, r4, r5, pc}
 8009d1a:	bf00      	nop
 8009d1c:	20002f18 	.word	0x20002f18

08009d20 <sbrk_aligned>:
 8009d20:	b570      	push	{r4, r5, r6, lr}
 8009d22:	4e0f      	ldr	r6, [pc, #60]	@ (8009d60 <sbrk_aligned+0x40>)
 8009d24:	460c      	mov	r4, r1
 8009d26:	4605      	mov	r5, r0
 8009d28:	6831      	ldr	r1, [r6, #0]
 8009d2a:	b911      	cbnz	r1, 8009d32 <sbrk_aligned+0x12>
 8009d2c:	f000 fba8 	bl	800a480 <_sbrk_r>
 8009d30:	6030      	str	r0, [r6, #0]
 8009d32:	4621      	mov	r1, r4
 8009d34:	4628      	mov	r0, r5
 8009d36:	f000 fba3 	bl	800a480 <_sbrk_r>
 8009d3a:	1c43      	adds	r3, r0, #1
 8009d3c:	d103      	bne.n	8009d46 <sbrk_aligned+0x26>
 8009d3e:	f04f 34ff 	mov.w	r4, #4294967295
 8009d42:	4620      	mov	r0, r4
 8009d44:	bd70      	pop	{r4, r5, r6, pc}
 8009d46:	1cc4      	adds	r4, r0, #3
 8009d48:	f024 0403 	bic.w	r4, r4, #3
 8009d4c:	42a0      	cmp	r0, r4
 8009d4e:	d0f8      	beq.n	8009d42 <sbrk_aligned+0x22>
 8009d50:	1a21      	subs	r1, r4, r0
 8009d52:	4628      	mov	r0, r5
 8009d54:	f000 fb94 	bl	800a480 <_sbrk_r>
 8009d58:	3001      	adds	r0, #1
 8009d5a:	d1f2      	bne.n	8009d42 <sbrk_aligned+0x22>
 8009d5c:	e7ef      	b.n	8009d3e <sbrk_aligned+0x1e>
 8009d5e:	bf00      	nop
 8009d60:	20002f14 	.word	0x20002f14

08009d64 <_malloc_r>:
 8009d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d68:	1ccd      	adds	r5, r1, #3
 8009d6a:	4606      	mov	r6, r0
 8009d6c:	f025 0503 	bic.w	r5, r5, #3
 8009d70:	3508      	adds	r5, #8
 8009d72:	2d0c      	cmp	r5, #12
 8009d74:	bf38      	it	cc
 8009d76:	250c      	movcc	r5, #12
 8009d78:	2d00      	cmp	r5, #0
 8009d7a:	db01      	blt.n	8009d80 <_malloc_r+0x1c>
 8009d7c:	42a9      	cmp	r1, r5
 8009d7e:	d904      	bls.n	8009d8a <_malloc_r+0x26>
 8009d80:	230c      	movs	r3, #12
 8009d82:	6033      	str	r3, [r6, #0]
 8009d84:	2000      	movs	r0, #0
 8009d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009e60 <_malloc_r+0xfc>
 8009d8e:	f000 f869 	bl	8009e64 <__malloc_lock>
 8009d92:	f8d8 3000 	ldr.w	r3, [r8]
 8009d96:	461c      	mov	r4, r3
 8009d98:	bb44      	cbnz	r4, 8009dec <_malloc_r+0x88>
 8009d9a:	4629      	mov	r1, r5
 8009d9c:	4630      	mov	r0, r6
 8009d9e:	f7ff ffbf 	bl	8009d20 <sbrk_aligned>
 8009da2:	1c43      	adds	r3, r0, #1
 8009da4:	4604      	mov	r4, r0
 8009da6:	d158      	bne.n	8009e5a <_malloc_r+0xf6>
 8009da8:	f8d8 4000 	ldr.w	r4, [r8]
 8009dac:	4627      	mov	r7, r4
 8009dae:	2f00      	cmp	r7, #0
 8009db0:	d143      	bne.n	8009e3a <_malloc_r+0xd6>
 8009db2:	2c00      	cmp	r4, #0
 8009db4:	d04b      	beq.n	8009e4e <_malloc_r+0xea>
 8009db6:	6823      	ldr	r3, [r4, #0]
 8009db8:	4639      	mov	r1, r7
 8009dba:	4630      	mov	r0, r6
 8009dbc:	eb04 0903 	add.w	r9, r4, r3
 8009dc0:	f000 fb5e 	bl	800a480 <_sbrk_r>
 8009dc4:	4581      	cmp	r9, r0
 8009dc6:	d142      	bne.n	8009e4e <_malloc_r+0xea>
 8009dc8:	6821      	ldr	r1, [r4, #0]
 8009dca:	4630      	mov	r0, r6
 8009dcc:	1a6d      	subs	r5, r5, r1
 8009dce:	4629      	mov	r1, r5
 8009dd0:	f7ff ffa6 	bl	8009d20 <sbrk_aligned>
 8009dd4:	3001      	adds	r0, #1
 8009dd6:	d03a      	beq.n	8009e4e <_malloc_r+0xea>
 8009dd8:	6823      	ldr	r3, [r4, #0]
 8009dda:	442b      	add	r3, r5
 8009ddc:	6023      	str	r3, [r4, #0]
 8009dde:	f8d8 3000 	ldr.w	r3, [r8]
 8009de2:	685a      	ldr	r2, [r3, #4]
 8009de4:	bb62      	cbnz	r2, 8009e40 <_malloc_r+0xdc>
 8009de6:	f8c8 7000 	str.w	r7, [r8]
 8009dea:	e00f      	b.n	8009e0c <_malloc_r+0xa8>
 8009dec:	6822      	ldr	r2, [r4, #0]
 8009dee:	1b52      	subs	r2, r2, r5
 8009df0:	d420      	bmi.n	8009e34 <_malloc_r+0xd0>
 8009df2:	2a0b      	cmp	r2, #11
 8009df4:	d917      	bls.n	8009e26 <_malloc_r+0xc2>
 8009df6:	1961      	adds	r1, r4, r5
 8009df8:	42a3      	cmp	r3, r4
 8009dfa:	6025      	str	r5, [r4, #0]
 8009dfc:	bf18      	it	ne
 8009dfe:	6059      	strne	r1, [r3, #4]
 8009e00:	6863      	ldr	r3, [r4, #4]
 8009e02:	bf08      	it	eq
 8009e04:	f8c8 1000 	streq.w	r1, [r8]
 8009e08:	5162      	str	r2, [r4, r5]
 8009e0a:	604b      	str	r3, [r1, #4]
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	f000 f82f 	bl	8009e70 <__malloc_unlock>
 8009e12:	f104 000b 	add.w	r0, r4, #11
 8009e16:	1d23      	adds	r3, r4, #4
 8009e18:	f020 0007 	bic.w	r0, r0, #7
 8009e1c:	1ac2      	subs	r2, r0, r3
 8009e1e:	bf1c      	itt	ne
 8009e20:	1a1b      	subne	r3, r3, r0
 8009e22:	50a3      	strne	r3, [r4, r2]
 8009e24:	e7af      	b.n	8009d86 <_malloc_r+0x22>
 8009e26:	6862      	ldr	r2, [r4, #4]
 8009e28:	42a3      	cmp	r3, r4
 8009e2a:	bf0c      	ite	eq
 8009e2c:	f8c8 2000 	streq.w	r2, [r8]
 8009e30:	605a      	strne	r2, [r3, #4]
 8009e32:	e7eb      	b.n	8009e0c <_malloc_r+0xa8>
 8009e34:	4623      	mov	r3, r4
 8009e36:	6864      	ldr	r4, [r4, #4]
 8009e38:	e7ae      	b.n	8009d98 <_malloc_r+0x34>
 8009e3a:	463c      	mov	r4, r7
 8009e3c:	687f      	ldr	r7, [r7, #4]
 8009e3e:	e7b6      	b.n	8009dae <_malloc_r+0x4a>
 8009e40:	461a      	mov	r2, r3
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	42a3      	cmp	r3, r4
 8009e46:	d1fb      	bne.n	8009e40 <_malloc_r+0xdc>
 8009e48:	2300      	movs	r3, #0
 8009e4a:	6053      	str	r3, [r2, #4]
 8009e4c:	e7de      	b.n	8009e0c <_malloc_r+0xa8>
 8009e4e:	230c      	movs	r3, #12
 8009e50:	4630      	mov	r0, r6
 8009e52:	6033      	str	r3, [r6, #0]
 8009e54:	f000 f80c 	bl	8009e70 <__malloc_unlock>
 8009e58:	e794      	b.n	8009d84 <_malloc_r+0x20>
 8009e5a:	6005      	str	r5, [r0, #0]
 8009e5c:	e7d6      	b.n	8009e0c <_malloc_r+0xa8>
 8009e5e:	bf00      	nop
 8009e60:	20002f18 	.word	0x20002f18

08009e64 <__malloc_lock>:
 8009e64:	4801      	ldr	r0, [pc, #4]	@ (8009e6c <__malloc_lock+0x8>)
 8009e66:	f7ff bf01 	b.w	8009c6c <__retarget_lock_acquire_recursive>
 8009e6a:	bf00      	nop
 8009e6c:	20002f10 	.word	0x20002f10

08009e70 <__malloc_unlock>:
 8009e70:	4801      	ldr	r0, [pc, #4]	@ (8009e78 <__malloc_unlock+0x8>)
 8009e72:	f7ff befc 	b.w	8009c6e <__retarget_lock_release_recursive>
 8009e76:	bf00      	nop
 8009e78:	20002f10 	.word	0x20002f10

08009e7c <__ssputs_r>:
 8009e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e80:	461f      	mov	r7, r3
 8009e82:	688e      	ldr	r6, [r1, #8]
 8009e84:	4682      	mov	sl, r0
 8009e86:	460c      	mov	r4, r1
 8009e88:	42be      	cmp	r6, r7
 8009e8a:	4690      	mov	r8, r2
 8009e8c:	680b      	ldr	r3, [r1, #0]
 8009e8e:	d82d      	bhi.n	8009eec <__ssputs_r+0x70>
 8009e90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009e98:	d026      	beq.n	8009ee8 <__ssputs_r+0x6c>
 8009e9a:	6965      	ldr	r5, [r4, #20]
 8009e9c:	6909      	ldr	r1, [r1, #16]
 8009e9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ea2:	eba3 0901 	sub.w	r9, r3, r1
 8009ea6:	1c7b      	adds	r3, r7, #1
 8009ea8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009eac:	444b      	add	r3, r9
 8009eae:	106d      	asrs	r5, r5, #1
 8009eb0:	429d      	cmp	r5, r3
 8009eb2:	bf38      	it	cc
 8009eb4:	461d      	movcc	r5, r3
 8009eb6:	0553      	lsls	r3, r2, #21
 8009eb8:	d527      	bpl.n	8009f0a <__ssputs_r+0x8e>
 8009eba:	4629      	mov	r1, r5
 8009ebc:	f7ff ff52 	bl	8009d64 <_malloc_r>
 8009ec0:	4606      	mov	r6, r0
 8009ec2:	b360      	cbz	r0, 8009f1e <__ssputs_r+0xa2>
 8009ec4:	464a      	mov	r2, r9
 8009ec6:	6921      	ldr	r1, [r4, #16]
 8009ec8:	f7ff fed2 	bl	8009c70 <memcpy>
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ed6:	81a3      	strh	r3, [r4, #12]
 8009ed8:	6126      	str	r6, [r4, #16]
 8009eda:	444e      	add	r6, r9
 8009edc:	6165      	str	r5, [r4, #20]
 8009ede:	eba5 0509 	sub.w	r5, r5, r9
 8009ee2:	6026      	str	r6, [r4, #0]
 8009ee4:	463e      	mov	r6, r7
 8009ee6:	60a5      	str	r5, [r4, #8]
 8009ee8:	42be      	cmp	r6, r7
 8009eea:	d900      	bls.n	8009eee <__ssputs_r+0x72>
 8009eec:	463e      	mov	r6, r7
 8009eee:	4632      	mov	r2, r6
 8009ef0:	4641      	mov	r1, r8
 8009ef2:	6820      	ldr	r0, [r4, #0]
 8009ef4:	f000 faaa 	bl	800a44c <memmove>
 8009ef8:	68a3      	ldr	r3, [r4, #8]
 8009efa:	2000      	movs	r0, #0
 8009efc:	1b9b      	subs	r3, r3, r6
 8009efe:	60a3      	str	r3, [r4, #8]
 8009f00:	6823      	ldr	r3, [r4, #0]
 8009f02:	4433      	add	r3, r6
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f0a:	462a      	mov	r2, r5
 8009f0c:	f000 fad6 	bl	800a4bc <_realloc_r>
 8009f10:	4606      	mov	r6, r0
 8009f12:	2800      	cmp	r0, #0
 8009f14:	d1e0      	bne.n	8009ed8 <__ssputs_r+0x5c>
 8009f16:	6921      	ldr	r1, [r4, #16]
 8009f18:	4650      	mov	r0, sl
 8009f1a:	f7ff feb7 	bl	8009c8c <_free_r>
 8009f1e:	230c      	movs	r3, #12
 8009f20:	f04f 30ff 	mov.w	r0, #4294967295
 8009f24:	f8ca 3000 	str.w	r3, [sl]
 8009f28:	89a3      	ldrh	r3, [r4, #12]
 8009f2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f2e:	81a3      	strh	r3, [r4, #12]
 8009f30:	e7e9      	b.n	8009f06 <__ssputs_r+0x8a>
	...

08009f34 <_svfiprintf_r>:
 8009f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f38:	4698      	mov	r8, r3
 8009f3a:	898b      	ldrh	r3, [r1, #12]
 8009f3c:	b09d      	sub	sp, #116	@ 0x74
 8009f3e:	4607      	mov	r7, r0
 8009f40:	061b      	lsls	r3, r3, #24
 8009f42:	460d      	mov	r5, r1
 8009f44:	4614      	mov	r4, r2
 8009f46:	d510      	bpl.n	8009f6a <_svfiprintf_r+0x36>
 8009f48:	690b      	ldr	r3, [r1, #16]
 8009f4a:	b973      	cbnz	r3, 8009f6a <_svfiprintf_r+0x36>
 8009f4c:	2140      	movs	r1, #64	@ 0x40
 8009f4e:	f7ff ff09 	bl	8009d64 <_malloc_r>
 8009f52:	6028      	str	r0, [r5, #0]
 8009f54:	6128      	str	r0, [r5, #16]
 8009f56:	b930      	cbnz	r0, 8009f66 <_svfiprintf_r+0x32>
 8009f58:	230c      	movs	r3, #12
 8009f5a:	603b      	str	r3, [r7, #0]
 8009f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f60:	b01d      	add	sp, #116	@ 0x74
 8009f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f66:	2340      	movs	r3, #64	@ 0x40
 8009f68:	616b      	str	r3, [r5, #20]
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f70:	f04f 0901 	mov.w	r9, #1
 8009f74:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800a118 <_svfiprintf_r+0x1e4>
 8009f78:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f7a:	2320      	movs	r3, #32
 8009f7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f80:	2330      	movs	r3, #48	@ 0x30
 8009f82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f86:	4623      	mov	r3, r4
 8009f88:	469a      	mov	sl, r3
 8009f8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f8e:	b10a      	cbz	r2, 8009f94 <_svfiprintf_r+0x60>
 8009f90:	2a25      	cmp	r2, #37	@ 0x25
 8009f92:	d1f9      	bne.n	8009f88 <_svfiprintf_r+0x54>
 8009f94:	ebba 0b04 	subs.w	fp, sl, r4
 8009f98:	d00b      	beq.n	8009fb2 <_svfiprintf_r+0x7e>
 8009f9a:	465b      	mov	r3, fp
 8009f9c:	4622      	mov	r2, r4
 8009f9e:	4629      	mov	r1, r5
 8009fa0:	4638      	mov	r0, r7
 8009fa2:	f7ff ff6b 	bl	8009e7c <__ssputs_r>
 8009fa6:	3001      	adds	r0, #1
 8009fa8:	f000 80a7 	beq.w	800a0fa <_svfiprintf_r+0x1c6>
 8009fac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fae:	445a      	add	r2, fp
 8009fb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	f000 809f 	beq.w	800a0fa <_svfiprintf_r+0x1c6>
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8009fc2:	f10a 0a01 	add.w	sl, sl, #1
 8009fc6:	9304      	str	r3, [sp, #16]
 8009fc8:	9307      	str	r3, [sp, #28]
 8009fca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009fce:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fd4:	4654      	mov	r4, sl
 8009fd6:	2205      	movs	r2, #5
 8009fd8:	484f      	ldr	r0, [pc, #316]	@ (800a118 <_svfiprintf_r+0x1e4>)
 8009fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fde:	f000 fa5f 	bl	800a4a0 <memchr>
 8009fe2:	9a04      	ldr	r2, [sp, #16]
 8009fe4:	b9d8      	cbnz	r0, 800a01e <_svfiprintf_r+0xea>
 8009fe6:	06d0      	lsls	r0, r2, #27
 8009fe8:	bf44      	itt	mi
 8009fea:	2320      	movmi	r3, #32
 8009fec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ff0:	0711      	lsls	r1, r2, #28
 8009ff2:	bf44      	itt	mi
 8009ff4:	232b      	movmi	r3, #43	@ 0x2b
 8009ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8009ffe:	2b2a      	cmp	r3, #42	@ 0x2a
 800a000:	d015      	beq.n	800a02e <_svfiprintf_r+0xfa>
 800a002:	9a07      	ldr	r2, [sp, #28]
 800a004:	4654      	mov	r4, sl
 800a006:	2000      	movs	r0, #0
 800a008:	f04f 0c0a 	mov.w	ip, #10
 800a00c:	4621      	mov	r1, r4
 800a00e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a012:	3b30      	subs	r3, #48	@ 0x30
 800a014:	2b09      	cmp	r3, #9
 800a016:	d94b      	bls.n	800a0b0 <_svfiprintf_r+0x17c>
 800a018:	b1b0      	cbz	r0, 800a048 <_svfiprintf_r+0x114>
 800a01a:	9207      	str	r2, [sp, #28]
 800a01c:	e014      	b.n	800a048 <_svfiprintf_r+0x114>
 800a01e:	eba0 0308 	sub.w	r3, r0, r8
 800a022:	46a2      	mov	sl, r4
 800a024:	fa09 f303 	lsl.w	r3, r9, r3
 800a028:	4313      	orrs	r3, r2
 800a02a:	9304      	str	r3, [sp, #16]
 800a02c:	e7d2      	b.n	8009fd4 <_svfiprintf_r+0xa0>
 800a02e:	9b03      	ldr	r3, [sp, #12]
 800a030:	1d19      	adds	r1, r3, #4
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	9103      	str	r1, [sp, #12]
 800a038:	bfbb      	ittet	lt
 800a03a:	425b      	neglt	r3, r3
 800a03c:	f042 0202 	orrlt.w	r2, r2, #2
 800a040:	9307      	strge	r3, [sp, #28]
 800a042:	9307      	strlt	r3, [sp, #28]
 800a044:	bfb8      	it	lt
 800a046:	9204      	strlt	r2, [sp, #16]
 800a048:	7823      	ldrb	r3, [r4, #0]
 800a04a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a04c:	d10a      	bne.n	800a064 <_svfiprintf_r+0x130>
 800a04e:	7863      	ldrb	r3, [r4, #1]
 800a050:	2b2a      	cmp	r3, #42	@ 0x2a
 800a052:	d132      	bne.n	800a0ba <_svfiprintf_r+0x186>
 800a054:	9b03      	ldr	r3, [sp, #12]
 800a056:	3402      	adds	r4, #2
 800a058:	1d1a      	adds	r2, r3, #4
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a060:	9203      	str	r2, [sp, #12]
 800a062:	9305      	str	r3, [sp, #20]
 800a064:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a128 <_svfiprintf_r+0x1f4>
 800a068:	2203      	movs	r2, #3
 800a06a:	7821      	ldrb	r1, [r4, #0]
 800a06c:	4650      	mov	r0, sl
 800a06e:	f000 fa17 	bl	800a4a0 <memchr>
 800a072:	b138      	cbz	r0, 800a084 <_svfiprintf_r+0x150>
 800a074:	eba0 000a 	sub.w	r0, r0, sl
 800a078:	2240      	movs	r2, #64	@ 0x40
 800a07a:	9b04      	ldr	r3, [sp, #16]
 800a07c:	3401      	adds	r4, #1
 800a07e:	4082      	lsls	r2, r0
 800a080:	4313      	orrs	r3, r2
 800a082:	9304      	str	r3, [sp, #16]
 800a084:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a088:	2206      	movs	r2, #6
 800a08a:	4824      	ldr	r0, [pc, #144]	@ (800a11c <_svfiprintf_r+0x1e8>)
 800a08c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a090:	f000 fa06 	bl	800a4a0 <memchr>
 800a094:	2800      	cmp	r0, #0
 800a096:	d036      	beq.n	800a106 <_svfiprintf_r+0x1d2>
 800a098:	4b21      	ldr	r3, [pc, #132]	@ (800a120 <_svfiprintf_r+0x1ec>)
 800a09a:	bb1b      	cbnz	r3, 800a0e4 <_svfiprintf_r+0x1b0>
 800a09c:	9b03      	ldr	r3, [sp, #12]
 800a09e:	3307      	adds	r3, #7
 800a0a0:	f023 0307 	bic.w	r3, r3, #7
 800a0a4:	3308      	adds	r3, #8
 800a0a6:	9303      	str	r3, [sp, #12]
 800a0a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0aa:	4433      	add	r3, r6
 800a0ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0ae:	e76a      	b.n	8009f86 <_svfiprintf_r+0x52>
 800a0b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0b4:	460c      	mov	r4, r1
 800a0b6:	2001      	movs	r0, #1
 800a0b8:	e7a8      	b.n	800a00c <_svfiprintf_r+0xd8>
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	3401      	adds	r4, #1
 800a0be:	f04f 0c0a 	mov.w	ip, #10
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	9305      	str	r3, [sp, #20]
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0cc:	3a30      	subs	r2, #48	@ 0x30
 800a0ce:	2a09      	cmp	r2, #9
 800a0d0:	d903      	bls.n	800a0da <_svfiprintf_r+0x1a6>
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d0c6      	beq.n	800a064 <_svfiprintf_r+0x130>
 800a0d6:	9105      	str	r1, [sp, #20]
 800a0d8:	e7c4      	b.n	800a064 <_svfiprintf_r+0x130>
 800a0da:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0de:	4604      	mov	r4, r0
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e7f0      	b.n	800a0c6 <_svfiprintf_r+0x192>
 800a0e4:	ab03      	add	r3, sp, #12
 800a0e6:	462a      	mov	r2, r5
 800a0e8:	a904      	add	r1, sp, #16
 800a0ea:	4638      	mov	r0, r7
 800a0ec:	9300      	str	r3, [sp, #0]
 800a0ee:	4b0d      	ldr	r3, [pc, #52]	@ (800a124 <_svfiprintf_r+0x1f0>)
 800a0f0:	f3af 8000 	nop.w
 800a0f4:	1c42      	adds	r2, r0, #1
 800a0f6:	4606      	mov	r6, r0
 800a0f8:	d1d6      	bne.n	800a0a8 <_svfiprintf_r+0x174>
 800a0fa:	89ab      	ldrh	r3, [r5, #12]
 800a0fc:	065b      	lsls	r3, r3, #25
 800a0fe:	f53f af2d 	bmi.w	8009f5c <_svfiprintf_r+0x28>
 800a102:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a104:	e72c      	b.n	8009f60 <_svfiprintf_r+0x2c>
 800a106:	ab03      	add	r3, sp, #12
 800a108:	462a      	mov	r2, r5
 800a10a:	a904      	add	r1, sp, #16
 800a10c:	4638      	mov	r0, r7
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	4b04      	ldr	r3, [pc, #16]	@ (800a124 <_svfiprintf_r+0x1f0>)
 800a112:	f000 f87d 	bl	800a210 <_printf_i>
 800a116:	e7ed      	b.n	800a0f4 <_svfiprintf_r+0x1c0>
 800a118:	0800a63c 	.word	0x0800a63c
 800a11c:	0800a646 	.word	0x0800a646
 800a120:	00000000 	.word	0x00000000
 800a124:	08009e7d 	.word	0x08009e7d
 800a128:	0800a642 	.word	0x0800a642

0800a12c <_printf_common>:
 800a12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a130:	4616      	mov	r6, r2
 800a132:	4698      	mov	r8, r3
 800a134:	688a      	ldr	r2, [r1, #8]
 800a136:	4607      	mov	r7, r0
 800a138:	690b      	ldr	r3, [r1, #16]
 800a13a:	460c      	mov	r4, r1
 800a13c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a140:	4293      	cmp	r3, r2
 800a142:	bfb8      	it	lt
 800a144:	4613      	movlt	r3, r2
 800a146:	6033      	str	r3, [r6, #0]
 800a148:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a14c:	b10a      	cbz	r2, 800a152 <_printf_common+0x26>
 800a14e:	3301      	adds	r3, #1
 800a150:	6033      	str	r3, [r6, #0]
 800a152:	6823      	ldr	r3, [r4, #0]
 800a154:	0699      	lsls	r1, r3, #26
 800a156:	bf42      	ittt	mi
 800a158:	6833      	ldrmi	r3, [r6, #0]
 800a15a:	3302      	addmi	r3, #2
 800a15c:	6033      	strmi	r3, [r6, #0]
 800a15e:	6825      	ldr	r5, [r4, #0]
 800a160:	f015 0506 	ands.w	r5, r5, #6
 800a164:	d106      	bne.n	800a174 <_printf_common+0x48>
 800a166:	f104 0a19 	add.w	sl, r4, #25
 800a16a:	68e3      	ldr	r3, [r4, #12]
 800a16c:	6832      	ldr	r2, [r6, #0]
 800a16e:	1a9b      	subs	r3, r3, r2
 800a170:	42ab      	cmp	r3, r5
 800a172:	dc2b      	bgt.n	800a1cc <_printf_common+0xa0>
 800a174:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a178:	6822      	ldr	r2, [r4, #0]
 800a17a:	3b00      	subs	r3, #0
 800a17c:	bf18      	it	ne
 800a17e:	2301      	movne	r3, #1
 800a180:	0692      	lsls	r2, r2, #26
 800a182:	d430      	bmi.n	800a1e6 <_printf_common+0xba>
 800a184:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a188:	4641      	mov	r1, r8
 800a18a:	4638      	mov	r0, r7
 800a18c:	47c8      	blx	r9
 800a18e:	3001      	adds	r0, #1
 800a190:	d023      	beq.n	800a1da <_printf_common+0xae>
 800a192:	6823      	ldr	r3, [r4, #0]
 800a194:	341a      	adds	r4, #26
 800a196:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a19a:	f003 0306 	and.w	r3, r3, #6
 800a19e:	2b04      	cmp	r3, #4
 800a1a0:	bf0a      	itet	eq
 800a1a2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800a1a6:	2500      	movne	r5, #0
 800a1a8:	6833      	ldreq	r3, [r6, #0]
 800a1aa:	f04f 0600 	mov.w	r6, #0
 800a1ae:	bf08      	it	eq
 800a1b0:	1aed      	subeq	r5, r5, r3
 800a1b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a1b6:	bf08      	it	eq
 800a1b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	bfc4      	itt	gt
 800a1c0:	1a9b      	subgt	r3, r3, r2
 800a1c2:	18ed      	addgt	r5, r5, r3
 800a1c4:	42b5      	cmp	r5, r6
 800a1c6:	d11a      	bne.n	800a1fe <_printf_common+0xd2>
 800a1c8:	2000      	movs	r0, #0
 800a1ca:	e008      	b.n	800a1de <_printf_common+0xb2>
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	4652      	mov	r2, sl
 800a1d0:	4641      	mov	r1, r8
 800a1d2:	4638      	mov	r0, r7
 800a1d4:	47c8      	blx	r9
 800a1d6:	3001      	adds	r0, #1
 800a1d8:	d103      	bne.n	800a1e2 <_printf_common+0xb6>
 800a1da:	f04f 30ff 	mov.w	r0, #4294967295
 800a1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1e2:	3501      	adds	r5, #1
 800a1e4:	e7c1      	b.n	800a16a <_printf_common+0x3e>
 800a1e6:	18e1      	adds	r1, r4, r3
 800a1e8:	1c5a      	adds	r2, r3, #1
 800a1ea:	2030      	movs	r0, #48	@ 0x30
 800a1ec:	3302      	adds	r3, #2
 800a1ee:	4422      	add	r2, r4
 800a1f0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a1f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a1f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a1fc:	e7c2      	b.n	800a184 <_printf_common+0x58>
 800a1fe:	2301      	movs	r3, #1
 800a200:	4622      	mov	r2, r4
 800a202:	4641      	mov	r1, r8
 800a204:	4638      	mov	r0, r7
 800a206:	47c8      	blx	r9
 800a208:	3001      	adds	r0, #1
 800a20a:	d0e6      	beq.n	800a1da <_printf_common+0xae>
 800a20c:	3601      	adds	r6, #1
 800a20e:	e7d9      	b.n	800a1c4 <_printf_common+0x98>

0800a210 <_printf_i>:
 800a210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a214:	7e0f      	ldrb	r7, [r1, #24]
 800a216:	4691      	mov	r9, r2
 800a218:	4680      	mov	r8, r0
 800a21a:	460c      	mov	r4, r1
 800a21c:	2f78      	cmp	r7, #120	@ 0x78
 800a21e:	469a      	mov	sl, r3
 800a220:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a222:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a226:	d807      	bhi.n	800a238 <_printf_i+0x28>
 800a228:	2f62      	cmp	r7, #98	@ 0x62
 800a22a:	d80a      	bhi.n	800a242 <_printf_i+0x32>
 800a22c:	2f00      	cmp	r7, #0
 800a22e:	f000 80d1 	beq.w	800a3d4 <_printf_i+0x1c4>
 800a232:	2f58      	cmp	r7, #88	@ 0x58
 800a234:	f000 80b8 	beq.w	800a3a8 <_printf_i+0x198>
 800a238:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a23c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a240:	e03a      	b.n	800a2b8 <_printf_i+0xa8>
 800a242:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a246:	2b15      	cmp	r3, #21
 800a248:	d8f6      	bhi.n	800a238 <_printf_i+0x28>
 800a24a:	a101      	add	r1, pc, #4	@ (adr r1, 800a250 <_printf_i+0x40>)
 800a24c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a250:	0800a2a9 	.word	0x0800a2a9
 800a254:	0800a2bd 	.word	0x0800a2bd
 800a258:	0800a239 	.word	0x0800a239
 800a25c:	0800a239 	.word	0x0800a239
 800a260:	0800a239 	.word	0x0800a239
 800a264:	0800a239 	.word	0x0800a239
 800a268:	0800a2bd 	.word	0x0800a2bd
 800a26c:	0800a239 	.word	0x0800a239
 800a270:	0800a239 	.word	0x0800a239
 800a274:	0800a239 	.word	0x0800a239
 800a278:	0800a239 	.word	0x0800a239
 800a27c:	0800a3bb 	.word	0x0800a3bb
 800a280:	0800a2e7 	.word	0x0800a2e7
 800a284:	0800a375 	.word	0x0800a375
 800a288:	0800a239 	.word	0x0800a239
 800a28c:	0800a239 	.word	0x0800a239
 800a290:	0800a3dd 	.word	0x0800a3dd
 800a294:	0800a239 	.word	0x0800a239
 800a298:	0800a2e7 	.word	0x0800a2e7
 800a29c:	0800a239 	.word	0x0800a239
 800a2a0:	0800a239 	.word	0x0800a239
 800a2a4:	0800a37d 	.word	0x0800a37d
 800a2a8:	6833      	ldr	r3, [r6, #0]
 800a2aa:	1d1a      	adds	r2, r3, #4
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	6032      	str	r2, [r6, #0]
 800a2b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e09c      	b.n	800a3f6 <_printf_i+0x1e6>
 800a2bc:	6833      	ldr	r3, [r6, #0]
 800a2be:	6820      	ldr	r0, [r4, #0]
 800a2c0:	1d19      	adds	r1, r3, #4
 800a2c2:	6031      	str	r1, [r6, #0]
 800a2c4:	0606      	lsls	r6, r0, #24
 800a2c6:	d501      	bpl.n	800a2cc <_printf_i+0xbc>
 800a2c8:	681d      	ldr	r5, [r3, #0]
 800a2ca:	e003      	b.n	800a2d4 <_printf_i+0xc4>
 800a2cc:	0645      	lsls	r5, r0, #25
 800a2ce:	d5fb      	bpl.n	800a2c8 <_printf_i+0xb8>
 800a2d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a2d4:	2d00      	cmp	r5, #0
 800a2d6:	da03      	bge.n	800a2e0 <_printf_i+0xd0>
 800a2d8:	232d      	movs	r3, #45	@ 0x2d
 800a2da:	426d      	negs	r5, r5
 800a2dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2e0:	4858      	ldr	r0, [pc, #352]	@ (800a444 <_printf_i+0x234>)
 800a2e2:	230a      	movs	r3, #10
 800a2e4:	e011      	b.n	800a30a <_printf_i+0xfa>
 800a2e6:	6821      	ldr	r1, [r4, #0]
 800a2e8:	6833      	ldr	r3, [r6, #0]
 800a2ea:	0608      	lsls	r0, r1, #24
 800a2ec:	f853 5b04 	ldr.w	r5, [r3], #4
 800a2f0:	d402      	bmi.n	800a2f8 <_printf_i+0xe8>
 800a2f2:	0649      	lsls	r1, r1, #25
 800a2f4:	bf48      	it	mi
 800a2f6:	b2ad      	uxthmi	r5, r5
 800a2f8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a2fa:	6033      	str	r3, [r6, #0]
 800a2fc:	4851      	ldr	r0, [pc, #324]	@ (800a444 <_printf_i+0x234>)
 800a2fe:	bf14      	ite	ne
 800a300:	230a      	movne	r3, #10
 800a302:	2308      	moveq	r3, #8
 800a304:	2100      	movs	r1, #0
 800a306:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a30a:	6866      	ldr	r6, [r4, #4]
 800a30c:	2e00      	cmp	r6, #0
 800a30e:	60a6      	str	r6, [r4, #8]
 800a310:	db05      	blt.n	800a31e <_printf_i+0x10e>
 800a312:	6821      	ldr	r1, [r4, #0]
 800a314:	432e      	orrs	r6, r5
 800a316:	f021 0104 	bic.w	r1, r1, #4
 800a31a:	6021      	str	r1, [r4, #0]
 800a31c:	d04b      	beq.n	800a3b6 <_printf_i+0x1a6>
 800a31e:	4616      	mov	r6, r2
 800a320:	fbb5 f1f3 	udiv	r1, r5, r3
 800a324:	fb03 5711 	mls	r7, r3, r1, r5
 800a328:	5dc7      	ldrb	r7, [r0, r7]
 800a32a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a32e:	462f      	mov	r7, r5
 800a330:	460d      	mov	r5, r1
 800a332:	42bb      	cmp	r3, r7
 800a334:	d9f4      	bls.n	800a320 <_printf_i+0x110>
 800a336:	2b08      	cmp	r3, #8
 800a338:	d10b      	bne.n	800a352 <_printf_i+0x142>
 800a33a:	6823      	ldr	r3, [r4, #0]
 800a33c:	07df      	lsls	r7, r3, #31
 800a33e:	d508      	bpl.n	800a352 <_printf_i+0x142>
 800a340:	6923      	ldr	r3, [r4, #16]
 800a342:	6861      	ldr	r1, [r4, #4]
 800a344:	4299      	cmp	r1, r3
 800a346:	bfde      	ittt	le
 800a348:	2330      	movle	r3, #48	@ 0x30
 800a34a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a34e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a352:	1b92      	subs	r2, r2, r6
 800a354:	6122      	str	r2, [r4, #16]
 800a356:	464b      	mov	r3, r9
 800a358:	aa03      	add	r2, sp, #12
 800a35a:	4621      	mov	r1, r4
 800a35c:	4640      	mov	r0, r8
 800a35e:	f8cd a000 	str.w	sl, [sp]
 800a362:	f7ff fee3 	bl	800a12c <_printf_common>
 800a366:	3001      	adds	r0, #1
 800a368:	d14a      	bne.n	800a400 <_printf_i+0x1f0>
 800a36a:	f04f 30ff 	mov.w	r0, #4294967295
 800a36e:	b004      	add	sp, #16
 800a370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a374:	6823      	ldr	r3, [r4, #0]
 800a376:	f043 0320 	orr.w	r3, r3, #32
 800a37a:	6023      	str	r3, [r4, #0]
 800a37c:	2778      	movs	r7, #120	@ 0x78
 800a37e:	4832      	ldr	r0, [pc, #200]	@ (800a448 <_printf_i+0x238>)
 800a380:	6823      	ldr	r3, [r4, #0]
 800a382:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a386:	061f      	lsls	r7, r3, #24
 800a388:	6831      	ldr	r1, [r6, #0]
 800a38a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a38e:	d402      	bmi.n	800a396 <_printf_i+0x186>
 800a390:	065f      	lsls	r7, r3, #25
 800a392:	bf48      	it	mi
 800a394:	b2ad      	uxthmi	r5, r5
 800a396:	6031      	str	r1, [r6, #0]
 800a398:	07d9      	lsls	r1, r3, #31
 800a39a:	bf44      	itt	mi
 800a39c:	f043 0320 	orrmi.w	r3, r3, #32
 800a3a0:	6023      	strmi	r3, [r4, #0]
 800a3a2:	b11d      	cbz	r5, 800a3ac <_printf_i+0x19c>
 800a3a4:	2310      	movs	r3, #16
 800a3a6:	e7ad      	b.n	800a304 <_printf_i+0xf4>
 800a3a8:	4826      	ldr	r0, [pc, #152]	@ (800a444 <_printf_i+0x234>)
 800a3aa:	e7e9      	b.n	800a380 <_printf_i+0x170>
 800a3ac:	6823      	ldr	r3, [r4, #0]
 800a3ae:	f023 0320 	bic.w	r3, r3, #32
 800a3b2:	6023      	str	r3, [r4, #0]
 800a3b4:	e7f6      	b.n	800a3a4 <_printf_i+0x194>
 800a3b6:	4616      	mov	r6, r2
 800a3b8:	e7bd      	b.n	800a336 <_printf_i+0x126>
 800a3ba:	6833      	ldr	r3, [r6, #0]
 800a3bc:	6825      	ldr	r5, [r4, #0]
 800a3be:	1d18      	adds	r0, r3, #4
 800a3c0:	6961      	ldr	r1, [r4, #20]
 800a3c2:	6030      	str	r0, [r6, #0]
 800a3c4:	062e      	lsls	r6, r5, #24
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	d501      	bpl.n	800a3ce <_printf_i+0x1be>
 800a3ca:	6019      	str	r1, [r3, #0]
 800a3cc:	e002      	b.n	800a3d4 <_printf_i+0x1c4>
 800a3ce:	0668      	lsls	r0, r5, #25
 800a3d0:	d5fb      	bpl.n	800a3ca <_printf_i+0x1ba>
 800a3d2:	8019      	strh	r1, [r3, #0]
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	4616      	mov	r6, r2
 800a3d8:	6123      	str	r3, [r4, #16]
 800a3da:	e7bc      	b.n	800a356 <_printf_i+0x146>
 800a3dc:	6833      	ldr	r3, [r6, #0]
 800a3de:	2100      	movs	r1, #0
 800a3e0:	1d1a      	adds	r2, r3, #4
 800a3e2:	6032      	str	r2, [r6, #0]
 800a3e4:	681e      	ldr	r6, [r3, #0]
 800a3e6:	6862      	ldr	r2, [r4, #4]
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	f000 f859 	bl	800a4a0 <memchr>
 800a3ee:	b108      	cbz	r0, 800a3f4 <_printf_i+0x1e4>
 800a3f0:	1b80      	subs	r0, r0, r6
 800a3f2:	6060      	str	r0, [r4, #4]
 800a3f4:	6863      	ldr	r3, [r4, #4]
 800a3f6:	6123      	str	r3, [r4, #16]
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3fe:	e7aa      	b.n	800a356 <_printf_i+0x146>
 800a400:	6923      	ldr	r3, [r4, #16]
 800a402:	4632      	mov	r2, r6
 800a404:	4649      	mov	r1, r9
 800a406:	4640      	mov	r0, r8
 800a408:	47d0      	blx	sl
 800a40a:	3001      	adds	r0, #1
 800a40c:	d0ad      	beq.n	800a36a <_printf_i+0x15a>
 800a40e:	6823      	ldr	r3, [r4, #0]
 800a410:	079b      	lsls	r3, r3, #30
 800a412:	d413      	bmi.n	800a43c <_printf_i+0x22c>
 800a414:	68e0      	ldr	r0, [r4, #12]
 800a416:	9b03      	ldr	r3, [sp, #12]
 800a418:	4298      	cmp	r0, r3
 800a41a:	bfb8      	it	lt
 800a41c:	4618      	movlt	r0, r3
 800a41e:	e7a6      	b.n	800a36e <_printf_i+0x15e>
 800a420:	2301      	movs	r3, #1
 800a422:	4632      	mov	r2, r6
 800a424:	4649      	mov	r1, r9
 800a426:	4640      	mov	r0, r8
 800a428:	47d0      	blx	sl
 800a42a:	3001      	adds	r0, #1
 800a42c:	d09d      	beq.n	800a36a <_printf_i+0x15a>
 800a42e:	3501      	adds	r5, #1
 800a430:	68e3      	ldr	r3, [r4, #12]
 800a432:	9903      	ldr	r1, [sp, #12]
 800a434:	1a5b      	subs	r3, r3, r1
 800a436:	42ab      	cmp	r3, r5
 800a438:	dcf2      	bgt.n	800a420 <_printf_i+0x210>
 800a43a:	e7eb      	b.n	800a414 <_printf_i+0x204>
 800a43c:	2500      	movs	r5, #0
 800a43e:	f104 0619 	add.w	r6, r4, #25
 800a442:	e7f5      	b.n	800a430 <_printf_i+0x220>
 800a444:	0800a64d 	.word	0x0800a64d
 800a448:	0800a65e 	.word	0x0800a65e

0800a44c <memmove>:
 800a44c:	4288      	cmp	r0, r1
 800a44e:	b510      	push	{r4, lr}
 800a450:	eb01 0402 	add.w	r4, r1, r2
 800a454:	d902      	bls.n	800a45c <memmove+0x10>
 800a456:	4284      	cmp	r4, r0
 800a458:	4623      	mov	r3, r4
 800a45a:	d807      	bhi.n	800a46c <memmove+0x20>
 800a45c:	1e43      	subs	r3, r0, #1
 800a45e:	42a1      	cmp	r1, r4
 800a460:	d008      	beq.n	800a474 <memmove+0x28>
 800a462:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a466:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a46a:	e7f8      	b.n	800a45e <memmove+0x12>
 800a46c:	4402      	add	r2, r0
 800a46e:	4601      	mov	r1, r0
 800a470:	428a      	cmp	r2, r1
 800a472:	d100      	bne.n	800a476 <memmove+0x2a>
 800a474:	bd10      	pop	{r4, pc}
 800a476:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a47a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a47e:	e7f7      	b.n	800a470 <memmove+0x24>

0800a480 <_sbrk_r>:
 800a480:	b538      	push	{r3, r4, r5, lr}
 800a482:	2300      	movs	r3, #0
 800a484:	4d05      	ldr	r5, [pc, #20]	@ (800a49c <_sbrk_r+0x1c>)
 800a486:	4604      	mov	r4, r0
 800a488:	4608      	mov	r0, r1
 800a48a:	602b      	str	r3, [r5, #0]
 800a48c:	f7f6 ff48 	bl	8001320 <_sbrk>
 800a490:	1c43      	adds	r3, r0, #1
 800a492:	d102      	bne.n	800a49a <_sbrk_r+0x1a>
 800a494:	682b      	ldr	r3, [r5, #0]
 800a496:	b103      	cbz	r3, 800a49a <_sbrk_r+0x1a>
 800a498:	6023      	str	r3, [r4, #0]
 800a49a:	bd38      	pop	{r3, r4, r5, pc}
 800a49c:	20002f0c 	.word	0x20002f0c

0800a4a0 <memchr>:
 800a4a0:	b2c9      	uxtb	r1, r1
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	4402      	add	r2, r0
 800a4a6:	b510      	push	{r4, lr}
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	d101      	bne.n	800a4b2 <memchr+0x12>
 800a4ae:	2000      	movs	r0, #0
 800a4b0:	e003      	b.n	800a4ba <memchr+0x1a>
 800a4b2:	7804      	ldrb	r4, [r0, #0]
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	428c      	cmp	r4, r1
 800a4b8:	d1f6      	bne.n	800a4a8 <memchr+0x8>
 800a4ba:	bd10      	pop	{r4, pc}

0800a4bc <_realloc_r>:
 800a4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c0:	4607      	mov	r7, r0
 800a4c2:	4614      	mov	r4, r2
 800a4c4:	460d      	mov	r5, r1
 800a4c6:	b921      	cbnz	r1, 800a4d2 <_realloc_r+0x16>
 800a4c8:	4611      	mov	r1, r2
 800a4ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ce:	f7ff bc49 	b.w	8009d64 <_malloc_r>
 800a4d2:	b92a      	cbnz	r2, 800a4e0 <_realloc_r+0x24>
 800a4d4:	4625      	mov	r5, r4
 800a4d6:	f7ff fbd9 	bl	8009c8c <_free_r>
 800a4da:	4628      	mov	r0, r5
 800a4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4e0:	f000 f81a 	bl	800a518 <_malloc_usable_size_r>
 800a4e4:	4284      	cmp	r4, r0
 800a4e6:	4606      	mov	r6, r0
 800a4e8:	d802      	bhi.n	800a4f0 <_realloc_r+0x34>
 800a4ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a4ee:	d8f4      	bhi.n	800a4da <_realloc_r+0x1e>
 800a4f0:	4621      	mov	r1, r4
 800a4f2:	4638      	mov	r0, r7
 800a4f4:	f7ff fc36 	bl	8009d64 <_malloc_r>
 800a4f8:	4680      	mov	r8, r0
 800a4fa:	b908      	cbnz	r0, 800a500 <_realloc_r+0x44>
 800a4fc:	4645      	mov	r5, r8
 800a4fe:	e7ec      	b.n	800a4da <_realloc_r+0x1e>
 800a500:	42b4      	cmp	r4, r6
 800a502:	4622      	mov	r2, r4
 800a504:	4629      	mov	r1, r5
 800a506:	bf28      	it	cs
 800a508:	4632      	movcs	r2, r6
 800a50a:	f7ff fbb1 	bl	8009c70 <memcpy>
 800a50e:	4629      	mov	r1, r5
 800a510:	4638      	mov	r0, r7
 800a512:	f7ff fbbb 	bl	8009c8c <_free_r>
 800a516:	e7f1      	b.n	800a4fc <_realloc_r+0x40>

0800a518 <_malloc_usable_size_r>:
 800a518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a51c:	1f18      	subs	r0, r3, #4
 800a51e:	2b00      	cmp	r3, #0
 800a520:	bfbc      	itt	lt
 800a522:	580b      	ldrlt	r3, [r1, r0]
 800a524:	18c0      	addlt	r0, r0, r3
 800a526:	4770      	bx	lr

0800a528 <_init>:
 800a528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52a:	bf00      	nop
 800a52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a52e:	bc08      	pop	{r3}
 800a530:	469e      	mov	lr, r3
 800a532:	4770      	bx	lr

0800a534 <_fini>:
 800a534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a536:	bf00      	nop
 800a538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a53a:	bc08      	pop	{r3}
 800a53c:	469e      	mov	lr, r3
 800a53e:	4770      	bx	lr
