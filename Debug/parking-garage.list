
parking-garage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064c4  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08006710  08006710  00007710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800672c  0800672c  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800672c  0800672c  0000800c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800672c  0800672c  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800672c  0800672c  0000772c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006730  08006730  00007730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006734  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08006740  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08006740  000080cc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000123be  00000000  00000000  00008042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002333  00000000  00000000  0001a400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  0001c738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca3  00000000  00000000  0001d790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031f90  00000000  00000000  0001e433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017151  00000000  00000000  000503c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013ea2a  00000000  00000000  00067514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a5f3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044ec  00000000  00000000  001a5f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001aa470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000000c 	.word	0x2000000c
 8000268:	00000000 	.word	0x00000000
 800026c:	080066f8 	.word	0x080066f8

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000010 	.word	0x20000010
 8000288:	080066f8 	.word	0x080066f8

0800028c <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN(PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT(PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b08e      	sub	sp, #56	@ 0x38
 8000290:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000292:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
 80002a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002a2:	4b9c      	ldr	r3, [pc, #624]	@ (8000514 <MX_GPIO_Init+0x288>)
 80002a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002a8:	4a9a      	ldr	r2, [pc, #616]	@ (8000514 <MX_GPIO_Init+0x288>)
 80002aa:	f043 0310 	orr.w	r3, r3, #16
 80002ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80002b2:	4b98      	ldr	r3, [pc, #608]	@ (8000514 <MX_GPIO_Init+0x288>)
 80002b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002b8:	f003 0310 	and.w	r3, r3, #16
 80002bc:	623b      	str	r3, [r7, #32]
 80002be:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002c0:	4b94      	ldr	r3, [pc, #592]	@ (8000514 <MX_GPIO_Init+0x288>)
 80002c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002c6:	4a93      	ldr	r2, [pc, #588]	@ (8000514 <MX_GPIO_Init+0x288>)
 80002c8:	f043 0320 	orr.w	r3, r3, #32
 80002cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80002d0:	4b90      	ldr	r3, [pc, #576]	@ (8000514 <MX_GPIO_Init+0x288>)
 80002d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002d6:	f003 0320 	and.w	r3, r3, #32
 80002da:	61fb      	str	r3, [r7, #28]
 80002dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002de:	4b8d      	ldr	r3, [pc, #564]	@ (8000514 <MX_GPIO_Init+0x288>)
 80002e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002e4:	4a8b      	ldr	r2, [pc, #556]	@ (8000514 <MX_GPIO_Init+0x288>)
 80002e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80002ee:	4b89      	ldr	r3, [pc, #548]	@ (8000514 <MX_GPIO_Init+0x288>)
 80002f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002f8:	61bb      	str	r3, [r7, #24]
 80002fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fc:	4b85      	ldr	r3, [pc, #532]	@ (8000514 <MX_GPIO_Init+0x288>)
 80002fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000302:	4a84      	ldr	r2, [pc, #528]	@ (8000514 <MX_GPIO_Init+0x288>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800030c:	4b81      	ldr	r3, [pc, #516]	@ (8000514 <MX_GPIO_Init+0x288>)
 800030e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000312:	f003 0301 	and.w	r3, r3, #1
 8000316:	617b      	str	r3, [r7, #20]
 8000318:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031a:	4b7e      	ldr	r3, [pc, #504]	@ (8000514 <MX_GPIO_Init+0x288>)
 800031c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000320:	4a7c      	ldr	r2, [pc, #496]	@ (8000514 <MX_GPIO_Init+0x288>)
 8000322:	f043 0302 	orr.w	r3, r3, #2
 8000326:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800032a:	4b7a      	ldr	r3, [pc, #488]	@ (8000514 <MX_GPIO_Init+0x288>)
 800032c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000330:	f003 0302 	and.w	r3, r3, #2
 8000334:	613b      	str	r3, [r7, #16]
 8000336:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000338:	4b76      	ldr	r3, [pc, #472]	@ (8000514 <MX_GPIO_Init+0x288>)
 800033a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800033e:	4a75      	ldr	r2, [pc, #468]	@ (8000514 <MX_GPIO_Init+0x288>)
 8000340:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000344:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000348:	4b72      	ldr	r3, [pc, #456]	@ (8000514 <MX_GPIO_Init+0x288>)
 800034a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800034e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000356:	4b6f      	ldr	r3, [pc, #444]	@ (8000514 <MX_GPIO_Init+0x288>)
 8000358:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800035c:	4a6d      	ldr	r2, [pc, #436]	@ (8000514 <MX_GPIO_Init+0x288>)
 800035e:	f043 0308 	orr.w	r3, r3, #8
 8000362:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000366:	4b6b      	ldr	r3, [pc, #428]	@ (8000514 <MX_GPIO_Init+0x288>)
 8000368:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800036c:	f003 0308 	and.w	r3, r3, #8
 8000370:	60bb      	str	r3, [r7, #8]
 8000372:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000374:	4b67      	ldr	r3, [pc, #412]	@ (8000514 <MX_GPIO_Init+0x288>)
 8000376:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800037a:	4a66      	ldr	r2, [pc, #408]	@ (8000514 <MX_GPIO_Init+0x288>)
 800037c:	f043 0304 	orr.w	r3, r3, #4
 8000380:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000384:	4b63      	ldr	r3, [pc, #396]	@ (8000514 <MX_GPIO_Init+0x288>)
 8000386:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800038a:	f003 0304 	and.w	r3, r3, #4
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, P3_G_Pin|P4_R_Pin|P5_G_Pin|P9_R_Pin
 8000392:	2200      	movs	r2, #0
 8000394:	f24b 71c0 	movw	r1, #47040	@ 0xb7c0
 8000398:	485f      	ldr	r0, [pc, #380]	@ (8000518 <MX_GPIO_Init+0x28c>)
 800039a:	f001 fa59 	bl	8001850 <HAL_GPIO_WritePin>
                          |P4_G_Pin|P3_R_Pin|P8_R_Pin|P2_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, P12_R_Pin|P12_G_Pin|P7_R_Pin, GPIO_PIN_RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	f44f 5194 	mov.w	r1, #4736	@ 0x1280
 80003a4:	485d      	ldr	r0, [pc, #372]	@ (800051c <MX_GPIO_Init+0x290>)
 80003a6:	f001 fa53 	bl	8001850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, P2_R_Pin|P1_G_Pin|P6_G_Pin, GPIO_PIN_RESET);
 80003aa:	2200      	movs	r2, #0
 80003ac:	2129      	movs	r1, #41	@ 0x29
 80003ae:	485c      	ldr	r0, [pc, #368]	@ (8000520 <MX_GPIO_Init+0x294>)
 80003b0:	f001 fa4e 	bl	8001850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, P11_R_Pin|P7_G_Pin|P9_G_Pin|P8_G_Pin, GPIO_PIN_RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	f245 0141 	movw	r1, #20545	@ 0x5041
 80003ba:	485a      	ldr	r0, [pc, #360]	@ (8000524 <MX_GPIO_Init+0x298>)
 80003bc:	f001 fa48 	bl	8001850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P1_R_Pin|P6_R_Pin, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80003c6:	4858      	ldr	r0, [pc, #352]	@ (8000528 <MX_GPIO_Init+0x29c>)
 80003c8:	f001 fa42 	bl	8001850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, P5_R_Pin|P10_G_Pin|P10_R_Pin|P11_G_Pin, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f24e 0102 	movw	r1, #57346	@ 0xe002
 80003d2:	4856      	ldr	r0, [pc, #344]	@ (800052c <MX_GPIO_Init+0x2a0>)
 80003d4:	f001 fa3c 	bl	8001850 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P3_G_Pin P4_R_Pin P5_G_Pin P9_R_Pin
                           P4_G_Pin P3_R_Pin P8_R_Pin P2_G_Pin */
  GPIO_InitStruct.Pin = P3_G_Pin|P4_R_Pin|P5_G_Pin|P9_R_Pin
 80003d8:	f24b 73c0 	movw	r3, #47040	@ 0xb7c0
 80003dc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |P4_G_Pin|P3_R_Pin|P8_R_Pin|P2_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003de:	2301      	movs	r3, #1
 80003e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e6:	2300      	movs	r3, #0
 80003e8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003ee:	4619      	mov	r1, r3
 80003f0:	4849      	ldr	r0, [pc, #292]	@ (8000518 <MX_GPIO_Init+0x28c>)
 80003f2:	f001 f8b7 	bl	8001564 <HAL_GPIO_Init>

  /*Configure GPIO pins : P10_Pin P7_Pin */
  GPIO_InitStruct.Pin = P10_Pin|P7_Pin;
 80003f6:	f242 0308 	movw	r3, #8200	@ 0x2008
 80003fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003fc:	2300      	movs	r3, #0
 80003fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	2300      	movs	r3, #0
 8000402:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000404:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000408:	4619      	mov	r1, r3
 800040a:	4844      	ldr	r0, [pc, #272]	@ (800051c <MX_GPIO_Init+0x290>)
 800040c:	f001 f8aa 	bl	8001564 <HAL_GPIO_Init>

  /*Configure GPIO pins : P12_R_Pin P12_G_Pin P7_R_Pin */
  GPIO_InitStruct.Pin = P12_R_Pin|P12_G_Pin|P7_R_Pin;
 8000410:	f44f 5394 	mov.w	r3, #4736	@ 0x1280
 8000414:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000416:	2301      	movs	r3, #1
 8000418:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	2300      	movs	r3, #0
 800041c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041e:	2300      	movs	r3, #0
 8000420:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000426:	4619      	mov	r1, r3
 8000428:	483c      	ldr	r0, [pc, #240]	@ (800051c <MX_GPIO_Init+0x290>)
 800042a:	f001 f89b 	bl	8001564 <HAL_GPIO_Init>

  /*Configure GPIO pins : P2_R_Pin P1_G_Pin P6_G_Pin */
  GPIO_InitStruct.Pin = P2_R_Pin|P1_G_Pin|P6_G_Pin;
 800042e:	2329      	movs	r3, #41	@ 0x29
 8000430:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000432:	2301      	movs	r3, #1
 8000434:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000436:	2300      	movs	r3, #0
 8000438:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043a:	2300      	movs	r3, #0
 800043c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000442:	4619      	mov	r1, r3
 8000444:	4836      	ldr	r0, [pc, #216]	@ (8000520 <MX_GPIO_Init+0x294>)
 8000446:	f001 f88d 	bl	8001564 <HAL_GPIO_Init>

  /*Configure GPIO pins : P2_Pin P5_Pin RAMP_EXIT_Pin P6_Pin */
  GPIO_InitStruct.Pin = P2_Pin|P5_Pin|RAMP_EXIT_Pin|P6_Pin;
 800044a:	f241 1305 	movw	r3, #4357	@ 0x1105
 800044e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000450:	2300      	movs	r3, #0
 8000452:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000454:	2300      	movs	r3, #0
 8000456:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000458:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800045c:	4619      	mov	r1, r3
 800045e:	4832      	ldr	r0, [pc, #200]	@ (8000528 <MX_GPIO_Init+0x29c>)
 8000460:	f001 f880 	bl	8001564 <HAL_GPIO_Init>

  /*Configure GPIO pins : P11_R_Pin P7_G_Pin P9_G_Pin P8_G_Pin */
  GPIO_InitStruct.Pin = P11_R_Pin|P7_G_Pin|P9_G_Pin|P8_G_Pin;
 8000464:	f245 0341 	movw	r3, #20545	@ 0x5041
 8000468:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046a:	2301      	movs	r3, #1
 800046c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046e:	2300      	movs	r3, #0
 8000470:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000472:	2300      	movs	r3, #0
 8000474:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000476:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800047a:	4619      	mov	r1, r3
 800047c:	4829      	ldr	r0, [pc, #164]	@ (8000524 <MX_GPIO_Init+0x298>)
 800047e:	f001 f871 	bl	8001564 <HAL_GPIO_Init>

  /*Configure GPIO pins : P11_Pin RAMP_ENTER_Pin */
  GPIO_InitStruct.Pin = P11_Pin|RAMP_ENTER_Pin;
 8000482:	f240 4302 	movw	r3, #1026	@ 0x402
 8000486:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000488:	2300      	movs	r3, #0
 800048a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000490:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000494:	4619      	mov	r1, r3
 8000496:	4823      	ldr	r0, [pc, #140]	@ (8000524 <MX_GPIO_Init+0x298>)
 8000498:	f001 f864 	bl	8001564 <HAL_GPIO_Init>

  /*Configure GPIO pins : P9_Pin P8_Pin P1_Pin */
  GPIO_InitStruct.Pin = P9_Pin|P8_Pin|P1_Pin;
 800049c:	f644 0301 	movw	r3, #18433	@ 0x4801
 80004a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004a2:	2300      	movs	r3, #0
 80004a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	2300      	movs	r3, #0
 80004a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004ae:	4619      	mov	r1, r3
 80004b0:	4819      	ldr	r0, [pc, #100]	@ (8000518 <MX_GPIO_Init+0x28c>)
 80004b2:	f001 f857 	bl	8001564 <HAL_GPIO_Init>

  /*Configure GPIO pins : P1_R_Pin P6_R_Pin */
  GPIO_InitStruct.Pin = P1_R_Pin|P6_R_Pin;
 80004b6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80004ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004bc:	2301      	movs	r3, #1
 80004be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c4:	2300      	movs	r3, #0
 80004c6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004cc:	4619      	mov	r1, r3
 80004ce:	4816      	ldr	r0, [pc, #88]	@ (8000528 <MX_GPIO_Init+0x29c>)
 80004d0:	f001 f848 	bl	8001564 <HAL_GPIO_Init>

  /*Configure GPIO pins : P3_Pin P4_Pin P12_Pin */
  GPIO_InitStruct.Pin = P3_Pin|P4_Pin|P12_Pin;
 80004d4:	f641 0301 	movw	r3, #6145	@ 0x1801
 80004d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004da:	2300      	movs	r3, #0
 80004dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004e6:	4619      	mov	r1, r3
 80004e8:	4810      	ldr	r0, [pc, #64]	@ (800052c <MX_GPIO_Init+0x2a0>)
 80004ea:	f001 f83b 	bl	8001564 <HAL_GPIO_Init>

  /*Configure GPIO pins : P5_R_Pin P10_G_Pin P10_R_Pin P11_G_Pin */
  GPIO_InitStruct.Pin = P5_R_Pin|P10_G_Pin|P10_R_Pin|P11_G_Pin;
 80004ee:	f24e 0302 	movw	r3, #57346	@ 0xe002
 80004f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f4:	2301      	movs	r3, #1
 80004f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	2300      	movs	r3, #0
 80004fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fc:	2300      	movs	r3, #0
 80004fe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000500:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000504:	4619      	mov	r1, r3
 8000506:	4809      	ldr	r0, [pc, #36]	@ (800052c <MX_GPIO_Init+0x2a0>)
 8000508:	f001 f82c 	bl	8001564 <HAL_GPIO_Init>

}
 800050c:	bf00      	nop
 800050e:	3738      	adds	r7, #56	@ 0x38
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	44020c00 	.word	0x44020c00
 8000518:	42021000 	.word	0x42021000
 800051c:	42021400 	.word	0x42021400
 8000520:	42020000 	.word	0x42020000
 8000524:	42021800 	.word	0x42021800
 8000528:	42020400 	.word	0x42020400
 800052c:	42020c00 	.word	0x42020c00

08000530 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af02      	add	r7, sp, #8
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	f023 030f 	bic.w	r3, r3, #15
 8000540:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	011b      	lsls	r3, r3, #4
 8000546:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	f043 030c 	orr.w	r3, r3, #12
 800054e:	b2db      	uxtb	r3, r3
 8000550:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	f043 0308 	orr.w	r3, r3, #8
 8000558:	b2db      	uxtb	r3, r3
 800055a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 800055c:	7bbb      	ldrb	r3, [r7, #14]
 800055e:	f043 030c 	orr.w	r3, r3, #12
 8000562:	b2db      	uxtb	r3, r3
 8000564:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8000566:	7bbb      	ldrb	r3, [r7, #14]
 8000568:	f043 0308 	orr.w	r3, r3, #8
 800056c:	b2db      	uxtb	r3, r3
 800056e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000570:	f107 0208 	add.w	r2, r7, #8
 8000574:	2364      	movs	r3, #100	@ 0x64
 8000576:	9300      	str	r3, [sp, #0]
 8000578:	2304      	movs	r3, #4
 800057a:	214e      	movs	r1, #78	@ 0x4e
 800057c:	4803      	ldr	r0, [pc, #12]	@ (800058c <lcd_send_cmd+0x5c>)
 800057e:	f001 fa1b 	bl	80019b8 <HAL_I2C_Master_Transmit>
}
 8000582:	bf00      	nop
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000028 	.word	0x20000028

08000590 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af02      	add	r7, sp, #8
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	f023 030f 	bic.w	r3, r3, #15
 80005a0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	011b      	lsls	r3, r3, #4
 80005a6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	f043 030d 	orr.w	r3, r3, #13
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	f043 0309 	orr.w	r3, r3, #9
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 80005bc:	7bbb      	ldrb	r3, [r7, #14]
 80005be:	f043 030d 	orr.w	r3, r3, #13
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 80005c6:	7bbb      	ldrb	r3, [r7, #14]
 80005c8:	f043 0309 	orr.w	r3, r3, #9
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005d0:	f107 0208 	add.w	r2, r7, #8
 80005d4:	2364      	movs	r3, #100	@ 0x64
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2304      	movs	r3, #4
 80005da:	214e      	movs	r1, #78	@ 0x4e
 80005dc:	4803      	ldr	r0, [pc, #12]	@ (80005ec <lcd_send_data+0x5c>)
 80005de:	f001 f9eb 	bl	80019b8 <HAL_I2C_Master_Transmit>
}
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000028 	.word	0x20000028

080005f0 <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80005f4:	2032      	movs	r0, #50	@ 0x32
 80005f6:	f000 fe2d 	bl	8001254 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005fa:	2030      	movs	r0, #48	@ 0x30
 80005fc:	f7ff ff98 	bl	8000530 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000600:	2005      	movs	r0, #5
 8000602:	f000 fe27 	bl	8001254 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000606:	2030      	movs	r0, #48	@ 0x30
 8000608:	f7ff ff92 	bl	8000530 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800060c:	2001      	movs	r0, #1
 800060e:	f000 fe21 	bl	8001254 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000612:	2030      	movs	r0, #48	@ 0x30
 8000614:	f7ff ff8c 	bl	8000530 <lcd_send_cmd>
	HAL_Delay(10);
 8000618:	200a      	movs	r0, #10
 800061a:	f000 fe1b 	bl	8001254 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800061e:	2020      	movs	r0, #32
 8000620:	f7ff ff86 	bl	8000530 <lcd_send_cmd>
	HAL_Delay(10);
 8000624:	200a      	movs	r0, #10
 8000626:	f000 fe15 	bl	8001254 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800062a:	2028      	movs	r0, #40	@ 0x28
 800062c:	f7ff ff80 	bl	8000530 <lcd_send_cmd>
	HAL_Delay(1);
 8000630:	2001      	movs	r0, #1
 8000632:	f000 fe0f 	bl	8001254 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000636:	2008      	movs	r0, #8
 8000638:	f7ff ff7a 	bl	8000530 <lcd_send_cmd>
	HAL_Delay(1);
 800063c:	2001      	movs	r0, #1
 800063e:	f000 fe09 	bl	8001254 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000642:	2001      	movs	r0, #1
 8000644:	f7ff ff74 	bl	8000530 <lcd_send_cmd>
	HAL_Delay(1);
 8000648:	2001      	movs	r0, #1
 800064a:	f000 fe03 	bl	8001254 <HAL_Delay>
	HAL_Delay(1);
 800064e:	2001      	movs	r0, #1
 8000650:	f000 fe00 	bl	8001254 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000654:	2006      	movs	r0, #6
 8000656:	f7ff ff6b 	bl	8000530 <lcd_send_cmd>
	HAL_Delay(1);
 800065a:	2001      	movs	r0, #1
 800065c:	f000 fdfa 	bl	8001254 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000660:	200c      	movs	r0, #12
 8000662:	f7ff ff65 	bl	8000530 <lcd_send_cmd>
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}

0800066a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000672:	e006      	b.n	8000682 <lcd_send_string+0x18>
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	1c5a      	adds	r2, r3, #1
 8000678:	607a      	str	r2, [r7, #4]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ff87 	bl	8000590 <lcd_send_data>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1f4      	bne.n	8000674 <lcd_send_string+0xa>
}
 800068a:	bf00      	nop
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000698:	4b1b      	ldr	r3, [pc, #108]	@ (8000708 <MX_I2C1_Init+0x74>)
 800069a:	4a1c      	ldr	r2, [pc, #112]	@ (800070c <MX_I2C1_Init+0x78>)
 800069c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 800069e:	4b1a      	ldr	r3, [pc, #104]	@ (8000708 <MX_I2C1_Init+0x74>)
 80006a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000710 <MX_I2C1_Init+0x7c>)
 80006a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006a4:	4b18      	ldr	r3, [pc, #96]	@ (8000708 <MX_I2C1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006aa:	4b17      	ldr	r3, [pc, #92]	@ (8000708 <MX_I2C1_Init+0x74>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b0:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <MX_I2C1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006b6:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <MX_I2C1_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006bc:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <MX_I2C1_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c2:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_I2C1_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <MX_I2C1_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ce:	480e      	ldr	r0, [pc, #56]	@ (8000708 <MX_I2C1_Init+0x74>)
 80006d0:	f001 f8d6 	bl	8001880 <HAL_I2C_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006da:	f000 fb3b 	bl	8000d54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006de:	2100      	movs	r1, #0
 80006e0:	4809      	ldr	r0, [pc, #36]	@ (8000708 <MX_I2C1_Init+0x74>)
 80006e2:	f001 fc77 	bl	8001fd4 <HAL_I2CEx_ConfigAnalogFilter>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006ec:	f000 fb32 	bl	8000d54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006f0:	2100      	movs	r1, #0
 80006f2:	4805      	ldr	r0, [pc, #20]	@ (8000708 <MX_I2C1_Init+0x74>)
 80006f4:	f001 fcb9 	bl	800206a <HAL_I2CEx_ConfigDigitalFilter>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006fe:	f000 fb29 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000028 	.word	0x20000028
 800070c:	40005400 	.word	0x40005400
 8000710:	60808cd3 	.word	0x60808cd3

08000714 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b0cc      	sub	sp, #304	@ 0x130
 8000718:	af00      	add	r7, sp, #0
 800071a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800071e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000722:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000734:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000738:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800073c:	4618      	mov	r0, r3
 800073e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000742:	461a      	mov	r2, r3
 8000744:	2100      	movs	r1, #0
 8000746:	f005 ffab 	bl	80066a0 <memset>
  if(i2cHandle->Instance==I2C1)
 800074a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800074e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a33      	ldr	r2, [pc, #204]	@ (8000824 <HAL_I2C_MspInit+0x110>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d15d      	bne.n	8000818 <HAL_I2C_MspInit+0x104>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800075c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000760:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000764:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000768:	f04f 0300 	mov.w	r3, #0
 800076c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000770:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000774:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000778:	2200      	movs	r2, #0
 800077a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800077e:	f107 0310 	add.w	r3, r7, #16
 8000782:	4618      	mov	r0, r3
 8000784:	f002 fbf6 	bl	8002f74 <HAL_RCCEx_PeriphCLKConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 800078e:	f000 fae1 	bl	8000d54 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b25      	ldr	r3, [pc, #148]	@ (8000828 <HAL_I2C_MspInit+0x114>)
 8000794:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000798:	4a23      	ldr	r2, [pc, #140]	@ (8000828 <HAL_I2C_MspInit+0x114>)
 800079a:	f043 0302 	orr.w	r3, r3, #2
 800079e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007a2:	4b21      	ldr	r3, [pc, #132]	@ (8000828 <HAL_I2C_MspInit+0x114>)
 80007a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007a8:	f003 0202 	and.w	r2, r3, #2
 80007ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80007b0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80007ba:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80007be:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007c0:	23c0      	movs	r3, #192	@ 0xc0
 80007c2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007c6:	2312      	movs	r3, #18
 80007c8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007d8:	2304      	movs	r3, #4
 80007da:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007de:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80007e2:	4619      	mov	r1, r3
 80007e4:	4811      	ldr	r0, [pc, #68]	@ (800082c <HAL_I2C_MspInit+0x118>)
 80007e6:	f000 febd 	bl	8001564 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <HAL_I2C_MspInit+0x114>)
 80007ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80007f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000828 <HAL_I2C_MspInit+0x114>)
 80007f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007f6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80007fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <HAL_I2C_MspInit+0x114>)
 80007fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000800:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8000804:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000808:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000812:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000816:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000818:	bf00      	nop
 800081a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40005400 	.word	0x40005400
 8000828:	44020c00 	.word	0x44020c00
 800082c:	42020400 	.word	0x42020400

08000830 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END ICACHE_Init 1 */
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b090      	sub	sp, #64	@ 0x40
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000846:	f000 fc47 	bl	80010d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084a:	f000 fa13 	bl	8000c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084e:	f7ff fd1d 	bl	800028c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000852:	f7ff ff1f 	bl	8000694 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000856:	f000 fb35 	bl	8000ec4 <MX_TIM3_Init>
  MX_ICACHE_Init();
 800085a:	f7ff ffe9 	bl	8000830 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800085e:	2100      	movs	r1, #0
 8000860:	48a8      	ldr	r0, [pc, #672]	@ (8000b04 <main+0x2c4>)
 8000862:	f004 fcf9 	bl	8005258 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000866:	2104      	movs	r1, #4
 8000868:	48a6      	ldr	r0, [pc, #664]	@ (8000b04 <main+0x2c4>)
 800086a:	f004 fcf5 	bl	8005258 <HAL_TIM_PWM_Start>

  //LCD
  lcd_init();
 800086e:	f7ff febf 	bl	80005f0 <lcd_init>
  HAL_Delay(50);
 8000872:	2032      	movs	r0, #50	@ 0x32
 8000874:	f000 fcee 	bl	8001254 <HAL_Delay>
  lcd_send_string("parking 2");
 8000878:	48a3      	ldr	r0, [pc, #652]	@ (8000b08 <main+0x2c8>)
 800087a:	f7ff fef6 	bl	800066a <lcd_send_string>
  HAL_Delay(500);
 800087e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000882:	f000 fce7 	bl	8001254 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	int x= 0;
 8000886:	2300      	movs	r3, #0
 8000888:	63fb      	str	r3, [r7, #60]	@ 0x3c
	for(x=250; x<750; x=x+1)
 800088a:	23fa      	movs	r3, #250	@ 0xfa
 800088c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800088e:	e00d      	b.n	80008ac <main+0x6c>
	{
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, x);
 8000890:	4b9c      	ldr	r3, [pc, #624]	@ (8000b04 <main+0x2c4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000896:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, x);
 8000898:	4b9a      	ldr	r3, [pc, #616]	@ (8000b04 <main+0x2c4>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800089e:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(5);
 80008a0:	2005      	movs	r0, #5
 80008a2:	f000 fcd7 	bl	8001254 <HAL_Delay>
	for(x=250; x<750; x=x+1)
 80008a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80008a8:	3301      	adds	r3, #1
 80008aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80008ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80008ae:	f240 22ed 	movw	r2, #749	@ 0x2ed
 80008b2:	4293      	cmp	r3, r2
 80008b4:	ddec      	ble.n	8000890 <main+0x50>
	}

	int r1 = 0, r2 = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80008ba:	2300      	movs	r3, #0
 80008bc:	637b      	str	r3, [r7, #52]	@ 0x34
	r1 = HAL_GPIO_ReadPin(GPIOG, RAMP_ENTER_Pin);
 80008be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008c2:	4892      	ldr	r0, [pc, #584]	@ (8000b0c <main+0x2cc>)
 80008c4:	f000 ffac 	bl	8001820 <HAL_GPIO_ReadPin>
 80008c8:	4603      	mov	r3, r0
 80008ca:	63bb      	str	r3, [r7, #56]	@ 0x38
	r2 = HAL_GPIO_ReadPin(GPIOB, RAMP_EXIT_Pin);
 80008cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008d0:	488f      	ldr	r0, [pc, #572]	@ (8000b10 <main+0x2d0>)
 80008d2:	f000 ffa5 	bl	8001820 <HAL_GPIO_ReadPin>
 80008d6:	4603      	mov	r3, r0
 80008d8:	637b      	str	r3, [r7, #52]	@ 0x34

	HAL_Delay(10);
 80008da:	200a      	movs	r0, #10
 80008dc:	f000 fcba 	bl	8001254 <HAL_Delay>
	int p1 = HAL_GPIO_ReadPin(GPIOE, P1_Pin);
 80008e0:	2101      	movs	r1, #1
 80008e2:	488c      	ldr	r0, [pc, #560]	@ (8000b14 <main+0x2d4>)
 80008e4:	f000 ff9c 	bl	8001820 <HAL_GPIO_ReadPin>
 80008e8:	4603      	mov	r3, r0
 80008ea:	633b      	str	r3, [r7, #48]	@ 0x30
	if(p1==1)
 80008ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d10b      	bne.n	800090a <main+0xca>
	{
		HAL_GPIO_WritePin(GPIOB, P1_R_Pin, 1);
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008f8:	4885      	ldr	r0, [pc, #532]	@ (8000b10 <main+0x2d0>)
 80008fa:	f000 ffa9 	bl	8001850 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, P1_G_Pin, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2108      	movs	r1, #8
 8000902:	4885      	ldr	r0, [pc, #532]	@ (8000b18 <main+0x2d8>)
 8000904:	f000 ffa4 	bl	8001850 <HAL_GPIO_WritePin>
 8000908:	e00d      	b.n	8000926 <main+0xe6>
	}
	else if(p1==0)
 800090a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800090c:	2b00      	cmp	r3, #0
 800090e:	d10a      	bne.n	8000926 <main+0xe6>
	{
		HAL_GPIO_WritePin(GPIOB, P1_R_Pin, 0);
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000916:	487e      	ldr	r0, [pc, #504]	@ (8000b10 <main+0x2d0>)
 8000918:	f000 ff9a 	bl	8001850 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, P1_G_Pin, 1);
 800091c:	2201      	movs	r2, #1
 800091e:	2108      	movs	r1, #8
 8000920:	487d      	ldr	r0, [pc, #500]	@ (8000b18 <main+0x2d8>)
 8000922:	f000 ff95 	bl	8001850 <HAL_GPIO_WritePin>
	}

	int p2 = HAL_GPIO_ReadPin(GPIOB, P2_Pin);
 8000926:	2101      	movs	r1, #1
 8000928:	4879      	ldr	r0, [pc, #484]	@ (8000b10 <main+0x2d0>)
 800092a:	f000 ff79 	bl	8001820 <HAL_GPIO_ReadPin>
 800092e:	4603      	mov	r3, r0
 8000930:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if(p2==1)
 8000932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000934:	2b01      	cmp	r3, #1
 8000936:	d10b      	bne.n	8000950 <main+0x110>
	{
		HAL_GPIO_WritePin(GPIOA, P2_R_Pin, 1);
 8000938:	2201      	movs	r2, #1
 800093a:	2101      	movs	r1, #1
 800093c:	4876      	ldr	r0, [pc, #472]	@ (8000b18 <main+0x2d8>)
 800093e:	f000 ff87 	bl	8001850 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P2_G_Pin, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000948:	4872      	ldr	r0, [pc, #456]	@ (8000b14 <main+0x2d4>)
 800094a:	f000 ff81 	bl	8001850 <HAL_GPIO_WritePin>
 800094e:	e00d      	b.n	800096c <main+0x12c>
	}
	else if(p2==0)
 8000950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000952:	2b00      	cmp	r3, #0
 8000954:	d10a      	bne.n	800096c <main+0x12c>
	{
		HAL_GPIO_WritePin(GPIOE, P2_G_Pin, 1);
 8000956:	2201      	movs	r2, #1
 8000958:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800095c:	486d      	ldr	r0, [pc, #436]	@ (8000b14 <main+0x2d4>)
 800095e:	f000 ff77 	bl	8001850 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, P2_R_Pin, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2101      	movs	r1, #1
 8000966:	486c      	ldr	r0, [pc, #432]	@ (8000b18 <main+0x2d8>)
 8000968:	f000 ff72 	bl	8001850 <HAL_GPIO_WritePin>
	}

	int p3 = HAL_GPIO_ReadPin(GPIOD, P3_Pin);
 800096c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000970:	486a      	ldr	r0, [pc, #424]	@ (8000b1c <main+0x2dc>)
 8000972:	f000 ff55 	bl	8001820 <HAL_GPIO_ReadPin>
 8000976:	4603      	mov	r3, r0
 8000978:	62bb      	str	r3, [r7, #40]	@ 0x28
	if(p3==1)
 800097a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800097c:	2b01      	cmp	r3, #1
 800097e:	d10b      	bne.n	8000998 <main+0x158>
	{
		HAL_GPIO_WritePin(GPIOE, P3_R_Pin, 1);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000986:	4863      	ldr	r0, [pc, #396]	@ (8000b14 <main+0x2d4>)
 8000988:	f000 ff62 	bl	8001850 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P3_G_Pin, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	2140      	movs	r1, #64	@ 0x40
 8000990:	4860      	ldr	r0, [pc, #384]	@ (8000b14 <main+0x2d4>)
 8000992:	f000 ff5d 	bl	8001850 <HAL_GPIO_WritePin>
 8000996:	e00d      	b.n	80009b4 <main+0x174>
	}
	else if(p3==0)
 8000998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800099a:	2b00      	cmp	r3, #0
 800099c:	d10a      	bne.n	80009b4 <main+0x174>
	{
		HAL_GPIO_WritePin(GPIOE, P3_G_Pin, 1);
 800099e:	2201      	movs	r2, #1
 80009a0:	2140      	movs	r1, #64	@ 0x40
 80009a2:	485c      	ldr	r0, [pc, #368]	@ (8000b14 <main+0x2d4>)
 80009a4:	f000 ff54 	bl	8001850 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P3_R_Pin, 0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009ae:	4859      	ldr	r0, [pc, #356]	@ (8000b14 <main+0x2d4>)
 80009b0:	f000 ff4e 	bl	8001850 <HAL_GPIO_WritePin>
	}

	int p4 = HAL_GPIO_ReadPin(GPIOD, P4_Pin);
 80009b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009b8:	4858      	ldr	r0, [pc, #352]	@ (8000b1c <main+0x2dc>)
 80009ba:	f000 ff31 	bl	8001820 <HAL_GPIO_ReadPin>
 80009be:	4603      	mov	r3, r0
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
	if(p4==1)
 80009c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d10b      	bne.n	80009e0 <main+0x1a0>
	{
		HAL_GPIO_WritePin(GPIOE, P4_R_Pin, 1);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2180      	movs	r1, #128	@ 0x80
 80009cc:	4851      	ldr	r0, [pc, #324]	@ (8000b14 <main+0x2d4>)
 80009ce:	f000 ff3f 	bl	8001850 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P4_G_Pin, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009d8:	484e      	ldr	r0, [pc, #312]	@ (8000b14 <main+0x2d4>)
 80009da:	f000 ff39 	bl	8001850 <HAL_GPIO_WritePin>
 80009de:	e00d      	b.n	80009fc <main+0x1bc>
	}
	else if(p4==0)
 80009e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d10a      	bne.n	80009fc <main+0x1bc>
	{
		HAL_GPIO_WritePin(GPIOE, P4_G_Pin, 1);
 80009e6:	2201      	movs	r2, #1
 80009e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009ec:	4849      	ldr	r0, [pc, #292]	@ (8000b14 <main+0x2d4>)
 80009ee:	f000 ff2f 	bl	8001850 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P4_R_Pin, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2180      	movs	r1, #128	@ 0x80
 80009f6:	4847      	ldr	r0, [pc, #284]	@ (8000b14 <main+0x2d4>)
 80009f8:	f000 ff2a 	bl	8001850 <HAL_GPIO_WritePin>
	}

	int p5 = HAL_GPIO_ReadPin(GPIOB, P5_Pin);
 80009fc:	2104      	movs	r1, #4
 80009fe:	4844      	ldr	r0, [pc, #272]	@ (8000b10 <main+0x2d0>)
 8000a00:	f000 ff0e 	bl	8001820 <HAL_GPIO_ReadPin>
 8000a04:	4603      	mov	r3, r0
 8000a06:	623b      	str	r3, [r7, #32]
	if(p5==1)
 8000a08:	6a3b      	ldr	r3, [r7, #32]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d10c      	bne.n	8000a28 <main+0x1e8>
	{
		HAL_GPIO_WritePin(GPIOD, P5_R_Pin, 1);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a14:	4841      	ldr	r0, [pc, #260]	@ (8000b1c <main+0x2dc>)
 8000a16:	f000 ff1b 	bl	8001850 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P5_G_Pin, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a20:	483c      	ldr	r0, [pc, #240]	@ (8000b14 <main+0x2d4>)
 8000a22:	f000 ff15 	bl	8001850 <HAL_GPIO_WritePin>
 8000a26:	e00e      	b.n	8000a46 <main+0x206>
	}
	else if(p5==0)
 8000a28:	6a3b      	ldr	r3, [r7, #32]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d10b      	bne.n	8000a46 <main+0x206>
	{
		HAL_GPIO_WritePin(GPIOE, P5_G_Pin, 1);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a34:	4837      	ldr	r0, [pc, #220]	@ (8000b14 <main+0x2d4>)
 8000a36:	f000 ff0b 	bl	8001850 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, P5_R_Pin, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a40:	4836      	ldr	r0, [pc, #216]	@ (8000b1c <main+0x2dc>)
 8000a42:	f000 ff05 	bl	8001850 <HAL_GPIO_WritePin>
	}

	int p6 = HAL_GPIO_ReadPin(GPIOB, P6_Pin);
 8000a46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a4a:	4831      	ldr	r0, [pc, #196]	@ (8000b10 <main+0x2d0>)
 8000a4c:	f000 fee8 	bl	8001820 <HAL_GPIO_ReadPin>
 8000a50:	4603      	mov	r3, r0
 8000a52:	61fb      	str	r3, [r7, #28]
	if(p6==1)
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d10b      	bne.n	8000a72 <main+0x232>
	{
		HAL_GPIO_WritePin(GPIOB, P6_R_Pin, 1);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a60:	482b      	ldr	r0, [pc, #172]	@ (8000b10 <main+0x2d0>)
 8000a62:	f000 fef5 	bl	8001850 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, P6_G_Pin, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2120      	movs	r1, #32
 8000a6a:	482b      	ldr	r0, [pc, #172]	@ (8000b18 <main+0x2d8>)
 8000a6c:	f000 fef0 	bl	8001850 <HAL_GPIO_WritePin>
 8000a70:	e00d      	b.n	8000a8e <main+0x24e>
	}
	else if(p6==0)
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d10a      	bne.n	8000a8e <main+0x24e>
	{
		HAL_GPIO_WritePin(GPIOA, P6_G_Pin, 1);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2120      	movs	r1, #32
 8000a7c:	4826      	ldr	r0, [pc, #152]	@ (8000b18 <main+0x2d8>)
 8000a7e:	f000 fee7 	bl	8001850 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, P6_R_Pin, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a88:	4821      	ldr	r0, [pc, #132]	@ (8000b10 <main+0x2d0>)
 8000a8a:	f000 fee1 	bl	8001850 <HAL_GPIO_WritePin>
	}

	int p7 = HAL_GPIO_ReadPin(GPIOF, P7_Pin);
 8000a8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a92:	4823      	ldr	r0, [pc, #140]	@ (8000b20 <main+0x2e0>)
 8000a94:	f000 fec4 	bl	8001820 <HAL_GPIO_ReadPin>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	61bb      	str	r3, [r7, #24]
	if(p7==1)
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d10b      	bne.n	8000aba <main+0x27a>
	{
		HAL_GPIO_WritePin(GPIOF, P7_R_Pin, 1);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aa8:	481d      	ldr	r0, [pc, #116]	@ (8000b20 <main+0x2e0>)
 8000aaa:	f000 fed1 	bl	8001850 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, P7_G_Pin, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2140      	movs	r1, #64	@ 0x40
 8000ab2:	4816      	ldr	r0, [pc, #88]	@ (8000b0c <main+0x2cc>)
 8000ab4:	f000 fecc 	bl	8001850 <HAL_GPIO_WritePin>
 8000ab8:	e00d      	b.n	8000ad6 <main+0x296>
	}
	else if(p7==0)
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d10a      	bne.n	8000ad6 <main+0x296>
	{
		HAL_GPIO_WritePin(GPIOG, P7_G_Pin, 1);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2140      	movs	r1, #64	@ 0x40
 8000ac4:	4811      	ldr	r0, [pc, #68]	@ (8000b0c <main+0x2cc>)
 8000ac6:	f000 fec3 	bl	8001850 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, P7_R_Pin, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ad0:	4813      	ldr	r0, [pc, #76]	@ (8000b20 <main+0x2e0>)
 8000ad2:	f000 febd 	bl	8001850 <HAL_GPIO_WritePin>
	}

	int p8 = HAL_GPIO_ReadPin(GPIOE, P8_Pin);
 8000ad6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ada:	480e      	ldr	r0, [pc, #56]	@ (8000b14 <main+0x2d4>)
 8000adc:	f000 fea0 	bl	8001820 <HAL_GPIO_ReadPin>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	617b      	str	r3, [r7, #20]
	if(p8==1)
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d11c      	bne.n	8000b24 <main+0x2e4>
	{
		HAL_GPIO_WritePin(GPIOE, P8_R_Pin, 1);
 8000aea:	2201      	movs	r2, #1
 8000aec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000af0:	4808      	ldr	r0, [pc, #32]	@ (8000b14 <main+0x2d4>)
 8000af2:	f000 fead 	bl	8001850 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, P8_G_Pin, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000afc:	4803      	ldr	r0, [pc, #12]	@ (8000b0c <main+0x2cc>)
 8000afe:	f000 fea7 	bl	8001850 <HAL_GPIO_WritePin>
 8000b02:	e01e      	b.n	8000b42 <main+0x302>
 8000b04:	2000007c 	.word	0x2000007c
 8000b08:	08006710 	.word	0x08006710
 8000b0c:	42021800 	.word	0x42021800
 8000b10:	42020400 	.word	0x42020400
 8000b14:	42021000 	.word	0x42021000
 8000b18:	42020000 	.word	0x42020000
 8000b1c:	42020c00 	.word	0x42020c00
 8000b20:	42021400 	.word	0x42021400
	}
	else if(p8==0)
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d10b      	bne.n	8000b42 <main+0x302>
	{
		HAL_GPIO_WritePin(GPIOG, P8_G_Pin, 1);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b30:	484c      	ldr	r0, [pc, #304]	@ (8000c64 <main+0x424>)
 8000b32:	f000 fe8d 	bl	8001850 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P8_R_Pin, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b3c:	484a      	ldr	r0, [pc, #296]	@ (8000c68 <main+0x428>)
 8000b3e:	f000 fe87 	bl	8001850 <HAL_GPIO_WritePin>
	}

	int p9 = HAL_GPIO_ReadPin(GPIOE, P9_Pin);
 8000b42:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b46:	4848      	ldr	r0, [pc, #288]	@ (8000c68 <main+0x428>)
 8000b48:	f000 fe6a 	bl	8001820 <HAL_GPIO_ReadPin>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	613b      	str	r3, [r7, #16]
	if(p9==1)
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d10c      	bne.n	8000b70 <main+0x330>
	{
		HAL_GPIO_WritePin(GPIOE, P9_R_Pin, 1);
 8000b56:	2201      	movs	r2, #1
 8000b58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b5c:	4842      	ldr	r0, [pc, #264]	@ (8000c68 <main+0x428>)
 8000b5e:	f000 fe77 	bl	8001850 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, P9_G_Pin, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b68:	483e      	ldr	r0, [pc, #248]	@ (8000c64 <main+0x424>)
 8000b6a:	f000 fe71 	bl	8001850 <HAL_GPIO_WritePin>
 8000b6e:	e00e      	b.n	8000b8e <main+0x34e>
	}
	else if(p9==0)
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d10b      	bne.n	8000b8e <main+0x34e>
	{
		HAL_GPIO_WritePin(GPIOG, P9_G_Pin, 1);
 8000b76:	2201      	movs	r2, #1
 8000b78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b7c:	4839      	ldr	r0, [pc, #228]	@ (8000c64 <main+0x424>)
 8000b7e:	f000 fe67 	bl	8001850 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P9_R_Pin, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b88:	4837      	ldr	r0, [pc, #220]	@ (8000c68 <main+0x428>)
 8000b8a:	f000 fe61 	bl	8001850 <HAL_GPIO_WritePin>
	}

	int p10 = HAL_GPIO_ReadPin(GPIOF, P10_Pin);
 8000b8e:	2108      	movs	r1, #8
 8000b90:	4836      	ldr	r0, [pc, #216]	@ (8000c6c <main+0x42c>)
 8000b92:	f000 fe45 	bl	8001820 <HAL_GPIO_ReadPin>
 8000b96:	4603      	mov	r3, r0
 8000b98:	60fb      	str	r3, [r7, #12]
	if(p10==1)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d10c      	bne.n	8000bba <main+0x37a>
	{
		HAL_GPIO_WritePin(GPIOD, P10_R_Pin, 1);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ba6:	4832      	ldr	r0, [pc, #200]	@ (8000c70 <main+0x430>)
 8000ba8:	f000 fe52 	bl	8001850 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, P10_G_Pin, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bb2:	482f      	ldr	r0, [pc, #188]	@ (8000c70 <main+0x430>)
 8000bb4:	f000 fe4c 	bl	8001850 <HAL_GPIO_WritePin>
 8000bb8:	e00e      	b.n	8000bd8 <main+0x398>
	}
	else if(p10==0)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d10b      	bne.n	8000bd8 <main+0x398>
	{
		HAL_GPIO_WritePin(GPIOD, P10_G_Pin, 1);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bc6:	482a      	ldr	r0, [pc, #168]	@ (8000c70 <main+0x430>)
 8000bc8:	f000 fe42 	bl	8001850 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, P10_R_Pin, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bd2:	4827      	ldr	r0, [pc, #156]	@ (8000c70 <main+0x430>)
 8000bd4:	f000 fe3c 	bl	8001850 <HAL_GPIO_WritePin>
	}

	int p11 = HAL_GPIO_ReadPin(GPIOG, P11_Pin);
 8000bd8:	2102      	movs	r1, #2
 8000bda:	4822      	ldr	r0, [pc, #136]	@ (8000c64 <main+0x424>)
 8000bdc:	f000 fe20 	bl	8001820 <HAL_GPIO_ReadPin>
 8000be0:	4603      	mov	r3, r0
 8000be2:	60bb      	str	r3, [r7, #8]
	if(p11==1)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d10a      	bne.n	8000c00 <main+0x3c0>
	{
		HAL_GPIO_WritePin(GPIOG, P11_R_Pin, 1);
 8000bea:	2201      	movs	r2, #1
 8000bec:	2101      	movs	r1, #1
 8000bee:	481d      	ldr	r0, [pc, #116]	@ (8000c64 <main+0x424>)
 8000bf0:	f000 fe2e 	bl	8001850 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, P11_G_Pin, 0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2102      	movs	r1, #2
 8000bf8:	481d      	ldr	r0, [pc, #116]	@ (8000c70 <main+0x430>)
 8000bfa:	f000 fe29 	bl	8001850 <HAL_GPIO_WritePin>
 8000bfe:	e00c      	b.n	8000c1a <main+0x3da>
	}
	else if(p11==0)
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d109      	bne.n	8000c1a <main+0x3da>
	{
		HAL_GPIO_WritePin(GPIOD, P11_G_Pin, 1);
 8000c06:	2201      	movs	r2, #1
 8000c08:	2102      	movs	r1, #2
 8000c0a:	4819      	ldr	r0, [pc, #100]	@ (8000c70 <main+0x430>)
 8000c0c:	f000 fe20 	bl	8001850 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, P11_R_Pin, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2101      	movs	r1, #1
 8000c14:	4813      	ldr	r0, [pc, #76]	@ (8000c64 <main+0x424>)
 8000c16:	f000 fe1b 	bl	8001850 <HAL_GPIO_WritePin>
	}

	int p12 = HAL_GPIO_ReadPin(GPIOD, P12_Pin);
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	4814      	ldr	r0, [pc, #80]	@ (8000c70 <main+0x430>)
 8000c1e:	f000 fdff 	bl	8001820 <HAL_GPIO_ReadPin>
 8000c22:	4603      	mov	r3, r0
 8000c24:	607b      	str	r3, [r7, #4]
	if(p12==1)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d10b      	bne.n	8000c44 <main+0x404>
	{
		HAL_GPIO_WritePin(GPIOF, P12_R_Pin, 1);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	2180      	movs	r1, #128	@ 0x80
 8000c30:	480e      	ldr	r0, [pc, #56]	@ (8000c6c <main+0x42c>)
 8000c32:	f000 fe0d 	bl	8001850 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, P12_G_Pin, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c3c:	480b      	ldr	r0, [pc, #44]	@ (8000c6c <main+0x42c>)
 8000c3e:	f000 fe07 	bl	8001850 <HAL_GPIO_WritePin>
 8000c42:	e620      	b.n	8000886 <main+0x46>
	}
	else if(p12==0)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f47f ae1d 	bne.w	8000886 <main+0x46>
	{
		HAL_GPIO_WritePin(GPIOF, P12_G_Pin, 1);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c52:	4806      	ldr	r0, [pc, #24]	@ (8000c6c <main+0x42c>)
 8000c54:	f000 fdfc 	bl	8001850 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, P12_R_Pin, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2180      	movs	r1, #128	@ 0x80
 8000c5c:	4803      	ldr	r0, [pc, #12]	@ (8000c6c <main+0x42c>)
 8000c5e:	f000 fdf7 	bl	8001850 <HAL_GPIO_WritePin>
  {
 8000c62:	e610      	b.n	8000886 <main+0x46>
 8000c64:	42021800 	.word	0x42021800
 8000c68:	42021000 	.word	0x42021000
 8000c6c:	42021400 	.word	0x42021400
 8000c70:	42020c00 	.word	0x42020c00

08000c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b09c      	sub	sp, #112	@ 0x70
 8000c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7a:	f107 0320 	add.w	r3, r7, #32
 8000c7e:	2250      	movs	r2, #80	@ 0x50
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f005 fd0c 	bl	80066a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c88:	f107 0308 	add.w	r3, r7, #8
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
 8000c98:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d4c <SystemClock_Config+0xd8>)
 8000c9c:	691b      	ldr	r3, [r3, #16]
 8000c9e:	4a2b      	ldr	r2, [pc, #172]	@ (8000d4c <SystemClock_Config+0xd8>)
 8000ca0:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000ca4:	6113      	str	r3, [r2, #16]
 8000ca6:	4b29      	ldr	r3, [pc, #164]	@ (8000d4c <SystemClock_Config+0xd8>)
 8000ca8:	691b      	ldr	r3, [r3, #16]
 8000caa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cb2:	bf00      	nop
 8000cb4:	4b25      	ldr	r3, [pc, #148]	@ (8000d4c <SystemClock_Config+0xd8>)
 8000cb6:	695b      	ldr	r3, [r3, #20]
 8000cb8:	f003 0308 	and.w	r3, r3, #8
 8000cbc:	2b08      	cmp	r3, #8
 8000cbe:	d1f9      	bne.n	8000cb4 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cc4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8000cd6:	23fa      	movs	r3, #250	@ 0xfa
 8000cd8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf2:	f107 0320 	add.w	r3, r7, #32
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f001 fa04 	bl	8002104 <HAL_RCC_OscConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d02:	f000 f827 	bl	8000d54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d06:	231f      	movs	r3, #31
 8000d08:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d1e:	f107 0308 	add.w	r3, r7, #8
 8000d22:	2105      	movs	r1, #5
 8000d24:	4618      	mov	r0, r3
 8000d26:	f001 fe25 	bl	8002974 <HAL_RCC_ClockConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d30:	f000 f810 	bl	8000d54 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000d34:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <SystemClock_Config+0xdc>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000d3c:	4a04      	ldr	r2, [pc, #16]	@ (8000d50 <SystemClock_Config+0xdc>)
 8000d3e:	f043 0320 	orr.w	r3, r3, #32
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	3770      	adds	r7, #112	@ 0x70
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	44020800 	.word	0x44020800
 8000d50:	40022000 	.word	0x40022000

08000d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d58:	b672      	cpsid	i
}
 8000d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <Error_Handler+0x8>

08000d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d72:	bf00      	nop
 8000d74:	e7fd      	b.n	8000d72 <NMI_Handler+0x4>

08000d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7a:	bf00      	nop
 8000d7c:	e7fd      	b.n	8000d7a <HardFault_Handler+0x4>

08000d7e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d82:	bf00      	nop
 8000d84:	e7fd      	b.n	8000d82 <MemManage_Handler+0x4>

08000d86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8a:	bf00      	nop
 8000d8c:	e7fd      	b.n	8000d8a <BusFault_Handler+0x4>

08000d8e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d92:	bf00      	nop
 8000d94:	e7fd      	b.n	8000d92 <UsageFault_Handler+0x4>

08000d96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc4:	f000 fa26 	bl	8001214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dd2:	4b35      	ldr	r3, [pc, #212]	@ (8000ea8 <SystemInit+0xdc>)
 8000dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dd8:	4a33      	ldr	r2, [pc, #204]	@ (8000ea8 <SystemInit+0xdc>)
 8000dda:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dde:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000de2:	4b32      	ldr	r3, [pc, #200]	@ (8000eac <SystemInit+0xe0>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000de8:	4b30      	ldr	r3, [pc, #192]	@ (8000eac <SystemInit+0xe0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000dee:	4b2f      	ldr	r3, [pc, #188]	@ (8000eac <SystemInit+0xe0>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000df4:	4b2d      	ldr	r3, [pc, #180]	@ (8000eac <SystemInit+0xe0>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	492c      	ldr	r1, [pc, #176]	@ (8000eac <SystemInit+0xe0>)
 8000dfa:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb0 <SystemInit+0xe4>)
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000e00:	4b2a      	ldr	r3, [pc, #168]	@ (8000eac <SystemInit+0xe0>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000e06:	4b29      	ldr	r3, [pc, #164]	@ (8000eac <SystemInit+0xe0>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000e0c:	4b27      	ldr	r3, [pc, #156]	@ (8000eac <SystemInit+0xe0>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000e12:	4b26      	ldr	r3, [pc, #152]	@ (8000eac <SystemInit+0xe0>)
 8000e14:	4a27      	ldr	r2, [pc, #156]	@ (8000eb4 <SystemInit+0xe8>)
 8000e16:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000e18:	4b24      	ldr	r3, [pc, #144]	@ (8000eac <SystemInit+0xe0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000e1e:	4b23      	ldr	r3, [pc, #140]	@ (8000eac <SystemInit+0xe0>)
 8000e20:	4a24      	ldr	r2, [pc, #144]	@ (8000eb4 <SystemInit+0xe8>)
 8000e22:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000e24:	4b21      	ldr	r3, [pc, #132]	@ (8000eac <SystemInit+0xe0>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000e2a:	4b20      	ldr	r3, [pc, #128]	@ (8000eac <SystemInit+0xe0>)
 8000e2c:	4a21      	ldr	r2, [pc, #132]	@ (8000eb4 <SystemInit+0xe8>)
 8000e2e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000e30:	4b1e      	ldr	r3, [pc, #120]	@ (8000eac <SystemInit+0xe0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000e36:	4b1d      	ldr	r3, [pc, #116]	@ (8000eac <SystemInit+0xe0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000eac <SystemInit+0xe0>)
 8000e3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e40:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000e42:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <SystemInit+0xe0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e48:	4b17      	ldr	r3, [pc, #92]	@ (8000ea8 <SystemInit+0xdc>)
 8000e4a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e4e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000e50:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <SystemInit+0xec>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000e58:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000e60:	d003      	beq.n	8000e6a <SystemInit+0x9e>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000e68:	d117      	bne.n	8000e9a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000e6a:	4b13      	ldr	r3, [pc, #76]	@ (8000eb8 <SystemInit+0xec>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d005      	beq.n	8000e82 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000e76:	4b10      	ldr	r3, [pc, #64]	@ (8000eb8 <SystemInit+0xec>)
 8000e78:	4a10      	ldr	r2, [pc, #64]	@ (8000ebc <SystemInit+0xf0>)
 8000e7a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <SystemInit+0xec>)
 8000e7e:	4a10      	ldr	r2, [pc, #64]	@ (8000ec0 <SystemInit+0xf4>)
 8000e80:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000e82:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb8 <SystemInit+0xec>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	4a0c      	ldr	r2, [pc, #48]	@ (8000eb8 <SystemInit+0xec>)
 8000e88:	f043 0302 	orr.w	r3, r3, #2
 8000e8c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <SystemInit+0xec>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	4a09      	ldr	r2, [pc, #36]	@ (8000eb8 <SystemInit+0xec>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	61d3      	str	r3, [r2, #28]
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000ed00 	.word	0xe000ed00
 8000eac:	44020c00 	.word	0x44020c00
 8000eb0:	eae2eae3 	.word	0xeae2eae3
 8000eb4:	01010280 	.word	0x01010280
 8000eb8:	40022000 	.word	0x40022000
 8000ebc:	08192a3b 	.word	0x08192a3b
 8000ec0:	4c5d6e7f 	.word	0x4c5d6e7f

08000ec4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08e      	sub	sp, #56	@ 0x38
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	611a      	str	r2, [r3, #16]
 8000ef2:	615a      	str	r2, [r3, #20]
 8000ef4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ef6:	4b33      	ldr	r3, [pc, #204]	@ (8000fc4 <MX_TIM3_Init+0x100>)
 8000ef8:	4a33      	ldr	r2, [pc, #204]	@ (8000fc8 <MX_TIM3_Init+0x104>)
 8000efa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 8000efc:	4b31      	ldr	r3, [pc, #196]	@ (8000fc4 <MX_TIM3_Init+0x100>)
 8000efe:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000f02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f04:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc4 <MX_TIM3_Init+0x100>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000f0a:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc4 <MX_TIM3_Init+0x100>)
 8000f0c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f12:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc4 <MX_TIM3_Init+0x100>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f18:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc4 <MX_TIM3_Init+0x100>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f1e:	4829      	ldr	r0, [pc, #164]	@ (8000fc4 <MX_TIM3_Init+0x100>)
 8000f20:	f004 f8e2 	bl	80050e8 <HAL_TIM_Base_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000f2a:	f7ff ff13 	bl	8000d54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f32:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f34:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4822      	ldr	r0, [pc, #136]	@ (8000fc4 <MX_TIM3_Init+0x100>)
 8000f3c:	f004 fc00 	bl	8005740 <HAL_TIM_ConfigClockSource>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000f46:	f7ff ff05 	bl	8000d54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f4a:	481e      	ldr	r0, [pc, #120]	@ (8000fc4 <MX_TIM3_Init+0x100>)
 8000f4c:	f004 f923 	bl	8005196 <HAL_TIM_PWM_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000f56:	f7ff fefd 	bl	8000d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	4619      	mov	r1, r3
 8000f68:	4816      	ldr	r0, [pc, #88]	@ (8000fc4 <MX_TIM3_Init+0x100>)
 8000f6a:	f005 fac9 	bl	8006500 <HAL_TIMEx_MasterConfigSynchronization>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000f74:	f7ff feee 	bl	8000d54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f78:	2360      	movs	r3, #96	@ 0x60
 8000f7a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f88:	463b      	mov	r3, r7
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480d      	ldr	r0, [pc, #52]	@ (8000fc4 <MX_TIM3_Init+0x100>)
 8000f90:	f004 fac2 	bl	8005518 <HAL_TIM_PWM_ConfigChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000f9a:	f7ff fedb 	bl	8000d54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4807      	ldr	r0, [pc, #28]	@ (8000fc4 <MX_TIM3_Init+0x100>)
 8000fa6:	f004 fab7 	bl	8005518 <HAL_TIM_PWM_ConfigChannel>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000fb0:	f7ff fed0 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fb4:	4803      	ldr	r0, [pc, #12]	@ (8000fc4 <MX_TIM3_Init+0x100>)
 8000fb6:	f000 f82b 	bl	8001010 <HAL_TIM_MspPostInit>

}
 8000fba:	bf00      	nop
 8000fbc:	3738      	adds	r7, #56	@ 0x38
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000007c 	.word	0x2000007c
 8000fc8:	40000400 	.word	0x40000400

08000fcc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0b      	ldr	r2, [pc, #44]	@ (8001008 <HAL_TIM_Base_MspInit+0x3c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d10e      	bne.n	8000ffc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fde:	4b0b      	ldr	r3, [pc, #44]	@ (800100c <HAL_TIM_Base_MspInit+0x40>)
 8000fe0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000fe4:	4a09      	ldr	r2, [pc, #36]	@ (800100c <HAL_TIM_Base_MspInit+0x40>)
 8000fe6:	f043 0302 	orr.w	r3, r3, #2
 8000fea:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000fee:	4b07      	ldr	r3, [pc, #28]	@ (800100c <HAL_TIM_Base_MspInit+0x40>)
 8000ff0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	40000400 	.word	0x40000400
 800100c:	44020c00 	.word	0x44020c00

08001010 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a12      	ldr	r2, [pc, #72]	@ (8001078 <HAL_TIM_MspPostInit+0x68>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d11e      	bne.n	8001070 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001032:	4b12      	ldr	r3, [pc, #72]	@ (800107c <HAL_TIM_MspPostInit+0x6c>)
 8001034:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001038:	4a10      	ldr	r2, [pc, #64]	@ (800107c <HAL_TIM_MspPostInit+0x6c>)
 800103a:	f043 0304 	orr.w	r3, r3, #4
 800103e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001042:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <HAL_TIM_MspPostInit+0x6c>)
 8001044:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = SG_ENTER_Pin|SG_EXIT_Pin;
 8001050:	23c0      	movs	r3, #192	@ 0xc0
 8001052:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001060:	2302      	movs	r3, #2
 8001062:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	4619      	mov	r1, r3
 800106a:	4805      	ldr	r0, [pc, #20]	@ (8001080 <HAL_TIM_MspPostInit+0x70>)
 800106c:	f000 fa7a 	bl	8001564 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001070:	bf00      	nop
 8001072:	3720      	adds	r7, #32
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40000400 	.word	0x40000400
 800107c:	44020c00 	.word	0x44020c00
 8001080:	42020800 	.word	0x42020800

08001084 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001084:	480d      	ldr	r0, [pc, #52]	@ (80010bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001086:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001088:	f7ff fea0 	bl	8000dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800108c:	480c      	ldr	r0, [pc, #48]	@ (80010c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800108e:	490d      	ldr	r1, [pc, #52]	@ (80010c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001090:	4a0d      	ldr	r2, [pc, #52]	@ (80010c8 <LoopForever+0xe>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001094:	e002      	b.n	800109c <LoopCopyDataInit>

08001096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109a:	3304      	adds	r3, #4

0800109c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800109c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a0:	d3f9      	bcc.n	8001096 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a2:	4a0a      	ldr	r2, [pc, #40]	@ (80010cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80010a4:	4c0a      	ldr	r4, [pc, #40]	@ (80010d0 <LoopForever+0x16>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a8:	e001      	b.n	80010ae <LoopFillZerobss>

080010aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ac:	3204      	adds	r2, #4

080010ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b0:	d3fb      	bcc.n	80010aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010b2:	f005 fafd 	bl	80066b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010b6:	f7ff fbc3 	bl	8000840 <main>

080010ba <LoopForever>:

LoopForever:
    b LoopForever
 80010ba:	e7fe      	b.n	80010ba <LoopForever>
  ldr   r0, =_estack
 80010bc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010c8:	08006734 	.word	0x08006734
  ldr r2, =_sbss
 80010cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010d0:	200000cc 	.word	0x200000cc

080010d4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010d4:	e7fe      	b.n	80010d4 <ADC1_IRQHandler>
	...

080010d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010dc:	2003      	movs	r0, #3
 80010de:	f000 f96c 	bl	80013ba <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80010e2:	f001 fdff 	bl	8002ce4 <HAL_RCC_GetSysClockFreq>
 80010e6:	4602      	mov	r2, r0
 80010e8:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <HAL_Init+0x44>)
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	f003 030f 	and.w	r3, r3, #15
 80010f0:	490b      	ldr	r1, [pc, #44]	@ (8001120 <HAL_Init+0x48>)
 80010f2:	5ccb      	ldrb	r3, [r1, r3]
 80010f4:	fa22 f303 	lsr.w	r3, r2, r3
 80010f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001124 <HAL_Init+0x4c>)
 80010fa:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80010fc:	2004      	movs	r0, #4
 80010fe:	f000 f9a3 	bl	8001448 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001102:	200f      	movs	r0, #15
 8001104:	f000 f810 	bl	8001128 <HAL_InitTick>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e002      	b.n	8001118 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001112:	f7ff fe25 	bl	8000d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	bd80      	pop	{r7, pc}
 800111c:	44020c00 	.word	0x44020c00
 8001120:	0800671c 	.word	0x0800671c
 8001124:	20000000 	.word	0x20000000

08001128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001134:	4b33      	ldr	r3, [pc, #204]	@ (8001204 <HAL_InitTick+0xdc>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d101      	bne.n	8001140 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e05c      	b.n	80011fa <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001140:	4b31      	ldr	r3, [pc, #196]	@ (8001208 <HAL_InitTick+0xe0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	2b04      	cmp	r3, #4
 800114a:	d10c      	bne.n	8001166 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800114c:	4b2f      	ldr	r3, [pc, #188]	@ (800120c <HAL_InitTick+0xe4>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b2c      	ldr	r3, [pc, #176]	@ (8001204 <HAL_InitTick+0xdc>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4619      	mov	r1, r3
 8001156:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800115a:	fbb3 f3f1 	udiv	r3, r3, r1
 800115e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	e037      	b.n	80011d6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001166:	f000 f9c7 	bl	80014f8 <HAL_SYSTICK_GetCLKSourceConfig>
 800116a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	2b02      	cmp	r3, #2
 8001170:	d023      	beq.n	80011ba <HAL_InitTick+0x92>
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	2b02      	cmp	r3, #2
 8001176:	d82d      	bhi.n	80011d4 <HAL_InitTick+0xac>
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_InitTick+0x5e>
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d00d      	beq.n	80011a0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001184:	e026      	b.n	80011d4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001186:	4b21      	ldr	r3, [pc, #132]	@ (800120c <HAL_InitTick+0xe4>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4b1e      	ldr	r3, [pc, #120]	@ (8001204 <HAL_InitTick+0xdc>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	4619      	mov	r1, r3
 8001190:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001194:	fbb3 f3f1 	udiv	r3, r3, r1
 8001198:	fbb2 f3f3 	udiv	r3, r2, r3
 800119c:	60fb      	str	r3, [r7, #12]
        break;
 800119e:	e01a      	b.n	80011d6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80011a0:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <HAL_InitTick+0xdc>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80011ae:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	60fb      	str	r3, [r7, #12]
        break;
 80011b8:	e00d      	b.n	80011d6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80011ba:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <HAL_InitTick+0xdc>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80011c8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d0:	60fb      	str	r3, [r7, #12]
        break;
 80011d2:	e000      	b.n	80011d6 <HAL_InitTick+0xae>
        break;
 80011d4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80011d6:	68f8      	ldr	r0, [r7, #12]
 80011d8:	f000 f914 	bl	8001404 <HAL_SYSTICK_Config>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e009      	b.n	80011fa <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e6:	2200      	movs	r2, #0
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	f04f 30ff 	mov.w	r0, #4294967295
 80011ee:	f000 f8ef 	bl	80013d0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80011f2:	4a07      	ldr	r2, [pc, #28]	@ (8001210 <HAL_InitTick+0xe8>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000008 	.word	0x20000008
 8001208:	e000e010 	.word	0xe000e010
 800120c:	20000000 	.word	0x20000000
 8001210:	20000004 	.word	0x20000004

08001214 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001218:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <HAL_IncTick+0x20>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <HAL_IncTick+0x24>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4413      	add	r3, r2
 8001224:	4a04      	ldr	r2, [pc, #16]	@ (8001238 <HAL_IncTick+0x24>)
 8001226:	6013      	str	r3, [r2, #0]
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000008 	.word	0x20000008
 8001238:	200000c8 	.word	0x200000c8

0800123c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return uwTick;
 8001240:	4b03      	ldr	r3, [pc, #12]	@ (8001250 <HAL_GetTick+0x14>)
 8001242:	681b      	ldr	r3, [r3, #0]
}
 8001244:	4618      	mov	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	200000c8 	.word	0x200000c8

08001254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800125c:	f7ff ffee 	bl	800123c <HAL_GetTick>
 8001260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800126c:	d005      	beq.n	800127a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126e:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <HAL_Delay+0x44>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4413      	add	r3, r2
 8001278:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800127a:	bf00      	nop
 800127c:	f7ff ffde 	bl	800123c <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	429a      	cmp	r2, r3
 800128a:	d8f7      	bhi.n	800127c <HAL_Delay+0x28>
  {
  }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000008 	.word	0x20000008

0800129c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ac:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012b8:	4013      	ands	r3, r2
 80012ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ce:	4a04      	ldr	r2, [pc, #16]	@ (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	60d3      	str	r3, [r2, #12]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e8:	4b04      	ldr	r3, [pc, #16]	@ (80012fc <__NVIC_GetPriorityGrouping+0x18>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	f003 0307 	and.w	r3, r3, #7
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800130c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001310:	2b00      	cmp	r3, #0
 8001312:	db0a      	blt.n	800132a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	b2da      	uxtb	r2, r3
 8001318:	490c      	ldr	r1, [pc, #48]	@ (800134c <__NVIC_SetPriority+0x4c>)
 800131a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800131e:	0112      	lsls	r2, r2, #4
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	440b      	add	r3, r1
 8001324:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001328:	e00a      	b.n	8001340 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4908      	ldr	r1, [pc, #32]	@ (8001350 <__NVIC_SetPriority+0x50>)
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	3b04      	subs	r3, #4
 8001338:	0112      	lsls	r2, r2, #4
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	440b      	add	r3, r1
 800133e:	761a      	strb	r2, [r3, #24]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000e100 	.word	0xe000e100
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	@ 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f1c3 0307 	rsb	r3, r3, #7
 800136e:	2b04      	cmp	r3, #4
 8001370:	bf28      	it	cs
 8001372:	2304      	movcs	r3, #4
 8001374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3304      	adds	r3, #4
 800137a:	2b06      	cmp	r3, #6
 800137c:	d902      	bls.n	8001384 <NVIC_EncodePriority+0x30>
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3b03      	subs	r3, #3
 8001382:	e000      	b.n	8001386 <NVIC_EncodePriority+0x32>
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	f04f 32ff 	mov.w	r2, #4294967295
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43da      	mvns	r2, r3
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	401a      	ands	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800139c:	f04f 31ff 	mov.w	r1, #4294967295
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43d9      	mvns	r1, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	4313      	orrs	r3, r2
         );
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3724      	adds	r7, #36	@ 0x24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ff6a 	bl	800129c <__NVIC_SetPriorityGrouping>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
 80013dc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013de:	f7ff ff81 	bl	80012e4 <__NVIC_GetPriorityGrouping>
 80013e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	68b9      	ldr	r1, [r7, #8]
 80013e8:	6978      	ldr	r0, [r7, #20]
 80013ea:	f7ff ffb3 	bl	8001354 <NVIC_EncodePriority>
 80013ee:	4602      	mov	r2, r0
 80013f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013f4:	4611      	mov	r1, r2
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ff82 	bl	8001300 <__NVIC_SetPriority>
}
 80013fc:	bf00      	nop
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001414:	d301      	bcc.n	800141a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001416:	2301      	movs	r3, #1
 8001418:	e00d      	b.n	8001436 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800141a:	4a0a      	ldr	r2, [pc, #40]	@ (8001444 <HAL_SYSTICK_Config+0x40>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3b01      	subs	r3, #1
 8001420:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001422:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <HAL_SYSTICK_Config+0x40>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <HAL_SYSTICK_Config+0x40>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a05      	ldr	r2, [pc, #20]	@ (8001444 <HAL_SYSTICK_Config+0x40>)
 800142e:	f043 0303 	orr.w	r3, r3, #3
 8001432:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000e010 	.word	0xe000e010

08001448 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b04      	cmp	r3, #4
 8001454:	d844      	bhi.n	80014e0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001456:	a201      	add	r2, pc, #4	@ (adr r2, 800145c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145c:	0800147f 	.word	0x0800147f
 8001460:	0800149d 	.word	0x0800149d
 8001464:	080014bf 	.word	0x080014bf
 8001468:	080014e1 	.word	0x080014e1
 800146c:	08001471 	.word	0x08001471
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001470:	4b1f      	ldr	r3, [pc, #124]	@ (80014f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a1e      	ldr	r2, [pc, #120]	@ (80014f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	6013      	str	r3, [r2, #0]
      break;
 800147c:	e031      	b.n	80014e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800147e:	4b1c      	ldr	r3, [pc, #112]	@ (80014f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a1b      	ldr	r2, [pc, #108]	@ (80014f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001484:	f023 0304 	bic.w	r3, r3, #4
 8001488:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800148a:	4b1a      	ldr	r3, [pc, #104]	@ (80014f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800148c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001490:	4a18      	ldr	r2, [pc, #96]	@ (80014f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001492:	f023 030c 	bic.w	r3, r3, #12
 8001496:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800149a:	e022      	b.n	80014e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800149c:	4b14      	ldr	r3, [pc, #80]	@ (80014f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a13      	ldr	r2, [pc, #76]	@ (80014f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80014a2:	f023 0304 	bic.w	r3, r3, #4
 80014a6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80014a8:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80014aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80014ae:	f023 030c 	bic.w	r3, r3, #12
 80014b2:	4a10      	ldr	r2, [pc, #64]	@ (80014f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80014b4:	f043 0304 	orr.w	r3, r3, #4
 80014b8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80014bc:	e011      	b.n	80014e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80014be:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a0b      	ldr	r2, [pc, #44]	@ (80014f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80014c4:	f023 0304 	bic.w	r3, r3, #4
 80014c8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80014ca:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80014cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80014d0:	f023 030c 	bic.w	r3, r3, #12
 80014d4:	4a07      	ldr	r2, [pc, #28]	@ (80014f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80014d6:	f043 0308 	orr.w	r3, r3, #8
 80014da:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80014de:	e000      	b.n	80014e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80014e0:	bf00      	nop
  }
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000e010 	.word	0xe000e010
 80014f4:	44020c00 	.word	0x44020c00

080014f8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80014fe:	4b17      	ldr	r3, [pc, #92]	@ (800155c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	2b00      	cmp	r3, #0
 8001508:	d002      	beq.n	8001510 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800150a:	2304      	movs	r3, #4
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	e01e      	b.n	800154e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001510:	4b13      	ldr	r3, [pc, #76]	@ (8001560 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001512:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001516:	f003 030c 	and.w	r3, r3, #12
 800151a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	2b08      	cmp	r3, #8
 8001520:	d00f      	beq.n	8001542 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	2b08      	cmp	r3, #8
 8001526:	d80f      	bhi.n	8001548 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	2b04      	cmp	r3, #4
 8001532:	d003      	beq.n	800153c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001534:	e008      	b.n	8001548 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
        break;
 800153a:	e008      	b.n	800154e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800153c:	2301      	movs	r3, #1
 800153e:	607b      	str	r3, [r7, #4]
        break;
 8001540:	e005      	b.n	800154e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001542:	2302      	movs	r3, #2
 8001544:	607b      	str	r3, [r7, #4]
        break;
 8001546:	e002      	b.n	800154e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
        break;
 800154c:	bf00      	nop
    }
  }
  return systick_source;
 800154e:	687b      	ldr	r3, [r7, #4]
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000e010 	.word	0xe000e010
 8001560:	44020c00 	.word	0x44020c00

08001564 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001564:	b480      	push	{r7}
 8001566:	b087      	sub	sp, #28
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001572:	e142      	b.n	80017fa <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	2101      	movs	r1, #1
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	fa01 f303 	lsl.w	r3, r1, r3
 8001580:	4013      	ands	r3, r2
 8001582:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 8134 	beq.w	80017f4 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b02      	cmp	r3, #2
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x38>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b12      	cmp	r3, #18
 800159a:	d125      	bne.n	80015e8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	08da      	lsrs	r2, r3, #3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3208      	adds	r2, #8
 80015a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	220f      	movs	r2, #15
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	4013      	ands	r3, r2
 80015be:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	f003 020f 	and.w	r2, r3, #15
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	08da      	lsrs	r2, r3, #3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3208      	adds	r2, #8
 80015e2:	6979      	ldr	r1, [r7, #20]
 80015e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	2203      	movs	r2, #3
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	4013      	ands	r3, r2
 80015fe:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0203 	and.w	r2, r3, #3
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	4313      	orrs	r3, r2
 8001614:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d00b      	beq.n	800163c <HAL_GPIO_Init+0xd8>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d007      	beq.n	800163c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001630:	2b11      	cmp	r3, #17
 8001632:	d003      	beq.n	800163c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b12      	cmp	r3, #18
 800163a:	d130      	bne.n	800169e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	2203      	movs	r2, #3
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	4013      	ands	r3, r2
 8001652:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	68da      	ldr	r2, [r3, #12]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	4313      	orrs	r3, r2
 8001664:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001672:	2201      	movs	r2, #1
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	4013      	ands	r3, r2
 8001680:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	091b      	lsrs	r3, r3, #4
 8001688:	f003 0201 	and.w	r2, r3, #1
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	4313      	orrs	r3, r2
 8001696:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d109      	bne.n	80016be <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d11b      	bne.n	80016ee <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d017      	beq.n	80016ee <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	2203      	movs	r2, #3
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	4013      	ands	r3, r2
 80016d4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d07c      	beq.n	80017f4 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80016fa:	4a47      	ldr	r2, [pc, #284]	@ (8001818 <HAL_GPIO_Init+0x2b4>)
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	089b      	lsrs	r3, r3, #2
 8001700:	3318      	adds	r3, #24
 8001702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001706:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	220f      	movs	r2, #15
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	4013      	ands	r3, r2
 800171c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	0a9a      	lsrs	r2, r3, #10
 8001722:	4b3e      	ldr	r3, [pc, #248]	@ (800181c <HAL_GPIO_Init+0x2b8>)
 8001724:	4013      	ands	r3, r2
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	f002 0203 	and.w	r2, r2, #3
 800172c:	00d2      	lsls	r2, r2, #3
 800172e:	4093      	lsls	r3, r2
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	4313      	orrs	r3, r2
 8001734:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001736:	4938      	ldr	r1, [pc, #224]	@ (8001818 <HAL_GPIO_Init+0x2b4>)
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	089b      	lsrs	r3, r3, #2
 800173c:	3318      	adds	r3, #24
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001744:	4b34      	ldr	r3, [pc, #208]	@ (8001818 <HAL_GPIO_Init+0x2b4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	43db      	mvns	r3, r3
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	4013      	ands	r3, r2
 8001752:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4313      	orrs	r3, r2
 8001766:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001768:	4a2b      	ldr	r2, [pc, #172]	@ (8001818 <HAL_GPIO_Init+0x2b4>)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800176e:	4b2a      	ldr	r3, [pc, #168]	@ (8001818 <HAL_GPIO_Init+0x2b4>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	43db      	mvns	r3, r3
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	4013      	ands	r3, r2
 800177c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4313      	orrs	r3, r2
 8001790:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001792:	4a21      	ldr	r2, [pc, #132]	@ (8001818 <HAL_GPIO_Init+0x2b4>)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001798:	4b1f      	ldr	r3, [pc, #124]	@ (8001818 <HAL_GPIO_Init+0x2b4>)
 800179a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800179e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	43db      	mvns	r3, r3
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	4013      	ands	r3, r2
 80017a8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80017be:	4a16      	ldr	r2, [pc, #88]	@ (8001818 <HAL_GPIO_Init+0x2b4>)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80017c6:	4b14      	ldr	r3, [pc, #80]	@ (8001818 <HAL_GPIO_Init+0x2b4>)
 80017c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017cc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	4013      	ands	r3, r2
 80017d6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80017ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001818 <HAL_GPIO_Init+0x2b4>)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	3301      	adds	r3, #1
 80017f8:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	fa22 f303 	lsr.w	r3, r2, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	f47f aeb5 	bne.w	8001574 <HAL_GPIO_Init+0x10>
  }
}
 800180a:	bf00      	nop
 800180c:	bf00      	nop
 800180e:	371c      	adds	r7, #28
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	44022000 	.word	0x44022000
 800181c:	002f7f7f 	.word	0x002f7f7f

08001820 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	887b      	ldrh	r3, [r7, #2]
 8001832:	4013      	ands	r3, r2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d002      	beq.n	800183e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001838:	2301      	movs	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
 800183c:	e001      	b.n	8001842 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800183e:	2300      	movs	r3, #0
 8001840:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001842:	7bfb      	ldrb	r3, [r7, #15]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	807b      	strh	r3, [r7, #2]
 800185c:	4613      	mov	r3, r2
 800185e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001860:	787b      	ldrb	r3, [r7, #1]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001866:	887a      	ldrh	r2, [r7, #2]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800186c:	e002      	b.n	8001874 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800186e:	887a      	ldrh	r2, [r7, #2]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e08d      	b.n	80019ae <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d106      	bne.n	80018ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7fe ff34 	bl	8000714 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2224      	movs	r2, #36	@ 0x24
 80018b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0201 	bic.w	r2, r2, #1
 80018c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d107      	bne.n	80018fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	e006      	b.n	8001908 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001906:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d108      	bne.n	8001922 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	e007      	b.n	8001932 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001930:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001940:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001944:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001954:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691a      	ldr	r2, [r3, #16]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69d9      	ldr	r1, [r3, #28]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a1a      	ldr	r2, [r3, #32]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0201 	orr.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2220      	movs	r2, #32
 800199a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af02      	add	r7, sp, #8
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	461a      	mov	r2, r3
 80019c4:	460b      	mov	r3, r1
 80019c6:	817b      	strh	r3, [r7, #10]
 80019c8:	4613      	mov	r3, r2
 80019ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b20      	cmp	r3, #32
 80019d6:	f040 80da 	bne.w	8001b8e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_I2C_Master_Transmit+0x30>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e0d3      	b.n	8001b90 <HAL_I2C_Master_Transmit+0x1d8>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019f0:	f7ff fc24 	bl	800123c <HAL_GetTick>
 80019f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	2319      	movs	r3, #25
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 f8f0 	bl	8001be8 <I2C_WaitOnFlagUntilTimeout>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e0be      	b.n	8001b90 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2221      	movs	r2, #33	@ 0x21
 8001a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2210      	movs	r2, #16
 8001a1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	893a      	ldrh	r2, [r7, #8]
 8001a32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2200      	movs	r2, #0
 8001a38:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	2bff      	cmp	r3, #255	@ 0xff
 8001a42:	d90e      	bls.n	8001a62 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	22ff      	movs	r2, #255	@ 0xff
 8001a48:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	8979      	ldrh	r1, [r7, #10]
 8001a52:	4b51      	ldr	r3, [pc, #324]	@ (8001b98 <HAL_I2C_Master_Transmit+0x1e0>)
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f000 fa88 	bl	8001f70 <I2C_TransferConfig>
 8001a60:	e06c      	b.n	8001b3c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	8979      	ldrh	r1, [r7, #10]
 8001a74:	4b48      	ldr	r3, [pc, #288]	@ (8001b98 <HAL_I2C_Master_Transmit+0x1e0>)
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 fa77 	bl	8001f70 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001a82:	e05b      	b.n	8001b3c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	6a39      	ldr	r1, [r7, #32]
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f000 f906 	bl	8001c9a <I2C_WaitOnTXISFlagUntilTimeout>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e07b      	b.n	8001b90 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9c:	781a      	ldrb	r2, [r3, #0]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d034      	beq.n	8001b3c <HAL_I2C_Master_Transmit+0x184>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d130      	bne.n	8001b3c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2180      	movs	r1, #128	@ 0x80
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 f87f 	bl	8001be8 <I2C_WaitOnFlagUntilTimeout>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e04d      	b.n	8001b90 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	2bff      	cmp	r3, #255	@ 0xff
 8001afc:	d90e      	bls.n	8001b1c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	22ff      	movs	r2, #255	@ 0xff
 8001b02:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	8979      	ldrh	r1, [r7, #10]
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 fa2b 	bl	8001f70 <I2C_TransferConfig>
 8001b1a:	e00f      	b.n	8001b3c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	8979      	ldrh	r1, [r7, #10]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 fa1a 	bl	8001f70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d19e      	bne.n	8001a84 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	6a39      	ldr	r1, [r7, #32]
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 f8ec 	bl	8001d28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e01a      	b.n	8001b90 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2220      	movs	r2, #32
 8001b60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6859      	ldr	r1, [r3, #4]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <HAL_I2C_Master_Transmit+0x1e4>)
 8001b6e:	400b      	ands	r3, r1
 8001b70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2220      	movs	r2, #32
 8001b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e000      	b.n	8001b90 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001b8e:	2302      	movs	r3, #2
  }
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	80002000 	.word	0x80002000
 8001b9c:	fe00e800 	.word	0xfe00e800

08001ba0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d103      	bne.n	8001bbe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d007      	beq.n	8001bdc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699a      	ldr	r2, [r3, #24]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0201 	orr.w	r2, r2, #1
 8001bda:	619a      	str	r2, [r3, #24]
  }
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bf8:	e03b      	b.n	8001c72 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	6839      	ldr	r1, [r7, #0]
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 f8d6 	bl	8001db0 <I2C_IsErrorOccurred>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e041      	b.n	8001c92 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c14:	d02d      	beq.n	8001c72 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c16:	f7ff fb11 	bl	800123c <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d302      	bcc.n	8001c2c <I2C_WaitOnFlagUntilTimeout+0x44>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d122      	bne.n	8001c72 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699a      	ldr	r2, [r3, #24]
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	4013      	ands	r3, r2
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	bf0c      	ite	eq
 8001c3c:	2301      	moveq	r3, #1
 8001c3e:	2300      	movne	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	461a      	mov	r2, r3
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d113      	bne.n	8001c72 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4e:	f043 0220 	orr.w	r2, r3, #32
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00f      	b.n	8001c92 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	699a      	ldr	r2, [r3, #24]
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	bf0c      	ite	eq
 8001c82:	2301      	moveq	r3, #1
 8001c84:	2300      	movne	r3, #0
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d0b4      	beq.n	8001bfa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b084      	sub	sp, #16
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	60f8      	str	r0, [r7, #12]
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ca6:	e033      	b.n	8001d10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	68b9      	ldr	r1, [r7, #8]
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 f87f 	bl	8001db0 <I2C_IsErrorOccurred>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e031      	b.n	8001d20 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc2:	d025      	beq.n	8001d10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cc4:	f7ff faba 	bl	800123c <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d302      	bcc.n	8001cda <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d11a      	bne.n	8001d10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d013      	beq.n	8001d10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cec:	f043 0220 	orr.w	r2, r3, #32
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e007      	b.n	8001d20 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d1c4      	bne.n	8001ca8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d34:	e02f      	b.n	8001d96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	68b9      	ldr	r1, [r7, #8]
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 f838 	bl	8001db0 <I2C_IsErrorOccurred>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e02d      	b.n	8001da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d4a:	f7ff fa77 	bl	800123c <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d302      	bcc.n	8001d60 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d11a      	bne.n	8001d96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	2b20      	cmp	r3, #32
 8001d6c:	d013      	beq.n	8001d96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d72:	f043 0220 	orr.w	r2, r3, #32
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e007      	b.n	8001da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f003 0320 	and.w	r3, r3, #32
 8001da0:	2b20      	cmp	r3, #32
 8001da2:	d1c8      	bne.n	8001d36 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	@ 0x28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d068      	beq.n	8001eae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2210      	movs	r2, #16
 8001de2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001de4:	e049      	b.n	8001e7a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dec:	d045      	beq.n	8001e7a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001dee:	f7ff fa25 	bl	800123c <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d302      	bcc.n	8001e04 <I2C_IsErrorOccurred+0x54>
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d13a      	bne.n	8001e7a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e0e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001e16:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e26:	d121      	bne.n	8001e6c <I2C_IsErrorOccurred+0xbc>
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e2e:	d01d      	beq.n	8001e6c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001e30:	7cfb      	ldrb	r3, [r7, #19]
 8001e32:	2b20      	cmp	r3, #32
 8001e34:	d01a      	beq.n	8001e6c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e44:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e46:	f7ff f9f9 	bl	800123c <HAL_GetTick>
 8001e4a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e4c:	e00e      	b.n	8001e6c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e4e:	f7ff f9f5 	bl	800123c <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b19      	cmp	r3, #25
 8001e5a:	d907      	bls.n	8001e6c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
 8001e5e:	f043 0320 	orr.w	r3, r3, #32
 8001e62:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001e6a:	e006      	b.n	8001e7a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	f003 0320 	and.w	r3, r3, #32
 8001e76:	2b20      	cmp	r3, #32
 8001e78:	d1e9      	bne.n	8001e4e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f003 0320 	and.w	r3, r3, #32
 8001e84:	2b20      	cmp	r3, #32
 8001e86:	d003      	beq.n	8001e90 <I2C_IsErrorOccurred+0xe0>
 8001e88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0aa      	beq.n	8001de6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d103      	bne.n	8001ea0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
 8001ea2:	f043 0304 	orr.w	r3, r3, #4
 8001ea6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00b      	beq.n	8001ed8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ed0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00b      	beq.n	8001efa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	f043 0308 	orr.w	r3, r3, #8
 8001ee8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ef2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00b      	beq.n	8001f1c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	f043 0302 	orr.w	r3, r3, #2
 8001f0a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01c      	beq.n	8001f5e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f7ff fe3b 	bl	8001ba0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6859      	ldr	r1, [r3, #4]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b0d      	ldr	r3, [pc, #52]	@ (8001f6c <I2C_IsErrorOccurred+0x1bc>)
 8001f36:	400b      	ands	r3, r1
 8001f38:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f3e:	6a3b      	ldr	r3, [r7, #32]
 8001f40:	431a      	orrs	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2220      	movs	r2, #32
 8001f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3728      	adds	r7, #40	@ 0x28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	fe00e800 	.word	0xfe00e800

08001f70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	817b      	strh	r3, [r7, #10]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f82:	897b      	ldrh	r3, [r7, #10]
 8001f84:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f88:	7a7b      	ldrb	r3, [r7, #9]
 8001f8a:	041b      	lsls	r3, r3, #16
 8001f8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f90:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f9e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	0d5b      	lsrs	r3, r3, #21
 8001faa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001fae:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <I2C_TransferConfig+0x60>)
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	ea02 0103 	and.w	r1, r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001fc2:	bf00      	nop
 8001fc4:	371c      	adds	r7, #28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	03ff63ff 	.word	0x03ff63ff

08001fd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b20      	cmp	r3, #32
 8001fe8:	d138      	bne.n	800205c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e032      	b.n	800205e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2224      	movs	r2, #36	@ 0x24
 8002004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0201 	bic.w	r2, r2, #1
 8002016:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002026:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6819      	ldr	r1, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0201 	orr.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2220      	movs	r2, #32
 800204c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	e000      	b.n	800205e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800205c:	2302      	movs	r3, #2
  }
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800206a:	b480      	push	{r7}
 800206c:	b085      	sub	sp, #20
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b20      	cmp	r3, #32
 800207e:	d139      	bne.n	80020f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800208a:	2302      	movs	r3, #2
 800208c:	e033      	b.n	80020f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2224      	movs	r2, #36	@ 0x24
 800209a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0201 	bic.w	r2, r2, #1
 80020ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0201 	orr.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	e000      	b.n	80020f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020f4:	2302      	movs	r3, #2
  }
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d102      	bne.n	8002118 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	f000 bc28 	b.w	8002968 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002118:	4b94      	ldr	r3, [pc, #592]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	f003 0318 	and.w	r3, r3, #24
 8002120:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002122:	4b92      	ldr	r3, [pc, #584]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 8002124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0310 	and.w	r3, r3, #16
 8002134:	2b00      	cmp	r3, #0
 8002136:	d05b      	beq.n	80021f0 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	2b08      	cmp	r3, #8
 800213c:	d005      	beq.n	800214a <HAL_RCC_OscConfig+0x46>
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	2b18      	cmp	r3, #24
 8002142:	d114      	bne.n	800216e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d111      	bne.n	800216e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d102      	bne.n	8002158 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	f000 bc08 	b.w	8002968 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002158:	4b84      	ldr	r3, [pc, #528]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	041b      	lsls	r3, r3, #16
 8002166:	4981      	ldr	r1, [pc, #516]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 8002168:	4313      	orrs	r3, r2
 800216a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800216c:	e040      	b.n	80021f0 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d023      	beq.n	80021be <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002176:	4b7d      	ldr	r3, [pc, #500]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a7c      	ldr	r2, [pc, #496]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 800217c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002182:	f7ff f85b 	bl	800123c <HAL_GetTick>
 8002186:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800218a:	f7ff f857 	bl	800123c <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e3e5      	b.n	8002968 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800219c:	4b73      	ldr	r3, [pc, #460]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80021a8:	4b70      	ldr	r3, [pc, #448]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	041b      	lsls	r3, r3, #16
 80021b6:	496d      	ldr	r1, [pc, #436]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	618b      	str	r3, [r1, #24]
 80021bc:	e018      	b.n	80021f0 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80021be:	4b6b      	ldr	r3, [pc, #428]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a6a      	ldr	r2, [pc, #424]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 80021c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ca:	f7ff f837 	bl	800123c <HAL_GetTick>
 80021ce:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80021d2:	f7ff f833 	bl	800123c <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e3c1      	b.n	8002968 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80021e4:	4b61      	ldr	r3, [pc, #388]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f0      	bne.n	80021d2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80a0 	beq.w	800233e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	2b10      	cmp	r3, #16
 8002202:	d005      	beq.n	8002210 <HAL_RCC_OscConfig+0x10c>
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	2b18      	cmp	r3, #24
 8002208:	d109      	bne.n	800221e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2b03      	cmp	r3, #3
 800220e:	d106      	bne.n	800221e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	f040 8092 	bne.w	800233e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e3a4      	b.n	8002968 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002226:	d106      	bne.n	8002236 <HAL_RCC_OscConfig+0x132>
 8002228:	4b50      	ldr	r3, [pc, #320]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a4f      	ldr	r2, [pc, #316]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 800222e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	e058      	b.n	80022e8 <HAL_RCC_OscConfig+0x1e4>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d112      	bne.n	8002264 <HAL_RCC_OscConfig+0x160>
 800223e:	4b4b      	ldr	r3, [pc, #300]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a4a      	ldr	r2, [pc, #296]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 8002244:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	4b48      	ldr	r3, [pc, #288]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a47      	ldr	r2, [pc, #284]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 8002250:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	4b45      	ldr	r3, [pc, #276]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a44      	ldr	r2, [pc, #272]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 800225c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e041      	b.n	80022e8 <HAL_RCC_OscConfig+0x1e4>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800226c:	d112      	bne.n	8002294 <HAL_RCC_OscConfig+0x190>
 800226e:	4b3f      	ldr	r3, [pc, #252]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a3e      	ldr	r2, [pc, #248]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 8002274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b3c      	ldr	r3, [pc, #240]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a3b      	ldr	r2, [pc, #236]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 8002280:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	4b39      	ldr	r3, [pc, #228]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a38      	ldr	r2, [pc, #224]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 800228c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	e029      	b.n	80022e8 <HAL_RCC_OscConfig+0x1e4>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800229c:	d112      	bne.n	80022c4 <HAL_RCC_OscConfig+0x1c0>
 800229e:	4b33      	ldr	r3, [pc, #204]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a32      	ldr	r2, [pc, #200]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 80022a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	4b30      	ldr	r3, [pc, #192]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a2f      	ldr	r2, [pc, #188]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 80022b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b2d      	ldr	r3, [pc, #180]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a2c      	ldr	r2, [pc, #176]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 80022bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	e011      	b.n	80022e8 <HAL_RCC_OscConfig+0x1e4>
 80022c4:	4b29      	ldr	r3, [pc, #164]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a28      	ldr	r2, [pc, #160]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 80022ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	4b26      	ldr	r3, [pc, #152]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a25      	ldr	r2, [pc, #148]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 80022d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	4b23      	ldr	r3, [pc, #140]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a22      	ldr	r2, [pc, #136]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 80022e2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80022e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d013      	beq.n	8002318 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7fe ffa4 	bl	800123c <HAL_GetTick>
 80022f4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80022f8:	f7fe ffa0 	bl	800123c <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	@ 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e32e      	b.n	8002968 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800230a:	4b18      	ldr	r3, [pc, #96]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0x1f4>
 8002316:	e012      	b.n	800233e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7fe ff90 	bl	800123c <HAL_GetTick>
 800231c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002320:	f7fe ff8c 	bl	800123c <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b64      	cmp	r3, #100	@ 0x64
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e31a      	b.n	8002968 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002332:	4b0e      	ldr	r3, [pc, #56]	@ (800236c <HAL_RCC_OscConfig+0x268>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 809a 	beq.w	8002480 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d005      	beq.n	800235e <HAL_RCC_OscConfig+0x25a>
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	2b18      	cmp	r3, #24
 8002356:	d149      	bne.n	80023ec <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d146      	bne.n	80023ec <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d104      	bne.n	8002370 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e2fe      	b.n	8002968 <HAL_RCC_OscConfig+0x864>
 800236a:	bf00      	nop
 800236c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d11c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002376:	4b9a      	ldr	r3, [pc, #616]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0218 	and.w	r2, r3, #24
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	429a      	cmp	r2, r3
 8002384:	d014      	beq.n	80023b0 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002386:	4b96      	ldr	r3, [pc, #600]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 0218 	bic.w	r2, r3, #24
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	4993      	ldr	r1, [pc, #588]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 8002394:	4313      	orrs	r3, r2
 8002396:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002398:	f000 fdd0 	bl	8002f3c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800239c:	4b91      	ldr	r3, [pc, #580]	@ (80025e4 <HAL_RCC_OscConfig+0x4e0>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe fec1 	bl	8001128 <HAL_InitTick>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e2db      	b.n	8002968 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b0:	f7fe ff44 	bl	800123c <HAL_GetTick>
 80023b4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80023b8:	f7fe ff40 	bl	800123c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e2ce      	b.n	8002968 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ca:	4b85      	ldr	r3, [pc, #532]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80023d6:	4b82      	ldr	r3, [pc, #520]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	041b      	lsls	r3, r3, #16
 80023e4:	497e      	ldr	r1, [pc, #504]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80023ea:	e049      	b.n	8002480 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d02c      	beq.n	800244e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80023f4:	4b7a      	ldr	r3, [pc, #488]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f023 0218 	bic.w	r2, r3, #24
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	4977      	ldr	r1, [pc, #476]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 8002402:	4313      	orrs	r3, r2
 8002404:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002406:	4b76      	ldr	r3, [pc, #472]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a75      	ldr	r2, [pc, #468]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002412:	f7fe ff13 	bl	800123c <HAL_GetTick>
 8002416:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800241a:	f7fe ff0f 	bl	800123c <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e29d      	b.n	8002968 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800242c:	4b6c      	ldr	r3, [pc, #432]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0f0      	beq.n	800241a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002438:	4b69      	ldr	r3, [pc, #420]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	041b      	lsls	r3, r3, #16
 8002446:	4966      	ldr	r1, [pc, #408]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 8002448:	4313      	orrs	r3, r2
 800244a:	610b      	str	r3, [r1, #16]
 800244c:	e018      	b.n	8002480 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800244e:	4b64      	ldr	r3, [pc, #400]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a63      	ldr	r2, [pc, #396]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 8002454:	f023 0301 	bic.w	r3, r3, #1
 8002458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245a:	f7fe feef 	bl	800123c <HAL_GetTick>
 800245e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002462:	f7fe feeb 	bl	800123c <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e279      	b.n	8002968 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002474:	4b5a      	ldr	r3, [pc, #360]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1f0      	bne.n	8002462 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d03c      	beq.n	8002506 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d01c      	beq.n	80024ce <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002494:	4b52      	ldr	r3, [pc, #328]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 8002496:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800249a:	4a51      	ldr	r2, [pc, #324]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 800249c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a4:	f7fe feca 	bl	800123c <HAL_GetTick>
 80024a8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80024ac:	f7fe fec6 	bl	800123c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e254      	b.n	8002968 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80024be:	4b48      	ldr	r3, [pc, #288]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 80024c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0ef      	beq.n	80024ac <HAL_RCC_OscConfig+0x3a8>
 80024cc:	e01b      	b.n	8002506 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ce:	4b44      	ldr	r3, [pc, #272]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 80024d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024d4:	4a42      	ldr	r2, [pc, #264]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 80024d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80024da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024de:	f7fe fead 	bl	800123c <HAL_GetTick>
 80024e2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80024e6:	f7fe fea9 	bl	800123c <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e237      	b.n	8002968 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80024f8:	4b39      	ldr	r3, [pc, #228]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 80024fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1ef      	bne.n	80024e6 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 80d2 	beq.w	80026b8 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002514:	4b34      	ldr	r3, [pc, #208]	@ (80025e8 <HAL_RCC_OscConfig+0x4e4>)
 8002516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d118      	bne.n	8002552 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002520:	4b31      	ldr	r3, [pc, #196]	@ (80025e8 <HAL_RCC_OscConfig+0x4e4>)
 8002522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002524:	4a30      	ldr	r2, [pc, #192]	@ (80025e8 <HAL_RCC_OscConfig+0x4e4>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800252c:	f7fe fe86 	bl	800123c <HAL_GetTick>
 8002530:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002534:	f7fe fe82 	bl	800123c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e210      	b.n	8002968 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002546:	4b28      	ldr	r3, [pc, #160]	@ (80025e8 <HAL_RCC_OscConfig+0x4e4>)
 8002548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d108      	bne.n	800256c <HAL_RCC_OscConfig+0x468>
 800255a:	4b21      	ldr	r3, [pc, #132]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 800255c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002560:	4a1f      	ldr	r2, [pc, #124]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800256a:	e074      	b.n	8002656 <HAL_RCC_OscConfig+0x552>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d118      	bne.n	80025a6 <HAL_RCC_OscConfig+0x4a2>
 8002574:	4b1a      	ldr	r3, [pc, #104]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 8002576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800257a:	4a19      	ldr	r2, [pc, #100]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 800257c:	f023 0301 	bic.w	r3, r3, #1
 8002580:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002584:	4b16      	ldr	r3, [pc, #88]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 8002586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800258a:	4a15      	ldr	r2, [pc, #84]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 800258c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002590:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002594:	4b12      	ldr	r3, [pc, #72]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 8002596:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800259a:	4a11      	ldr	r2, [pc, #68]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 800259c:	f023 0304 	bic.w	r3, r3, #4
 80025a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025a4:	e057      	b.n	8002656 <HAL_RCC_OscConfig+0x552>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b05      	cmp	r3, #5
 80025ac:	d11e      	bne.n	80025ec <HAL_RCC_OscConfig+0x4e8>
 80025ae:	4b0c      	ldr	r3, [pc, #48]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 80025b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025b4:	4a0a      	ldr	r2, [pc, #40]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 80025b6:	f043 0304 	orr.w	r3, r3, #4
 80025ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025be:	4b08      	ldr	r3, [pc, #32]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 80025c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025c4:	4a06      	ldr	r2, [pc, #24]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 80025c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025ce:	4b04      	ldr	r3, [pc, #16]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 80025d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025d4:	4a02      	ldr	r2, [pc, #8]	@ (80025e0 <HAL_RCC_OscConfig+0x4dc>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025de:	e03a      	b.n	8002656 <HAL_RCC_OscConfig+0x552>
 80025e0:	44020c00 	.word	0x44020c00
 80025e4:	20000004 	.word	0x20000004
 80025e8:	44020800 	.word	0x44020800
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b85      	cmp	r3, #133	@ 0x85
 80025f2:	d118      	bne.n	8002626 <HAL_RCC_OscConfig+0x522>
 80025f4:	4ba2      	ldr	r3, [pc, #648]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 80025f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025fa:	4aa1      	ldr	r2, [pc, #644]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 80025fc:	f043 0304 	orr.w	r3, r3, #4
 8002600:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002604:	4b9e      	ldr	r3, [pc, #632]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 8002606:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800260a:	4a9d      	ldr	r2, [pc, #628]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 800260c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002610:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002614:	4b9a      	ldr	r3, [pc, #616]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 8002616:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800261a:	4a99      	ldr	r2, [pc, #612]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002624:	e017      	b.n	8002656 <HAL_RCC_OscConfig+0x552>
 8002626:	4b96      	ldr	r3, [pc, #600]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 8002628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800262c:	4a94      	ldr	r2, [pc, #592]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 800262e:	f023 0301 	bic.w	r3, r3, #1
 8002632:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002636:	4b92      	ldr	r3, [pc, #584]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 8002638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800263c:	4a90      	ldr	r2, [pc, #576]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 800263e:	f023 0304 	bic.w	r3, r3, #4
 8002642:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002646:	4b8e      	ldr	r3, [pc, #568]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 8002648:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800264c:	4a8c      	ldr	r2, [pc, #560]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 800264e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002652:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d016      	beq.n	800268c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265e:	f7fe fded 	bl	800123c <HAL_GetTick>
 8002662:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002664:	e00a      	b.n	800267c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002666:	f7fe fde9 	bl	800123c <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002674:	4293      	cmp	r3, r2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e175      	b.n	8002968 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800267c:	4b80      	ldr	r3, [pc, #512]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 800267e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0ed      	beq.n	8002666 <HAL_RCC_OscConfig+0x562>
 800268a:	e015      	b.n	80026b8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268c:	f7fe fdd6 	bl	800123c <HAL_GetTick>
 8002690:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002692:	e00a      	b.n	80026aa <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002694:	f7fe fdd2 	bl	800123c <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e15e      	b.n	8002968 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026aa:	4b75      	ldr	r3, [pc, #468]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 80026ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1ed      	bne.n	8002694 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d036      	beq.n	8002732 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d019      	beq.n	8002700 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026cc:	4b6c      	ldr	r3, [pc, #432]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a6b      	ldr	r2, [pc, #428]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 80026d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d8:	f7fe fdb0 	bl	800123c <HAL_GetTick>
 80026dc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80026e0:	f7fe fdac 	bl	800123c <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e13a      	b.n	8002968 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80026f2:	4b63      	ldr	r3, [pc, #396]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x5dc>
 80026fe:	e018      	b.n	8002732 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002700:	4b5f      	ldr	r3, [pc, #380]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a5e      	ldr	r2, [pc, #376]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 8002706:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800270a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270c:	f7fe fd96 	bl	800123c <HAL_GetTick>
 8002710:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002714:	f7fe fd92 	bl	800123c <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e120      	b.n	8002968 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002726:	4b56      	ldr	r3, [pc, #344]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 8115 	beq.w	8002966 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	2b18      	cmp	r3, #24
 8002740:	f000 80af 	beq.w	80028a2 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002748:	2b02      	cmp	r3, #2
 800274a:	f040 8086 	bne.w	800285a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800274e:	4b4c      	ldr	r3, [pc, #304]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a4b      	ldr	r2, [pc, #300]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 8002754:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275a:	f7fe fd6f 	bl	800123c <HAL_GetTick>
 800275e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002762:	f7fe fd6b 	bl	800123c <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e0f9      	b.n	8002968 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002774:	4b42      	ldr	r3, [pc, #264]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f0      	bne.n	8002762 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002780:	4b3f      	ldr	r3, [pc, #252]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 8002782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002784:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002788:	f023 0303 	bic.w	r3, r3, #3
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002794:	0212      	lsls	r2, r2, #8
 8002796:	430a      	orrs	r2, r1
 8002798:	4939      	ldr	r1, [pc, #228]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 800279a:	4313      	orrs	r3, r2
 800279c:	628b      	str	r3, [r1, #40]	@ 0x28
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a2:	3b01      	subs	r3, #1
 80027a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ac:	3b01      	subs	r3, #1
 80027ae:	025b      	lsls	r3, r3, #9
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b8:	3b01      	subs	r3, #1
 80027ba:	041b      	lsls	r3, r3, #16
 80027bc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	3b01      	subs	r3, #1
 80027c8:	061b      	lsls	r3, r3, #24
 80027ca:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80027ce:	492c      	ldr	r1, [pc, #176]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80027d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 80027d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d8:	4a29      	ldr	r2, [pc, #164]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 80027da:	f023 0310 	bic.w	r3, r3, #16
 80027de:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e4:	4a26      	ldr	r2, [pc, #152]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80027ea:	4b25      	ldr	r3, [pc, #148]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 80027ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ee:	4a24      	ldr	r2, [pc, #144]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 80027f0:	f043 0310 	orr.w	r3, r3, #16
 80027f4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80027f6:	4b22      	ldr	r3, [pc, #136]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 80027f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fa:	f023 020c 	bic.w	r2, r3, #12
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002802:	491f      	ldr	r1, [pc, #124]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 8002804:	4313      	orrs	r3, r2
 8002806:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002808:	4b1d      	ldr	r3, [pc, #116]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 800280a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800280c:	f023 0220 	bic.w	r2, r3, #32
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002814:	491a      	ldr	r1, [pc, #104]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 8002816:	4313      	orrs	r3, r2
 8002818:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800281a:	4b19      	ldr	r3, [pc, #100]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 800281c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281e:	4a18      	ldr	r2, [pc, #96]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 8002820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002824:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002826:	4b16      	ldr	r3, [pc, #88]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a15      	ldr	r2, [pc, #84]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 800282c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002832:	f7fe fd03 	bl	800123c <HAL_GetTick>
 8002836:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800283a:	f7fe fcff 	bl	800123c <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e08d      	b.n	8002968 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800284c:	4b0c      	ldr	r3, [pc, #48]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x736>
 8002858:	e085      	b.n	8002966 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800285a:	4b09      	ldr	r3, [pc, #36]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a08      	ldr	r2, [pc, #32]	@ (8002880 <HAL_RCC_OscConfig+0x77c>)
 8002860:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002866:	f7fe fce9 	bl	800123c <HAL_GetTick>
 800286a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800286c:	e00a      	b.n	8002884 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800286e:	f7fe fce5 	bl	800123c <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d903      	bls.n	8002884 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e073      	b.n	8002968 <HAL_RCC_OscConfig+0x864>
 8002880:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002884:	4b3a      	ldr	r3, [pc, #232]	@ (8002970 <HAL_RCC_OscConfig+0x86c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1ee      	bne.n	800286e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002890:	4b37      	ldr	r3, [pc, #220]	@ (8002970 <HAL_RCC_OscConfig+0x86c>)
 8002892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002894:	4a36      	ldr	r2, [pc, #216]	@ (8002970 <HAL_RCC_OscConfig+0x86c>)
 8002896:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800289a:	f023 0303 	bic.w	r3, r3, #3
 800289e:	6293      	str	r3, [r2, #40]	@ 0x28
 80028a0:	e061      	b.n	8002966 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80028a2:	4b33      	ldr	r3, [pc, #204]	@ (8002970 <HAL_RCC_OscConfig+0x86c>)
 80028a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80028a8:	4b31      	ldr	r3, [pc, #196]	@ (8002970 <HAL_RCC_OscConfig+0x86c>)
 80028aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ac:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d031      	beq.n	800291a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	f003 0203 	and.w	r2, r3, #3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d12a      	bne.n	800291a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	0a1b      	lsrs	r3, r3, #8
 80028c8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d122      	bne.n	800291a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028de:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d11a      	bne.n	800291a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	0a5b      	lsrs	r3, r3, #9
 80028e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d111      	bne.n	800291a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	0c1b      	lsrs	r3, r3, #16
 80028fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002902:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002904:	429a      	cmp	r2, r3
 8002906:	d108      	bne.n	800291a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	0e1b      	lsrs	r3, r3, #24
 800290c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002914:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002916:	429a      	cmp	r2, r3
 8002918:	d001      	beq.n	800291e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e024      	b.n	8002968 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800291e:	4b14      	ldr	r3, [pc, #80]	@ (8002970 <HAL_RCC_OscConfig+0x86c>)
 8002920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002922:	08db      	lsrs	r3, r3, #3
 8002924:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800292c:	429a      	cmp	r2, r3
 800292e:	d01a      	beq.n	8002966 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002930:	4b0f      	ldr	r3, [pc, #60]	@ (8002970 <HAL_RCC_OscConfig+0x86c>)
 8002932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002934:	4a0e      	ldr	r2, [pc, #56]	@ (8002970 <HAL_RCC_OscConfig+0x86c>)
 8002936:	f023 0310 	bic.w	r3, r3, #16
 800293a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7fe fc7e 	bl	800123c <HAL_GetTick>
 8002940:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002942:	bf00      	nop
 8002944:	f7fe fc7a 	bl	800123c <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	4293      	cmp	r3, r2
 800294e:	d0f9      	beq.n	8002944 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002954:	4a06      	ldr	r2, [pc, #24]	@ (8002970 <HAL_RCC_OscConfig+0x86c>)
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800295a:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <HAL_RCC_OscConfig+0x86c>)
 800295c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295e:	4a04      	ldr	r2, [pc, #16]	@ (8002970 <HAL_RCC_OscConfig+0x86c>)
 8002960:	f043 0310 	orr.w	r3, r3, #16
 8002964:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3720      	adds	r7, #32
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	44020c00 	.word	0x44020c00

08002974 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e19e      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002988:	4b83      	ldr	r3, [pc, #524]	@ (8002b98 <HAL_RCC_ClockConfig+0x224>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 030f 	and.w	r3, r3, #15
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d910      	bls.n	80029b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b80      	ldr	r3, [pc, #512]	@ (8002b98 <HAL_RCC_ClockConfig+0x224>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 020f 	bic.w	r2, r3, #15
 800299e:	497e      	ldr	r1, [pc, #504]	@ (8002b98 <HAL_RCC_ClockConfig+0x224>)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	4b7c      	ldr	r3, [pc, #496]	@ (8002b98 <HAL_RCC_ClockConfig+0x224>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e186      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d012      	beq.n	80029ea <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	695a      	ldr	r2, [r3, #20]
 80029c8:	4b74      	ldr	r3, [pc, #464]	@ (8002b9c <HAL_RCC_ClockConfig+0x228>)
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	0a1b      	lsrs	r3, r3, #8
 80029ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d909      	bls.n	80029ea <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80029d6:	4b71      	ldr	r3, [pc, #452]	@ (8002b9c <HAL_RCC_ClockConfig+0x228>)
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	021b      	lsls	r3, r3, #8
 80029e4:	496d      	ldr	r1, [pc, #436]	@ (8002b9c <HAL_RCC_ClockConfig+0x228>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d012      	beq.n	8002a1c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691a      	ldr	r2, [r3, #16]
 80029fa:	4b68      	ldr	r3, [pc, #416]	@ (8002b9c <HAL_RCC_ClockConfig+0x228>)
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	091b      	lsrs	r3, r3, #4
 8002a00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d909      	bls.n	8002a1c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002a08:	4b64      	ldr	r3, [pc, #400]	@ (8002b9c <HAL_RCC_ClockConfig+0x228>)
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	011b      	lsls	r3, r3, #4
 8002a16:	4961      	ldr	r1, [pc, #388]	@ (8002b9c <HAL_RCC_ClockConfig+0x228>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d010      	beq.n	8002a4a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	4b5b      	ldr	r3, [pc, #364]	@ (8002b9c <HAL_RCC_ClockConfig+0x228>)
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d908      	bls.n	8002a4a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002a38:	4b58      	ldr	r3, [pc, #352]	@ (8002b9c <HAL_RCC_ClockConfig+0x228>)
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4955      	ldr	r1, [pc, #340]	@ (8002b9c <HAL_RCC_ClockConfig+0x228>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d010      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	4b50      	ldr	r3, [pc, #320]	@ (8002b9c <HAL_RCC_ClockConfig+0x228>)
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d908      	bls.n	8002a78 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002a66:	4b4d      	ldr	r3, [pc, #308]	@ (8002b9c <HAL_RCC_ClockConfig+0x228>)
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	f023 020f 	bic.w	r2, r3, #15
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	494a      	ldr	r1, [pc, #296]	@ (8002b9c <HAL_RCC_ClockConfig+0x228>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 8093 	beq.w	8002bac <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d107      	bne.n	8002a9e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002a8e:	4b43      	ldr	r3, [pc, #268]	@ (8002b9c <HAL_RCC_ClockConfig+0x228>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d121      	bne.n	8002ade <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e113      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d107      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aa6:	4b3d      	ldr	r3, [pc, #244]	@ (8002b9c <HAL_RCC_ClockConfig+0x228>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d115      	bne.n	8002ade <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e107      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d107      	bne.n	8002ace <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002abe:	4b37      	ldr	r3, [pc, #220]	@ (8002b9c <HAL_RCC_ClockConfig+0x228>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e0fb      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ace:	4b33      	ldr	r3, [pc, #204]	@ (8002b9c <HAL_RCC_ClockConfig+0x228>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e0f3      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002ade:	4b2f      	ldr	r3, [pc, #188]	@ (8002b9c <HAL_RCC_ClockConfig+0x228>)
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	f023 0203 	bic.w	r2, r3, #3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	492c      	ldr	r1, [pc, #176]	@ (8002b9c <HAL_RCC_ClockConfig+0x228>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002af0:	f7fe fba4 	bl	800123c <HAL_GetTick>
 8002af4:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	d112      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002afe:	e00a      	b.n	8002b16 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002b00:	f7fe fb9c 	bl	800123c <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e0d7      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b16:	4b21      	ldr	r3, [pc, #132]	@ (8002b9c <HAL_RCC_ClockConfig+0x228>)
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f003 0318 	and.w	r3, r3, #24
 8002b1e:	2b18      	cmp	r3, #24
 8002b20:	d1ee      	bne.n	8002b00 <HAL_RCC_ClockConfig+0x18c>
 8002b22:	e043      	b.n	8002bac <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d112      	bne.n	8002b52 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002b2e:	f7fe fb85 	bl	800123c <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e0c0      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b44:	4b15      	ldr	r3, [pc, #84]	@ (8002b9c <HAL_RCC_ClockConfig+0x228>)
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	f003 0318 	and.w	r3, r3, #24
 8002b4c:	2b10      	cmp	r3, #16
 8002b4e:	d1ee      	bne.n	8002b2e <HAL_RCC_ClockConfig+0x1ba>
 8002b50:	e02c      	b.n	8002bac <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d122      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002b5a:	e00a      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002b5c:	f7fe fb6e 	bl	800123c <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e0a9      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002b72:	4b0a      	ldr	r3, [pc, #40]	@ (8002b9c <HAL_RCC_ClockConfig+0x228>)
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f003 0318 	and.w	r3, r3, #24
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d1ee      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x1e8>
 8002b7e:	e015      	b.n	8002bac <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002b80:	f7fe fb5c 	bl	800123c <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d906      	bls.n	8002ba0 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e097      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x352>
 8002b96:	bf00      	nop
 8002b98:	40022000 	.word	0x40022000
 8002b9c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ba0:	4b4b      	ldr	r3, [pc, #300]	@ (8002cd0 <HAL_RCC_ClockConfig+0x35c>)
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	f003 0318 	and.w	r3, r3, #24
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1e9      	bne.n	8002b80 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d010      	beq.n	8002bda <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	4b44      	ldr	r3, [pc, #272]	@ (8002cd0 <HAL_RCC_ClockConfig+0x35c>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d208      	bcs.n	8002bda <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002bc8:	4b41      	ldr	r3, [pc, #260]	@ (8002cd0 <HAL_RCC_ClockConfig+0x35c>)
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	f023 020f 	bic.w	r2, r3, #15
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	493e      	ldr	r1, [pc, #248]	@ (8002cd0 <HAL_RCC_ClockConfig+0x35c>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bda:	4b3e      	ldr	r3, [pc, #248]	@ (8002cd4 <HAL_RCC_ClockConfig+0x360>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d210      	bcs.n	8002c0a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be8:	4b3a      	ldr	r3, [pc, #232]	@ (8002cd4 <HAL_RCC_ClockConfig+0x360>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f023 020f 	bic.w	r2, r3, #15
 8002bf0:	4938      	ldr	r1, [pc, #224]	@ (8002cd4 <HAL_RCC_ClockConfig+0x360>)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf8:	4b36      	ldr	r3, [pc, #216]	@ (8002cd4 <HAL_RCC_ClockConfig+0x360>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d001      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e05d      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d010      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	4b2d      	ldr	r3, [pc, #180]	@ (8002cd0 <HAL_RCC_ClockConfig+0x35c>)
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d208      	bcs.n	8002c38 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002c26:	4b2a      	ldr	r3, [pc, #168]	@ (8002cd0 <HAL_RCC_ClockConfig+0x35c>)
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	4927      	ldr	r1, [pc, #156]	@ (8002cd0 <HAL_RCC_ClockConfig+0x35c>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d012      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	4b21      	ldr	r3, [pc, #132]	@ (8002cd0 <HAL_RCC_ClockConfig+0x35c>)
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d209      	bcs.n	8002c6a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002c56:	4b1e      	ldr	r3, [pc, #120]	@ (8002cd0 <HAL_RCC_ClockConfig+0x35c>)
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	491a      	ldr	r1, [pc, #104]	@ (8002cd0 <HAL_RCC_ClockConfig+0x35c>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d012      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	4b15      	ldr	r3, [pc, #84]	@ (8002cd0 <HAL_RCC_ClockConfig+0x35c>)
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	0a1b      	lsrs	r3, r3, #8
 8002c80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d209      	bcs.n	8002c9c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002c88:	4b11      	ldr	r3, [pc, #68]	@ (8002cd0 <HAL_RCC_ClockConfig+0x35c>)
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	021b      	lsls	r3, r3, #8
 8002c96:	490e      	ldr	r1, [pc, #56]	@ (8002cd0 <HAL_RCC_ClockConfig+0x35c>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002c9c:	f000 f822 	bl	8002ce4 <HAL_RCC_GetSysClockFreq>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd0 <HAL_RCC_ClockConfig+0x35c>)
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	490b      	ldr	r1, [pc, #44]	@ (8002cd8 <HAL_RCC_ClockConfig+0x364>)
 8002cac:	5ccb      	ldrb	r3, [r1, r3]
 8002cae:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8002cdc <HAL_RCC_ClockConfig+0x368>)
 8002cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce0 <HAL_RCC_ClockConfig+0x36c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fe fa34 	bl	8001128 <HAL_InitTick>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002cc4:	7afb      	ldrb	r3, [r7, #11]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	44020c00 	.word	0x44020c00
 8002cd4:	40022000 	.word	0x40022000
 8002cd8:	0800671c 	.word	0x0800671c
 8002cdc:	20000000 	.word	0x20000000
 8002ce0:	20000004 	.word	0x20000004

08002ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b089      	sub	sp, #36	@ 0x24
 8002ce8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002cea:	4b8c      	ldr	r3, [pc, #560]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f003 0318 	and.w	r3, r3, #24
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d102      	bne.n	8002cfc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002cf6:	4b8a      	ldr	r3, [pc, #552]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002cf8:	61fb      	str	r3, [r7, #28]
 8002cfa:	e107      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cfc:	4b87      	ldr	r3, [pc, #540]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	f003 0318 	and.w	r3, r3, #24
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d112      	bne.n	8002d2e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002d08:	4b84      	ldr	r3, [pc, #528]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d009      	beq.n	8002d28 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002d14:	4b81      	ldr	r3, [pc, #516]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	08db      	lsrs	r3, r3, #3
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	4a81      	ldr	r2, [pc, #516]	@ (8002f24 <HAL_RCC_GetSysClockFreq+0x240>)
 8002d20:	fa22 f303 	lsr.w	r3, r2, r3
 8002d24:	61fb      	str	r3, [r7, #28]
 8002d26:	e0f1      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002d28:	4b7e      	ldr	r3, [pc, #504]	@ (8002f24 <HAL_RCC_GetSysClockFreq+0x240>)
 8002d2a:	61fb      	str	r3, [r7, #28]
 8002d2c:	e0ee      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d2e:	4b7b      	ldr	r3, [pc, #492]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	f003 0318 	and.w	r3, r3, #24
 8002d36:	2b10      	cmp	r3, #16
 8002d38:	d102      	bne.n	8002d40 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d3a:	4b7b      	ldr	r3, [pc, #492]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x244>)
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	e0e5      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d40:	4b76      	ldr	r3, [pc, #472]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	f003 0318 	and.w	r3, r3, #24
 8002d48:	2b18      	cmp	r3, #24
 8002d4a:	f040 80dd 	bne.w	8002f08 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002d4e:	4b73      	ldr	r3, [pc, #460]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8002d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002d58:	4b70      	ldr	r3, [pc, #448]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5c:	0a1b      	lsrs	r3, r3, #8
 8002d5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d62:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002d64:	4b6d      	ldr	r3, [pc, #436]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8002d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d68:	091b      	lsrs	r3, r3, #4
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002d70:	4b6a      	ldr	r3, [pc, #424]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8002d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002d74:	08db      	lsrs	r3, r3, #3
 8002d76:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	fb02 f303 	mul.w	r3, r2, r3
 8002d80:	ee07 3a90 	vmov	s15, r3
 8002d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d88:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 80b7 	beq.w	8002f02 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d003      	beq.n	8002da2 <HAL_RCC_GetSysClockFreq+0xbe>
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d056      	beq.n	8002e4e <HAL_RCC_GetSysClockFreq+0x16a>
 8002da0:	e077      	b.n	8002e92 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002da2:	4b5e      	ldr	r3, [pc, #376]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d02d      	beq.n	8002e0a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002dae:	4b5b      	ldr	r3, [pc, #364]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	08db      	lsrs	r3, r3, #3
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	4a5a      	ldr	r2, [pc, #360]	@ (8002f24 <HAL_RCC_GetSysClockFreq+0x240>)
 8002dba:	fa22 f303 	lsr.w	r3, r2, r3
 8002dbe:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	ee07 3a90 	vmov	s15, r3
 8002dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	ee07 3a90 	vmov	s15, r3
 8002dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dd8:	4b50      	ldr	r3, [pc, #320]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8002dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002de0:	ee07 3a90 	vmov	s15, r3
 8002de4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002de8:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dec:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002f2c <HAL_RCC_GetSysClockFreq+0x248>
 8002df0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002df4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002df8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e04:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002e08:	e065      	b.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	ee07 3a90 	vmov	s15, r3
 8002e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e14:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002f30 <HAL_RCC_GetSysClockFreq+0x24c>
 8002e18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e1c:	4b3f      	ldr	r3, [pc, #252]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8002e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e24:	ee07 3a90 	vmov	s15, r3
 8002e28:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e30:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002f2c <HAL_RCC_GetSysClockFreq+0x248>
 8002e34:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e38:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e40:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e48:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002e4c:	e043      	b.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	ee07 3a90 	vmov	s15, r3
 8002e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e58:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002f34 <HAL_RCC_GetSysClockFreq+0x250>
 8002e5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e60:	4b2e      	ldr	r3, [pc, #184]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8002e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e68:	ee07 3a90 	vmov	s15, r3
 8002e6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e70:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e74:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002f2c <HAL_RCC_GetSysClockFreq+0x248>
 8002e78:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e84:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e8c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002e90:	e021      	b.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	ee07 3a90 	vmov	s15, r3
 8002e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e9c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002f38 <HAL_RCC_GetSysClockFreq+0x254>
 8002ea0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8002ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eac:	ee07 3a90 	vmov	s15, r3
 8002eb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002eb4:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eb8:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002f2c <HAL_RCC_GetSysClockFreq+0x248>
 8002ebc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ec0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ec4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ec8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ed0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002ed4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002ed6:	4b11      	ldr	r3, [pc, #68]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x238>)
 8002ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eda:	0a5b      	lsrs	r3, r3, #9
 8002edc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	ee07 3a90 	vmov	s15, r3
 8002eea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002eee:	edd7 6a06 	vldr	s13, [r7, #24]
 8002ef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002efa:	ee17 3a90 	vmov	r3, s15
 8002efe:	61fb      	str	r3, [r7, #28]
 8002f00:	e004      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	e001      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002f08:	4b06      	ldr	r3, [pc, #24]	@ (8002f24 <HAL_RCC_GetSysClockFreq+0x240>)
 8002f0a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002f0c:	69fb      	ldr	r3, [r7, #28]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3724      	adds	r7, #36	@ 0x24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	44020c00 	.word	0x44020c00
 8002f20:	003d0900 	.word	0x003d0900
 8002f24:	03d09000 	.word	0x03d09000
 8002f28:	007a1200 	.word	0x007a1200
 8002f2c:	46000000 	.word	0x46000000
 8002f30:	4c742400 	.word	0x4c742400
 8002f34:	4af42400 	.word	0x4af42400
 8002f38:	4a742400 	.word	0x4a742400

08002f3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002f40:	f7ff fed0 	bl	8002ce4 <HAL_RCC_GetSysClockFreq>
 8002f44:	4602      	mov	r2, r0
 8002f46:	4b08      	ldr	r3, [pc, #32]	@ (8002f68 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002f4a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002f4e:	4907      	ldr	r1, [pc, #28]	@ (8002f6c <HAL_RCC_GetHCLKFreq+0x30>)
 8002f50:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002f52:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002f56:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5a:	4a05      	ldr	r2, [pc, #20]	@ (8002f70 <HAL_RCC_GetHCLKFreq+0x34>)
 8002f5c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002f5e:	4b04      	ldr	r3, [pc, #16]	@ (8002f70 <HAL_RCC_GetHCLKFreq+0x34>)
 8002f60:	681b      	ldr	r3, [r3, #0]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	44020c00 	.word	0x44020c00
 8002f6c:	0800671c 	.word	0x0800671c
 8002f70:	20000000 	.word	0x20000000

08002f74 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f78:	b0d8      	sub	sp, #352	@ 0x160
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f80:	2300      	movs	r3, #0
 8002f82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f86:	2300      	movs	r3, #0
 8002f88:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002f8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f94:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8002f98:	2500      	movs	r5, #0
 8002f9a:	ea54 0305 	orrs.w	r3, r4, r5
 8002f9e:	d00b      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002fa0:	4bcd      	ldr	r3, [pc, #820]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002fa2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fa6:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8002faa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb0:	4ac9      	ldr	r2, [pc, #804]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002fb2:	430b      	orrs	r3, r1
 8002fb4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc0:	f002 0801 	and.w	r8, r2, #1
 8002fc4:	f04f 0900 	mov.w	r9, #0
 8002fc8:	ea58 0309 	orrs.w	r3, r8, r9
 8002fcc:	d042      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002fce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd4:	2b05      	cmp	r3, #5
 8002fd6:	d823      	bhi.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8002fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fde:	bf00      	nop
 8002fe0:	08003029 	.word	0x08003029
 8002fe4:	08002ff9 	.word	0x08002ff9
 8002fe8:	0800300d 	.word	0x0800300d
 8002fec:	08003029 	.word	0x08003029
 8002ff0:	08003029 	.word	0x08003029
 8002ff4:	08003029 	.word	0x08003029
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002ff8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002ffc:	3308      	adds	r3, #8
 8002ffe:	4618      	mov	r0, r3
 8003000:	f001 ff42 	bl	8004e88 <RCCEx_PLL2_Config>
 8003004:	4603      	mov	r3, r0
 8003006:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800300a:	e00e      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800300c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003010:	3330      	adds	r3, #48	@ 0x30
 8003012:	4618      	mov	r0, r3
 8003014:	f001 ffd0 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003018:	4603      	mov	r3, r0
 800301a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800301e:	e004      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003026:	e000      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8003028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800302a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10c      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003032:	4ba9      	ldr	r3, [pc, #676]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003034:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003038:	f023 0107 	bic.w	r1, r3, #7
 800303c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003042:	4aa5      	ldr	r2, [pc, #660]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003044:	430b      	orrs	r3, r1
 8003046:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800304a:	e003      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800304c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003050:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003054:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305c:	f002 0a02 	and.w	sl, r2, #2
 8003060:	f04f 0b00 	mov.w	fp, #0
 8003064:	ea5a 030b 	orrs.w	r3, sl, fp
 8003068:	f000 8088 	beq.w	800317c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800306c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003072:	2b28      	cmp	r3, #40	@ 0x28
 8003074:	d868      	bhi.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003076:	a201      	add	r2, pc, #4	@ (adr r2, 800307c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307c:	08003151 	.word	0x08003151
 8003080:	08003149 	.word	0x08003149
 8003084:	08003149 	.word	0x08003149
 8003088:	08003149 	.word	0x08003149
 800308c:	08003149 	.word	0x08003149
 8003090:	08003149 	.word	0x08003149
 8003094:	08003149 	.word	0x08003149
 8003098:	08003149 	.word	0x08003149
 800309c:	08003121 	.word	0x08003121
 80030a0:	08003149 	.word	0x08003149
 80030a4:	08003149 	.word	0x08003149
 80030a8:	08003149 	.word	0x08003149
 80030ac:	08003149 	.word	0x08003149
 80030b0:	08003149 	.word	0x08003149
 80030b4:	08003149 	.word	0x08003149
 80030b8:	08003149 	.word	0x08003149
 80030bc:	08003135 	.word	0x08003135
 80030c0:	08003149 	.word	0x08003149
 80030c4:	08003149 	.word	0x08003149
 80030c8:	08003149 	.word	0x08003149
 80030cc:	08003149 	.word	0x08003149
 80030d0:	08003149 	.word	0x08003149
 80030d4:	08003149 	.word	0x08003149
 80030d8:	08003149 	.word	0x08003149
 80030dc:	08003151 	.word	0x08003151
 80030e0:	08003149 	.word	0x08003149
 80030e4:	08003149 	.word	0x08003149
 80030e8:	08003149 	.word	0x08003149
 80030ec:	08003149 	.word	0x08003149
 80030f0:	08003149 	.word	0x08003149
 80030f4:	08003149 	.word	0x08003149
 80030f8:	08003149 	.word	0x08003149
 80030fc:	08003151 	.word	0x08003151
 8003100:	08003149 	.word	0x08003149
 8003104:	08003149 	.word	0x08003149
 8003108:	08003149 	.word	0x08003149
 800310c:	08003149 	.word	0x08003149
 8003110:	08003149 	.word	0x08003149
 8003114:	08003149 	.word	0x08003149
 8003118:	08003149 	.word	0x08003149
 800311c:	08003151 	.word	0x08003151
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003120:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003124:	3308      	adds	r3, #8
 8003126:	4618      	mov	r0, r3
 8003128:	f001 feae 	bl	8004e88 <RCCEx_PLL2_Config>
 800312c:	4603      	mov	r3, r0
 800312e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8003132:	e00e      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003134:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003138:	3330      	adds	r3, #48	@ 0x30
 800313a:	4618      	mov	r0, r3
 800313c:	f001 ff3c 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003140:	4603      	mov	r3, r0
 8003142:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8003146:	e004      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800314e:	e000      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8003150:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003152:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10c      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800315a:	4b5f      	ldr	r3, [pc, #380]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800315c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003160:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003164:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800316a:	4a5b      	ldr	r2, [pc, #364]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800316c:	430b      	orrs	r3, r1
 800316e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003172:	e003      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003174:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003178:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800317c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003184:	f002 0304 	and.w	r3, r2, #4
 8003188:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800318c:	2300      	movs	r3, #0
 800318e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8003192:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8003196:	460b      	mov	r3, r1
 8003198:	4313      	orrs	r3, r2
 800319a:	d04e      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800319c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80031a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031a2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80031a6:	d02c      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80031a8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80031ac:	d825      	bhi.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x286>
 80031ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031b2:	d028      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80031b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031b8:	d81f      	bhi.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x286>
 80031ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80031bc:	d025      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x296>
 80031be:	2bc0      	cmp	r3, #192	@ 0xc0
 80031c0:	d81b      	bhi.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x286>
 80031c2:	2b80      	cmp	r3, #128	@ 0x80
 80031c4:	d00f      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80031c6:	2b80      	cmp	r3, #128	@ 0x80
 80031c8:	d817      	bhi.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x286>
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d01f      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80031ce:	2b40      	cmp	r3, #64	@ 0x40
 80031d0:	d113      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80031d6:	3308      	adds	r3, #8
 80031d8:	4618      	mov	r0, r3
 80031da:	f001 fe55 	bl	8004e88 <RCCEx_PLL2_Config>
 80031de:	4603      	mov	r3, r0
 80031e0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80031e4:	e014      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80031e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80031ea:	3330      	adds	r3, #48	@ 0x30
 80031ec:	4618      	mov	r0, r3
 80031ee:	f001 fee3 	bl	8004fb8 <RCCEx_PLL3_Config>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80031f8:	e00a      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003200:	e006      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003202:	bf00      	nop
 8003204:	e004      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003206:	bf00      	nop
 8003208:	e002      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800320a:	bf00      	nop
 800320c:	e000      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800320e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003210:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10c      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003218:	4b2f      	ldr	r3, [pc, #188]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800321a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800321e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003222:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003226:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003228:	4a2b      	ldr	r2, [pc, #172]	@ (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800322a:	430b      	orrs	r3, r1
 800322c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003230:	e003      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003232:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003236:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800323a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800323e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003242:	f002 0308 	and.w	r3, r2, #8
 8003246:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800324a:	2300      	movs	r3, #0
 800324c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003250:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8003254:	460b      	mov	r3, r1
 8003256:	4313      	orrs	r3, r2
 8003258:	d056      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800325a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800325e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003260:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003264:	d031      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x356>
 8003266:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800326a:	d82a      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800326c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003270:	d02d      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003272:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003276:	d824      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003278:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800327c:	d029      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800327e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003282:	d81e      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003288:	d011      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800328a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800328e:	d818      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003290:	2b00      	cmp	r3, #0
 8003292:	d023      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003294:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003298:	d113      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800329a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800329e:	3308      	adds	r3, #8
 80032a0:	4618      	mov	r0, r3
 80032a2:	f001 fdf1 	bl	8004e88 <RCCEx_PLL2_Config>
 80032a6:	4603      	mov	r3, r0
 80032a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80032ac:	e017      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80032ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032b2:	3330      	adds	r3, #48	@ 0x30
 80032b4:	4618      	mov	r0, r3
 80032b6:	f001 fe7f 	bl	8004fb8 <RCCEx_PLL3_Config>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80032c0:	e00d      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80032c8:	e009      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80032ca:	bf00      	nop
 80032cc:	e007      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80032ce:	bf00      	nop
 80032d0:	e005      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80032d2:	bf00      	nop
 80032d4:	e003      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80032d6:	bf00      	nop
 80032d8:	44020c00 	.word	0x44020c00
        break;
 80032dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10c      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80032e6:	4bbb      	ldr	r3, [pc, #748]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80032e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80032ec:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80032f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032f6:	4ab7      	ldr	r2, [pc, #732]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80032f8:	430b      	orrs	r3, r1
 80032fa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80032fe:	e003      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003300:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003304:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003308:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800330c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003310:	f002 0310 	and.w	r3, r2, #16
 8003314:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003318:	2300      	movs	r3, #0
 800331a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800331e:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8003322:	460b      	mov	r3, r1
 8003324:	4313      	orrs	r3, r2
 8003326:	d053      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8003328:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800332c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800332e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003332:	d031      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003334:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003338:	d82a      	bhi.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800333a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800333e:	d02d      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003340:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003344:	d824      	bhi.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003346:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800334a:	d029      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800334c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003350:	d81e      	bhi.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003352:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003356:	d011      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003358:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800335c:	d818      	bhi.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800335e:	2b00      	cmp	r3, #0
 8003360:	d020      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8003362:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003366:	d113      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003368:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800336c:	3308      	adds	r3, #8
 800336e:	4618      	mov	r0, r3
 8003370:	f001 fd8a 	bl	8004e88 <RCCEx_PLL2_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800337a:	e014      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800337c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003380:	3330      	adds	r3, #48	@ 0x30
 8003382:	4618      	mov	r0, r3
 8003384:	f001 fe18 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003388:	4603      	mov	r3, r0
 800338a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800338e:	e00a      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003396:	e006      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003398:	bf00      	nop
 800339a:	e004      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800339c:	bf00      	nop
 800339e:	e002      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80033a0:	bf00      	nop
 80033a2:	e000      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80033a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80033ae:	4b89      	ldr	r3, [pc, #548]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80033b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80033b4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80033b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033be:	4a85      	ldr	r2, [pc, #532]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80033c0:	430b      	orrs	r3, r1
 80033c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80033c6:	e003      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80033cc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80033d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d8:	f002 0320 	and.w	r3, r2, #32
 80033dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80033e0:	2300      	movs	r3, #0
 80033e2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80033e6:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 80033ea:	460b      	mov	r3, r1
 80033ec:	4313      	orrs	r3, r2
 80033ee:	d053      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80033f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80033fa:	d031      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80033fc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003400:	d82a      	bhi.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003402:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003406:	d02d      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003408:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800340c:	d824      	bhi.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800340e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003412:	d029      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003414:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003418:	d81e      	bhi.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800341a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800341e:	d011      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003424:	d818      	bhi.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d020      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800342a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800342e:	d113      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003430:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003434:	3308      	adds	r3, #8
 8003436:	4618      	mov	r0, r3
 8003438:	f001 fd26 	bl	8004e88 <RCCEx_PLL2_Config>
 800343c:	4603      	mov	r3, r0
 800343e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8003442:	e014      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003444:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003448:	3330      	adds	r3, #48	@ 0x30
 800344a:	4618      	mov	r0, r3
 800344c:	f001 fdb4 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003450:	4603      	mov	r3, r0
 8003452:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8003456:	e00a      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800345e:	e006      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003460:	bf00      	nop
 8003462:	e004      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003464:	bf00      	nop
 8003466:	e002      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003468:	bf00      	nop
 800346a:	e000      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800346c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800346e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10c      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8003476:	4b57      	ldr	r3, [pc, #348]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003478:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800347c:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8003480:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003486:	4a53      	ldr	r2, [pc, #332]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003488:	430b      	orrs	r3, r1
 800348a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800348e:	e003      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003490:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003494:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003498:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80034a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80034a8:	2300      	movs	r3, #0
 80034aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80034ae:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 80034b2:	460b      	mov	r3, r1
 80034b4:	4313      	orrs	r3, r2
 80034b6:	d053      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80034b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034be:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80034c2:	d031      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80034c4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80034c8:	d82a      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80034ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034ce:	d02d      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80034d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034d4:	d824      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80034d6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80034da:	d029      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80034dc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80034e0:	d81e      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80034e2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80034e6:	d011      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x598>
 80034e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80034ec:	d818      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d020      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80034f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034f6:	d113      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034fc:	3308      	adds	r3, #8
 80034fe:	4618      	mov	r0, r3
 8003500:	f001 fcc2 	bl	8004e88 <RCCEx_PLL2_Config>
 8003504:	4603      	mov	r3, r0
 8003506:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800350a:	e014      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800350c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003510:	3330      	adds	r3, #48	@ 0x30
 8003512:	4618      	mov	r0, r3
 8003514:	f001 fd50 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800351e:	e00a      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003526:	e006      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003528:	bf00      	nop
 800352a:	e004      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800352c:	bf00      	nop
 800352e:	e002      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003530:	bf00      	nop
 8003532:	e000      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003536:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10c      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800353e:	4b25      	ldr	r3, [pc, #148]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003540:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003544:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8003548:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800354c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800354e:	4a21      	ldr	r2, [pc, #132]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003550:	430b      	orrs	r3, r1
 8003552:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003556:	e003      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003558:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800355c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003560:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003568:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800356c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003570:	2300      	movs	r3, #0
 8003572:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003576:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800357a:	460b      	mov	r3, r1
 800357c:	4313      	orrs	r3, r2
 800357e:	d055      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8003580:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003584:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003586:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800358a:	d033      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x680>
 800358c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003590:	d82c      	bhi.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003592:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003596:	d02f      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003598:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800359c:	d826      	bhi.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x678>
 800359e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80035a2:	d02b      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x688>
 80035a4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80035a8:	d820      	bhi.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x678>
 80035aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035ae:	d013      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80035b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035b4:	d81a      	bhi.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x678>
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d022      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80035ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035be:	d115      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035c4:	3308      	adds	r3, #8
 80035c6:	4618      	mov	r0, r3
 80035c8:	f001 fc5e 	bl	8004e88 <RCCEx_PLL2_Config>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80035d2:	e016      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80035d4:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80035d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035dc:	3330      	adds	r3, #48	@ 0x30
 80035de:	4618      	mov	r0, r3
 80035e0:	f001 fcea 	bl	8004fb8 <RCCEx_PLL3_Config>
 80035e4:	4603      	mov	r3, r0
 80035e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80035ea:	e00a      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80035f2:	e006      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80035f4:	bf00      	nop
 80035f6:	e004      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80035f8:	bf00      	nop
 80035fa:	e002      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80035fc:	bf00      	nop
 80035fe:	e000      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003602:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10c      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800360a:	4bbb      	ldr	r3, [pc, #748]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800360c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003610:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003614:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003618:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800361a:	4ab7      	ldr	r2, [pc, #732]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800361c:	430b      	orrs	r3, r1
 800361e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003622:	e003      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003624:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003628:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800362c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003634:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8003638:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800363c:	2300      	movs	r3, #0
 800363e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003642:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8003646:	460b      	mov	r3, r1
 8003648:	4313      	orrs	r3, r2
 800364a:	d053      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 800364c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003650:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003652:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003656:	d031      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003658:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800365c:	d82a      	bhi.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800365e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003662:	d02d      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003664:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003668:	d824      	bhi.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800366a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800366e:	d029      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8003670:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003674:	d81e      	bhi.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003676:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800367a:	d011      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800367c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003680:	d818      	bhi.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003682:	2b00      	cmp	r3, #0
 8003684:	d020      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8003686:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800368a:	d113      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800368c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003690:	3308      	adds	r3, #8
 8003692:	4618      	mov	r0, r3
 8003694:	f001 fbf8 	bl	8004e88 <RCCEx_PLL2_Config>
 8003698:	4603      	mov	r3, r0
 800369a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800369e:	e014      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80036a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036a4:	3330      	adds	r3, #48	@ 0x30
 80036a6:	4618      	mov	r0, r3
 80036a8:	f001 fc86 	bl	8004fb8 <RCCEx_PLL3_Config>
 80036ac:	4603      	mov	r3, r0
 80036ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80036b2:	e00a      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80036ba:	e006      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80036bc:	bf00      	nop
 80036be:	e004      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80036c0:	bf00      	nop
 80036c2:	e002      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80036c4:	bf00      	nop
 80036c6:	e000      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80036c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10c      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80036d2:	4b89      	ldr	r3, [pc, #548]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80036d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80036d8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80036dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036e2:	4a85      	ldr	r2, [pc, #532]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80036e4:	430b      	orrs	r3, r1
 80036e6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80036ea:	e003      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80036f0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80036f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fc:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8003700:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003704:	2300      	movs	r3, #0
 8003706:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800370a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800370e:	460b      	mov	r3, r1
 8003710:	4313      	orrs	r3, r2
 8003712:	d055      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8003714:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003718:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800371c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8003720:	d031      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8003722:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8003726:	d82a      	bhi.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003728:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800372c:	d02d      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x816>
 800372e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003732:	d824      	bhi.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003734:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003738:	d029      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800373a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800373e:	d81e      	bhi.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003740:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003744:	d011      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8003746:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800374a:	d818      	bhi.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800374c:	2b00      	cmp	r3, #0
 800374e:	d020      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8003750:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003754:	d113      	bne.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003756:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800375a:	3308      	adds	r3, #8
 800375c:	4618      	mov	r0, r3
 800375e:	f001 fb93 	bl	8004e88 <RCCEx_PLL2_Config>
 8003762:	4603      	mov	r3, r0
 8003764:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003768:	e014      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800376a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800376e:	3330      	adds	r3, #48	@ 0x30
 8003770:	4618      	mov	r0, r3
 8003772:	f001 fc21 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003776:	4603      	mov	r3, r0
 8003778:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800377c:	e00a      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003784:	e006      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003786:	bf00      	nop
 8003788:	e004      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800378a:	bf00      	nop
 800378c:	e002      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800378e:	bf00      	nop
 8003790:	e000      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003792:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003794:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10d      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 800379c:	4b56      	ldr	r3, [pc, #344]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800379e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037a2:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 80037a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037ae:	4a52      	ldr	r2, [pc, #328]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80037b0:	430b      	orrs	r3, r1
 80037b2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80037b6:	e003      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80037bc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80037c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80037cc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80037d0:	2300      	movs	r3, #0
 80037d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80037d6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80037da:	460b      	mov	r3, r1
 80037dc:	4313      	orrs	r3, r2
 80037de:	d044      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80037e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037e8:	2b05      	cmp	r3, #5
 80037ea:	d823      	bhi.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80037ec:	a201      	add	r2, pc, #4	@ (adr r2, 80037f4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80037ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f2:	bf00      	nop
 80037f4:	0800383d 	.word	0x0800383d
 80037f8:	0800380d 	.word	0x0800380d
 80037fc:	08003821 	.word	0x08003821
 8003800:	0800383d 	.word	0x0800383d
 8003804:	0800383d 	.word	0x0800383d
 8003808:	0800383d 	.word	0x0800383d
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800380c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003810:	3308      	adds	r3, #8
 8003812:	4618      	mov	r0, r3
 8003814:	f001 fb38 	bl	8004e88 <RCCEx_PLL2_Config>
 8003818:	4603      	mov	r3, r0
 800381a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800381e:	e00e      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003820:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003824:	3330      	adds	r3, #48	@ 0x30
 8003826:	4618      	mov	r0, r3
 8003828:	f001 fbc6 	bl	8004fb8 <RCCEx_PLL3_Config>
 800382c:	4603      	mov	r3, r0
 800382e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003832:	e004      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800383a:	e000      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 800383c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800383e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10d      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8003846:	4b2c      	ldr	r3, [pc, #176]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003848:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800384c:	f023 0107 	bic.w	r1, r3, #7
 8003850:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003854:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003858:	4a27      	ldr	r2, [pc, #156]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800385a:	430b      	orrs	r3, r1
 800385c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003860:	e003      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003862:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003866:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800386a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800386e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003872:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003876:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800387a:	2300      	movs	r3, #0
 800387c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003880:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003884:	460b      	mov	r3, r1
 8003886:	4313      	orrs	r3, r2
 8003888:	d04f      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800388a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800388e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003892:	2b50      	cmp	r3, #80	@ 0x50
 8003894:	d029      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003896:	2b50      	cmp	r3, #80	@ 0x50
 8003898:	d823      	bhi.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800389a:	2b40      	cmp	r3, #64	@ 0x40
 800389c:	d027      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800389e:	2b40      	cmp	r3, #64	@ 0x40
 80038a0:	d81f      	bhi.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80038a2:	2b30      	cmp	r3, #48	@ 0x30
 80038a4:	d025      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80038a6:	2b30      	cmp	r3, #48	@ 0x30
 80038a8:	d81b      	bhi.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80038aa:	2b20      	cmp	r3, #32
 80038ac:	d00f      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	d817      	bhi.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d022      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x988>
 80038b6:	2b10      	cmp	r3, #16
 80038b8:	d113      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038be:	3308      	adds	r3, #8
 80038c0:	4618      	mov	r0, r3
 80038c2:	f001 fae1 	bl	8004e88 <RCCEx_PLL2_Config>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80038cc:	e017      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80038ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038d2:	3330      	adds	r3, #48	@ 0x30
 80038d4:	4618      	mov	r0, r3
 80038d6:	f001 fb6f 	bl	8004fb8 <RCCEx_PLL3_Config>
 80038da:	4603      	mov	r3, r0
 80038dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80038e0:	e00d      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80038e8:	e009      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80038ea:	bf00      	nop
 80038ec:	e007      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80038ee:	bf00      	nop
 80038f0:	e005      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80038f2:	bf00      	nop
 80038f4:	e003      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80038f6:	bf00      	nop
 80038f8:	44020c00 	.word	0x44020c00
        break;
 80038fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10d      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8003906:	4baf      	ldr	r3, [pc, #700]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003908:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800390c:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003910:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003918:	4aaa      	ldr	r2, [pc, #680]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800391a:	430b      	orrs	r3, r1
 800391c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003920:	e003      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003922:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003926:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800392a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800392e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003932:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003936:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800393a:	2300      	movs	r3, #0
 800393c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003940:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003944:	460b      	mov	r3, r1
 8003946:	4313      	orrs	r3, r2
 8003948:	d055      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800394a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800394e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003952:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003956:	d031      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8003958:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800395c:	d82a      	bhi.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800395e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003962:	d02d      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003964:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003968:	d824      	bhi.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800396a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800396e:	d029      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003970:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003974:	d81e      	bhi.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003976:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800397a:	d011      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 800397c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003980:	d818      	bhi.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003982:	2b00      	cmp	r3, #0
 8003984:	d020      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8003986:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800398a:	d113      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800398c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003990:	3308      	adds	r3, #8
 8003992:	4618      	mov	r0, r3
 8003994:	f001 fa78 	bl	8004e88 <RCCEx_PLL2_Config>
 8003998:	4603      	mov	r3, r0
 800399a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800399e:	e014      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039a4:	3330      	adds	r3, #48	@ 0x30
 80039a6:	4618      	mov	r0, r3
 80039a8:	f001 fb06 	bl	8004fb8 <RCCEx_PLL3_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80039b2:	e00a      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80039ba:	e006      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80039bc:	bf00      	nop
 80039be:	e004      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80039c0:	bf00      	nop
 80039c2:	e002      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80039c4:	bf00      	nop
 80039c6:	e000      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80039c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10d      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80039d2:	4b7c      	ldr	r3, [pc, #496]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80039d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039d8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80039dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039e4:	4a77      	ldr	r2, [pc, #476]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80039e6:	430b      	orrs	r3, r1
 80039e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039ec:	e003      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80039f2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003a02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a06:	2300      	movs	r3, #0
 8003a08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003a0c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003a10:	460b      	mov	r3, r1
 8003a12:	4313      	orrs	r3, r2
 8003a14:	d03d      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003a16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a22:	d01b      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003a24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a28:	d814      	bhi.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003a2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a2e:	d017      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003a30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a34:	d80e      	bhi.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d014      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003a3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a3e:	d109      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a44:	3330      	adds	r3, #48	@ 0x30
 8003a46:	4618      	mov	r0, r3
 8003a48:	f001 fab6 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003a52:	e008      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003a5a:	e004      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003a5c:	bf00      	nop
 8003a5e:	e002      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003a60:	bf00      	nop
 8003a62:	e000      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003a64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a66:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10d      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003a6e:	4b55      	ldr	r3, [pc, #340]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003a70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003a74:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003a78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a80:	4a50      	ldr	r2, [pc, #320]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003a82:	430b      	orrs	r3, r1
 8003a84:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003a88:	e003      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a8e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003a9e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003aa8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	d03d      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003ab2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aba:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003abe:	d01b      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8003ac0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003ac4:	d814      	bhi.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003ac6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003aca:	d017      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8003acc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ad0:	d80e      	bhi.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d014      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8003ad6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ada:	d109      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003adc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ae0:	3330      	adds	r3, #48	@ 0x30
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f001 fa68 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003aee:	e008      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003af6:	e004      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003af8:	bf00      	nop
 8003afa:	e002      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003afc:	bf00      	nop
 8003afe:	e000      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b02:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10d      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003b0a:	4b2e      	ldr	r3, [pc, #184]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003b0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b10:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003b14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b1c:	4a29      	ldr	r2, [pc, #164]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003b1e:	430b      	orrs	r3, r1
 8003b20:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003b24:	e003      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b26:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b2a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b36:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003b3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003b44:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	d040      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003b4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b5a:	d01b      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003b5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b60:	d814      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003b62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b66:	d017      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003b68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b6c:	d80e      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d014      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003b72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b76:	d109      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b7c:	3330      	adds	r3, #48	@ 0x30
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f001 fa1a 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003b84:	4603      	mov	r3, r0
 8003b86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003b8a:	e008      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003b92:	e004      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003b94:	bf00      	nop
 8003b96:	e002      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003b98:	bf00      	nop
 8003b9a:	e000      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b9e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d110      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003ba6:	4b07      	ldr	r3, [pc, #28]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003ba8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003bac:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003bb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bb8:	4a02      	ldr	r2, [pc, #8]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003bba:	430b      	orrs	r3, r1
 8003bbc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003bc0:	e006      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003bc2:	bf00      	nop
 8003bc4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003bcc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd8:	2100      	movs	r1, #0
 8003bda:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8003bde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003be2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003be6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4313      	orrs	r3, r2
 8003bee:	d03d      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8003bf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bf8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003bfc:	d01b      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003bfe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c02:	d814      	bhi.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003c04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c08:	d017      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8003c0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c0e:	d80e      	bhi.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d014      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003c14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c18:	d109      	bne.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c1e:	3330      	adds	r3, #48	@ 0x30
 8003c20:	4618      	mov	r0, r3
 8003c22:	f001 f9c9 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003c26:	4603      	mov	r3, r0
 8003c28:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003c2c:	e008      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003c34:	e004      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003c36:	bf00      	nop
 8003c38:	e002      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003c3a:	bf00      	nop
 8003c3c:	e000      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003c3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c40:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10d      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003c48:	4bbe      	ldr	r3, [pc, #760]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003c4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c4e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003c52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c5a:	4aba      	ldr	r2, [pc, #744]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003c62:	e003      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c64:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c68:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003c6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c74:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003c78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c82:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003c86:	460b      	mov	r3, r1
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	d035      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003c8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c98:	d015      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8003c9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c9e:	d80e      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d012      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003ca4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ca8:	d109      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003caa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cae:	3330      	adds	r3, #48	@ 0x30
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f001 f981 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003cbc:	e006      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003cc4:	e002      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003cc6:	bf00      	nop
 8003cc8:	e000      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003cca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ccc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10d      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003cd4:	4b9b      	ldr	r3, [pc, #620]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003cd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003cda:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003cde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ce2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003ce6:	4a97      	ldr	r2, [pc, #604]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003cee:	e003      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003cf4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003cf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d00:	2100      	movs	r1, #0
 8003d02:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8003d06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d0e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4313      	orrs	r3, r2
 8003d16:	d00e      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003d18:	4b8a      	ldr	r3, [pc, #552]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	4a89      	ldr	r2, [pc, #548]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d1e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003d22:	61d3      	str	r3, [r2, #28]
 8003d24:	4b87      	ldr	r3, [pc, #540]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d26:	69d9      	ldr	r1, [r3, #28]
 8003d28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d2c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003d30:	4a84      	ldr	r2, [pc, #528]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d32:	430b      	orrs	r3, r1
 8003d34:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003d42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d46:	2300      	movs	r3, #0
 8003d48:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003d4c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003d50:	460b      	mov	r3, r1
 8003d52:	4313      	orrs	r3, r2
 8003d54:	d055      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003d56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003d5e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003d62:	d031      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8003d64:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003d68:	d82a      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003d6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d6e:	d02d      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003d70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d74:	d824      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003d76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d7a:	d029      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003d7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d80:	d81e      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003d82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d86:	d011      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8003d88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d8c:	d818      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d020      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003d92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d96:	d113      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d9c:	3308      	adds	r3, #8
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f001 f872 	bl	8004e88 <RCCEx_PLL2_Config>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003daa:	e014      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003dac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003db0:	3330      	adds	r3, #48	@ 0x30
 8003db2:	4618      	mov	r0, r3
 8003db4:	f001 f900 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003dc6:	e006      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003dc8:	bf00      	nop
 8003dca:	e004      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003dcc:	bf00      	nop
 8003dce:	e002      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003dd0:	bf00      	nop
 8003dd2:	e000      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dd6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10d      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003dde:	4b59      	ldr	r3, [pc, #356]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003de0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003de4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003de8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003dec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003df0:	4a54      	ldr	r2, [pc, #336]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003df2:	430b      	orrs	r3, r1
 8003df4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003df8:	e003      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003dfe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003e0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e12:	2300      	movs	r3, #0
 8003e14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e18:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	d055      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003e22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e2a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003e2e:	d031      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8003e30:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003e34:	d82a      	bhi.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003e36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e3a:	d02d      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8003e3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e40:	d824      	bhi.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003e42:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e46:	d029      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8003e48:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e4c:	d81e      	bhi.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003e4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e52:	d011      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8003e54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e58:	d818      	bhi.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d020      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e62:	d113      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e68:	3308      	adds	r3, #8
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f001 f80c 	bl	8004e88 <RCCEx_PLL2_Config>
 8003e70:	4603      	mov	r3, r0
 8003e72:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003e76:	e014      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e7c:	3330      	adds	r3, #48	@ 0x30
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f001 f89a 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003e84:	4603      	mov	r3, r0
 8003e86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003e8a:	e00a      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003e92:	e006      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003e94:	bf00      	nop
 8003e96:	e004      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003e98:	bf00      	nop
 8003e9a:	e002      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003e9c:	bf00      	nop
 8003e9e:	e000      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10d      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003eaa:	4b26      	ldr	r3, [pc, #152]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003eac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003eb0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003eb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003eb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003ebc:	4a21      	ldr	r2, [pc, #132]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003ebe:	430b      	orrs	r3, r1
 8003ec0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003ec4:	e003      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003eca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8003ece:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8003edc:	f003 0320 	and.w	r3, r3, #32
 8003ee0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ee4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4313      	orrs	r3, r2
 8003eec:	d057      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8003eee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ef2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003ef6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003efa:	d033      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8003efc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f00:	d82c      	bhi.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003f02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f06:	d02f      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8003f08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f0c:	d826      	bhi.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003f0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f12:	d02b      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8003f14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f18:	d820      	bhi.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003f1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f1e:	d013      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003f20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f24:	d81a      	bhi.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d022      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8003f2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f2e:	d115      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f34:	3308      	adds	r3, #8
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 ffa6 	bl	8004e88 <RCCEx_PLL2_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003f42:	e016      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8003f44:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f4c:	3330      	adds	r3, #48	@ 0x30
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f001 f832 	bl	8004fb8 <RCCEx_PLL3_Config>
 8003f54:	4603      	mov	r3, r0
 8003f56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003f5a:	e00a      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003f62:	e006      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003f64:	bf00      	nop
 8003f66:	e004      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003f68:	bf00      	nop
 8003f6a:	e002      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003f6c:	bf00      	nop
 8003f6e:	e000      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f72:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10d      	bne.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8003f7a:	4bbb      	ldr	r3, [pc, #748]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003f7c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003f80:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003f84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003f8c:	4ab6      	ldr	r2, [pc, #728]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003f8e:	430b      	orrs	r3, r1
 8003f90:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003f94:	e003      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f96:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f9a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8003f9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8003fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003fb4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	d055      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8003fbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003fc6:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8003fca:	d031      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003fcc:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8003fd0:	d82a      	bhi.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003fd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fd6:	d02d      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8003fd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fdc:	d824      	bhi.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003fde:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003fe2:	d029      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8003fe4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003fe8:	d81e      	bhi.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003fea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fee:	d011      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8003ff0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ff4:	d818      	bhi.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d020      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8003ffa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ffe:	d113      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004000:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004004:	3308      	adds	r3, #8
 8004006:	4618      	mov	r0, r3
 8004008:	f000 ff3e 	bl	8004e88 <RCCEx_PLL2_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004012:	e014      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004014:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004018:	3330      	adds	r3, #48	@ 0x30
 800401a:	4618      	mov	r0, r3
 800401c:	f000 ffcc 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004020:	4603      	mov	r3, r0
 8004022:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004026:	e00a      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800402e:	e006      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004030:	bf00      	nop
 8004032:	e004      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004034:	bf00      	nop
 8004036:	e002      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004038:	bf00      	nop
 800403a:	e000      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800403c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800403e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10d      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8004046:	4b88      	ldr	r3, [pc, #544]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004048:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800404c:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8004050:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004054:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004058:	4a83      	ldr	r2, [pc, #524]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800405a:	430b      	orrs	r3, r1
 800405c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004060:	e003      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004062:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004066:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800406a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800406e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004072:	2100      	movs	r1, #0
 8004074:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8004078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800407c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004080:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004084:	460b      	mov	r3, r1
 8004086:	4313      	orrs	r3, r2
 8004088:	d055      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800408a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800408e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004092:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004096:	d031      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8004098:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800409c:	d82a      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800409e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040a2:	d02d      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80040a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040a8:	d824      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80040aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80040ae:	d029      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80040b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80040b4:	d81e      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80040b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040ba:	d011      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80040bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040c0:	d818      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d020      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80040c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040ca:	d113      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040d0:	3308      	adds	r3, #8
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fed8 	bl	8004e88 <RCCEx_PLL2_Config>
 80040d8:	4603      	mov	r3, r0
 80040da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80040de:	e014      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040e4:	3330      	adds	r3, #48	@ 0x30
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 ff66 	bl	8004fb8 <RCCEx_PLL3_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80040f2:	e00a      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80040fa:	e006      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80040fc:	bf00      	nop
 80040fe:	e004      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004100:	bf00      	nop
 8004102:	e002      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004104:	bf00      	nop
 8004106:	e000      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800410a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10d      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8004112:	4b55      	ldr	r3, [pc, #340]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004114:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004118:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800411c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004120:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004124:	4a50      	ldr	r2, [pc, #320]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004126:	430b      	orrs	r3, r1
 8004128:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800412c:	e003      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004132:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8004136:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800413a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413e:	2100      	movs	r1, #0
 8004140:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8004144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004148:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800414c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004150:	460b      	mov	r3, r1
 8004152:	4313      	orrs	r3, r2
 8004154:	d055      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8004156:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800415a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800415e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004162:	d031      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8004164:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004168:	d82a      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800416a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800416e:	d02d      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8004170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004174:	d824      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004176:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800417a:	d029      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800417c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004180:	d81e      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004182:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004186:	d011      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8004188:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800418c:	d818      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800418e:	2b00      	cmp	r3, #0
 8004190:	d020      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8004192:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004196:	d113      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004198:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800419c:	3308      	adds	r3, #8
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fe72 	bl	8004e88 <RCCEx_PLL2_Config>
 80041a4:	4603      	mov	r3, r0
 80041a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80041aa:	e014      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041b0:	3330      	adds	r3, #48	@ 0x30
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 ff00 	bl	8004fb8 <RCCEx_PLL3_Config>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80041be:	e00a      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80041c6:	e006      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80041c8:	bf00      	nop
 80041ca:	e004      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80041cc:	bf00      	nop
 80041ce:	e002      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80041d0:	bf00      	nop
 80041d2:	e000      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80041d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10d      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80041de:	4b22      	ldr	r3, [pc, #136]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80041e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80041e4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80041e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80041f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80041f2:	430b      	orrs	r3, r1
 80041f4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80041f8:	e003      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80041fe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004202:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800420e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004212:	2300      	movs	r3, #0
 8004214:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004218:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800421c:	460b      	mov	r3, r1
 800421e:	4313      	orrs	r3, r2
 8004220:	d055      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004222:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004226:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800422a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800422e:	d035      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8004230:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004234:	d82e      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004236:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800423a:	d031      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800423c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004240:	d828      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004242:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004246:	d01b      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8004248:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800424c:	d822      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8004252:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004256:	d009      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8004258:	e01c      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800425a:	4b03      	ldr	r3, [pc, #12]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800425c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425e:	4a02      	ldr	r2, [pc, #8]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004264:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004266:	e01c      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8004268:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800426c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004270:	3308      	adds	r3, #8
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fe08 	bl	8004e88 <RCCEx_PLL2_Config>
 8004278:	4603      	mov	r3, r0
 800427a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800427e:	e010      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004280:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004284:	3330      	adds	r3, #48	@ 0x30
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fe96 	bl	8004fb8 <RCCEx_PLL3_Config>
 800428c:	4603      	mov	r3, r0
 800428e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004292:	e006      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800429a:	e002      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800429c:	bf00      	nop
 800429e:	e000      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80042a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10d      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80042aa:	4bc3      	ldr	r3, [pc, #780]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80042ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80042b0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80042b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80042bc:	4abe      	ldr	r2, [pc, #760]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80042be:	430b      	orrs	r3, r1
 80042c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80042c4:	e003      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80042ca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80042ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d6:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80042da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042de:	2300      	movs	r3, #0
 80042e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80042e4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80042e8:	460b      	mov	r3, r1
 80042ea:	4313      	orrs	r3, r2
 80042ec:	d051      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80042ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042f2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80042f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042fa:	d033      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80042fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004300:	d82c      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004302:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004306:	d02d      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004308:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800430c:	d826      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800430e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004312:	d019      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8004314:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004318:	d820      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800431e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004322:	d007      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8004324:	e01a      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004326:	4ba4      	ldr	r3, [pc, #656]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432a:	4aa3      	ldr	r2, [pc, #652]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800432c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004330:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004332:	e018      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004334:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004338:	3308      	adds	r3, #8
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fda4 	bl	8004e88 <RCCEx_PLL2_Config>
 8004340:	4603      	mov	r3, r0
 8004342:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004346:	e00e      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004348:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800434c:	3330      	adds	r3, #48	@ 0x30
 800434e:	4618      	mov	r0, r3
 8004350:	f000 fe32 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004354:	4603      	mov	r3, r0
 8004356:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800435a:	e004      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004362:	e000      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8004364:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004366:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10d      	bne.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800436e:	4b92      	ldr	r3, [pc, #584]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004370:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004374:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8004378:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800437c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004380:	4a8d      	ldr	r2, [pc, #564]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004382:	430b      	orrs	r3, r1
 8004384:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004388:	e003      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800438e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004392:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800439e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043a0:	2300      	movs	r3, #0
 80043a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80043a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80043a8:	460b      	mov	r3, r1
 80043aa:	4313      	orrs	r3, r2
 80043ac:	d032      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80043ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80043b6:	2b05      	cmp	r3, #5
 80043b8:	d80f      	bhi.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	d211      	bcs.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d911      	bls.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d109      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043ca:	3308      	adds	r3, #8
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 fd5b 	bl	8004e88 <RCCEx_PLL2_Config>
 80043d2:	4603      	mov	r3, r0
 80043d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80043d8:	e006      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80043e0:	e002      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80043e2:	bf00      	nop
 80043e4:	e000      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80043e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10d      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80043f0:	4b71      	ldr	r3, [pc, #452]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80043f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80043f6:	f023 0107 	bic.w	r1, r3, #7
 80043fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004402:	4a6d      	ldr	r2, [pc, #436]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004404:	430b      	orrs	r3, r1
 8004406:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800440a:	e003      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800440c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004410:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004414:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441c:	2100      	movs	r1, #0
 800441e:	6739      	str	r1, [r7, #112]	@ 0x70
 8004420:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004424:	677b      	str	r3, [r7, #116]	@ 0x74
 8004426:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800442a:	460b      	mov	r3, r1
 800442c:	4313      	orrs	r3, r2
 800442e:	d024      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004430:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004434:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 800443c:	2b08      	cmp	r3, #8
 800443e:	d005      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004446:	e002      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004448:	bf00      	nop
 800444a:	e000      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800444c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800444e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10d      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004456:	4b58      	ldr	r3, [pc, #352]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004458:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800445c:	f023 0108 	bic.w	r1, r3, #8
 8004460:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004464:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004468:	4a53      	ldr	r2, [pc, #332]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800446a:	430b      	orrs	r3, r1
 800446c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004470:	e003      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004472:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004476:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800447a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800447e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004482:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004486:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004488:	2300      	movs	r3, #0
 800448a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800448c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004490:	460b      	mov	r3, r1
 8004492:	4313      	orrs	r3, r2
 8004494:	f000 80b9 	beq.w	800460a <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004498:	4b48      	ldr	r3, [pc, #288]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800449a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449c:	4a47      	ldr	r2, [pc, #284]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800449e:	f043 0301 	orr.w	r3, r3, #1
 80044a2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044a4:	f7fc feca 	bl	800123c <HAL_GetTick>
 80044a8:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80044ac:	e00b      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ae:	f7fc fec5 	bl	800123c <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d903      	bls.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80044c4:	e005      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80044c6:	4b3d      	ldr	r3, [pc, #244]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80044c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0ed      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80044d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f040 8093 	bne.w	8004602 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044dc:	4b36      	ldr	r3, [pc, #216]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80044de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044e6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80044ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d023      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80044f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044f6:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80044fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80044fe:	4293      	cmp	r3, r2
 8004500:	d01b      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004502:	4b2d      	ldr	r3, [pc, #180]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004508:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800450c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004510:	4b29      	ldr	r3, [pc, #164]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004512:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004516:	4a28      	ldr	r2, [pc, #160]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800451c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004520:	4b25      	ldr	r3, [pc, #148]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004522:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004526:	4a24      	ldr	r2, [pc, #144]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004528:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800452c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004530:	4a21      	ldr	r2, [pc, #132]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004532:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004536:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800453a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d019      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004546:	f7fc fe79 	bl	800123c <HAL_GetTick>
 800454a:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800454e:	e00d      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004550:	f7fc fe74 	bl	800123c <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800455a:	1ad2      	subs	r2, r2, r3
 800455c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004560:	429a      	cmp	r2, r3
 8004562:	d903      	bls.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 800456a:	e006      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800456c:	4b12      	ldr	r3, [pc, #72]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800456e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0ea      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800457a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800457e:	2b00      	cmp	r3, #0
 8004580:	d13a      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004582:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004586:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800458a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800458e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004592:	d115      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8004594:	4b08      	ldr	r3, [pc, #32]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800459c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045a0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80045a4:	091b      	lsrs	r3, r3, #4
 80045a6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80045aa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80045ae:	4a02      	ldr	r2, [pc, #8]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80045b0:	430b      	orrs	r3, r1
 80045b2:	61d3      	str	r3, [r2, #28]
 80045b4:	e00a      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80045b6:	bf00      	nop
 80045b8:	44020c00 	.word	0x44020c00
 80045bc:	44020800 	.word	0x44020800
 80045c0:	4b9f      	ldr	r3, [pc, #636]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	4a9e      	ldr	r2, [pc, #632]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80045c6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80045ca:	61d3      	str	r3, [r2, #28]
 80045cc:	4b9c      	ldr	r3, [pc, #624]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80045ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045d2:	4a9b      	ldr	r2, [pc, #620]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80045d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045dc:	4b98      	ldr	r3, [pc, #608]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80045de:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80045e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045e6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80045ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ee:	4a94      	ldr	r2, [pc, #592]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80045f0:	430b      	orrs	r3, r1
 80045f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045f6:	e008      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045f8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80045fc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8004600:	e003      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004602:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004606:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800460a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800460e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004612:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004616:	663b      	str	r3, [r7, #96]	@ 0x60
 8004618:	2300      	movs	r3, #0
 800461a:	667b      	str	r3, [r7, #100]	@ 0x64
 800461c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004620:	460b      	mov	r3, r1
 8004622:	4313      	orrs	r3, r2
 8004624:	d035      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004626:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800462a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800462e:	2b30      	cmp	r3, #48	@ 0x30
 8004630:	d014      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8004632:	2b30      	cmp	r3, #48	@ 0x30
 8004634:	d80e      	bhi.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8004636:	2b20      	cmp	r3, #32
 8004638:	d012      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800463a:	2b20      	cmp	r3, #32
 800463c:	d80a      	bhi.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800463e:	2b00      	cmp	r3, #0
 8004640:	d010      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8004642:	2b10      	cmp	r3, #16
 8004644:	d106      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004646:	4b7e      	ldr	r3, [pc, #504]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800464a:	4a7d      	ldr	r2, [pc, #500]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800464c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004650:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8004652:	e008      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800465a:	e004      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800465c:	bf00      	nop
 800465e:	e002      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004660:	bf00      	nop
 8004662:	e000      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004666:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10d      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800466e:	4b74      	ldr	r3, [pc, #464]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004670:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004674:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004678:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800467c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004680:	4a6f      	ldr	r2, [pc, #444]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004682:	430b      	orrs	r3, r1
 8004684:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004688:	e003      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800468a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800468e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004692:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469a:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800469e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046a0:	2300      	movs	r3, #0
 80046a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046a4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80046a8:	460b      	mov	r3, r1
 80046aa:	4313      	orrs	r3, r2
 80046ac:	d033      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80046ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046b2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80046ba:	2b40      	cmp	r3, #64	@ 0x40
 80046bc:	d007      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80046be:	e010      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046c0:	4b5f      	ldr	r3, [pc, #380]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c4:	4a5e      	ldr	r2, [pc, #376]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046ca:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80046cc:	e00d      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046d2:	3308      	adds	r3, #8
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 fbd7 	bl	8004e88 <RCCEx_PLL2_Config>
 80046da:	4603      	mov	r3, r0
 80046dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80046e0:	e003      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80046e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10d      	bne.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80046f2:	4b53      	ldr	r3, [pc, #332]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80046f8:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80046fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004700:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004704:	4a4e      	ldr	r2, [pc, #312]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004706:	430b      	orrs	r3, r1
 8004708:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800470c:	e003      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004712:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004716:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800471a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004722:	653b      	str	r3, [r7, #80]	@ 0x50
 8004724:	2300      	movs	r3, #0
 8004726:	657b      	str	r3, [r7, #84]	@ 0x54
 8004728:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800472c:	460b      	mov	r3, r1
 800472e:	4313      	orrs	r3, r2
 8004730:	d033      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8004732:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004736:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800473e:	2b80      	cmp	r3, #128	@ 0x80
 8004740:	d007      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8004742:	e010      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004744:	4b3e      	ldr	r3, [pc, #248]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004748:	4a3d      	ldr	r2, [pc, #244]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800474a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800474e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004750:	e00d      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004752:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004756:	3308      	adds	r3, #8
 8004758:	4618      	mov	r0, r3
 800475a:	f000 fb95 	bl	8004e88 <RCCEx_PLL2_Config>
 800475e:	4603      	mov	r3, r0
 8004760:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004764:	e003      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800476c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800476e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10d      	bne.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8004776:	4b32      	ldr	r3, [pc, #200]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004778:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800477c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004780:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004784:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004788:	4a2d      	ldr	r2, [pc, #180]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800478a:	430b      	orrs	r3, r1
 800478c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004790:	e003      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004792:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004796:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800479a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800479e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a2:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80047a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047a8:	2300      	movs	r3, #0
 80047aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047ac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80047b0:	460b      	mov	r3, r1
 80047b2:	4313      	orrs	r3, r2
 80047b4:	d04a      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80047b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d827      	bhi.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80047c2:	a201      	add	r2, pc, #4	@ (adr r2, 80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80047c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c8:	080047dd 	.word	0x080047dd
 80047cc:	080047eb 	.word	0x080047eb
 80047d0:	080047ff 	.word	0x080047ff
 80047d4:	0800481b 	.word	0x0800481b
 80047d8:	0800481b 	.word	0x0800481b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047dc:	4b18      	ldr	r3, [pc, #96]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e0:	4a17      	ldr	r2, [pc, #92]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047e6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80047e8:	e018      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047ee:	3308      	adds	r3, #8
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 fb49 	bl	8004e88 <RCCEx_PLL2_Config>
 80047f6:	4603      	mov	r3, r0
 80047f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80047fc:	e00e      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004802:	3330      	adds	r3, #48	@ 0x30
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fbd7 	bl	8004fb8 <RCCEx_PLL3_Config>
 800480a:	4603      	mov	r3, r0
 800480c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004810:	e004      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004818:	e000      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800481a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800481c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10f      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004824:	4b06      	ldr	r3, [pc, #24]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800482a:	f023 0107 	bic.w	r1, r3, #7
 800482e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004836:	4a02      	ldr	r2, [pc, #8]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004838:	430b      	orrs	r3, r1
 800483a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800483e:	e005      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8004840:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004844:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004848:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800484c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004854:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004858:	643b      	str	r3, [r7, #64]	@ 0x40
 800485a:	2300      	movs	r3, #0
 800485c:	647b      	str	r3, [r7, #68]	@ 0x44
 800485e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004862:	460b      	mov	r3, r1
 8004864:	4313      	orrs	r3, r2
 8004866:	f000 8081 	beq.w	800496c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800486a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800486e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004872:	2b20      	cmp	r3, #32
 8004874:	d85f      	bhi.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8004876:	a201      	add	r2, pc, #4	@ (adr r2, 800487c <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8004878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487c:	08004901 	.word	0x08004901
 8004880:	08004937 	.word	0x08004937
 8004884:	08004937 	.word	0x08004937
 8004888:	08004937 	.word	0x08004937
 800488c:	08004937 	.word	0x08004937
 8004890:	08004937 	.word	0x08004937
 8004894:	08004937 	.word	0x08004937
 8004898:	08004937 	.word	0x08004937
 800489c:	0800490f 	.word	0x0800490f
 80048a0:	08004937 	.word	0x08004937
 80048a4:	08004937 	.word	0x08004937
 80048a8:	08004937 	.word	0x08004937
 80048ac:	08004937 	.word	0x08004937
 80048b0:	08004937 	.word	0x08004937
 80048b4:	08004937 	.word	0x08004937
 80048b8:	08004937 	.word	0x08004937
 80048bc:	08004923 	.word	0x08004923
 80048c0:	08004937 	.word	0x08004937
 80048c4:	08004937 	.word	0x08004937
 80048c8:	08004937 	.word	0x08004937
 80048cc:	08004937 	.word	0x08004937
 80048d0:	08004937 	.word	0x08004937
 80048d4:	08004937 	.word	0x08004937
 80048d8:	08004937 	.word	0x08004937
 80048dc:	0800493f 	.word	0x0800493f
 80048e0:	08004937 	.word	0x08004937
 80048e4:	08004937 	.word	0x08004937
 80048e8:	08004937 	.word	0x08004937
 80048ec:	08004937 	.word	0x08004937
 80048f0:	08004937 	.word	0x08004937
 80048f4:	08004937 	.word	0x08004937
 80048f8:	08004937 	.word	0x08004937
 80048fc:	0800493f 	.word	0x0800493f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004900:	4bab      	ldr	r3, [pc, #684]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004904:	4aaa      	ldr	r2, [pc, #680]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004906:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800490a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800490c:	e018      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800490e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004912:	3308      	adds	r3, #8
 8004914:	4618      	mov	r0, r3
 8004916:	f000 fab7 	bl	8004e88 <RCCEx_PLL2_Config>
 800491a:	4603      	mov	r3, r0
 800491c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004920:	e00e      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004922:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004926:	3330      	adds	r3, #48	@ 0x30
 8004928:	4618      	mov	r0, r3
 800492a:	f000 fb45 	bl	8004fb8 <RCCEx_PLL3_Config>
 800492e:	4603      	mov	r3, r0
 8004930:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004934:	e004      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800493c:	e000      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800493e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004940:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10d      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004948:	4b99      	ldr	r3, [pc, #612]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800494a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800494e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004952:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004956:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800495a:	4a95      	ldr	r2, [pc, #596]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800495c:	430b      	orrs	r3, r1
 800495e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004962:	e003      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004964:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004968:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800496c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004974:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004978:	63bb      	str	r3, [r7, #56]	@ 0x38
 800497a:	2300      	movs	r3, #0
 800497c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800497e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004982:	460b      	mov	r3, r1
 8004984:	4313      	orrs	r3, r2
 8004986:	d04e      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004988:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800498c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004990:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004994:	d02e      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8004996:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800499a:	d827      	bhi.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800499c:	2bc0      	cmp	r3, #192	@ 0xc0
 800499e:	d02b      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 80049a0:	2bc0      	cmp	r3, #192	@ 0xc0
 80049a2:	d823      	bhi.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80049a4:	2b80      	cmp	r3, #128	@ 0x80
 80049a6:	d017      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 80049a8:	2b80      	cmp	r3, #128	@ 0x80
 80049aa:	d81f      	bhi.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 80049b0:	2b40      	cmp	r3, #64	@ 0x40
 80049b2:	d007      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 80049b4:	e01a      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049b6:	4b7e      	ldr	r3, [pc, #504]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80049b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ba:	4a7d      	ldr	r2, [pc, #500]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80049bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049c0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80049c2:	e01a      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049c8:	3308      	adds	r3, #8
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 fa5c 	bl	8004e88 <RCCEx_PLL2_Config>
 80049d0:	4603      	mov	r3, r0
 80049d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80049d6:	e010      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049dc:	3330      	adds	r3, #48	@ 0x30
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 faea 	bl	8004fb8 <RCCEx_PLL3_Config>
 80049e4:	4603      	mov	r3, r0
 80049e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80049ea:	e006      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80049f2:	e002      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80049f4:	bf00      	nop
 80049f6:	e000      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80049f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10d      	bne.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004a02:	4b6b      	ldr	r3, [pc, #428]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a08:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004a0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a14:	4a66      	ldr	r2, [pc, #408]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004a16:	430b      	orrs	r3, r1
 8004a18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a1c:	e003      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a22:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004a26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004a32:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a34:	2300      	movs	r3, #0
 8004a36:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a38:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	d055      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004a42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a46:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004a4a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004a4e:	d031      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8004a50:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004a54:	d82a      	bhi.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004a56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a5a:	d02d      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8004a5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a60:	d824      	bhi.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004a62:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004a66:	d029      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8004a68:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004a6c:	d81e      	bhi.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004a6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a72:	d011      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8004a74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a78:	d818      	bhi.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d020      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8004a7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a82:	d113      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a88:	3308      	adds	r3, #8
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 f9fc 	bl	8004e88 <RCCEx_PLL2_Config>
 8004a90:	4603      	mov	r3, r0
 8004a92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004a96:	e014      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a9c:	3330      	adds	r3, #48	@ 0x30
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fa8a 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004aaa:	e00a      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004ab2:	e006      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004ab4:	bf00      	nop
 8004ab6:	e004      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004ab8:	bf00      	nop
 8004aba:	e002      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004abc:	bf00      	nop
 8004abe:	e000      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ac2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10d      	bne.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8004aca:	4b39      	ldr	r3, [pc, #228]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ad0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004ad4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ad8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004adc:	4a34      	ldr	r2, [pc, #208]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004ade:	430b      	orrs	r3, r1
 8004ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004ae4:	e003      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004aea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8004aee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004afa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004afc:	2300      	movs	r3, #0
 8004afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b00:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004b04:	460b      	mov	r3, r1
 8004b06:	4313      	orrs	r3, r2
 8004b08:	d058      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8004b0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b12:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004b16:	d031      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8004b18:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004b1c:	d82a      	bhi.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004b1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b22:	d02d      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004b24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b28:	d824      	bhi.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004b2a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b2e:	d029      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8004b30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b34:	d81e      	bhi.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004b36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b3a:	d011      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8004b3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b40:	d818      	bhi.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d020      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8004b46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b4a:	d113      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b50:	3308      	adds	r3, #8
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 f998 	bl	8004e88 <RCCEx_PLL2_Config>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004b5e:	e014      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b64:	3330      	adds	r3, #48	@ 0x30
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fa26 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004b72:	e00a      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004b7a:	e006      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004b7c:	bf00      	nop
 8004b7e:	e004      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004b80:	bf00      	nop
 8004b82:	e002      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004b84:	bf00      	nop
 8004b86:	e000      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b8a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d110      	bne.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8004b92:	4b07      	ldr	r3, [pc, #28]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b98:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004b9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ba0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ba4:	4902      	ldr	r1, [pc, #8]	@ (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004bac:	e006      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8004bae:	bf00      	nop
 8004bb0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004bb8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004bbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	6239      	str	r1, [r7, #32]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	d055      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8004bd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004be0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004be4:	d031      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8004be6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004bea:	d82a      	bhi.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004bec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bf0:	d02d      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8004bf2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bf6:	d824      	bhi.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004bf8:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004bfc:	d029      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8004bfe:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004c02:	d81e      	bhi.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004c04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c08:	d011      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8004c0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c0e:	d818      	bhi.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d020      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8004c14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c18:	d113      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c1e:	3308      	adds	r3, #8
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 f931 	bl	8004e88 <RCCEx_PLL2_Config>
 8004c26:	4603      	mov	r3, r0
 8004c28:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c2c:	e014      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c32:	3330      	adds	r3, #48	@ 0x30
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 f9bf 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c40:	e00a      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004c48:	e006      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004c4a:	bf00      	nop
 8004c4c:	e004      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004c4e:	bf00      	nop
 8004c50:	e002      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004c52:	bf00      	nop
 8004c54:	e000      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c58:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10d      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8004c60:	4b88      	ldr	r3, [pc, #544]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c66:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8004c6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c72:	4984      	ldr	r1, [pc, #528]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004c7a:	e003      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c7c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c80:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004c84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	61b9      	str	r1, [r7, #24]
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	61fb      	str	r3, [r7, #28]
 8004c96:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	d03d      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004ca0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ca4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004ca8:	2b03      	cmp	r3, #3
 8004caa:	d81c      	bhi.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8004cac:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8004cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb2:	bf00      	nop
 8004cb4:	08004cef 	.word	0x08004cef
 8004cb8:	08004cc5 	.word	0x08004cc5
 8004cbc:	08004cd3 	.word	0x08004cd3
 8004cc0:	08004cef 	.word	0x08004cef
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cc4:	4b6f      	ldr	r3, [pc, #444]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc8:	4a6e      	ldr	r2, [pc, #440]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cce:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004cd0:	e00e      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 f8d5 	bl	8004e88 <RCCEx_PLL2_Config>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004ce4:	e004      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004cec:	e000      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8004cee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cf0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10d      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004cf8:	4b62      	ldr	r3, [pc, #392]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004cfa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004cfe:	f023 0203 	bic.w	r2, r3, #3
 8004d02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d06:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004d0a:	495e      	ldr	r1, [pc, #376]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004d12:	e003      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d14:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d18:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	2100      	movs	r1, #0
 8004d26:	6139      	str	r1, [r7, #16]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	617b      	str	r3, [r7, #20]
 8004d2e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004d32:	460b      	mov	r3, r1
 8004d34:	4313      	orrs	r3, r2
 8004d36:	d03a      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004d38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d3c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004d40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d44:	d00e      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8004d46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d4a:	d815      	bhi.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d017      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8004d50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d54:	d110      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d56:	4b4b      	ldr	r3, [pc, #300]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5a:	4a4a      	ldr	r2, [pc, #296]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d60:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004d62:	e00e      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d68:	3308      	adds	r3, #8
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 f88c 	bl	8004e88 <RCCEx_PLL2_Config>
 8004d70:	4603      	mov	r3, r0
 8004d72:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004d76:	e004      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004d7e:	e000      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8004d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d82:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10d      	bne.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004d8a:	4b3e      	ldr	r3, [pc, #248]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d98:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004d9c:	4939      	ldr	r1, [pc, #228]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8004da4:	e003      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004daa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004dae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db6:	2100      	movs	r1, #0
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	f003 0310 	and.w	r3, r3, #16
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	d038      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004dca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dce:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004dd2:	2b30      	cmp	r3, #48	@ 0x30
 8004dd4:	d01b      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8004dd6:	2b30      	cmp	r3, #48	@ 0x30
 8004dd8:	d815      	bhi.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8004dda:	2b10      	cmp	r3, #16
 8004ddc:	d002      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8004dde:	2b20      	cmp	r3, #32
 8004de0:	d007      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8004de2:	e010      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004de4:	4b27      	ldr	r3, [pc, #156]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de8:	4a26      	ldr	r2, [pc, #152]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004dea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dee:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004df0:	e00e      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004df2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004df6:	3330      	adds	r3, #48	@ 0x30
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 f8dd 	bl	8004fb8 <RCCEx_PLL3_Config>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004e04:	e004      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004e0c:	e000      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8004e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e10:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10d      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004e18:	4b1a      	ldr	r3, [pc, #104]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e1e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004e22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e26:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004e2a:	4916      	ldr	r1, [pc, #88]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004e32:	e003      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e34:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e38:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e44:	2100      	movs	r1, #0
 8004e46:	6039      	str	r1, [r7, #0]
 8004e48:	f003 0308 	and.w	r3, r3, #8
 8004e4c:	607b      	str	r3, [r7, #4]
 8004e4e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004e52:	460b      	mov	r3, r1
 8004e54:	4313      	orrs	r3, r2
 8004e56:	d00c      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8004e58:	4b0a      	ldr	r3, [pc, #40]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e66:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8004e6a:	4906      	ldr	r1, [pc, #24]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8004e72:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e82:	bf00      	nop
 8004e84:	44020c00 	.word	0x44020c00

08004e88 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8004e90:	4b48      	ldr	r3, [pc, #288]	@ (8004fb4 <RCCEx_PLL2_Config+0x12c>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a47      	ldr	r2, [pc, #284]	@ (8004fb4 <RCCEx_PLL2_Config+0x12c>)
 8004e96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e9a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e9c:	f7fc f9ce 	bl	800123c <HAL_GetTick>
 8004ea0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ea2:	e008      	b.n	8004eb6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ea4:	f7fc f9ca 	bl	800123c <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e07a      	b.n	8004fac <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8004fb4 <RCCEx_PLL2_Config+0x12c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1f0      	bne.n	8004ea4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004ec2:	4b3c      	ldr	r3, [pc, #240]	@ (8004fb4 <RCCEx_PLL2_Config+0x12c>)
 8004ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004eca:	f023 0303 	bic.w	r3, r3, #3
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6811      	ldr	r1, [r2, #0]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6852      	ldr	r2, [r2, #4]
 8004ed6:	0212      	lsls	r2, r2, #8
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	4936      	ldr	r1, [pc, #216]	@ (8004fb4 <RCCEx_PLL2_Config+0x12c>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	025b      	lsls	r3, r3, #9
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	041b      	lsls	r3, r3, #16
 8004efe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	061b      	lsls	r3, r3, #24
 8004f0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f10:	4928      	ldr	r1, [pc, #160]	@ (8004fb4 <RCCEx_PLL2_Config+0x12c>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004f16:	4b27      	ldr	r3, [pc, #156]	@ (8004fb4 <RCCEx_PLL2_Config+0x12c>)
 8004f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1a:	f023 020c 	bic.w	r2, r3, #12
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	4924      	ldr	r1, [pc, #144]	@ (8004fb4 <RCCEx_PLL2_Config+0x12c>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8004f28:	4b22      	ldr	r3, [pc, #136]	@ (8004fb4 <RCCEx_PLL2_Config+0x12c>)
 8004f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2c:	f023 0220 	bic.w	r2, r3, #32
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	491f      	ldr	r1, [pc, #124]	@ (8004fb4 <RCCEx_PLL2_Config+0x12c>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8004fb4 <RCCEx_PLL2_Config+0x12c>)
 8004f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f42:	491c      	ldr	r1, [pc, #112]	@ (8004fb4 <RCCEx_PLL2_Config+0x12c>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8004f48:	4b1a      	ldr	r3, [pc, #104]	@ (8004fb4 <RCCEx_PLL2_Config+0x12c>)
 8004f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4c:	4a19      	ldr	r2, [pc, #100]	@ (8004fb4 <RCCEx_PLL2_Config+0x12c>)
 8004f4e:	f023 0310 	bic.w	r3, r3, #16
 8004f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8004f54:	4b17      	ldr	r3, [pc, #92]	@ (8004fb4 <RCCEx_PLL2_Config+0x12c>)
 8004f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f58:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f5c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6a12      	ldr	r2, [r2, #32]
 8004f64:	00d2      	lsls	r2, r2, #3
 8004f66:	4913      	ldr	r1, [pc, #76]	@ (8004fb4 <RCCEx_PLL2_Config+0x12c>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8004f6c:	4b11      	ldr	r3, [pc, #68]	@ (8004fb4 <RCCEx_PLL2_Config+0x12c>)
 8004f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f70:	4a10      	ldr	r2, [pc, #64]	@ (8004fb4 <RCCEx_PLL2_Config+0x12c>)
 8004f72:	f043 0310 	orr.w	r3, r3, #16
 8004f76:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8004f78:	4b0e      	ldr	r3, [pc, #56]	@ (8004fb4 <RCCEx_PLL2_Config+0x12c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8004fb4 <RCCEx_PLL2_Config+0x12c>)
 8004f7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f82:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f84:	f7fc f95a 	bl	800123c <HAL_GetTick>
 8004f88:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f8a:	e008      	b.n	8004f9e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f8c:	f7fc f956 	bl	800123c <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e006      	b.n	8004fac <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f9e:	4b05      	ldr	r3, [pc, #20]	@ (8004fb4 <RCCEx_PLL2_Config+0x12c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0f0      	beq.n	8004f8c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8004faa:	2300      	movs	r3, #0

}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	44020c00 	.word	0x44020c00

08004fb8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8004fc0:	4b48      	ldr	r3, [pc, #288]	@ (80050e4 <RCCEx_PLL3_Config+0x12c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a47      	ldr	r2, [pc, #284]	@ (80050e4 <RCCEx_PLL3_Config+0x12c>)
 8004fc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004fcc:	f7fc f936 	bl	800123c <HAL_GetTick>
 8004fd0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fd2:	e008      	b.n	8004fe6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004fd4:	f7fc f932 	bl	800123c <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e07a      	b.n	80050dc <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fe6:	4b3f      	ldr	r3, [pc, #252]	@ (80050e4 <RCCEx_PLL3_Config+0x12c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8004ff2:	4b3c      	ldr	r3, [pc, #240]	@ (80050e4 <RCCEx_PLL3_Config+0x12c>)
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004ffa:	f023 0303 	bic.w	r3, r3, #3
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6811      	ldr	r1, [r2, #0]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	6852      	ldr	r2, [r2, #4]
 8005006:	0212      	lsls	r2, r2, #8
 8005008:	430a      	orrs	r2, r1
 800500a:	4936      	ldr	r1, [pc, #216]	@ (80050e4 <RCCEx_PLL3_Config+0x12c>)
 800500c:	4313      	orrs	r3, r2
 800500e:	630b      	str	r3, [r1, #48]	@ 0x30
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	3b01      	subs	r3, #1
 8005016:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	3b01      	subs	r3, #1
 8005020:	025b      	lsls	r3, r3, #9
 8005022:	b29b      	uxth	r3, r3
 8005024:	431a      	orrs	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	3b01      	subs	r3, #1
 800502c:	041b      	lsls	r3, r3, #16
 800502e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	3b01      	subs	r3, #1
 800503a:	061b      	lsls	r3, r3, #24
 800503c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005040:	4928      	ldr	r1, [pc, #160]	@ (80050e4 <RCCEx_PLL3_Config+0x12c>)
 8005042:	4313      	orrs	r3, r2
 8005044:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005046:	4b27      	ldr	r3, [pc, #156]	@ (80050e4 <RCCEx_PLL3_Config+0x12c>)
 8005048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800504a:	f023 020c 	bic.w	r2, r3, #12
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	4924      	ldr	r1, [pc, #144]	@ (80050e4 <RCCEx_PLL3_Config+0x12c>)
 8005054:	4313      	orrs	r3, r2
 8005056:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8005058:	4b22      	ldr	r3, [pc, #136]	@ (80050e4 <RCCEx_PLL3_Config+0x12c>)
 800505a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800505c:	f023 0220 	bic.w	r2, r3, #32
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	491f      	ldr	r1, [pc, #124]	@ (80050e4 <RCCEx_PLL3_Config+0x12c>)
 8005066:	4313      	orrs	r3, r2
 8005068:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800506a:	4b1e      	ldr	r3, [pc, #120]	@ (80050e4 <RCCEx_PLL3_Config+0x12c>)
 800506c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005072:	491c      	ldr	r1, [pc, #112]	@ (80050e4 <RCCEx_PLL3_Config+0x12c>)
 8005074:	4313      	orrs	r3, r2
 8005076:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8005078:	4b1a      	ldr	r3, [pc, #104]	@ (80050e4 <RCCEx_PLL3_Config+0x12c>)
 800507a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507c:	4a19      	ldr	r2, [pc, #100]	@ (80050e4 <RCCEx_PLL3_Config+0x12c>)
 800507e:	f023 0310 	bic.w	r3, r3, #16
 8005082:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8005084:	4b17      	ldr	r3, [pc, #92]	@ (80050e4 <RCCEx_PLL3_Config+0x12c>)
 8005086:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005088:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800508c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6a12      	ldr	r2, [r2, #32]
 8005094:	00d2      	lsls	r2, r2, #3
 8005096:	4913      	ldr	r1, [pc, #76]	@ (80050e4 <RCCEx_PLL3_Config+0x12c>)
 8005098:	4313      	orrs	r3, r2
 800509a:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800509c:	4b11      	ldr	r3, [pc, #68]	@ (80050e4 <RCCEx_PLL3_Config+0x12c>)
 800509e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a0:	4a10      	ldr	r2, [pc, #64]	@ (80050e4 <RCCEx_PLL3_Config+0x12c>)
 80050a2:	f043 0310 	orr.w	r3, r3, #16
 80050a6:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80050a8:	4b0e      	ldr	r3, [pc, #56]	@ (80050e4 <RCCEx_PLL3_Config+0x12c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a0d      	ldr	r2, [pc, #52]	@ (80050e4 <RCCEx_PLL3_Config+0x12c>)
 80050ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050b2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80050b4:	f7fc f8c2 	bl	800123c <HAL_GetTick>
 80050b8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050ba:	e008      	b.n	80050ce <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050bc:	f7fc f8be 	bl	800123c <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d901      	bls.n	80050ce <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e006      	b.n	80050dc <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050ce:	4b05      	ldr	r3, [pc, #20]	@ (80050e4 <RCCEx_PLL3_Config+0x12c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0f0      	beq.n	80050bc <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	44020c00 	.word	0x44020c00

080050e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e049      	b.n	800518e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d106      	bne.n	8005114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fb ff5c 	bl	8000fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3304      	adds	r3, #4
 8005124:	4619      	mov	r1, r3
 8005126:	4610      	mov	r0, r2
 8005128:	f000 fc28 	bl	800597c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b082      	sub	sp, #8
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e049      	b.n	800523c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d106      	bne.n	80051c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f841 	bl	8005244 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2202      	movs	r2, #2
 80051c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3304      	adds	r3, #4
 80051d2:	4619      	mov	r1, r3
 80051d4:	4610      	mov	r0, r2
 80051d6:	f000 fbd1 	bl	800597c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d109      	bne.n	800527c <HAL_TIM_PWM_Start+0x24>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b01      	cmp	r3, #1
 8005272:	bf14      	ite	ne
 8005274:	2301      	movne	r3, #1
 8005276:	2300      	moveq	r3, #0
 8005278:	b2db      	uxtb	r3, r3
 800527a:	e03c      	b.n	80052f6 <HAL_TIM_PWM_Start+0x9e>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2b04      	cmp	r3, #4
 8005280:	d109      	bne.n	8005296 <HAL_TIM_PWM_Start+0x3e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b01      	cmp	r3, #1
 800528c:	bf14      	ite	ne
 800528e:	2301      	movne	r3, #1
 8005290:	2300      	moveq	r3, #0
 8005292:	b2db      	uxtb	r3, r3
 8005294:	e02f      	b.n	80052f6 <HAL_TIM_PWM_Start+0x9e>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b08      	cmp	r3, #8
 800529a:	d109      	bne.n	80052b0 <HAL_TIM_PWM_Start+0x58>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	bf14      	ite	ne
 80052a8:	2301      	movne	r3, #1
 80052aa:	2300      	moveq	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	e022      	b.n	80052f6 <HAL_TIM_PWM_Start+0x9e>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	2b0c      	cmp	r3, #12
 80052b4:	d109      	bne.n	80052ca <HAL_TIM_PWM_Start+0x72>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b01      	cmp	r3, #1
 80052c0:	bf14      	ite	ne
 80052c2:	2301      	movne	r3, #1
 80052c4:	2300      	moveq	r3, #0
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	e015      	b.n	80052f6 <HAL_TIM_PWM_Start+0x9e>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b10      	cmp	r3, #16
 80052ce:	d109      	bne.n	80052e4 <HAL_TIM_PWM_Start+0x8c>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b01      	cmp	r3, #1
 80052da:	bf14      	ite	ne
 80052dc:	2301      	movne	r3, #1
 80052de:	2300      	moveq	r3, #0
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	e008      	b.n	80052f6 <HAL_TIM_PWM_Start+0x9e>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	bf14      	ite	ne
 80052f0:	2301      	movne	r3, #1
 80052f2:	2300      	moveq	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e0e2      	b.n	80054c4 <HAL_TIM_PWM_Start+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d104      	bne.n	800530e <HAL_TIM_PWM_Start+0xb6>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800530c:	e023      	b.n	8005356 <HAL_TIM_PWM_Start+0xfe>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b04      	cmp	r3, #4
 8005312:	d104      	bne.n	800531e <HAL_TIM_PWM_Start+0xc6>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800531c:	e01b      	b.n	8005356 <HAL_TIM_PWM_Start+0xfe>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b08      	cmp	r3, #8
 8005322:	d104      	bne.n	800532e <HAL_TIM_PWM_Start+0xd6>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800532c:	e013      	b.n	8005356 <HAL_TIM_PWM_Start+0xfe>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b0c      	cmp	r3, #12
 8005332:	d104      	bne.n	800533e <HAL_TIM_PWM_Start+0xe6>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800533c:	e00b      	b.n	8005356 <HAL_TIM_PWM_Start+0xfe>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b10      	cmp	r3, #16
 8005342:	d104      	bne.n	800534e <HAL_TIM_PWM_Start+0xf6>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800534c:	e003      	b.n	8005356 <HAL_TIM_PWM_Start+0xfe>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2202      	movs	r2, #2
 8005352:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2201      	movs	r2, #1
 800535c:	6839      	ldr	r1, [r7, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f001 f8a8 	bl	80064b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a58      	ldr	r2, [pc, #352]	@ (80054cc <HAL_TIM_PWM_Start+0x274>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d02c      	beq.n	80053c8 <HAL_TIM_PWM_Start+0x170>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a57      	ldr	r2, [pc, #348]	@ (80054d0 <HAL_TIM_PWM_Start+0x278>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d027      	beq.n	80053c8 <HAL_TIM_PWM_Start+0x170>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a55      	ldr	r2, [pc, #340]	@ (80054d4 <HAL_TIM_PWM_Start+0x27c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d022      	beq.n	80053c8 <HAL_TIM_PWM_Start+0x170>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a54      	ldr	r2, [pc, #336]	@ (80054d8 <HAL_TIM_PWM_Start+0x280>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d01d      	beq.n	80053c8 <HAL_TIM_PWM_Start+0x170>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a52      	ldr	r2, [pc, #328]	@ (80054dc <HAL_TIM_PWM_Start+0x284>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d018      	beq.n	80053c8 <HAL_TIM_PWM_Start+0x170>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a51      	ldr	r2, [pc, #324]	@ (80054e0 <HAL_TIM_PWM_Start+0x288>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d013      	beq.n	80053c8 <HAL_TIM_PWM_Start+0x170>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a4f      	ldr	r2, [pc, #316]	@ (80054e4 <HAL_TIM_PWM_Start+0x28c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00e      	beq.n	80053c8 <HAL_TIM_PWM_Start+0x170>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a4e      	ldr	r2, [pc, #312]	@ (80054e8 <HAL_TIM_PWM_Start+0x290>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d009      	beq.n	80053c8 <HAL_TIM_PWM_Start+0x170>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a4c      	ldr	r2, [pc, #304]	@ (80054ec <HAL_TIM_PWM_Start+0x294>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d004      	beq.n	80053c8 <HAL_TIM_PWM_Start+0x170>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a4b      	ldr	r2, [pc, #300]	@ (80054f0 <HAL_TIM_PWM_Start+0x298>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d101      	bne.n	80053cc <HAL_TIM_PWM_Start+0x174>
 80053c8:	2301      	movs	r3, #1
 80053ca:	e000      	b.n	80053ce <HAL_TIM_PWM_Start+0x176>
 80053cc:	2300      	movs	r3, #0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d007      	beq.n	80053e2 <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a39      	ldr	r2, [pc, #228]	@ (80054cc <HAL_TIM_PWM_Start+0x274>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d04a      	beq.n	8005482 <HAL_TIM_PWM_Start+0x22a>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a37      	ldr	r2, [pc, #220]	@ (80054d0 <HAL_TIM_PWM_Start+0x278>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d045      	beq.n	8005482 <HAL_TIM_PWM_Start+0x22a>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053fe:	d040      	beq.n	8005482 <HAL_TIM_PWM_Start+0x22a>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005408:	d03b      	beq.n	8005482 <HAL_TIM_PWM_Start+0x22a>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a39      	ldr	r2, [pc, #228]	@ (80054f4 <HAL_TIM_PWM_Start+0x29c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d036      	beq.n	8005482 <HAL_TIM_PWM_Start+0x22a>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a37      	ldr	r2, [pc, #220]	@ (80054f8 <HAL_TIM_PWM_Start+0x2a0>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d031      	beq.n	8005482 <HAL_TIM_PWM_Start+0x22a>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a36      	ldr	r2, [pc, #216]	@ (80054fc <HAL_TIM_PWM_Start+0x2a4>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d02c      	beq.n	8005482 <HAL_TIM_PWM_Start+0x22a>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a34      	ldr	r2, [pc, #208]	@ (8005500 <HAL_TIM_PWM_Start+0x2a8>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d027      	beq.n	8005482 <HAL_TIM_PWM_Start+0x22a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a33      	ldr	r2, [pc, #204]	@ (8005504 <HAL_TIM_PWM_Start+0x2ac>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d022      	beq.n	8005482 <HAL_TIM_PWM_Start+0x22a>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a31      	ldr	r2, [pc, #196]	@ (8005508 <HAL_TIM_PWM_Start+0x2b0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d01d      	beq.n	8005482 <HAL_TIM_PWM_Start+0x22a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a22      	ldr	r2, [pc, #136]	@ (80054d4 <HAL_TIM_PWM_Start+0x27c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d018      	beq.n	8005482 <HAL_TIM_PWM_Start+0x22a>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a20      	ldr	r2, [pc, #128]	@ (80054d8 <HAL_TIM_PWM_Start+0x280>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d013      	beq.n	8005482 <HAL_TIM_PWM_Start+0x22a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a2b      	ldr	r2, [pc, #172]	@ (800550c <HAL_TIM_PWM_Start+0x2b4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d00e      	beq.n	8005482 <HAL_TIM_PWM_Start+0x22a>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a29      	ldr	r2, [pc, #164]	@ (8005510 <HAL_TIM_PWM_Start+0x2b8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d009      	beq.n	8005482 <HAL_TIM_PWM_Start+0x22a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a1a      	ldr	r2, [pc, #104]	@ (80054dc <HAL_TIM_PWM_Start+0x284>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d004      	beq.n	8005482 <HAL_TIM_PWM_Start+0x22a>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a18      	ldr	r2, [pc, #96]	@ (80054e0 <HAL_TIM_PWM_Start+0x288>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d115      	bne.n	80054ae <HAL_TIM_PWM_Start+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	4b22      	ldr	r3, [pc, #136]	@ (8005514 <HAL_TIM_PWM_Start+0x2bc>)
 800548a:	4013      	ands	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2b06      	cmp	r3, #6
 8005492:	d015      	beq.n	80054c0 <HAL_TIM_PWM_Start+0x268>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800549a:	d011      	beq.n	80054c0 <HAL_TIM_PWM_Start+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0201 	orr.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ac:	e008      	b.n	80054c0 <HAL_TIM_PWM_Start+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f042 0201 	orr.w	r2, r2, #1
 80054bc:	601a      	str	r2, [r3, #0]
 80054be:	e000      	b.n	80054c2 <HAL_TIM_PWM_Start+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40012c00 	.word	0x40012c00
 80054d0:	50012c00 	.word	0x50012c00
 80054d4:	40013400 	.word	0x40013400
 80054d8:	50013400 	.word	0x50013400
 80054dc:	40014000 	.word	0x40014000
 80054e0:	50014000 	.word	0x50014000
 80054e4:	40014400 	.word	0x40014400
 80054e8:	50014400 	.word	0x50014400
 80054ec:	40014800 	.word	0x40014800
 80054f0:	50014800 	.word	0x50014800
 80054f4:	40000400 	.word	0x40000400
 80054f8:	50000400 	.word	0x50000400
 80054fc:	40000800 	.word	0x40000800
 8005500:	50000800 	.word	0x50000800
 8005504:	40000c00 	.word	0x40000c00
 8005508:	50000c00 	.word	0x50000c00
 800550c:	40001800 	.word	0x40001800
 8005510:	50001800 	.word	0x50001800
 8005514:	00010007 	.word	0x00010007

08005518 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005524:	2300      	movs	r3, #0
 8005526:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800552e:	2b01      	cmp	r3, #1
 8005530:	d101      	bne.n	8005536 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005532:	2302      	movs	r3, #2
 8005534:	e0ff      	b.n	8005736 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b14      	cmp	r3, #20
 8005542:	f200 80f0 	bhi.w	8005726 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005546:	a201      	add	r2, pc, #4	@ (adr r2, 800554c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554c:	080055a1 	.word	0x080055a1
 8005550:	08005727 	.word	0x08005727
 8005554:	08005727 	.word	0x08005727
 8005558:	08005727 	.word	0x08005727
 800555c:	080055e1 	.word	0x080055e1
 8005560:	08005727 	.word	0x08005727
 8005564:	08005727 	.word	0x08005727
 8005568:	08005727 	.word	0x08005727
 800556c:	08005623 	.word	0x08005623
 8005570:	08005727 	.word	0x08005727
 8005574:	08005727 	.word	0x08005727
 8005578:	08005727 	.word	0x08005727
 800557c:	08005663 	.word	0x08005663
 8005580:	08005727 	.word	0x08005727
 8005584:	08005727 	.word	0x08005727
 8005588:	08005727 	.word	0x08005727
 800558c:	080056a5 	.word	0x080056a5
 8005590:	08005727 	.word	0x08005727
 8005594:	08005727 	.word	0x08005727
 8005598:	08005727 	.word	0x08005727
 800559c:	080056e5 	.word	0x080056e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68b9      	ldr	r1, [r7, #8]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 fb12 	bl	8005bd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699a      	ldr	r2, [r3, #24]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 0208 	orr.w	r2, r2, #8
 80055ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699a      	ldr	r2, [r3, #24]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 0204 	bic.w	r2, r2, #4
 80055ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6999      	ldr	r1, [r3, #24]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	691a      	ldr	r2, [r3, #16]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	619a      	str	r2, [r3, #24]
      break;
 80055de:	e0a5      	b.n	800572c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68b9      	ldr	r1, [r7, #8]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fbb4 	bl	8005d54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	699a      	ldr	r2, [r3, #24]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800560a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6999      	ldr	r1, [r3, #24]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	021a      	lsls	r2, r3, #8
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	619a      	str	r2, [r3, #24]
      break;
 8005620:	e084      	b.n	800572c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68b9      	ldr	r1, [r7, #8]
 8005628:	4618      	mov	r0, r3
 800562a:	f000 fc43 	bl	8005eb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69da      	ldr	r2, [r3, #28]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f042 0208 	orr.w	r2, r2, #8
 800563c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69da      	ldr	r2, [r3, #28]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0204 	bic.w	r2, r2, #4
 800564c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69d9      	ldr	r1, [r3, #28]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	691a      	ldr	r2, [r3, #16]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	61da      	str	r2, [r3, #28]
      break;
 8005660:	e064      	b.n	800572c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68b9      	ldr	r1, [r7, #8]
 8005668:	4618      	mov	r0, r3
 800566a:	f000 fcd1 	bl	8006010 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69da      	ldr	r2, [r3, #28]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800567c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	69da      	ldr	r2, [r3, #28]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800568c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69d9      	ldr	r1, [r3, #28]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	021a      	lsls	r2, r3, #8
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	61da      	str	r2, [r3, #28]
      break;
 80056a2:	e043      	b.n	800572c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68b9      	ldr	r1, [r7, #8]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 fd60 	bl	8006170 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0208 	orr.w	r2, r2, #8
 80056be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0204 	bic.w	r2, r2, #4
 80056ce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	691a      	ldr	r2, [r3, #16]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80056e2:	e023      	b.n	800572c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68b9      	ldr	r1, [r7, #8]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fdc2 	bl	8006274 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800570e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	021a      	lsls	r2, r3, #8
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005724:	e002      	b.n	800572c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	75fb      	strb	r3, [r7, #23]
      break;
 800572a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005734:	7dfb      	ldrb	r3, [r7, #23]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop

08005740 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005754:	2b01      	cmp	r3, #1
 8005756:	d101      	bne.n	800575c <HAL_TIM_ConfigClockSource+0x1c>
 8005758:	2302      	movs	r3, #2
 800575a:	e0fe      	b.n	800595a <HAL_TIM_ConfigClockSource+0x21a>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800577a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800577e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005786:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005798:	f000 80c9 	beq.w	800592e <HAL_TIM_ConfigClockSource+0x1ee>
 800579c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057a0:	f200 80ce 	bhi.w	8005940 <HAL_TIM_ConfigClockSource+0x200>
 80057a4:	4a6f      	ldr	r2, [pc, #444]	@ (8005964 <HAL_TIM_ConfigClockSource+0x224>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	f000 80c1 	beq.w	800592e <HAL_TIM_ConfigClockSource+0x1ee>
 80057ac:	4a6d      	ldr	r2, [pc, #436]	@ (8005964 <HAL_TIM_ConfigClockSource+0x224>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	f200 80c6 	bhi.w	8005940 <HAL_TIM_ConfigClockSource+0x200>
 80057b4:	4a6c      	ldr	r2, [pc, #432]	@ (8005968 <HAL_TIM_ConfigClockSource+0x228>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	f000 80b9 	beq.w	800592e <HAL_TIM_ConfigClockSource+0x1ee>
 80057bc:	4a6a      	ldr	r2, [pc, #424]	@ (8005968 <HAL_TIM_ConfigClockSource+0x228>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	f200 80be 	bhi.w	8005940 <HAL_TIM_ConfigClockSource+0x200>
 80057c4:	4a69      	ldr	r2, [pc, #420]	@ (800596c <HAL_TIM_ConfigClockSource+0x22c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	f000 80b1 	beq.w	800592e <HAL_TIM_ConfigClockSource+0x1ee>
 80057cc:	4a67      	ldr	r2, [pc, #412]	@ (800596c <HAL_TIM_ConfigClockSource+0x22c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	f200 80b6 	bhi.w	8005940 <HAL_TIM_ConfigClockSource+0x200>
 80057d4:	4a66      	ldr	r2, [pc, #408]	@ (8005970 <HAL_TIM_ConfigClockSource+0x230>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	f000 80a9 	beq.w	800592e <HAL_TIM_ConfigClockSource+0x1ee>
 80057dc:	4a64      	ldr	r2, [pc, #400]	@ (8005970 <HAL_TIM_ConfigClockSource+0x230>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	f200 80ae 	bhi.w	8005940 <HAL_TIM_ConfigClockSource+0x200>
 80057e4:	4a63      	ldr	r2, [pc, #396]	@ (8005974 <HAL_TIM_ConfigClockSource+0x234>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	f000 80a1 	beq.w	800592e <HAL_TIM_ConfigClockSource+0x1ee>
 80057ec:	4a61      	ldr	r2, [pc, #388]	@ (8005974 <HAL_TIM_ConfigClockSource+0x234>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	f200 80a6 	bhi.w	8005940 <HAL_TIM_ConfigClockSource+0x200>
 80057f4:	4a60      	ldr	r2, [pc, #384]	@ (8005978 <HAL_TIM_ConfigClockSource+0x238>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	f000 8099 	beq.w	800592e <HAL_TIM_ConfigClockSource+0x1ee>
 80057fc:	4a5e      	ldr	r2, [pc, #376]	@ (8005978 <HAL_TIM_ConfigClockSource+0x238>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	f200 809e 	bhi.w	8005940 <HAL_TIM_ConfigClockSource+0x200>
 8005804:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005808:	f000 8091 	beq.w	800592e <HAL_TIM_ConfigClockSource+0x1ee>
 800580c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005810:	f200 8096 	bhi.w	8005940 <HAL_TIM_ConfigClockSource+0x200>
 8005814:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005818:	f000 8089 	beq.w	800592e <HAL_TIM_ConfigClockSource+0x1ee>
 800581c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005820:	f200 808e 	bhi.w	8005940 <HAL_TIM_ConfigClockSource+0x200>
 8005824:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005828:	d03e      	beq.n	80058a8 <HAL_TIM_ConfigClockSource+0x168>
 800582a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800582e:	f200 8087 	bhi.w	8005940 <HAL_TIM_ConfigClockSource+0x200>
 8005832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005836:	f000 8086 	beq.w	8005946 <HAL_TIM_ConfigClockSource+0x206>
 800583a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800583e:	d87f      	bhi.n	8005940 <HAL_TIM_ConfigClockSource+0x200>
 8005840:	2b70      	cmp	r3, #112	@ 0x70
 8005842:	d01a      	beq.n	800587a <HAL_TIM_ConfigClockSource+0x13a>
 8005844:	2b70      	cmp	r3, #112	@ 0x70
 8005846:	d87b      	bhi.n	8005940 <HAL_TIM_ConfigClockSource+0x200>
 8005848:	2b60      	cmp	r3, #96	@ 0x60
 800584a:	d050      	beq.n	80058ee <HAL_TIM_ConfigClockSource+0x1ae>
 800584c:	2b60      	cmp	r3, #96	@ 0x60
 800584e:	d877      	bhi.n	8005940 <HAL_TIM_ConfigClockSource+0x200>
 8005850:	2b50      	cmp	r3, #80	@ 0x50
 8005852:	d03c      	beq.n	80058ce <HAL_TIM_ConfigClockSource+0x18e>
 8005854:	2b50      	cmp	r3, #80	@ 0x50
 8005856:	d873      	bhi.n	8005940 <HAL_TIM_ConfigClockSource+0x200>
 8005858:	2b40      	cmp	r3, #64	@ 0x40
 800585a:	d058      	beq.n	800590e <HAL_TIM_ConfigClockSource+0x1ce>
 800585c:	2b40      	cmp	r3, #64	@ 0x40
 800585e:	d86f      	bhi.n	8005940 <HAL_TIM_ConfigClockSource+0x200>
 8005860:	2b30      	cmp	r3, #48	@ 0x30
 8005862:	d064      	beq.n	800592e <HAL_TIM_ConfigClockSource+0x1ee>
 8005864:	2b30      	cmp	r3, #48	@ 0x30
 8005866:	d86b      	bhi.n	8005940 <HAL_TIM_ConfigClockSource+0x200>
 8005868:	2b20      	cmp	r3, #32
 800586a:	d060      	beq.n	800592e <HAL_TIM_ConfigClockSource+0x1ee>
 800586c:	2b20      	cmp	r3, #32
 800586e:	d867      	bhi.n	8005940 <HAL_TIM_ConfigClockSource+0x200>
 8005870:	2b00      	cmp	r3, #0
 8005872:	d05c      	beq.n	800592e <HAL_TIM_ConfigClockSource+0x1ee>
 8005874:	2b10      	cmp	r3, #16
 8005876:	d05a      	beq.n	800592e <HAL_TIM_ConfigClockSource+0x1ee>
 8005878:	e062      	b.n	8005940 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800588a:	f000 fdf3 	bl	8006474 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800589c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	609a      	str	r2, [r3, #8]
      break;
 80058a6:	e04f      	b.n	8005948 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058b8:	f000 fddc 	bl	8006474 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689a      	ldr	r2, [r3, #8]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058ca:	609a      	str	r2, [r3, #8]
      break;
 80058cc:	e03c      	b.n	8005948 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058da:	461a      	mov	r2, r3
 80058dc:	f000 fd4e 	bl	800637c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2150      	movs	r1, #80	@ 0x50
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fda7 	bl	800643a <TIM_ITRx_SetConfig>
      break;
 80058ec:	e02c      	b.n	8005948 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058fa:	461a      	mov	r2, r3
 80058fc:	f000 fd6d 	bl	80063da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2160      	movs	r1, #96	@ 0x60
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fd97 	bl	800643a <TIM_ITRx_SetConfig>
      break;
 800590c:	e01c      	b.n	8005948 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800591a:	461a      	mov	r2, r3
 800591c:	f000 fd2e 	bl	800637c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2140      	movs	r1, #64	@ 0x40
 8005926:	4618      	mov	r0, r3
 8005928:	f000 fd87 	bl	800643a <TIM_ITRx_SetConfig>
      break;
 800592c:	e00c      	b.n	8005948 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4619      	mov	r1, r3
 8005938:	4610      	mov	r0, r2
 800593a:	f000 fd7e 	bl	800643a <TIM_ITRx_SetConfig>
      break;
 800593e:	e003      	b.n	8005948 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	73fb      	strb	r3, [r7, #15]
      break;
 8005944:	e000      	b.n	8005948 <HAL_TIM_ConfigClockSource+0x208>
      break;
 8005946:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005958:	7bfb      	ldrb	r3, [r7, #15]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	00100070 	.word	0x00100070
 8005968:	00100060 	.word	0x00100060
 800596c:	00100050 	.word	0x00100050
 8005970:	00100040 	.word	0x00100040
 8005974:	00100030 	.word	0x00100030
 8005978:	00100020 	.word	0x00100020

0800597c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a7a      	ldr	r2, [pc, #488]	@ (8005b78 <TIM_Base_SetConfig+0x1fc>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d02b      	beq.n	80059ec <TIM_Base_SetConfig+0x70>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a79      	ldr	r2, [pc, #484]	@ (8005b7c <TIM_Base_SetConfig+0x200>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d027      	beq.n	80059ec <TIM_Base_SetConfig+0x70>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059a2:	d023      	beq.n	80059ec <TIM_Base_SetConfig+0x70>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059aa:	d01f      	beq.n	80059ec <TIM_Base_SetConfig+0x70>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a74      	ldr	r2, [pc, #464]	@ (8005b80 <TIM_Base_SetConfig+0x204>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d01b      	beq.n	80059ec <TIM_Base_SetConfig+0x70>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a73      	ldr	r2, [pc, #460]	@ (8005b84 <TIM_Base_SetConfig+0x208>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d017      	beq.n	80059ec <TIM_Base_SetConfig+0x70>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a72      	ldr	r2, [pc, #456]	@ (8005b88 <TIM_Base_SetConfig+0x20c>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d013      	beq.n	80059ec <TIM_Base_SetConfig+0x70>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a71      	ldr	r2, [pc, #452]	@ (8005b8c <TIM_Base_SetConfig+0x210>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d00f      	beq.n	80059ec <TIM_Base_SetConfig+0x70>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a70      	ldr	r2, [pc, #448]	@ (8005b90 <TIM_Base_SetConfig+0x214>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00b      	beq.n	80059ec <TIM_Base_SetConfig+0x70>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a6f      	ldr	r2, [pc, #444]	@ (8005b94 <TIM_Base_SetConfig+0x218>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d007      	beq.n	80059ec <TIM_Base_SetConfig+0x70>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a6e      	ldr	r2, [pc, #440]	@ (8005b98 <TIM_Base_SetConfig+0x21c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d003      	beq.n	80059ec <TIM_Base_SetConfig+0x70>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a6d      	ldr	r2, [pc, #436]	@ (8005b9c <TIM_Base_SetConfig+0x220>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d108      	bne.n	80059fe <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a5d      	ldr	r2, [pc, #372]	@ (8005b78 <TIM_Base_SetConfig+0x1fc>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d05b      	beq.n	8005abe <TIM_Base_SetConfig+0x142>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a5c      	ldr	r2, [pc, #368]	@ (8005b7c <TIM_Base_SetConfig+0x200>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d057      	beq.n	8005abe <TIM_Base_SetConfig+0x142>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a14:	d053      	beq.n	8005abe <TIM_Base_SetConfig+0x142>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a1c:	d04f      	beq.n	8005abe <TIM_Base_SetConfig+0x142>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a57      	ldr	r2, [pc, #348]	@ (8005b80 <TIM_Base_SetConfig+0x204>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d04b      	beq.n	8005abe <TIM_Base_SetConfig+0x142>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a56      	ldr	r2, [pc, #344]	@ (8005b84 <TIM_Base_SetConfig+0x208>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d047      	beq.n	8005abe <TIM_Base_SetConfig+0x142>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a55      	ldr	r2, [pc, #340]	@ (8005b88 <TIM_Base_SetConfig+0x20c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d043      	beq.n	8005abe <TIM_Base_SetConfig+0x142>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a54      	ldr	r2, [pc, #336]	@ (8005b8c <TIM_Base_SetConfig+0x210>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d03f      	beq.n	8005abe <TIM_Base_SetConfig+0x142>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a53      	ldr	r2, [pc, #332]	@ (8005b90 <TIM_Base_SetConfig+0x214>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d03b      	beq.n	8005abe <TIM_Base_SetConfig+0x142>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a52      	ldr	r2, [pc, #328]	@ (8005b94 <TIM_Base_SetConfig+0x218>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d037      	beq.n	8005abe <TIM_Base_SetConfig+0x142>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a51      	ldr	r2, [pc, #324]	@ (8005b98 <TIM_Base_SetConfig+0x21c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d033      	beq.n	8005abe <TIM_Base_SetConfig+0x142>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a50      	ldr	r2, [pc, #320]	@ (8005b9c <TIM_Base_SetConfig+0x220>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d02f      	beq.n	8005abe <TIM_Base_SetConfig+0x142>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a4f      	ldr	r2, [pc, #316]	@ (8005ba0 <TIM_Base_SetConfig+0x224>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d02b      	beq.n	8005abe <TIM_Base_SetConfig+0x142>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a4e      	ldr	r2, [pc, #312]	@ (8005ba4 <TIM_Base_SetConfig+0x228>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d027      	beq.n	8005abe <TIM_Base_SetConfig+0x142>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a4d      	ldr	r2, [pc, #308]	@ (8005ba8 <TIM_Base_SetConfig+0x22c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d023      	beq.n	8005abe <TIM_Base_SetConfig+0x142>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a4c      	ldr	r2, [pc, #304]	@ (8005bac <TIM_Base_SetConfig+0x230>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d01f      	beq.n	8005abe <TIM_Base_SetConfig+0x142>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a4b      	ldr	r2, [pc, #300]	@ (8005bb0 <TIM_Base_SetConfig+0x234>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d01b      	beq.n	8005abe <TIM_Base_SetConfig+0x142>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a4a      	ldr	r2, [pc, #296]	@ (8005bb4 <TIM_Base_SetConfig+0x238>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d017      	beq.n	8005abe <TIM_Base_SetConfig+0x142>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a49      	ldr	r2, [pc, #292]	@ (8005bb8 <TIM_Base_SetConfig+0x23c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d013      	beq.n	8005abe <TIM_Base_SetConfig+0x142>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a48      	ldr	r2, [pc, #288]	@ (8005bbc <TIM_Base_SetConfig+0x240>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00f      	beq.n	8005abe <TIM_Base_SetConfig+0x142>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a47      	ldr	r2, [pc, #284]	@ (8005bc0 <TIM_Base_SetConfig+0x244>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d00b      	beq.n	8005abe <TIM_Base_SetConfig+0x142>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a46      	ldr	r2, [pc, #280]	@ (8005bc4 <TIM_Base_SetConfig+0x248>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d007      	beq.n	8005abe <TIM_Base_SetConfig+0x142>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a45      	ldr	r2, [pc, #276]	@ (8005bc8 <TIM_Base_SetConfig+0x24c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d003      	beq.n	8005abe <TIM_Base_SetConfig+0x142>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a44      	ldr	r2, [pc, #272]	@ (8005bcc <TIM_Base_SetConfig+0x250>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d108      	bne.n	8005ad0 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a20      	ldr	r2, [pc, #128]	@ (8005b78 <TIM_Base_SetConfig+0x1fc>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d023      	beq.n	8005b44 <TIM_Base_SetConfig+0x1c8>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a1f      	ldr	r2, [pc, #124]	@ (8005b7c <TIM_Base_SetConfig+0x200>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d01f      	beq.n	8005b44 <TIM_Base_SetConfig+0x1c8>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a24      	ldr	r2, [pc, #144]	@ (8005b98 <TIM_Base_SetConfig+0x21c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d01b      	beq.n	8005b44 <TIM_Base_SetConfig+0x1c8>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a23      	ldr	r2, [pc, #140]	@ (8005b9c <TIM_Base_SetConfig+0x220>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d017      	beq.n	8005b44 <TIM_Base_SetConfig+0x1c8>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a28      	ldr	r2, [pc, #160]	@ (8005bb8 <TIM_Base_SetConfig+0x23c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d013      	beq.n	8005b44 <TIM_Base_SetConfig+0x1c8>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a27      	ldr	r2, [pc, #156]	@ (8005bbc <TIM_Base_SetConfig+0x240>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00f      	beq.n	8005b44 <TIM_Base_SetConfig+0x1c8>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a26      	ldr	r2, [pc, #152]	@ (8005bc0 <TIM_Base_SetConfig+0x244>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d00b      	beq.n	8005b44 <TIM_Base_SetConfig+0x1c8>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a25      	ldr	r2, [pc, #148]	@ (8005bc4 <TIM_Base_SetConfig+0x248>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d007      	beq.n	8005b44 <TIM_Base_SetConfig+0x1c8>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a24      	ldr	r2, [pc, #144]	@ (8005bc8 <TIM_Base_SetConfig+0x24c>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d003      	beq.n	8005b44 <TIM_Base_SetConfig+0x1c8>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a23      	ldr	r2, [pc, #140]	@ (8005bcc <TIM_Base_SetConfig+0x250>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d103      	bne.n	8005b4c <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	691a      	ldr	r2, [r3, #16]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d105      	bne.n	8005b6a <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f023 0201 	bic.w	r2, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	611a      	str	r2, [r3, #16]
  }
}
 8005b6a:	bf00      	nop
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	40012c00 	.word	0x40012c00
 8005b7c:	50012c00 	.word	0x50012c00
 8005b80:	40000400 	.word	0x40000400
 8005b84:	50000400 	.word	0x50000400
 8005b88:	40000800 	.word	0x40000800
 8005b8c:	50000800 	.word	0x50000800
 8005b90:	40000c00 	.word	0x40000c00
 8005b94:	50000c00 	.word	0x50000c00
 8005b98:	40013400 	.word	0x40013400
 8005b9c:	50013400 	.word	0x50013400
 8005ba0:	40001800 	.word	0x40001800
 8005ba4:	50001800 	.word	0x50001800
 8005ba8:	40001c00 	.word	0x40001c00
 8005bac:	50001c00 	.word	0x50001c00
 8005bb0:	40002000 	.word	0x40002000
 8005bb4:	50002000 	.word	0x50002000
 8005bb8:	40014000 	.word	0x40014000
 8005bbc:	50014000 	.word	0x50014000
 8005bc0:	40014400 	.word	0x40014400
 8005bc4:	50014400 	.word	0x50014400
 8005bc8:	40014800 	.word	0x40014800
 8005bcc:	50014800 	.word	0x50014800

08005bd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	f023 0201 	bic.w	r2, r3, #1
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 0303 	bic.w	r3, r3, #3
 8005c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f023 0302 	bic.w	r3, r3, #2
 8005c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a40      	ldr	r2, [pc, #256]	@ (8005d2c <TIM_OC1_SetConfig+0x15c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d023      	beq.n	8005c78 <TIM_OC1_SetConfig+0xa8>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a3f      	ldr	r2, [pc, #252]	@ (8005d30 <TIM_OC1_SetConfig+0x160>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d01f      	beq.n	8005c78 <TIM_OC1_SetConfig+0xa8>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a3e      	ldr	r2, [pc, #248]	@ (8005d34 <TIM_OC1_SetConfig+0x164>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d01b      	beq.n	8005c78 <TIM_OC1_SetConfig+0xa8>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a3d      	ldr	r2, [pc, #244]	@ (8005d38 <TIM_OC1_SetConfig+0x168>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d017      	beq.n	8005c78 <TIM_OC1_SetConfig+0xa8>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a3c      	ldr	r2, [pc, #240]	@ (8005d3c <TIM_OC1_SetConfig+0x16c>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d013      	beq.n	8005c78 <TIM_OC1_SetConfig+0xa8>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a3b      	ldr	r2, [pc, #236]	@ (8005d40 <TIM_OC1_SetConfig+0x170>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d00f      	beq.n	8005c78 <TIM_OC1_SetConfig+0xa8>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a3a      	ldr	r2, [pc, #232]	@ (8005d44 <TIM_OC1_SetConfig+0x174>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d00b      	beq.n	8005c78 <TIM_OC1_SetConfig+0xa8>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a39      	ldr	r2, [pc, #228]	@ (8005d48 <TIM_OC1_SetConfig+0x178>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d007      	beq.n	8005c78 <TIM_OC1_SetConfig+0xa8>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a38      	ldr	r2, [pc, #224]	@ (8005d4c <TIM_OC1_SetConfig+0x17c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d003      	beq.n	8005c78 <TIM_OC1_SetConfig+0xa8>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a37      	ldr	r2, [pc, #220]	@ (8005d50 <TIM_OC1_SetConfig+0x180>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d10c      	bne.n	8005c92 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f023 0308 	bic.w	r3, r3, #8
 8005c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f023 0304 	bic.w	r3, r3, #4
 8005c90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a25      	ldr	r2, [pc, #148]	@ (8005d2c <TIM_OC1_SetConfig+0x15c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d023      	beq.n	8005ce2 <TIM_OC1_SetConfig+0x112>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a24      	ldr	r2, [pc, #144]	@ (8005d30 <TIM_OC1_SetConfig+0x160>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d01f      	beq.n	8005ce2 <TIM_OC1_SetConfig+0x112>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a23      	ldr	r2, [pc, #140]	@ (8005d34 <TIM_OC1_SetConfig+0x164>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d01b      	beq.n	8005ce2 <TIM_OC1_SetConfig+0x112>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a22      	ldr	r2, [pc, #136]	@ (8005d38 <TIM_OC1_SetConfig+0x168>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d017      	beq.n	8005ce2 <TIM_OC1_SetConfig+0x112>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a21      	ldr	r2, [pc, #132]	@ (8005d3c <TIM_OC1_SetConfig+0x16c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d013      	beq.n	8005ce2 <TIM_OC1_SetConfig+0x112>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a20      	ldr	r2, [pc, #128]	@ (8005d40 <TIM_OC1_SetConfig+0x170>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00f      	beq.n	8005ce2 <TIM_OC1_SetConfig+0x112>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a1f      	ldr	r2, [pc, #124]	@ (8005d44 <TIM_OC1_SetConfig+0x174>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d00b      	beq.n	8005ce2 <TIM_OC1_SetConfig+0x112>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a1e      	ldr	r2, [pc, #120]	@ (8005d48 <TIM_OC1_SetConfig+0x178>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d007      	beq.n	8005ce2 <TIM_OC1_SetConfig+0x112>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8005d4c <TIM_OC1_SetConfig+0x17c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d003      	beq.n	8005ce2 <TIM_OC1_SetConfig+0x112>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a1c      	ldr	r2, [pc, #112]	@ (8005d50 <TIM_OC1_SetConfig+0x180>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d111      	bne.n	8005d06 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ce8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	621a      	str	r2, [r3, #32]
}
 8005d20:	bf00      	nop
 8005d22:	371c      	adds	r7, #28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	40012c00 	.word	0x40012c00
 8005d30:	50012c00 	.word	0x50012c00
 8005d34:	40013400 	.word	0x40013400
 8005d38:	50013400 	.word	0x50013400
 8005d3c:	40014000 	.word	0x40014000
 8005d40:	50014000 	.word	0x50014000
 8005d44:	40014400 	.word	0x40014400
 8005d48:	50014400 	.word	0x50014400
 8005d4c:	40014800 	.word	0x40014800
 8005d50:	50014800 	.word	0x50014800

08005d54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	f023 0210 	bic.w	r2, r3, #16
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	021b      	lsls	r3, r3, #8
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f023 0320 	bic.w	r3, r3, #32
 8005da2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a36      	ldr	r2, [pc, #216]	@ (8005e8c <TIM_OC2_SetConfig+0x138>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d00b      	beq.n	8005dd0 <TIM_OC2_SetConfig+0x7c>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a35      	ldr	r2, [pc, #212]	@ (8005e90 <TIM_OC2_SetConfig+0x13c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d007      	beq.n	8005dd0 <TIM_OC2_SetConfig+0x7c>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a34      	ldr	r2, [pc, #208]	@ (8005e94 <TIM_OC2_SetConfig+0x140>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d003      	beq.n	8005dd0 <TIM_OC2_SetConfig+0x7c>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a33      	ldr	r2, [pc, #204]	@ (8005e98 <TIM_OC2_SetConfig+0x144>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d10d      	bne.n	8005dec <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	011b      	lsls	r3, r3, #4
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a27      	ldr	r2, [pc, #156]	@ (8005e8c <TIM_OC2_SetConfig+0x138>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d023      	beq.n	8005e3c <TIM_OC2_SetConfig+0xe8>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a26      	ldr	r2, [pc, #152]	@ (8005e90 <TIM_OC2_SetConfig+0x13c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d01f      	beq.n	8005e3c <TIM_OC2_SetConfig+0xe8>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a25      	ldr	r2, [pc, #148]	@ (8005e94 <TIM_OC2_SetConfig+0x140>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d01b      	beq.n	8005e3c <TIM_OC2_SetConfig+0xe8>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a24      	ldr	r2, [pc, #144]	@ (8005e98 <TIM_OC2_SetConfig+0x144>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d017      	beq.n	8005e3c <TIM_OC2_SetConfig+0xe8>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a23      	ldr	r2, [pc, #140]	@ (8005e9c <TIM_OC2_SetConfig+0x148>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d013      	beq.n	8005e3c <TIM_OC2_SetConfig+0xe8>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a22      	ldr	r2, [pc, #136]	@ (8005ea0 <TIM_OC2_SetConfig+0x14c>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d00f      	beq.n	8005e3c <TIM_OC2_SetConfig+0xe8>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a21      	ldr	r2, [pc, #132]	@ (8005ea4 <TIM_OC2_SetConfig+0x150>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d00b      	beq.n	8005e3c <TIM_OC2_SetConfig+0xe8>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a20      	ldr	r2, [pc, #128]	@ (8005ea8 <TIM_OC2_SetConfig+0x154>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d007      	beq.n	8005e3c <TIM_OC2_SetConfig+0xe8>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8005eac <TIM_OC2_SetConfig+0x158>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d003      	beq.n	8005e3c <TIM_OC2_SetConfig+0xe8>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a1e      	ldr	r2, [pc, #120]	@ (8005eb0 <TIM_OC2_SetConfig+0x15c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d113      	bne.n	8005e64 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	621a      	str	r2, [r3, #32]
}
 8005e7e:	bf00      	nop
 8005e80:	371c      	adds	r7, #28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	40012c00 	.word	0x40012c00
 8005e90:	50012c00 	.word	0x50012c00
 8005e94:	40013400 	.word	0x40013400
 8005e98:	50013400 	.word	0x50013400
 8005e9c:	40014000 	.word	0x40014000
 8005ea0:	50014000 	.word	0x50014000
 8005ea4:	40014400 	.word	0x40014400
 8005ea8:	50014400 	.word	0x50014400
 8005eac:	40014800 	.word	0x40014800
 8005eb0:	50014800 	.word	0x50014800

08005eb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f023 0303 	bic.w	r3, r3, #3
 8005eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	021b      	lsls	r3, r3, #8
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a35      	ldr	r2, [pc, #212]	@ (8005fe8 <TIM_OC3_SetConfig+0x134>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d00b      	beq.n	8005f2e <TIM_OC3_SetConfig+0x7a>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a34      	ldr	r2, [pc, #208]	@ (8005fec <TIM_OC3_SetConfig+0x138>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d007      	beq.n	8005f2e <TIM_OC3_SetConfig+0x7a>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a33      	ldr	r2, [pc, #204]	@ (8005ff0 <TIM_OC3_SetConfig+0x13c>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d003      	beq.n	8005f2e <TIM_OC3_SetConfig+0x7a>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a32      	ldr	r2, [pc, #200]	@ (8005ff4 <TIM_OC3_SetConfig+0x140>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d10d      	bne.n	8005f4a <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	021b      	lsls	r3, r3, #8
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a26      	ldr	r2, [pc, #152]	@ (8005fe8 <TIM_OC3_SetConfig+0x134>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d023      	beq.n	8005f9a <TIM_OC3_SetConfig+0xe6>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a25      	ldr	r2, [pc, #148]	@ (8005fec <TIM_OC3_SetConfig+0x138>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d01f      	beq.n	8005f9a <TIM_OC3_SetConfig+0xe6>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a24      	ldr	r2, [pc, #144]	@ (8005ff0 <TIM_OC3_SetConfig+0x13c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d01b      	beq.n	8005f9a <TIM_OC3_SetConfig+0xe6>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a23      	ldr	r2, [pc, #140]	@ (8005ff4 <TIM_OC3_SetConfig+0x140>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d017      	beq.n	8005f9a <TIM_OC3_SetConfig+0xe6>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a22      	ldr	r2, [pc, #136]	@ (8005ff8 <TIM_OC3_SetConfig+0x144>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d013      	beq.n	8005f9a <TIM_OC3_SetConfig+0xe6>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a21      	ldr	r2, [pc, #132]	@ (8005ffc <TIM_OC3_SetConfig+0x148>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d00f      	beq.n	8005f9a <TIM_OC3_SetConfig+0xe6>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a20      	ldr	r2, [pc, #128]	@ (8006000 <TIM_OC3_SetConfig+0x14c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d00b      	beq.n	8005f9a <TIM_OC3_SetConfig+0xe6>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a1f      	ldr	r2, [pc, #124]	@ (8006004 <TIM_OC3_SetConfig+0x150>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d007      	beq.n	8005f9a <TIM_OC3_SetConfig+0xe6>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a1e      	ldr	r2, [pc, #120]	@ (8006008 <TIM_OC3_SetConfig+0x154>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d003      	beq.n	8005f9a <TIM_OC3_SetConfig+0xe6>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a1d      	ldr	r2, [pc, #116]	@ (800600c <TIM_OC3_SetConfig+0x158>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d113      	bne.n	8005fc2 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	011b      	lsls	r3, r3, #4
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	621a      	str	r2, [r3, #32]
}
 8005fdc:	bf00      	nop
 8005fde:	371c      	adds	r7, #28
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	40012c00 	.word	0x40012c00
 8005fec:	50012c00 	.word	0x50012c00
 8005ff0:	40013400 	.word	0x40013400
 8005ff4:	50013400 	.word	0x50013400
 8005ff8:	40014000 	.word	0x40014000
 8005ffc:	50014000 	.word	0x50014000
 8006000:	40014400 	.word	0x40014400
 8006004:	50014400 	.word	0x50014400
 8006008:	40014800 	.word	0x40014800
 800600c:	50014800 	.word	0x50014800

08006010 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800603e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800604a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	021b      	lsls	r3, r3, #8
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	4313      	orrs	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800605e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	031b      	lsls	r3, r3, #12
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4313      	orrs	r3, r2
 800606a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a36      	ldr	r2, [pc, #216]	@ (8006148 <TIM_OC4_SetConfig+0x138>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00b      	beq.n	800608c <TIM_OC4_SetConfig+0x7c>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a35      	ldr	r2, [pc, #212]	@ (800614c <TIM_OC4_SetConfig+0x13c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d007      	beq.n	800608c <TIM_OC4_SetConfig+0x7c>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a34      	ldr	r2, [pc, #208]	@ (8006150 <TIM_OC4_SetConfig+0x140>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d003      	beq.n	800608c <TIM_OC4_SetConfig+0x7c>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a33      	ldr	r2, [pc, #204]	@ (8006154 <TIM_OC4_SetConfig+0x144>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d10d      	bne.n	80060a8 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	031b      	lsls	r3, r3, #12
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	4313      	orrs	r3, r2
 800609e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a27      	ldr	r2, [pc, #156]	@ (8006148 <TIM_OC4_SetConfig+0x138>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d023      	beq.n	80060f8 <TIM_OC4_SetConfig+0xe8>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a26      	ldr	r2, [pc, #152]	@ (800614c <TIM_OC4_SetConfig+0x13c>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d01f      	beq.n	80060f8 <TIM_OC4_SetConfig+0xe8>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a25      	ldr	r2, [pc, #148]	@ (8006150 <TIM_OC4_SetConfig+0x140>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d01b      	beq.n	80060f8 <TIM_OC4_SetConfig+0xe8>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a24      	ldr	r2, [pc, #144]	@ (8006154 <TIM_OC4_SetConfig+0x144>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d017      	beq.n	80060f8 <TIM_OC4_SetConfig+0xe8>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a23      	ldr	r2, [pc, #140]	@ (8006158 <TIM_OC4_SetConfig+0x148>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d013      	beq.n	80060f8 <TIM_OC4_SetConfig+0xe8>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a22      	ldr	r2, [pc, #136]	@ (800615c <TIM_OC4_SetConfig+0x14c>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d00f      	beq.n	80060f8 <TIM_OC4_SetConfig+0xe8>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a21      	ldr	r2, [pc, #132]	@ (8006160 <TIM_OC4_SetConfig+0x150>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d00b      	beq.n	80060f8 <TIM_OC4_SetConfig+0xe8>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a20      	ldr	r2, [pc, #128]	@ (8006164 <TIM_OC4_SetConfig+0x154>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d007      	beq.n	80060f8 <TIM_OC4_SetConfig+0xe8>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a1f      	ldr	r2, [pc, #124]	@ (8006168 <TIM_OC4_SetConfig+0x158>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d003      	beq.n	80060f8 <TIM_OC4_SetConfig+0xe8>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a1e      	ldr	r2, [pc, #120]	@ (800616c <TIM_OC4_SetConfig+0x15c>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d113      	bne.n	8006120 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060fe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006106:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	019b      	lsls	r3, r3, #6
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	4313      	orrs	r3, r2
 8006112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	019b      	lsls	r3, r3, #6
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	4313      	orrs	r3, r2
 800611e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	621a      	str	r2, [r3, #32]
}
 800613a:	bf00      	nop
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	40012c00 	.word	0x40012c00
 800614c:	50012c00 	.word	0x50012c00
 8006150:	40013400 	.word	0x40013400
 8006154:	50013400 	.word	0x50013400
 8006158:	40014000 	.word	0x40014000
 800615c:	50014000 	.word	0x50014000
 8006160:	40014400 	.word	0x40014400
 8006164:	50014400 	.word	0x50014400
 8006168:	40014800 	.word	0x40014800
 800616c:	50014800 	.word	0x50014800

08006170 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006170:	b480      	push	{r7}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800619e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80061b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	041b      	lsls	r3, r3, #16
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4313      	orrs	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a21      	ldr	r2, [pc, #132]	@ (800624c <TIM_OC5_SetConfig+0xdc>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d023      	beq.n	8006212 <TIM_OC5_SetConfig+0xa2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a20      	ldr	r2, [pc, #128]	@ (8006250 <TIM_OC5_SetConfig+0xe0>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d01f      	beq.n	8006212 <TIM_OC5_SetConfig+0xa2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a1f      	ldr	r2, [pc, #124]	@ (8006254 <TIM_OC5_SetConfig+0xe4>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d01b      	beq.n	8006212 <TIM_OC5_SetConfig+0xa2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a1e      	ldr	r2, [pc, #120]	@ (8006258 <TIM_OC5_SetConfig+0xe8>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d017      	beq.n	8006212 <TIM_OC5_SetConfig+0xa2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a1d      	ldr	r2, [pc, #116]	@ (800625c <TIM_OC5_SetConfig+0xec>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d013      	beq.n	8006212 <TIM_OC5_SetConfig+0xa2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a1c      	ldr	r2, [pc, #112]	@ (8006260 <TIM_OC5_SetConfig+0xf0>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d00f      	beq.n	8006212 <TIM_OC5_SetConfig+0xa2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a1b      	ldr	r2, [pc, #108]	@ (8006264 <TIM_OC5_SetConfig+0xf4>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d00b      	beq.n	8006212 <TIM_OC5_SetConfig+0xa2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a1a      	ldr	r2, [pc, #104]	@ (8006268 <TIM_OC5_SetConfig+0xf8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d007      	beq.n	8006212 <TIM_OC5_SetConfig+0xa2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a19      	ldr	r2, [pc, #100]	@ (800626c <TIM_OC5_SetConfig+0xfc>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d003      	beq.n	8006212 <TIM_OC5_SetConfig+0xa2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a18      	ldr	r2, [pc, #96]	@ (8006270 <TIM_OC5_SetConfig+0x100>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d109      	bne.n	8006226 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006218:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	021b      	lsls	r3, r3, #8
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	4313      	orrs	r3, r2
 8006224:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	685a      	ldr	r2, [r3, #4]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	621a      	str	r2, [r3, #32]
}
 8006240:	bf00      	nop
 8006242:	371c      	adds	r7, #28
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	40012c00 	.word	0x40012c00
 8006250:	50012c00 	.word	0x50012c00
 8006254:	40013400 	.word	0x40013400
 8006258:	50013400 	.word	0x50013400
 800625c:	40014000 	.word	0x40014000
 8006260:	50014000 	.word	0x50014000
 8006264:	40014400 	.word	0x40014400
 8006268:	50014400 	.word	0x50014400
 800626c:	40014800 	.word	0x40014800
 8006270:	50014800 	.word	0x50014800

08006274 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800629a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	021b      	lsls	r3, r3, #8
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80062ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	051b      	lsls	r3, r3, #20
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a22      	ldr	r2, [pc, #136]	@ (8006354 <TIM_OC6_SetConfig+0xe0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d023      	beq.n	8006318 <TIM_OC6_SetConfig+0xa4>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a21      	ldr	r2, [pc, #132]	@ (8006358 <TIM_OC6_SetConfig+0xe4>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d01f      	beq.n	8006318 <TIM_OC6_SetConfig+0xa4>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a20      	ldr	r2, [pc, #128]	@ (800635c <TIM_OC6_SetConfig+0xe8>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d01b      	beq.n	8006318 <TIM_OC6_SetConfig+0xa4>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a1f      	ldr	r2, [pc, #124]	@ (8006360 <TIM_OC6_SetConfig+0xec>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d017      	beq.n	8006318 <TIM_OC6_SetConfig+0xa4>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a1e      	ldr	r2, [pc, #120]	@ (8006364 <TIM_OC6_SetConfig+0xf0>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d013      	beq.n	8006318 <TIM_OC6_SetConfig+0xa4>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a1d      	ldr	r2, [pc, #116]	@ (8006368 <TIM_OC6_SetConfig+0xf4>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d00f      	beq.n	8006318 <TIM_OC6_SetConfig+0xa4>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a1c      	ldr	r2, [pc, #112]	@ (800636c <TIM_OC6_SetConfig+0xf8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d00b      	beq.n	8006318 <TIM_OC6_SetConfig+0xa4>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a1b      	ldr	r2, [pc, #108]	@ (8006370 <TIM_OC6_SetConfig+0xfc>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d007      	beq.n	8006318 <TIM_OC6_SetConfig+0xa4>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a1a      	ldr	r2, [pc, #104]	@ (8006374 <TIM_OC6_SetConfig+0x100>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d003      	beq.n	8006318 <TIM_OC6_SetConfig+0xa4>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a19      	ldr	r2, [pc, #100]	@ (8006378 <TIM_OC6_SetConfig+0x104>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d109      	bne.n	800632c <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800631e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	029b      	lsls	r3, r3, #10
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	4313      	orrs	r3, r2
 800632a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	621a      	str	r2, [r3, #32]
}
 8006346:	bf00      	nop
 8006348:	371c      	adds	r7, #28
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	40012c00 	.word	0x40012c00
 8006358:	50012c00 	.word	0x50012c00
 800635c:	40013400 	.word	0x40013400
 8006360:	50013400 	.word	0x50013400
 8006364:	40014000 	.word	0x40014000
 8006368:	50014000 	.word	0x50014000
 800636c:	40014400 	.word	0x40014400
 8006370:	50014400 	.word	0x50014400
 8006374:	40014800 	.word	0x40014800
 8006378:	50014800 	.word	0x50014800

0800637c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800637c:	b480      	push	{r7}
 800637e:	b087      	sub	sp, #28
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	f023 0201 	bic.w	r2, r3, #1
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	011b      	lsls	r3, r3, #4
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f023 030a 	bic.w	r3, r3, #10
 80063b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	4313      	orrs	r3, r2
 80063c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	621a      	str	r2, [r3, #32]
}
 80063ce:	bf00      	nop
 80063d0:	371c      	adds	r7, #28
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063da:	b480      	push	{r7}
 80063dc:	b087      	sub	sp, #28
 80063de:	af00      	add	r7, sp, #0
 80063e0:	60f8      	str	r0, [r7, #12]
 80063e2:	60b9      	str	r1, [r7, #8]
 80063e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	f023 0210 	bic.w	r2, r3, #16
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006404:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	031b      	lsls	r3, r3, #12
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	4313      	orrs	r3, r2
 800640e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006416:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	011b      	lsls	r3, r3, #4
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	4313      	orrs	r3, r2
 8006420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	621a      	str	r2, [r3, #32]
}
 800642e:	bf00      	nop
 8006430:	371c      	adds	r7, #28
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800643a:	b480      	push	{r7}
 800643c:	b085      	sub	sp, #20
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006450:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006454:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4313      	orrs	r3, r2
 800645c:	f043 0307 	orr.w	r3, r3, #7
 8006460:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	609a      	str	r2, [r3, #8]
}
 8006468:	bf00      	nop
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006474:	b480      	push	{r7}
 8006476:	b087      	sub	sp, #28
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
 8006480:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800648e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	021a      	lsls	r2, r3, #8
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	431a      	orrs	r2, r3
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	4313      	orrs	r3, r2
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	4313      	orrs	r3, r2
 80064a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	609a      	str	r2, [r3, #8]
}
 80064a8:	bf00      	nop
 80064aa:	371c      	adds	r7, #28
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	f003 031f 	and.w	r3, r3, #31
 80064c6:	2201      	movs	r2, #1
 80064c8:	fa02 f303 	lsl.w	r3, r2, r3
 80064cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6a1a      	ldr	r2, [r3, #32]
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	43db      	mvns	r3, r3
 80064d6:	401a      	ands	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6a1a      	ldr	r2, [r3, #32]
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	f003 031f 	and.w	r3, r3, #31
 80064e6:	6879      	ldr	r1, [r7, #4]
 80064e8:	fa01 f303 	lsl.w	r3, r1, r3
 80064ec:	431a      	orrs	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	621a      	str	r2, [r3, #32]
}
 80064f2:	bf00      	nop
 80064f4:	371c      	adds	r7, #28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
	...

08006500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006510:	2b01      	cmp	r3, #1
 8006512:	d101      	bne.n	8006518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006514:	2302      	movs	r3, #2
 8006516:	e0a1      	b.n	800665c <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2202      	movs	r2, #2
 8006524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a4a      	ldr	r2, [pc, #296]	@ (8006668 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d00e      	beq.n	8006560 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a49      	ldr	r2, [pc, #292]	@ (800666c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d009      	beq.n	8006560 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a47      	ldr	r2, [pc, #284]	@ (8006670 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d004      	beq.n	8006560 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a46      	ldr	r2, [pc, #280]	@ (8006674 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d108      	bne.n	8006572 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006566:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	4313      	orrs	r3, r2
 8006570:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006578:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800657c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	4313      	orrs	r3, r2
 8006586:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a34      	ldr	r2, [pc, #208]	@ (8006668 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d04a      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a33      	ldr	r2, [pc, #204]	@ (800666c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d045      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ac:	d040      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065b6:	d03b      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a2e      	ldr	r2, [pc, #184]	@ (8006678 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d036      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a2d      	ldr	r2, [pc, #180]	@ (800667c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d031      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a2b      	ldr	r2, [pc, #172]	@ (8006680 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d02c      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a2a      	ldr	r2, [pc, #168]	@ (8006684 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d027      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a28      	ldr	r2, [pc, #160]	@ (8006688 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d022      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a27      	ldr	r2, [pc, #156]	@ (800668c <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d01d      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006670 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d018      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a1c      	ldr	r2, [pc, #112]	@ (8006674 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d013      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a20      	ldr	r2, [pc, #128]	@ (8006690 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d00e      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a1f      	ldr	r2, [pc, #124]	@ (8006694 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d009      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a1d      	ldr	r2, [pc, #116]	@ (8006698 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d004      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a1c      	ldr	r2, [pc, #112]	@ (800669c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d10c      	bne.n	800664a <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006636:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	4313      	orrs	r3, r2
 8006640:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	40012c00 	.word	0x40012c00
 800666c:	50012c00 	.word	0x50012c00
 8006670:	40013400 	.word	0x40013400
 8006674:	50013400 	.word	0x50013400
 8006678:	40000400 	.word	0x40000400
 800667c:	50000400 	.word	0x50000400
 8006680:	40000800 	.word	0x40000800
 8006684:	50000800 	.word	0x50000800
 8006688:	40000c00 	.word	0x40000c00
 800668c:	50000c00 	.word	0x50000c00
 8006690:	40001800 	.word	0x40001800
 8006694:	50001800 	.word	0x50001800
 8006698:	40014000 	.word	0x40014000
 800669c:	50014000 	.word	0x50014000

080066a0 <memset>:
 80066a0:	4402      	add	r2, r0
 80066a2:	4603      	mov	r3, r0
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d100      	bne.n	80066aa <memset+0xa>
 80066a8:	4770      	bx	lr
 80066aa:	f803 1b01 	strb.w	r1, [r3], #1
 80066ae:	e7f9      	b.n	80066a4 <memset+0x4>

080066b0 <__libc_init_array>:
 80066b0:	b570      	push	{r4, r5, r6, lr}
 80066b2:	4d0d      	ldr	r5, [pc, #52]	@ (80066e8 <__libc_init_array+0x38>)
 80066b4:	2600      	movs	r6, #0
 80066b6:	4c0d      	ldr	r4, [pc, #52]	@ (80066ec <__libc_init_array+0x3c>)
 80066b8:	1b64      	subs	r4, r4, r5
 80066ba:	10a4      	asrs	r4, r4, #2
 80066bc:	42a6      	cmp	r6, r4
 80066be:	d109      	bne.n	80066d4 <__libc_init_array+0x24>
 80066c0:	4d0b      	ldr	r5, [pc, #44]	@ (80066f0 <__libc_init_array+0x40>)
 80066c2:	2600      	movs	r6, #0
 80066c4:	4c0b      	ldr	r4, [pc, #44]	@ (80066f4 <__libc_init_array+0x44>)
 80066c6:	f000 f817 	bl	80066f8 <_init>
 80066ca:	1b64      	subs	r4, r4, r5
 80066cc:	10a4      	asrs	r4, r4, #2
 80066ce:	42a6      	cmp	r6, r4
 80066d0:	d105      	bne.n	80066de <__libc_init_array+0x2e>
 80066d2:	bd70      	pop	{r4, r5, r6, pc}
 80066d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80066d8:	3601      	adds	r6, #1
 80066da:	4798      	blx	r3
 80066dc:	e7ee      	b.n	80066bc <__libc_init_array+0xc>
 80066de:	f855 3b04 	ldr.w	r3, [r5], #4
 80066e2:	3601      	adds	r6, #1
 80066e4:	4798      	blx	r3
 80066e6:	e7f2      	b.n	80066ce <__libc_init_array+0x1e>
 80066e8:	0800672c 	.word	0x0800672c
 80066ec:	0800672c 	.word	0x0800672c
 80066f0:	0800672c 	.word	0x0800672c
 80066f4:	08006730 	.word	0x08006730

080066f8 <_init>:
 80066f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fa:	bf00      	nop
 80066fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fe:	bc08      	pop	{r3}
 8006700:	469e      	mov	lr, r3
 8006702:	4770      	bx	lr

08006704 <_fini>:
 8006704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006706:	bf00      	nop
 8006708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800670a:	bc08      	pop	{r3}
 800670c:	469e      	mov	lr, r3
 800670e:	4770      	bx	lr
