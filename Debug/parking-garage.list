
parking-garage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f08  08000250  08000250  00001250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08009158  08009158  0000a158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800920c  0800920c  0000b010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800920c  0800920c  0000b010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800920c  0800920c  0000b010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800920c  0800920c  0000a20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009210  08009210  0000a210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08009214  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c4c  20000010  08009224  0000b010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002c5c  08009224  0000bc5c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d8da  00000000  00000000  0000b046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c83  00000000  00000000  00028920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001950  00000000  00000000  0002c5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001378  00000000  00000000  0002def8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034b51  00000000  00000000  0002f270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020596  00000000  00000000  00063dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014bed8  00000000  00000000  00084357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d022f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000695c  00000000  00000000  001d0274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001d6bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000010 	.word	0x20000010
 800026c:	00000000 	.word	0x00000000
 8000270:	08009140 	.word	0x08009140

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000014 	.word	0x20000014
 800028c:	08009140 	.word	0x08009140

08000290 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of rampControlTask */
  rampControlTaskHandle = osThreadNew(StartRampControlTask, NULL, &rampControlTask_attributes);
 8000294:	4a08      	ldr	r2, [pc, #32]	@ (80002b8 <MX_FREERTOS_Init+0x28>)
 8000296:	2100      	movs	r1, #0
 8000298:	4808      	ldr	r0, [pc, #32]	@ (80002bc <MX_FREERTOS_Init+0x2c>)
 800029a:	f006 fe19 	bl	8006ed0 <osThreadNew>
 800029e:	4603      	mov	r3, r0
 80002a0:	4a07      	ldr	r2, [pc, #28]	@ (80002c0 <MX_FREERTOS_Init+0x30>)
 80002a2:	6013      	str	r3, [r2, #0]

  /* creation of parkingControlTask */
  parkingControlTaskHandle = osThreadNew(StartParkingControlTask, NULL, &parkingControlTask_attributes);
 80002a4:	4a07      	ldr	r2, [pc, #28]	@ (80002c4 <MX_FREERTOS_Init+0x34>)
 80002a6:	2100      	movs	r1, #0
 80002a8:	4807      	ldr	r0, [pc, #28]	@ (80002c8 <MX_FREERTOS_Init+0x38>)
 80002aa:	f006 fe11 	bl	8006ed0 <osThreadNew>
 80002ae:	4603      	mov	r3, r0
 80002b0:	4a06      	ldr	r2, [pc, #24]	@ (80002cc <MX_FREERTOS_Init+0x3c>)
 80002b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	080091a8 	.word	0x080091a8
 80002bc:	080002d1 	.word	0x080002d1
 80002c0:	2000002c 	.word	0x2000002c
 80002c4:	080091cc 	.word	0x080091cc
 80002c8:	08000349 	.word	0x08000349
 80002cc:	20000030 	.word	0x20000030

080002d0 <StartRampControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRampControlTask */
void StartRampControlTask(void *argument)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN rampControlTask */
  //LCD
  lcd_init();
 80002d8:	f000 fc44 	bl	8000b64 <lcd_init>
	//__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 750);
	//__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 750);
  /* Infinite loop */
  for(;;)
  {
	int r1 = 0, r2 = 0;
 80002dc:	2300      	movs	r3, #0
 80002de:	60fb      	str	r3, [r7, #12]
 80002e0:	2300      	movs	r3, #0
 80002e2:	60bb      	str	r3, [r7, #8]
	r1 = HAL_GPIO_ReadPin(GPIOG, RAMP_ENTER_Pin);
 80002e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002e8:	4813      	ldr	r0, [pc, #76]	@ (8000338 <StartRampControlTask+0x68>)
 80002ea:	f001 fb3b 	bl	8001964 <HAL_GPIO_ReadPin>
 80002ee:	4603      	mov	r3, r0
 80002f0:	60fb      	str	r3, [r7, #12]
	r2 = HAL_GPIO_ReadPin(GPIOB, RAMP_EXIT_Pin);
 80002f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002f6:	4811      	ldr	r0, [pc, #68]	@ (800033c <StartRampControlTask+0x6c>)
 80002f8:	f001 fb34 	bl	8001964 <HAL_GPIO_ReadPin>
 80002fc:	4603      	mov	r3, r0
 80002fe:	60bb      	str	r3, [r7, #8]

	if(r1==1)
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	2b01      	cmp	r3, #1
 8000304:	d108      	bne.n	8000318 <StartRampControlTask+0x48>
	{
    	lcd_send_string("ramp up");
 8000306:	480e      	ldr	r0, [pc, #56]	@ (8000340 <StartRampControlTask+0x70>)
 8000308:	f000 fc69 	bl	8000bde <lcd_send_string>
		raise_ramp(TIM_CHANNEL_1);
 800030c:	2000      	movs	r0, #0
 800030e:	f000 f9f1 	bl	80006f4 <raise_ramp>
		lcd_send_cmd(1);
 8000312:	2001      	movs	r0, #1
 8000314:	f000 fbc6 	bl	8000aa4 <lcd_send_cmd>
	}

	if(r2==1)
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d108      	bne.n	8000330 <StartRampControlTask+0x60>
	{
    	lcd_send_string("ramp down");
 800031e:	4809      	ldr	r0, [pc, #36]	@ (8000344 <StartRampControlTask+0x74>)
 8000320:	f000 fc5d 	bl	8000bde <lcd_send_string>
		raise_ramp(TIM_CHANNEL_2);
 8000324:	2004      	movs	r0, #4
 8000326:	f000 f9e5 	bl	80006f4 <raise_ramp>
		lcd_send_cmd(1);
 800032a:	2001      	movs	r0, #1
 800032c:	f000 fbba 	bl	8000aa4 <lcd_send_cmd>
	}

    osDelay(1);
 8000330:	2001      	movs	r0, #1
 8000332:	f006 fe5e 	bl	8006ff2 <osDelay>
  {
 8000336:	e7d1      	b.n	80002dc <StartRampControlTask+0xc>
 8000338:	42021800 	.word	0x42021800
 800033c:	42020400 	.word	0x42020400
 8000340:	0800917c 	.word	0x0800917c
 8000344:	08009184 	.word	0x08009184

08000348 <StartParkingControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParkingControlTask */
void StartParkingControlTask(void *argument)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN parkingControlTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000350:	2001      	movs	r0, #1
 8000352:	f006 fe4e 	bl	8006ff2 <osDelay>
    check_capacity();
 8000356:	f000 f803 	bl	8000360 <check_capacity>
    osDelay(1);
 800035a:	bf00      	nop
 800035c:	e7f8      	b.n	8000350 <StartParkingControlTask+0x8>
	...

08000360 <check_capacity>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void check_capacity()
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b08c      	sub	sp, #48	@ 0x30
 8000364:	af00      	add	r7, sp, #0
	int p1 = HAL_GPIO_ReadPin(GPIOE, P1_Pin);
 8000366:	2101      	movs	r1, #1
 8000368:	48ad      	ldr	r0, [pc, #692]	@ (8000620 <check_capacity+0x2c0>)
 800036a:	f001 fafb 	bl	8001964 <HAL_GPIO_ReadPin>
 800036e:	4603      	mov	r3, r0
 8000370:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if(p1==1)
 8000372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000374:	2b01      	cmp	r3, #1
 8000376:	d10b      	bne.n	8000390 <check_capacity+0x30>
	{
		HAL_GPIO_WritePin(GPIOB, P1_R_Pin, 1);
 8000378:	2201      	movs	r2, #1
 800037a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800037e:	48a9      	ldr	r0, [pc, #676]	@ (8000624 <check_capacity+0x2c4>)
 8000380:	f001 fb08 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, P1_G_Pin, 0);
 8000384:	2200      	movs	r2, #0
 8000386:	2108      	movs	r1, #8
 8000388:	48a7      	ldr	r0, [pc, #668]	@ (8000628 <check_capacity+0x2c8>)
 800038a:	f001 fb03 	bl	8001994 <HAL_GPIO_WritePin>
 800038e:	e00d      	b.n	80003ac <check_capacity+0x4c>
	}
	else if(p1==0)
 8000390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000392:	2b00      	cmp	r3, #0
 8000394:	d10a      	bne.n	80003ac <check_capacity+0x4c>
	{
		HAL_GPIO_WritePin(GPIOB, P1_R_Pin, 0);
 8000396:	2200      	movs	r2, #0
 8000398:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800039c:	48a1      	ldr	r0, [pc, #644]	@ (8000624 <check_capacity+0x2c4>)
 800039e:	f001 faf9 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, P1_G_Pin, 1);
 80003a2:	2201      	movs	r2, #1
 80003a4:	2108      	movs	r1, #8
 80003a6:	48a0      	ldr	r0, [pc, #640]	@ (8000628 <check_capacity+0x2c8>)
 80003a8:	f001 faf4 	bl	8001994 <HAL_GPIO_WritePin>
	}

	int p2 = HAL_GPIO_ReadPin(GPIOB, P2_Pin);
 80003ac:	2101      	movs	r1, #1
 80003ae:	489d      	ldr	r0, [pc, #628]	@ (8000624 <check_capacity+0x2c4>)
 80003b0:	f001 fad8 	bl	8001964 <HAL_GPIO_ReadPin>
 80003b4:	4603      	mov	r3, r0
 80003b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	if(p2==1)
 80003b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d10b      	bne.n	80003d6 <check_capacity+0x76>
	{
		HAL_GPIO_WritePin(GPIOA, P2_R_Pin, 1);
 80003be:	2201      	movs	r2, #1
 80003c0:	2101      	movs	r1, #1
 80003c2:	4899      	ldr	r0, [pc, #612]	@ (8000628 <check_capacity+0x2c8>)
 80003c4:	f001 fae6 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P2_G_Pin, 0);
 80003c8:	2200      	movs	r2, #0
 80003ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003ce:	4894      	ldr	r0, [pc, #592]	@ (8000620 <check_capacity+0x2c0>)
 80003d0:	f001 fae0 	bl	8001994 <HAL_GPIO_WritePin>
 80003d4:	e00d      	b.n	80003f2 <check_capacity+0x92>
	}
	else if(p2==0)
 80003d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d10a      	bne.n	80003f2 <check_capacity+0x92>
	{
		HAL_GPIO_WritePin(GPIOE, P2_G_Pin, 1);
 80003dc:	2201      	movs	r2, #1
 80003de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003e2:	488f      	ldr	r0, [pc, #572]	@ (8000620 <check_capacity+0x2c0>)
 80003e4:	f001 fad6 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, P2_R_Pin, 0);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2101      	movs	r1, #1
 80003ec:	488e      	ldr	r0, [pc, #568]	@ (8000628 <check_capacity+0x2c8>)
 80003ee:	f001 fad1 	bl	8001994 <HAL_GPIO_WritePin>
	}

	int p3 = HAL_GPIO_ReadPin(GPIOD, P3_Pin);
 80003f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003f6:	488d      	ldr	r0, [pc, #564]	@ (800062c <check_capacity+0x2cc>)
 80003f8:	f001 fab4 	bl	8001964 <HAL_GPIO_ReadPin>
 80003fc:	4603      	mov	r3, r0
 80003fe:	627b      	str	r3, [r7, #36]	@ 0x24
	if(p3==1)
 8000400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000402:	2b01      	cmp	r3, #1
 8000404:	d10b      	bne.n	800041e <check_capacity+0xbe>
	{
		HAL_GPIO_WritePin(GPIOE, P3_R_Pin, 1);
 8000406:	2201      	movs	r2, #1
 8000408:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800040c:	4884      	ldr	r0, [pc, #528]	@ (8000620 <check_capacity+0x2c0>)
 800040e:	f001 fac1 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P3_G_Pin, 0);
 8000412:	2200      	movs	r2, #0
 8000414:	2140      	movs	r1, #64	@ 0x40
 8000416:	4882      	ldr	r0, [pc, #520]	@ (8000620 <check_capacity+0x2c0>)
 8000418:	f001 fabc 	bl	8001994 <HAL_GPIO_WritePin>
 800041c:	e00d      	b.n	800043a <check_capacity+0xda>
	}
	else if(p3==0)
 800041e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000420:	2b00      	cmp	r3, #0
 8000422:	d10a      	bne.n	800043a <check_capacity+0xda>
	{
		HAL_GPIO_WritePin(GPIOE, P3_G_Pin, 1);
 8000424:	2201      	movs	r2, #1
 8000426:	2140      	movs	r1, #64	@ 0x40
 8000428:	487d      	ldr	r0, [pc, #500]	@ (8000620 <check_capacity+0x2c0>)
 800042a:	f001 fab3 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P3_R_Pin, 0);
 800042e:	2200      	movs	r2, #0
 8000430:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000434:	487a      	ldr	r0, [pc, #488]	@ (8000620 <check_capacity+0x2c0>)
 8000436:	f001 faad 	bl	8001994 <HAL_GPIO_WritePin>
	}

	int p4 = HAL_GPIO_ReadPin(GPIOD, P4_Pin);
 800043a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800043e:	487b      	ldr	r0, [pc, #492]	@ (800062c <check_capacity+0x2cc>)
 8000440:	f001 fa90 	bl	8001964 <HAL_GPIO_ReadPin>
 8000444:	4603      	mov	r3, r0
 8000446:	623b      	str	r3, [r7, #32]
	if(p4==1)
 8000448:	6a3b      	ldr	r3, [r7, #32]
 800044a:	2b01      	cmp	r3, #1
 800044c:	d10b      	bne.n	8000466 <check_capacity+0x106>
	{
		HAL_GPIO_WritePin(GPIOE, P4_R_Pin, 1);
 800044e:	2201      	movs	r2, #1
 8000450:	2180      	movs	r1, #128	@ 0x80
 8000452:	4873      	ldr	r0, [pc, #460]	@ (8000620 <check_capacity+0x2c0>)
 8000454:	f001 fa9e 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P4_G_Pin, 0);
 8000458:	2200      	movs	r2, #0
 800045a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800045e:	4870      	ldr	r0, [pc, #448]	@ (8000620 <check_capacity+0x2c0>)
 8000460:	f001 fa98 	bl	8001994 <HAL_GPIO_WritePin>
 8000464:	e00d      	b.n	8000482 <check_capacity+0x122>
	}
	else if(p4==0)
 8000466:	6a3b      	ldr	r3, [r7, #32]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d10a      	bne.n	8000482 <check_capacity+0x122>
	{
		HAL_GPIO_WritePin(GPIOE, P4_G_Pin, 1);
 800046c:	2201      	movs	r2, #1
 800046e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000472:	486b      	ldr	r0, [pc, #428]	@ (8000620 <check_capacity+0x2c0>)
 8000474:	f001 fa8e 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P4_R_Pin, 0);
 8000478:	2200      	movs	r2, #0
 800047a:	2180      	movs	r1, #128	@ 0x80
 800047c:	4868      	ldr	r0, [pc, #416]	@ (8000620 <check_capacity+0x2c0>)
 800047e:	f001 fa89 	bl	8001994 <HAL_GPIO_WritePin>
	}

	int p5 = HAL_GPIO_ReadPin(GPIOB, P5_Pin);
 8000482:	2104      	movs	r1, #4
 8000484:	4867      	ldr	r0, [pc, #412]	@ (8000624 <check_capacity+0x2c4>)
 8000486:	f001 fa6d 	bl	8001964 <HAL_GPIO_ReadPin>
 800048a:	4603      	mov	r3, r0
 800048c:	61fb      	str	r3, [r7, #28]
	if(p5==1)
 800048e:	69fb      	ldr	r3, [r7, #28]
 8000490:	2b01      	cmp	r3, #1
 8000492:	d10c      	bne.n	80004ae <check_capacity+0x14e>
	{
		HAL_GPIO_WritePin(GPIOD, P5_R_Pin, 1);
 8000494:	2201      	movs	r2, #1
 8000496:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800049a:	4864      	ldr	r0, [pc, #400]	@ (800062c <check_capacity+0x2cc>)
 800049c:	f001 fa7a 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P5_G_Pin, 0);
 80004a0:	2200      	movs	r2, #0
 80004a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004a6:	485e      	ldr	r0, [pc, #376]	@ (8000620 <check_capacity+0x2c0>)
 80004a8:	f001 fa74 	bl	8001994 <HAL_GPIO_WritePin>
 80004ac:	e00e      	b.n	80004cc <check_capacity+0x16c>
	}
	else if(p5==0)
 80004ae:	69fb      	ldr	r3, [r7, #28]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d10b      	bne.n	80004cc <check_capacity+0x16c>
	{
		HAL_GPIO_WritePin(GPIOE, P5_G_Pin, 1);
 80004b4:	2201      	movs	r2, #1
 80004b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004ba:	4859      	ldr	r0, [pc, #356]	@ (8000620 <check_capacity+0x2c0>)
 80004bc:	f001 fa6a 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, P5_R_Pin, 0);
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004c6:	4859      	ldr	r0, [pc, #356]	@ (800062c <check_capacity+0x2cc>)
 80004c8:	f001 fa64 	bl	8001994 <HAL_GPIO_WritePin>
	}

	int p6 = HAL_GPIO_ReadPin(GPIOB, P6_Pin);
 80004cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004d0:	4854      	ldr	r0, [pc, #336]	@ (8000624 <check_capacity+0x2c4>)
 80004d2:	f001 fa47 	bl	8001964 <HAL_GPIO_ReadPin>
 80004d6:	4603      	mov	r3, r0
 80004d8:	61bb      	str	r3, [r7, #24]
	if(p6==1)
 80004da:	69bb      	ldr	r3, [r7, #24]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d10b      	bne.n	80004f8 <check_capacity+0x198>
	{
		HAL_GPIO_WritePin(GPIOB, P6_R_Pin, 1);
 80004e0:	2201      	movs	r2, #1
 80004e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004e6:	484f      	ldr	r0, [pc, #316]	@ (8000624 <check_capacity+0x2c4>)
 80004e8:	f001 fa54 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, P6_G_Pin, 0);
 80004ec:	2200      	movs	r2, #0
 80004ee:	2120      	movs	r1, #32
 80004f0:	484d      	ldr	r0, [pc, #308]	@ (8000628 <check_capacity+0x2c8>)
 80004f2:	f001 fa4f 	bl	8001994 <HAL_GPIO_WritePin>
 80004f6:	e00d      	b.n	8000514 <check_capacity+0x1b4>
	}
	else if(p6==0)
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d10a      	bne.n	8000514 <check_capacity+0x1b4>
	{
		HAL_GPIO_WritePin(GPIOA, P6_G_Pin, 1);
 80004fe:	2201      	movs	r2, #1
 8000500:	2120      	movs	r1, #32
 8000502:	4849      	ldr	r0, [pc, #292]	@ (8000628 <check_capacity+0x2c8>)
 8000504:	f001 fa46 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, P6_R_Pin, 0);
 8000508:	2200      	movs	r2, #0
 800050a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800050e:	4845      	ldr	r0, [pc, #276]	@ (8000624 <check_capacity+0x2c4>)
 8000510:	f001 fa40 	bl	8001994 <HAL_GPIO_WritePin>
	}

	int p7 = HAL_GPIO_ReadPin(GPIOF, P7_Pin);
 8000514:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000518:	4845      	ldr	r0, [pc, #276]	@ (8000630 <check_capacity+0x2d0>)
 800051a:	f001 fa23 	bl	8001964 <HAL_GPIO_ReadPin>
 800051e:	4603      	mov	r3, r0
 8000520:	617b      	str	r3, [r7, #20]
	if(p7==1)
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d10b      	bne.n	8000540 <check_capacity+0x1e0>
	{
		HAL_GPIO_WritePin(GPIOF, P7_R_Pin, 1);
 8000528:	2201      	movs	r2, #1
 800052a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800052e:	4840      	ldr	r0, [pc, #256]	@ (8000630 <check_capacity+0x2d0>)
 8000530:	f001 fa30 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, P7_G_Pin, 0);
 8000534:	2200      	movs	r2, #0
 8000536:	2140      	movs	r1, #64	@ 0x40
 8000538:	483e      	ldr	r0, [pc, #248]	@ (8000634 <check_capacity+0x2d4>)
 800053a:	f001 fa2b 	bl	8001994 <HAL_GPIO_WritePin>
 800053e:	e00d      	b.n	800055c <check_capacity+0x1fc>
	}
	else if(p7==0)
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d10a      	bne.n	800055c <check_capacity+0x1fc>
	{
		HAL_GPIO_WritePin(GPIOG, P7_G_Pin, 1);
 8000546:	2201      	movs	r2, #1
 8000548:	2140      	movs	r1, #64	@ 0x40
 800054a:	483a      	ldr	r0, [pc, #232]	@ (8000634 <check_capacity+0x2d4>)
 800054c:	f001 fa22 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, P7_R_Pin, 0);
 8000550:	2200      	movs	r2, #0
 8000552:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000556:	4836      	ldr	r0, [pc, #216]	@ (8000630 <check_capacity+0x2d0>)
 8000558:	f001 fa1c 	bl	8001994 <HAL_GPIO_WritePin>
	}

	int p8 = HAL_GPIO_ReadPin(GPIOE, P8_Pin);
 800055c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000560:	482f      	ldr	r0, [pc, #188]	@ (8000620 <check_capacity+0x2c0>)
 8000562:	f001 f9ff 	bl	8001964 <HAL_GPIO_ReadPin>
 8000566:	4603      	mov	r3, r0
 8000568:	613b      	str	r3, [r7, #16]
	if(p8==1)
 800056a:	693b      	ldr	r3, [r7, #16]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d10c      	bne.n	800058a <check_capacity+0x22a>
	{
		HAL_GPIO_WritePin(GPIOE, P8_R_Pin, 1);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000576:	482a      	ldr	r0, [pc, #168]	@ (8000620 <check_capacity+0x2c0>)
 8000578:	f001 fa0c 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, P8_G_Pin, 0);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000582:	482c      	ldr	r0, [pc, #176]	@ (8000634 <check_capacity+0x2d4>)
 8000584:	f001 fa06 	bl	8001994 <HAL_GPIO_WritePin>
 8000588:	e00e      	b.n	80005a8 <check_capacity+0x248>
	}
	else if(p8==0)
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d10b      	bne.n	80005a8 <check_capacity+0x248>
	{
		HAL_GPIO_WritePin(GPIOG, P8_G_Pin, 1);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000596:	4827      	ldr	r0, [pc, #156]	@ (8000634 <check_capacity+0x2d4>)
 8000598:	f001 f9fc 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P8_R_Pin, 0);
 800059c:	2200      	movs	r2, #0
 800059e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005a2:	481f      	ldr	r0, [pc, #124]	@ (8000620 <check_capacity+0x2c0>)
 80005a4:	f001 f9f6 	bl	8001994 <HAL_GPIO_WritePin>
	}

	int p9 = HAL_GPIO_ReadPin(GPIOE, P9_Pin);
 80005a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005ac:	481c      	ldr	r0, [pc, #112]	@ (8000620 <check_capacity+0x2c0>)
 80005ae:	f001 f9d9 	bl	8001964 <HAL_GPIO_ReadPin>
 80005b2:	4603      	mov	r3, r0
 80005b4:	60fb      	str	r3, [r7, #12]
	if(p9==1)
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d10c      	bne.n	80005d6 <check_capacity+0x276>
	{
		HAL_GPIO_WritePin(GPIOE, P9_R_Pin, 1);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005c2:	4817      	ldr	r0, [pc, #92]	@ (8000620 <check_capacity+0x2c0>)
 80005c4:	f001 f9e6 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, P9_G_Pin, 0);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005ce:	4819      	ldr	r0, [pc, #100]	@ (8000634 <check_capacity+0x2d4>)
 80005d0:	f001 f9e0 	bl	8001994 <HAL_GPIO_WritePin>
 80005d4:	e00e      	b.n	80005f4 <check_capacity+0x294>
	}
	else if(p9==0)
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d10b      	bne.n	80005f4 <check_capacity+0x294>
	{
		HAL_GPIO_WritePin(GPIOG, P9_G_Pin, 1);
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005e2:	4814      	ldr	r0, [pc, #80]	@ (8000634 <check_capacity+0x2d4>)
 80005e4:	f001 f9d6 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P9_R_Pin, 0);
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005ee:	480c      	ldr	r0, [pc, #48]	@ (8000620 <check_capacity+0x2c0>)
 80005f0:	f001 f9d0 	bl	8001994 <HAL_GPIO_WritePin>
	}

	int p10 = HAL_GPIO_ReadPin(GPIOF, P10_Pin);
 80005f4:	2108      	movs	r1, #8
 80005f6:	480e      	ldr	r0, [pc, #56]	@ (8000630 <check_capacity+0x2d0>)
 80005f8:	f001 f9b4 	bl	8001964 <HAL_GPIO_ReadPin>
 80005fc:	4603      	mov	r3, r0
 80005fe:	60bb      	str	r3, [r7, #8]
	if(p10==1)
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d118      	bne.n	8000638 <check_capacity+0x2d8>
	{
		HAL_GPIO_WritePin(GPIOD, P10_R_Pin, 1);
 8000606:	2201      	movs	r2, #1
 8000608:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800060c:	4807      	ldr	r0, [pc, #28]	@ (800062c <check_capacity+0x2cc>)
 800060e:	f001 f9c1 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, P10_G_Pin, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000618:	4804      	ldr	r0, [pc, #16]	@ (800062c <check_capacity+0x2cc>)
 800061a:	f001 f9bb 	bl	8001994 <HAL_GPIO_WritePin>
 800061e:	e01a      	b.n	8000656 <check_capacity+0x2f6>
 8000620:	42021000 	.word	0x42021000
 8000624:	42020400 	.word	0x42020400
 8000628:	42020000 	.word	0x42020000
 800062c:	42020c00 	.word	0x42020c00
 8000630:	42021400 	.word	0x42021400
 8000634:	42021800 	.word	0x42021800
	}
	else if(p10==0)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d10b      	bne.n	8000656 <check_capacity+0x2f6>
	{
		HAL_GPIO_WritePin(GPIOD, P10_G_Pin, 1);
 800063e:	2201      	movs	r2, #1
 8000640:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000644:	4828      	ldr	r0, [pc, #160]	@ (80006e8 <check_capacity+0x388>)
 8000646:	f001 f9a5 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, P10_R_Pin, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000650:	4825      	ldr	r0, [pc, #148]	@ (80006e8 <check_capacity+0x388>)
 8000652:	f001 f99f 	bl	8001994 <HAL_GPIO_WritePin>
	}

	int p11 = HAL_GPIO_ReadPin(GPIOG, P11_Pin);
 8000656:	2102      	movs	r1, #2
 8000658:	4824      	ldr	r0, [pc, #144]	@ (80006ec <check_capacity+0x38c>)
 800065a:	f001 f983 	bl	8001964 <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	607b      	str	r3, [r7, #4]
	if(p11==1)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d10a      	bne.n	800067e <check_capacity+0x31e>
	{
		HAL_GPIO_WritePin(GPIOG, P11_R_Pin, 1);
 8000668:	2201      	movs	r2, #1
 800066a:	2101      	movs	r1, #1
 800066c:	481f      	ldr	r0, [pc, #124]	@ (80006ec <check_capacity+0x38c>)
 800066e:	f001 f991 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, P11_G_Pin, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2102      	movs	r1, #2
 8000676:	481c      	ldr	r0, [pc, #112]	@ (80006e8 <check_capacity+0x388>)
 8000678:	f001 f98c 	bl	8001994 <HAL_GPIO_WritePin>
 800067c:	e00c      	b.n	8000698 <check_capacity+0x338>
	}
	else if(p11==0)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d109      	bne.n	8000698 <check_capacity+0x338>
	{
		HAL_GPIO_WritePin(GPIOD, P11_G_Pin, 1);
 8000684:	2201      	movs	r2, #1
 8000686:	2102      	movs	r1, #2
 8000688:	4817      	ldr	r0, [pc, #92]	@ (80006e8 <check_capacity+0x388>)
 800068a:	f001 f983 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, P11_R_Pin, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2101      	movs	r1, #1
 8000692:	4816      	ldr	r0, [pc, #88]	@ (80006ec <check_capacity+0x38c>)
 8000694:	f001 f97e 	bl	8001994 <HAL_GPIO_WritePin>
	}

	int p12 = HAL_GPIO_ReadPin(GPIOD, P12_Pin);
 8000698:	2101      	movs	r1, #1
 800069a:	4813      	ldr	r0, [pc, #76]	@ (80006e8 <check_capacity+0x388>)
 800069c:	f001 f962 	bl	8001964 <HAL_GPIO_ReadPin>
 80006a0:	4603      	mov	r3, r0
 80006a2:	603b      	str	r3, [r7, #0]
	if(p12==1)
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d10b      	bne.n	80006c2 <check_capacity+0x362>
	{
		HAL_GPIO_WritePin(GPIOF, P12_R_Pin, 1);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2180      	movs	r1, #128	@ 0x80
 80006ae:	4810      	ldr	r0, [pc, #64]	@ (80006f0 <check_capacity+0x390>)
 80006b0:	f001 f970 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, P12_G_Pin, 0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006ba:	480d      	ldr	r0, [pc, #52]	@ (80006f0 <check_capacity+0x390>)
 80006bc:	f001 f96a 	bl	8001994 <HAL_GPIO_WritePin>
	else if(p12==0)
	{
		HAL_GPIO_WritePin(GPIOF, P12_G_Pin, 1);
		HAL_GPIO_WritePin(GPIOF, P12_R_Pin, 0);
	}
}
 80006c0:	e00d      	b.n	80006de <check_capacity+0x37e>
	else if(p12==0)
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d10a      	bne.n	80006de <check_capacity+0x37e>
		HAL_GPIO_WritePin(GPIOF, P12_G_Pin, 1);
 80006c8:	2201      	movs	r2, #1
 80006ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006ce:	4808      	ldr	r0, [pc, #32]	@ (80006f0 <check_capacity+0x390>)
 80006d0:	f001 f960 	bl	8001994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, P12_R_Pin, 0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2180      	movs	r1, #128	@ 0x80
 80006d8:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <check_capacity+0x390>)
 80006da:	f001 f95b 	bl	8001994 <HAL_GPIO_WritePin>
}
 80006de:	bf00      	nop
 80006e0:	3730      	adds	r7, #48	@ 0x30
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	42020c00 	.word	0x42020c00
 80006ec:	42021800 	.word	0x42021800
 80006f0:	42021400 	.word	0x42021400

080006f4 <raise_ramp>:

void raise_ramp(char channel)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
	int x = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
	for(x=750; x>250; x=x-1)
 8000702:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	e031      	b.n	800076e <raise_ramp+0x7a>
	{
		__HAL_TIM_SET_COMPARE(&htim3,channel, x);
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d104      	bne.n	800071a <raise_ramp+0x26>
 8000710:	4b3a      	ldr	r3, [pc, #232]	@ (80007fc <raise_ramp+0x108>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	68fa      	ldr	r2, [r7, #12]
 8000716:	635a      	str	r2, [r3, #52]	@ 0x34
 8000718:	e023      	b.n	8000762 <raise_ramp+0x6e>
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b04      	cmp	r3, #4
 800071e:	d104      	bne.n	800072a <raise_ramp+0x36>
 8000720:	4b36      	ldr	r3, [pc, #216]	@ (80007fc <raise_ramp+0x108>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	6393      	str	r3, [r2, #56]	@ 0x38
 8000728:	e01b      	b.n	8000762 <raise_ramp+0x6e>
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b08      	cmp	r3, #8
 800072e:	d104      	bne.n	800073a <raise_ramp+0x46>
 8000730:	4b32      	ldr	r3, [pc, #200]	@ (80007fc <raise_ramp+0x108>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000738:	e013      	b.n	8000762 <raise_ramp+0x6e>
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b0c      	cmp	r3, #12
 800073e:	d104      	bne.n	800074a <raise_ramp+0x56>
 8000740:	4b2e      	ldr	r3, [pc, #184]	@ (80007fc <raise_ramp+0x108>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	6413      	str	r3, [r2, #64]	@ 0x40
 8000748:	e00b      	b.n	8000762 <raise_ramp+0x6e>
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	2b10      	cmp	r3, #16
 800074e:	d104      	bne.n	800075a <raise_ramp+0x66>
 8000750:	4b2a      	ldr	r3, [pc, #168]	@ (80007fc <raise_ramp+0x108>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	6493      	str	r3, [r2, #72]	@ 0x48
 8000758:	e003      	b.n	8000762 <raise_ramp+0x6e>
 800075a:	4b28      	ldr	r3, [pc, #160]	@ (80007fc <raise_ramp+0x108>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	64d3      	str	r3, [r2, #76]	@ 0x4c
		osDelay(5);
 8000762:	2005      	movs	r0, #5
 8000764:	f006 fc45 	bl	8006ff2 <osDelay>
	for(x=750; x>250; x=x-1)
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3b01      	subs	r3, #1
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	2bfa      	cmp	r3, #250	@ 0xfa
 8000772:	dcca      	bgt.n	800070a <raise_ramp+0x16>
	}
	osDelay(3000);
 8000774:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000778:	f006 fc3b 	bl	8006ff2 <osDelay>
	for(x=250; x<750; x=x+1)
 800077c:	23fa      	movs	r3, #250	@ 0xfa
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	e031      	b.n	80007e6 <raise_ramp+0xf2>
	{
		__HAL_TIM_SET_COMPARE(&htim3,channel, x);
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d104      	bne.n	8000792 <raise_ramp+0x9e>
 8000788:	4b1c      	ldr	r3, [pc, #112]	@ (80007fc <raise_ramp+0x108>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	68fa      	ldr	r2, [r7, #12]
 800078e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000790:	e023      	b.n	80007da <raise_ramp+0xe6>
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b04      	cmp	r3, #4
 8000796:	d104      	bne.n	80007a2 <raise_ramp+0xae>
 8000798:	4b18      	ldr	r3, [pc, #96]	@ (80007fc <raise_ramp+0x108>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	6393      	str	r3, [r2, #56]	@ 0x38
 80007a0:	e01b      	b.n	80007da <raise_ramp+0xe6>
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b08      	cmp	r3, #8
 80007a6:	d104      	bne.n	80007b2 <raise_ramp+0xbe>
 80007a8:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <raise_ramp+0x108>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80007b0:	e013      	b.n	80007da <raise_ramp+0xe6>
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2b0c      	cmp	r3, #12
 80007b6:	d104      	bne.n	80007c2 <raise_ramp+0xce>
 80007b8:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <raise_ramp+0x108>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c0:	e00b      	b.n	80007da <raise_ramp+0xe6>
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2b10      	cmp	r3, #16
 80007c6:	d104      	bne.n	80007d2 <raise_ramp+0xde>
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <raise_ramp+0x108>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	6493      	str	r3, [r2, #72]	@ 0x48
 80007d0:	e003      	b.n	80007da <raise_ramp+0xe6>
 80007d2:	4b0a      	ldr	r3, [pc, #40]	@ (80007fc <raise_ramp+0x108>)
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
		osDelay(5);
 80007da:	2005      	movs	r0, #5
 80007dc:	f006 fc09 	bl	8006ff2 <osDelay>
	for(x=250; x<750; x=x+1)
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	3301      	adds	r3, #1
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	f240 22ed 	movw	r2, #749	@ 0x2ed
 80007ec:	4293      	cmp	r3, r2
 80007ee:	ddc8      	ble.n	8000782 <raise_ramp+0x8e>
	}

}
 80007f0:	bf00      	nop
 80007f2:	bf00      	nop
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200000d4 	.word	0x200000d4

08000800 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN(PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT(PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08e      	sub	sp, #56	@ 0x38
 8000804:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000816:	4b9c      	ldr	r3, [pc, #624]	@ (8000a88 <MX_GPIO_Init+0x288>)
 8000818:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800081c:	4a9a      	ldr	r2, [pc, #616]	@ (8000a88 <MX_GPIO_Init+0x288>)
 800081e:	f043 0310 	orr.w	r3, r3, #16
 8000822:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000826:	4b98      	ldr	r3, [pc, #608]	@ (8000a88 <MX_GPIO_Init+0x288>)
 8000828:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800082c:	f003 0310 	and.w	r3, r3, #16
 8000830:	623b      	str	r3, [r7, #32]
 8000832:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000834:	4b94      	ldr	r3, [pc, #592]	@ (8000a88 <MX_GPIO_Init+0x288>)
 8000836:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800083a:	4a93      	ldr	r2, [pc, #588]	@ (8000a88 <MX_GPIO_Init+0x288>)
 800083c:	f043 0320 	orr.w	r3, r3, #32
 8000840:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000844:	4b90      	ldr	r3, [pc, #576]	@ (8000a88 <MX_GPIO_Init+0x288>)
 8000846:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800084a:	f003 0320 	and.w	r3, r3, #32
 800084e:	61fb      	str	r3, [r7, #28]
 8000850:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000852:	4b8d      	ldr	r3, [pc, #564]	@ (8000a88 <MX_GPIO_Init+0x288>)
 8000854:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000858:	4a8b      	ldr	r2, [pc, #556]	@ (8000a88 <MX_GPIO_Init+0x288>)
 800085a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800085e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000862:	4b89      	ldr	r3, [pc, #548]	@ (8000a88 <MX_GPIO_Init+0x288>)
 8000864:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000868:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800086c:	61bb      	str	r3, [r7, #24]
 800086e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	4b85      	ldr	r3, [pc, #532]	@ (8000a88 <MX_GPIO_Init+0x288>)
 8000872:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000876:	4a84      	ldr	r2, [pc, #528]	@ (8000a88 <MX_GPIO_Init+0x288>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000880:	4b81      	ldr	r3, [pc, #516]	@ (8000a88 <MX_GPIO_Init+0x288>)
 8000882:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	617b      	str	r3, [r7, #20]
 800088c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	4b7e      	ldr	r3, [pc, #504]	@ (8000a88 <MX_GPIO_Init+0x288>)
 8000890:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000894:	4a7c      	ldr	r2, [pc, #496]	@ (8000a88 <MX_GPIO_Init+0x288>)
 8000896:	f043 0302 	orr.w	r3, r3, #2
 800089a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800089e:	4b7a      	ldr	r3, [pc, #488]	@ (8000a88 <MX_GPIO_Init+0x288>)
 80008a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008a4:	f003 0302 	and.w	r3, r3, #2
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ac:	4b76      	ldr	r3, [pc, #472]	@ (8000a88 <MX_GPIO_Init+0x288>)
 80008ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008b2:	4a75      	ldr	r2, [pc, #468]	@ (8000a88 <MX_GPIO_Init+0x288>)
 80008b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008b8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008bc:	4b72      	ldr	r3, [pc, #456]	@ (8000a88 <MX_GPIO_Init+0x288>)
 80008be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ca:	4b6f      	ldr	r3, [pc, #444]	@ (8000a88 <MX_GPIO_Init+0x288>)
 80008cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008d0:	4a6d      	ldr	r2, [pc, #436]	@ (8000a88 <MX_GPIO_Init+0x288>)
 80008d2:	f043 0308 	orr.w	r3, r3, #8
 80008d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008da:	4b6b      	ldr	r3, [pc, #428]	@ (8000a88 <MX_GPIO_Init+0x288>)
 80008dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008e0:	f003 0308 	and.w	r3, r3, #8
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e8:	4b67      	ldr	r3, [pc, #412]	@ (8000a88 <MX_GPIO_Init+0x288>)
 80008ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008ee:	4a66      	ldr	r2, [pc, #408]	@ (8000a88 <MX_GPIO_Init+0x288>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008f8:	4b63      	ldr	r3, [pc, #396]	@ (8000a88 <MX_GPIO_Init+0x288>)
 80008fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, P3_G_Pin|P4_R_Pin|P5_G_Pin|P9_R_Pin
 8000906:	2200      	movs	r2, #0
 8000908:	f24b 71c0 	movw	r1, #47040	@ 0xb7c0
 800090c:	485f      	ldr	r0, [pc, #380]	@ (8000a8c <MX_GPIO_Init+0x28c>)
 800090e:	f001 f841 	bl	8001994 <HAL_GPIO_WritePin>
                          |P4_G_Pin|P3_R_Pin|P8_R_Pin|P2_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, P12_R_Pin|P12_G_Pin|P7_R_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 5194 	mov.w	r1, #4736	@ 0x1280
 8000918:	485d      	ldr	r0, [pc, #372]	@ (8000a90 <MX_GPIO_Init+0x290>)
 800091a:	f001 f83b 	bl	8001994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, P2_R_Pin|P1_G_Pin|P6_G_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2129      	movs	r1, #41	@ 0x29
 8000922:	485c      	ldr	r0, [pc, #368]	@ (8000a94 <MX_GPIO_Init+0x294>)
 8000924:	f001 f836 	bl	8001994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, P11_R_Pin|P7_G_Pin|P9_G_Pin|P8_G_Pin, GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	f245 0141 	movw	r1, #20545	@ 0x5041
 800092e:	485a      	ldr	r0, [pc, #360]	@ (8000a98 <MX_GPIO_Init+0x298>)
 8000930:	f001 f830 	bl	8001994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P1_R_Pin|P6_R_Pin, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800093a:	4858      	ldr	r0, [pc, #352]	@ (8000a9c <MX_GPIO_Init+0x29c>)
 800093c:	f001 f82a 	bl	8001994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, P5_R_Pin|P10_G_Pin|P10_R_Pin|P11_G_Pin, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	f24e 0102 	movw	r1, #57346	@ 0xe002
 8000946:	4856      	ldr	r0, [pc, #344]	@ (8000aa0 <MX_GPIO_Init+0x2a0>)
 8000948:	f001 f824 	bl	8001994 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P3_G_Pin P4_R_Pin P5_G_Pin P9_R_Pin
                           P4_G_Pin P3_R_Pin P8_R_Pin P2_G_Pin */
  GPIO_InitStruct.Pin = P3_G_Pin|P4_R_Pin|P5_G_Pin|P9_R_Pin
 800094c:	f24b 73c0 	movw	r3, #47040	@ 0xb7c0
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
                          |P4_G_Pin|P3_R_Pin|P8_R_Pin|P2_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800095e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000962:	4619      	mov	r1, r3
 8000964:	4849      	ldr	r0, [pc, #292]	@ (8000a8c <MX_GPIO_Init+0x28c>)
 8000966:	f000 fe9f 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P10_Pin P7_Pin */
  GPIO_InitStruct.Pin = P10_Pin|P7_Pin;
 800096a:	f242 0308 	movw	r3, #8200	@ 0x2008
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000978:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097c:	4619      	mov	r1, r3
 800097e:	4844      	ldr	r0, [pc, #272]	@ (8000a90 <MX_GPIO_Init+0x290>)
 8000980:	f000 fe92 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P12_R_Pin P12_G_Pin P7_R_Pin */
  GPIO_InitStruct.Pin = P12_R_Pin|P12_G_Pin|P7_R_Pin;
 8000984:	f44f 5394 	mov.w	r3, #4736	@ 0x1280
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000996:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800099a:	4619      	mov	r1, r3
 800099c:	483c      	ldr	r0, [pc, #240]	@ (8000a90 <MX_GPIO_Init+0x290>)
 800099e:	f000 fe83 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P2_R_Pin P1_G_Pin P6_G_Pin */
  GPIO_InitStruct.Pin = P2_R_Pin|P1_G_Pin|P6_G_Pin;
 80009a2:	2329      	movs	r3, #41	@ 0x29
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b6:	4619      	mov	r1, r3
 80009b8:	4836      	ldr	r0, [pc, #216]	@ (8000a94 <MX_GPIO_Init+0x294>)
 80009ba:	f000 fe75 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P2_Pin P5_Pin RAMP_EXIT_Pin P6_Pin */
  GPIO_InitStruct.Pin = P2_Pin|P5_Pin|RAMP_EXIT_Pin|P6_Pin;
 80009be:	f241 1305 	movw	r3, #4357	@ 0x1105
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d0:	4619      	mov	r1, r3
 80009d2:	4832      	ldr	r0, [pc, #200]	@ (8000a9c <MX_GPIO_Init+0x29c>)
 80009d4:	f000 fe68 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P11_R_Pin P7_G_Pin P9_G_Pin P8_G_Pin */
  GPIO_InitStruct.Pin = P11_R_Pin|P7_G_Pin|P9_G_Pin|P8_G_Pin;
 80009d8:	f245 0341 	movw	r3, #20545	@ 0x5041
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009de:	2301      	movs	r3, #1
 80009e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ee:	4619      	mov	r1, r3
 80009f0:	4829      	ldr	r0, [pc, #164]	@ (8000a98 <MX_GPIO_Init+0x298>)
 80009f2:	f000 fe59 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P11_Pin RAMP_ENTER_Pin */
  GPIO_InitStruct.Pin = P11_Pin|RAMP_ENTER_Pin;
 80009f6:	f240 4302 	movw	r3, #1026	@ 0x402
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4823      	ldr	r0, [pc, #140]	@ (8000a98 <MX_GPIO_Init+0x298>)
 8000a0c:	f000 fe4c 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P9_Pin P8_Pin P1_Pin */
  GPIO_InitStruct.Pin = P9_Pin|P8_Pin|P1_Pin;
 8000a10:	f644 0301 	movw	r3, #18433	@ 0x4801
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a22:	4619      	mov	r1, r3
 8000a24:	4819      	ldr	r0, [pc, #100]	@ (8000a8c <MX_GPIO_Init+0x28c>)
 8000a26:	f000 fe3f 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P1_R_Pin P6_R_Pin */
  GPIO_InitStruct.Pin = P1_R_Pin|P6_R_Pin;
 8000a2a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a40:	4619      	mov	r1, r3
 8000a42:	4816      	ldr	r0, [pc, #88]	@ (8000a9c <MX_GPIO_Init+0x29c>)
 8000a44:	f000 fe30 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P3_Pin P4_Pin P12_Pin */
  GPIO_InitStruct.Pin = P3_Pin|P4_Pin|P12_Pin;
 8000a48:	f641 0301 	movw	r3, #6145	@ 0x1801
 8000a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4810      	ldr	r0, [pc, #64]	@ (8000aa0 <MX_GPIO_Init+0x2a0>)
 8000a5e:	f000 fe23 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P5_R_Pin P10_G_Pin P10_R_Pin P11_G_Pin */
  GPIO_InitStruct.Pin = P5_R_Pin|P10_G_Pin|P10_R_Pin|P11_G_Pin;
 8000a62:	f24e 0302 	movw	r3, #57346	@ 0xe002
 8000a66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4809      	ldr	r0, [pc, #36]	@ (8000aa0 <MX_GPIO_Init+0x2a0>)
 8000a7c:	f000 fe14 	bl	80016a8 <HAL_GPIO_Init>

}
 8000a80:	bf00      	nop
 8000a82:	3738      	adds	r7, #56	@ 0x38
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	44020c00 	.word	0x44020c00
 8000a8c:	42021000 	.word	0x42021000
 8000a90:	42021400 	.word	0x42021400
 8000a94:	42020000 	.word	0x42020000
 8000a98:	42021800 	.word	0x42021800
 8000a9c:	42020400 	.word	0x42020400
 8000aa0:	42020c00 	.word	0x42020c00

08000aa4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af02      	add	r7, sp, #8
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	f023 030f 	bic.w	r3, r3, #15
 8000ab4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	011b      	lsls	r3, r3, #4
 8000aba:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	f043 030c 	orr.w	r3, r3, #12
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	f043 0308 	orr.w	r3, r3, #8
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000ad0:	7bbb      	ldrb	r3, [r7, #14]
 8000ad2:	f043 030c 	orr.w	r3, r3, #12
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8000ada:	7bbb      	ldrb	r3, [r7, #14]
 8000adc:	f043 0308 	orr.w	r3, r3, #8
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ae4:	f107 0208 	add.w	r2, r7, #8
 8000ae8:	2364      	movs	r3, #100	@ 0x64
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	2304      	movs	r3, #4
 8000aee:	214e      	movs	r1, #78	@ 0x4e
 8000af0:	4803      	ldr	r0, [pc, #12]	@ (8000b00 <lcd_send_cmd+0x5c>)
 8000af2:	f001 f803 	bl	8001afc <HAL_I2C_Master_Transmit>
}
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000034 	.word	0x20000034

08000b04 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af02      	add	r7, sp, #8
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	f023 030f 	bic.w	r3, r3, #15
 8000b14:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	011b      	lsls	r3, r3, #4
 8000b1a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
 8000b1e:	f043 030d 	orr.w	r3, r3, #13
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	f043 0309 	orr.w	r3, r3, #9
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000b30:	7bbb      	ldrb	r3, [r7, #14]
 8000b32:	f043 030d 	orr.w	r3, r3, #13
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 8000b3a:	7bbb      	ldrb	r3, [r7, #14]
 8000b3c:	f043 0309 	orr.w	r3, r3, #9
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b44:	f107 0208 	add.w	r2, r7, #8
 8000b48:	2364      	movs	r3, #100	@ 0x64
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	214e      	movs	r1, #78	@ 0x4e
 8000b50:	4803      	ldr	r0, [pc, #12]	@ (8000b60 <lcd_send_data+0x5c>)
 8000b52:	f000 ffd3 	bl	8001afc <HAL_I2C_Master_Transmit>
}
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000034 	.word	0x20000034

08000b64 <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000b68:	2032      	movs	r0, #50	@ 0x32
 8000b6a:	f000 fc41 	bl	80013f0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000b6e:	2030      	movs	r0, #48	@ 0x30
 8000b70:	f7ff ff98 	bl	8000aa4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000b74:	2005      	movs	r0, #5
 8000b76:	f000 fc3b 	bl	80013f0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000b7a:	2030      	movs	r0, #48	@ 0x30
 8000b7c:	f7ff ff92 	bl	8000aa4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000b80:	2001      	movs	r0, #1
 8000b82:	f000 fc35 	bl	80013f0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000b86:	2030      	movs	r0, #48	@ 0x30
 8000b88:	f7ff ff8c 	bl	8000aa4 <lcd_send_cmd>
	HAL_Delay(10);
 8000b8c:	200a      	movs	r0, #10
 8000b8e:	f000 fc2f 	bl	80013f0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000b92:	2020      	movs	r0, #32
 8000b94:	f7ff ff86 	bl	8000aa4 <lcd_send_cmd>
	HAL_Delay(10);
 8000b98:	200a      	movs	r0, #10
 8000b9a:	f000 fc29 	bl	80013f0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000b9e:	2028      	movs	r0, #40	@ 0x28
 8000ba0:	f7ff ff80 	bl	8000aa4 <lcd_send_cmd>
	HAL_Delay(1);
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f000 fc23 	bl	80013f0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000baa:	2008      	movs	r0, #8
 8000bac:	f7ff ff7a 	bl	8000aa4 <lcd_send_cmd>
	HAL_Delay(1);
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f000 fc1d 	bl	80013f0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f7ff ff74 	bl	8000aa4 <lcd_send_cmd>
	HAL_Delay(1);
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f000 fc17 	bl	80013f0 <HAL_Delay>
	HAL_Delay(1);
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f000 fc14 	bl	80013f0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000bc8:	2006      	movs	r0, #6
 8000bca:	f7ff ff6b 	bl	8000aa4 <lcd_send_cmd>
	HAL_Delay(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f000 fc0e 	bl	80013f0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000bd4:	200c      	movs	r0, #12
 8000bd6:	f7ff ff65 	bl	8000aa4 <lcd_send_cmd>
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000be6:	e006      	b.n	8000bf6 <lcd_send_string+0x18>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	1c5a      	adds	r2, r3, #1
 8000bec:	607a      	str	r2, [r7, #4]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff87 	bl	8000b04 <lcd_send_data>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1f4      	bne.n	8000be8 <lcd_send_string+0xa>
}
 8000bfe:	bf00      	nop
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000c80 <MX_I2C1_Init+0x78>)
 8000c10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 8000c12:	4b1a      	ldr	r3, [pc, #104]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c14:	4a1b      	ldr	r2, [pc, #108]	@ (8000c84 <MX_I2C1_Init+0x7c>)
 8000c16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c18:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c1e:	4b17      	ldr	r3, [pc, #92]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c24:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c2a:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c30:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c42:	480e      	ldr	r0, [pc, #56]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c44:	f000 febe 	bl	80019c4 <HAL_I2C_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c4e:	f000 f955 	bl	8000efc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c52:	2100      	movs	r1, #0
 8000c54:	4809      	ldr	r0, [pc, #36]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c56:	f001 fa5f 	bl	8002118 <HAL_I2CEx_ConfigAnalogFilter>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c60:	f000 f94c 	bl	8000efc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c64:	2100      	movs	r1, #0
 8000c66:	4805      	ldr	r0, [pc, #20]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c68:	f001 faa1 	bl	80021ae <HAL_I2CEx_ConfigDigitalFilter>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c72:	f000 f943 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000034 	.word	0x20000034
 8000c80:	40005400 	.word	0x40005400
 8000c84:	60808cd3 	.word	0x60808cd3

08000c88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b0cc      	sub	sp, #304	@ 0x130
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000c96:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000cac:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	2100      	movs	r1, #0
 8000cba:	f008 fa06 	bl	80090ca <memset>
  if(i2cHandle->Instance==I2C1)
 8000cbe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000cc2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a33      	ldr	r2, [pc, #204]	@ (8000d98 <HAL_I2C_MspInit+0x110>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d15d      	bne.n	8000d8c <HAL_I2C_MspInit+0x104>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cd0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000cd4:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000cd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ce4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ce8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000cec:	2200      	movs	r2, #0
 8000cee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf2:	f107 0310 	add.w	r3, r7, #16
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f002 fa2c 	bl	8003154 <HAL_RCCEx_PeriphCLKConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8000d02:	f000 f8fb 	bl	8000efc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	4b25      	ldr	r3, [pc, #148]	@ (8000d9c <HAL_I2C_MspInit+0x114>)
 8000d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d0c:	4a23      	ldr	r2, [pc, #140]	@ (8000d9c <HAL_I2C_MspInit+0x114>)
 8000d0e:	f043 0302 	orr.w	r3, r3, #2
 8000d12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d16:	4b21      	ldr	r3, [pc, #132]	@ (8000d9c <HAL_I2C_MspInit+0x114>)
 8000d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d1c:	f003 0202 	and.w	r2, r3, #2
 8000d20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000d24:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000d2e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000d32:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d34:	23c0      	movs	r3, #192	@ 0xc0
 8000d36:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d3a:	2312      	movs	r3, #18
 8000d3c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d52:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000d56:	4619      	mov	r1, r3
 8000d58:	4811      	ldr	r0, [pc, #68]	@ (8000da0 <HAL_I2C_MspInit+0x118>)
 8000d5a:	f000 fca5 	bl	80016a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <HAL_I2C_MspInit+0x114>)
 8000d60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d64:	4a0d      	ldr	r2, [pc, #52]	@ (8000d9c <HAL_I2C_MspInit+0x114>)
 8000d66:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d6a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <HAL_I2C_MspInit+0x114>)
 8000d70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d74:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8000d78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000d7c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000d86:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000d8a:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40005400 	.word	0x40005400
 8000d9c:	44020c00 	.word	0x44020c00
 8000da0:	42020400 	.word	0x42020400

08000da4 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END ICACHE_Init 1 */
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db8:	f000 fad2 	bl	8001360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dbc:	f000 f81a 	bl	8000df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc0:	f7ff fd1e 	bl	8000800 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dc4:	f7ff ff20 	bl	8000c08 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000dc8:	f000 f9c0 	bl	800114c <MX_TIM3_Init>
  MX_ICACHE_Init();
 8000dcc:	f7ff ffea 	bl	8000da4 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4807      	ldr	r0, [pc, #28]	@ (8000df0 <main+0x3c>)
 8000dd4:	f004 fbe0 	bl	8005598 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000dd8:	2104      	movs	r1, #4
 8000dda:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <main+0x3c>)
 8000ddc:	f004 fbdc 	bl	8005598 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000de0:	f006 f826 	bl	8006e30 <osKernelInitialize>

  /* Call init function for freertos objects (in app_freertos.c) */
  MX_FREERTOS_Init();
 8000de4:	f7ff fa54 	bl	8000290 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000de8:	f006 f848 	bl	8006e7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <main+0x38>
 8000df0:	200000d4 	.word	0x200000d4

08000df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b09c      	sub	sp, #112	@ 0x70
 8000df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfa:	f107 0320 	add.w	r3, r7, #32
 8000dfe:	2250      	movs	r2, #80	@ 0x50
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f008 f961 	bl	80090ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e08:	f107 0308 	add.w	r3, r7, #8
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
 8000e18:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed0 <SystemClock_Config+0xdc>)
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	4a2c      	ldr	r2, [pc, #176]	@ (8000ed0 <SystemClock_Config+0xdc>)
 8000e20:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000e24:	6113      	str	r3, [r2, #16]
 8000e26:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed0 <SystemClock_Config+0xdc>)
 8000e28:	691b      	ldr	r3, [r3, #16]
 8000e2a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e32:	bf00      	nop
 8000e34:	4b26      	ldr	r3, [pc, #152]	@ (8000ed0 <SystemClock_Config+0xdc>)
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	f003 0308 	and.w	r3, r3, #8
 8000e3c:	2b08      	cmp	r3, #8
 8000e3e:	d1f9      	bne.n	8000e34 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000e40:	2310      	movs	r3, #16
 8000e42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000e44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000e4a:	2320      	movs	r3, #32
 8000e4c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8000e52:	2302      	movs	r3, #2
 8000e54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 8000e5a:	237d      	movs	r3, #125	@ 0x7d
 8000e5c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e62:	2302      	movs	r3, #2
 8000e64:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e66:	2302      	movs	r3, #2
 8000e68:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8000e6a:	2308      	movs	r3, #8
 8000e6c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e76:	f107 0320 	add.w	r3, r7, #32
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f001 f9e4 	bl	8002248 <HAL_RCC_OscConfig>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e86:	f000 f839 	bl	8000efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8a:	231f      	movs	r3, #31
 8000e8c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ea2:	f107 0308 	add.w	r3, r7, #8
 8000ea6:	2105      	movs	r1, #5
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f001 fe05 	bl	8002ab8 <HAL_RCC_ClockConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000eb4:	f000 f822 	bl	8000efc <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000eb8:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <SystemClock_Config+0xe0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000ec0:	4a04      	ldr	r2, [pc, #16]	@ (8000ed4 <SystemClock_Config+0xe0>)
 8000ec2:	f043 0320 	orr.w	r3, r3, #32
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	3770      	adds	r7, #112	@ 0x70
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	44020800 	.word	0x44020800
 8000ed4:	40022000 	.word	0x40022000

08000ed8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a04      	ldr	r2, [pc, #16]	@ (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d101      	bne.n	8000eee <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000eea:	f000 fa61 	bl	80013b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40001000 	.word	0x40001000

08000efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f00:	b672      	cpsid	i
}
 8000f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <Error_Handler+0x8>

08000f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	210f      	movs	r1, #15
 8000f10:	f06f 0001 	mvn.w	r0, #1
 8000f14:	f000 fb48 	bl	80015a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08e      	sub	sp, #56	@ 0x38
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f24:	4b33      	ldr	r3, [pc, #204]	@ (8000ff4 <HAL_InitTick+0xd8>)
 8000f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f2a:	4a32      	ldr	r2, [pc, #200]	@ (8000ff4 <HAL_InitTick+0xd8>)
 8000f2c:	f043 0310 	orr.w	r3, r3, #16
 8000f30:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000f34:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff4 <HAL_InitTick+0xd8>)
 8000f36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f3a:	f003 0310 	and.w	r3, r3, #16
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f42:	f107 020c 	add.w	r2, r7, #12
 8000f46:	f107 0310 	add.w	r3, r7, #16
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f002 f8c9 	bl	80030e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d103      	bne.n	8000f64 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f5c:	f002 f8ac 	bl	80030b8 <HAL_RCC_GetPCLK1Freq>
 8000f60:	6378      	str	r0, [r7, #52]	@ 0x34
 8000f62:	e004      	b.n	8000f6e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f64:	f002 f8a8 	bl	80030b8 <HAL_RCC_GetPCLK1Freq>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8000f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f70:	095b      	lsrs	r3, r3, #5
 8000f72:	4a21      	ldr	r2, [pc, #132]	@ (8000ff8 <HAL_InitTick+0xdc>)
 8000f74:	fba2 2303 	umull	r2, r3, r2, r3
 8000f78:	09db      	lsrs	r3, r3, #7
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ffc <HAL_InitTick+0xe0>)
 8000f80:	4a1f      	ldr	r2, [pc, #124]	@ (8001000 <HAL_InitTick+0xe4>)
 8000f82:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 8000f84:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <HAL_InitTick+0xe0>)
 8000f86:	2263      	movs	r2, #99	@ 0x63
 8000f88:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ffc <HAL_InitTick+0xe0>)
 8000f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f8e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f90:	4b1a      	ldr	r3, [pc, #104]	@ (8000ffc <HAL_InitTick+0xe0>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f96:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <HAL_InitTick+0xe0>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000f9c:	4817      	ldr	r0, [pc, #92]	@ (8000ffc <HAL_InitTick+0xe0>)
 8000f9e:	f004 f993 	bl	80052c8 <HAL_TIM_Base_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000fa8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d118      	bne.n	8000fe2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000fb0:	4812      	ldr	r0, [pc, #72]	@ (8000ffc <HAL_InitTick+0xe0>)
 8000fb2:	f004 f9e1 	bl	8005378 <HAL_TIM_Base_Start_IT>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000fbc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d10e      	bne.n	8000fe2 <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b0f      	cmp	r3, #15
 8000fc8:	d808      	bhi.n	8000fdc <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	6879      	ldr	r1, [r7, #4]
 8000fce:	2031      	movs	r0, #49	@ 0x31
 8000fd0:	f000 faea 	bl	80015a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8001004 <HAL_InitTick+0xe8>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	e002      	b.n	8000fe2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000fe2:	2031      	movs	r0, #49	@ 0x31
 8000fe4:	f000 fafa 	bl	80015dc <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8000fe8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3738      	adds	r7, #56	@ 0x38
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	44020c00 	.word	0x44020c00
 8000ff8:	0a7c5ac5 	.word	0x0a7c5ac5
 8000ffc:	20000088 	.word	0x20000088
 8001000:	40001000 	.word	0x40001000
 8001004:	20000004 	.word	0x20000004

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <NMI_Handler+0x4>

08001010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <MemManage_Handler+0x4>

08001020 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <UsageFault_Handler+0x4>

08001030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001044:	4802      	ldr	r0, [pc, #8]	@ (8001050 <TIM6_IRQHandler+0x10>)
 8001046:	f004 fc07 	bl	8005858 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000088 	.word	0x20000088

08001054 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800105a:	4b35      	ldr	r3, [pc, #212]	@ (8001130 <SystemInit+0xdc>)
 800105c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001060:	4a33      	ldr	r2, [pc, #204]	@ (8001130 <SystemInit+0xdc>)
 8001062:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001066:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800106a:	4b32      	ldr	r3, [pc, #200]	@ (8001134 <SystemInit+0xe0>)
 800106c:	2201      	movs	r2, #1
 800106e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001070:	4b30      	ldr	r3, [pc, #192]	@ (8001134 <SystemInit+0xe0>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001076:	4b2f      	ldr	r3, [pc, #188]	@ (8001134 <SystemInit+0xe0>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800107c:	4b2d      	ldr	r3, [pc, #180]	@ (8001134 <SystemInit+0xe0>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	492c      	ldr	r1, [pc, #176]	@ (8001134 <SystemInit+0xe0>)
 8001082:	4b2d      	ldr	r3, [pc, #180]	@ (8001138 <SystemInit+0xe4>)
 8001084:	4013      	ands	r3, r2
 8001086:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001088:	4b2a      	ldr	r3, [pc, #168]	@ (8001134 <SystemInit+0xe0>)
 800108a:	2200      	movs	r2, #0
 800108c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800108e:	4b29      	ldr	r3, [pc, #164]	@ (8001134 <SystemInit+0xe0>)
 8001090:	2200      	movs	r2, #0
 8001092:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001094:	4b27      	ldr	r3, [pc, #156]	@ (8001134 <SystemInit+0xe0>)
 8001096:	2200      	movs	r2, #0
 8001098:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800109a:	4b26      	ldr	r3, [pc, #152]	@ (8001134 <SystemInit+0xe0>)
 800109c:	4a27      	ldr	r2, [pc, #156]	@ (800113c <SystemInit+0xe8>)
 800109e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80010a0:	4b24      	ldr	r3, [pc, #144]	@ (8001134 <SystemInit+0xe0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80010a6:	4b23      	ldr	r3, [pc, #140]	@ (8001134 <SystemInit+0xe0>)
 80010a8:	4a24      	ldr	r2, [pc, #144]	@ (800113c <SystemInit+0xe8>)
 80010aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80010ac:	4b21      	ldr	r3, [pc, #132]	@ (8001134 <SystemInit+0xe0>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80010b2:	4b20      	ldr	r3, [pc, #128]	@ (8001134 <SystemInit+0xe0>)
 80010b4:	4a21      	ldr	r2, [pc, #132]	@ (800113c <SystemInit+0xe8>)
 80010b6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80010b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001134 <SystemInit+0xe0>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80010be:	4b1d      	ldr	r3, [pc, #116]	@ (8001134 <SystemInit+0xe0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001134 <SystemInit+0xe0>)
 80010c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <SystemInit+0xe0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010d0:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <SystemInit+0xdc>)
 80010d2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010d6:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80010d8:	4b19      	ldr	r3, [pc, #100]	@ (8001140 <SystemInit+0xec>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80010e0:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80010e8:	d003      	beq.n	80010f2 <SystemInit+0x9e>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80010f0:	d117      	bne.n	8001122 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80010f2:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <SystemInit+0xec>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d005      	beq.n	800110a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80010fe:	4b10      	ldr	r3, [pc, #64]	@ (8001140 <SystemInit+0xec>)
 8001100:	4a10      	ldr	r2, [pc, #64]	@ (8001144 <SystemInit+0xf0>)
 8001102:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001104:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <SystemInit+0xec>)
 8001106:	4a10      	ldr	r2, [pc, #64]	@ (8001148 <SystemInit+0xf4>)
 8001108:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800110a:	4b0d      	ldr	r3, [pc, #52]	@ (8001140 <SystemInit+0xec>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	4a0c      	ldr	r2, [pc, #48]	@ (8001140 <SystemInit+0xec>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001116:	4b0a      	ldr	r3, [pc, #40]	@ (8001140 <SystemInit+0xec>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4a09      	ldr	r2, [pc, #36]	@ (8001140 <SystemInit+0xec>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	61d3      	str	r3, [r2, #28]
  }
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000ed00 	.word	0xe000ed00
 8001134:	44020c00 	.word	0x44020c00
 8001138:	eae2eae3 	.word	0xeae2eae3
 800113c:	01010280 	.word	0x01010280
 8001140:	40022000 	.word	0x40022000
 8001144:	08192a3b 	.word	0x08192a3b
 8001148:	4c5d6e7f 	.word	0x4c5d6e7f

0800114c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08e      	sub	sp, #56	@ 0x38
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001152:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001160:	f107 031c 	add.w	r3, r7, #28
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800116c:	463b      	mov	r3, r7
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]
 800117a:	615a      	str	r2, [r3, #20]
 800117c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800117e:	4b33      	ldr	r3, [pc, #204]	@ (800124c <MX_TIM3_Init+0x100>)
 8001180:	4a33      	ldr	r2, [pc, #204]	@ (8001250 <MX_TIM3_Init+0x104>)
 8001182:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 8001184:	4b31      	ldr	r3, [pc, #196]	@ (800124c <MX_TIM3_Init+0x100>)
 8001186:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800118a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118c:	4b2f      	ldr	r3, [pc, #188]	@ (800124c <MX_TIM3_Init+0x100>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001192:	4b2e      	ldr	r3, [pc, #184]	@ (800124c <MX_TIM3_Init+0x100>)
 8001194:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001198:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119a:	4b2c      	ldr	r3, [pc, #176]	@ (800124c <MX_TIM3_Init+0x100>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a0:	4b2a      	ldr	r3, [pc, #168]	@ (800124c <MX_TIM3_Init+0x100>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011a6:	4829      	ldr	r0, [pc, #164]	@ (800124c <MX_TIM3_Init+0x100>)
 80011a8:	f004 f88e 	bl	80052c8 <HAL_TIM_Base_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80011b2:	f7ff fea3 	bl	8000efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011c0:	4619      	mov	r1, r3
 80011c2:	4822      	ldr	r0, [pc, #136]	@ (800124c <MX_TIM3_Init+0x100>)
 80011c4:	f004 fdac 	bl	8005d20 <HAL_TIM_ConfigClockSource>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80011ce:	f7ff fe95 	bl	8000efc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011d2:	481e      	ldr	r0, [pc, #120]	@ (800124c <MX_TIM3_Init+0x100>)
 80011d4:	f004 f97e 	bl	80054d4 <HAL_TIM_PWM_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80011de:	f7ff fe8d 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	4619      	mov	r1, r3
 80011f0:	4816      	ldr	r0, [pc, #88]	@ (800124c <MX_TIM3_Init+0x100>)
 80011f2:	f005 fc9d 	bl	8006b30 <HAL_TIMEx_MasterConfigSynchronization>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80011fc:	f7ff fe7e 	bl	8000efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001200:	2360      	movs	r3, #96	@ 0x60
 8001202:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	2200      	movs	r2, #0
 8001214:	4619      	mov	r1, r3
 8001216:	480d      	ldr	r0, [pc, #52]	@ (800124c <MX_TIM3_Init+0x100>)
 8001218:	f004 fc6e 	bl	8005af8 <HAL_TIM_PWM_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001222:	f7ff fe6b 	bl	8000efc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001226:	463b      	mov	r3, r7
 8001228:	2204      	movs	r2, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4807      	ldr	r0, [pc, #28]	@ (800124c <MX_TIM3_Init+0x100>)
 800122e:	f004 fc63 	bl	8005af8 <HAL_TIM_PWM_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001238:	f7ff fe60 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800123c:	4803      	ldr	r0, [pc, #12]	@ (800124c <MX_TIM3_Init+0x100>)
 800123e:	f000 f82b 	bl	8001298 <HAL_TIM_MspPostInit>

}
 8001242:	bf00      	nop
 8001244:	3738      	adds	r7, #56	@ 0x38
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	200000d4 	.word	0x200000d4
 8001250:	40000400 	.word	0x40000400

08001254 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0b      	ldr	r2, [pc, #44]	@ (8001290 <HAL_TIM_Base_MspInit+0x3c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d10e      	bne.n	8001284 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001266:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <HAL_TIM_Base_MspInit+0x40>)
 8001268:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800126c:	4a09      	ldr	r2, [pc, #36]	@ (8001294 <HAL_TIM_Base_MspInit+0x40>)
 800126e:	f043 0302 	orr.w	r3, r3, #2
 8001272:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001276:	4b07      	ldr	r3, [pc, #28]	@ (8001294 <HAL_TIM_Base_MspInit+0x40>)
 8001278:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	40000400 	.word	0x40000400
 8001294:	44020c00 	.word	0x44020c00

08001298 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a12      	ldr	r2, [pc, #72]	@ (8001300 <HAL_TIM_MspPostInit+0x68>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d11e      	bne.n	80012f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ba:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <HAL_TIM_MspPostInit+0x6c>)
 80012bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012c0:	4a10      	ldr	r2, [pc, #64]	@ (8001304 <HAL_TIM_MspPostInit+0x6c>)
 80012c2:	f043 0304 	orr.w	r3, r3, #4
 80012c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <HAL_TIM_MspPostInit+0x6c>)
 80012cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = SG_ENTER_Pin|SG_EXIT_Pin;
 80012d8:	23c0      	movs	r3, #192	@ 0xc0
 80012da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012e8:	2302      	movs	r3, #2
 80012ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	4619      	mov	r1, r3
 80012f2:	4805      	ldr	r0, [pc, #20]	@ (8001308 <HAL_TIM_MspPostInit+0x70>)
 80012f4:	f000 f9d8 	bl	80016a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012f8:	bf00      	nop
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40000400 	.word	0x40000400
 8001304:	44020c00 	.word	0x44020c00
 8001308:	42020800 	.word	0x42020800

0800130c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800130c:	480d      	ldr	r0, [pc, #52]	@ (8001344 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800130e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001310:	f7ff fea0 	bl	8001054 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001314:	480c      	ldr	r0, [pc, #48]	@ (8001348 <LoopForever+0x6>)
  ldr r1, =_edata
 8001316:	490d      	ldr	r1, [pc, #52]	@ (800134c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001318:	4a0d      	ldr	r2, [pc, #52]	@ (8001350 <LoopForever+0xe>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800131c:	e002      	b.n	8001324 <LoopCopyDataInit>

0800131e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001322:	3304      	adds	r3, #4

08001324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001328:	d3f9      	bcc.n	800131e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132a:	4a0a      	ldr	r2, [pc, #40]	@ (8001354 <LoopForever+0x12>)
  ldr r4, =_ebss
 800132c:	4c0a      	ldr	r4, [pc, #40]	@ (8001358 <LoopForever+0x16>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001330:	e001      	b.n	8001336 <LoopFillZerobss>

08001332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001334:	3204      	adds	r2, #4

08001336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001338:	d3fb      	bcc.n	8001332 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800133a:	f007 fecf 	bl	80090dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800133e:	f7ff fd39 	bl	8000db4 <main>

08001342 <LoopForever>:

LoopForever:
    b LoopForever
 8001342:	e7fe      	b.n	8001342 <LoopForever>
  ldr   r0, =_estack
 8001344:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800134c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001350:	08009214 	.word	0x08009214
  ldr r2, =_sbss
 8001354:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001358:	20002c5c 	.word	0x20002c5c

0800135c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800135c:	e7fe      	b.n	800135c <ADC1_IRQHandler>
	...

08001360 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001364:	2003      	movs	r0, #3
 8001366:	f000 f914 	bl	8001592 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800136a:	f001 fd5d 	bl	8002e28 <HAL_RCC_GetSysClockFreq>
 800136e:	4602      	mov	r2, r0
 8001370:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <HAL_Init+0x44>)
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	f003 030f 	and.w	r3, r3, #15
 8001378:	490b      	ldr	r1, [pc, #44]	@ (80013a8 <HAL_Init+0x48>)
 800137a:	5ccb      	ldrb	r3, [r1, r3]
 800137c:	fa22 f303 	lsr.w	r3, r2, r3
 8001380:	4a0a      	ldr	r2, [pc, #40]	@ (80013ac <HAL_Init+0x4c>)
 8001382:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001384:	2004      	movs	r0, #4
 8001386:	f000 f937 	bl	80015f8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800138a:	200f      	movs	r0, #15
 800138c:	f7ff fdc6 	bl	8000f1c <HAL_InitTick>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e002      	b.n	80013a0 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800139a:	f7ff fdb5 	bl	8000f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	44020c00 	.word	0x44020c00
 80013a8:	080091f0 	.word	0x080091f0
 80013ac:	20000000 	.word	0x20000000

080013b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <HAL_IncTick+0x20>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <HAL_IncTick+0x24>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	4a04      	ldr	r2, [pc, #16]	@ (80013d4 <HAL_IncTick+0x24>)
 80013c2:	6013      	str	r3, [r2, #0]
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000008 	.word	0x20000008
 80013d4:	20000120 	.word	0x20000120

080013d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return uwTick;
 80013dc:	4b03      	ldr	r3, [pc, #12]	@ (80013ec <HAL_GetTick+0x14>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000120 	.word	0x20000120

080013f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f8:	f7ff ffee 	bl	80013d8 <HAL_GetTick>
 80013fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001408:	d005      	beq.n	8001416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800140a:	4b0a      	ldr	r3, [pc, #40]	@ (8001434 <HAL_Delay+0x44>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4413      	add	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001416:	bf00      	nop
 8001418:	f7ff ffde 	bl	80013d8 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	429a      	cmp	r2, r3
 8001426:	d8f7      	bhi.n	8001418 <HAL_Delay+0x28>
  {
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000008 	.word	0x20000008

08001438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001448:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001454:	4013      	ands	r3, r2
 8001456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001460:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146a:	4a04      	ldr	r2, [pc, #16]	@ (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	60d3      	str	r3, [r2, #12]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001484:	4b04      	ldr	r3, [pc, #16]	@ (8001498 <__NVIC_GetPriorityGrouping+0x18>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	f003 0307 	and.w	r3, r3, #7
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	db0b      	blt.n	80014c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	f003 021f 	and.w	r2, r3, #31
 80014b4:	4907      	ldr	r1, [pc, #28]	@ (80014d4 <__NVIC_EnableIRQ+0x38>)
 80014b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ba:	095b      	lsrs	r3, r3, #5
 80014bc:	2001      	movs	r0, #1
 80014be:	fa00 f202 	lsl.w	r2, r0, r2
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000e100 	.word	0xe000e100

080014d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	db0a      	blt.n	8001502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	490c      	ldr	r1, [pc, #48]	@ (8001524 <__NVIC_SetPriority+0x4c>)
 80014f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f6:	0112      	lsls	r2, r2, #4
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	440b      	add	r3, r1
 80014fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001500:	e00a      	b.n	8001518 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4908      	ldr	r1, [pc, #32]	@ (8001528 <__NVIC_SetPriority+0x50>)
 8001508:	88fb      	ldrh	r3, [r7, #6]
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	3b04      	subs	r3, #4
 8001510:	0112      	lsls	r2, r2, #4
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	440b      	add	r3, r1
 8001516:	761a      	strb	r2, [r3, #24]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000e100 	.word	0xe000e100
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	@ 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f1c3 0307 	rsb	r3, r3, #7
 8001546:	2b04      	cmp	r3, #4
 8001548:	bf28      	it	cs
 800154a:	2304      	movcs	r3, #4
 800154c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3304      	adds	r3, #4
 8001552:	2b06      	cmp	r3, #6
 8001554:	d902      	bls.n	800155c <NVIC_EncodePriority+0x30>
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3b03      	subs	r3, #3
 800155a:	e000      	b.n	800155e <NVIC_EncodePriority+0x32>
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	f04f 32ff 	mov.w	r2, #4294967295
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43da      	mvns	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	401a      	ands	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001574:	f04f 31ff 	mov.w	r1, #4294967295
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	43d9      	mvns	r1, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	4313      	orrs	r3, r2
         );
}
 8001586:	4618      	mov	r0, r3
 8001588:	3724      	adds	r7, #36	@ 0x24
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff ff4c 	bl	8001438 <__NVIC_SetPriorityGrouping>
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
 80015b4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015b6:	f7ff ff63 	bl	8001480 <__NVIC_GetPriorityGrouping>
 80015ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	68b9      	ldr	r1, [r7, #8]
 80015c0:	6978      	ldr	r0, [r7, #20]
 80015c2:	f7ff ffb3 	bl	800152c <NVIC_EncodePriority>
 80015c6:	4602      	mov	r2, r0
 80015c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015cc:	4611      	mov	r1, r2
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff ff82 	bl	80014d8 <__NVIC_SetPriority>
}
 80015d4:	bf00      	nop
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ff56 	bl	800149c <__NVIC_EnableIRQ>
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b04      	cmp	r3, #4
 8001604:	d844      	bhi.n	8001690 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001606:	a201      	add	r2, pc, #4	@ (adr r2, 800160c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160c:	0800162f 	.word	0x0800162f
 8001610:	0800164d 	.word	0x0800164d
 8001614:	0800166f 	.word	0x0800166f
 8001618:	08001691 	.word	0x08001691
 800161c:	08001621 	.word	0x08001621
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001620:	4b1f      	ldr	r3, [pc, #124]	@ (80016a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a1e      	ldr	r2, [pc, #120]	@ (80016a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	6013      	str	r3, [r2, #0]
      break;
 800162c:	e031      	b.n	8001692 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800162e:	4b1c      	ldr	r3, [pc, #112]	@ (80016a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a1b      	ldr	r2, [pc, #108]	@ (80016a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001634:	f023 0304 	bic.w	r3, r3, #4
 8001638:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800163a:	4b1a      	ldr	r3, [pc, #104]	@ (80016a4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800163c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001640:	4a18      	ldr	r2, [pc, #96]	@ (80016a4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001642:	f023 030c 	bic.w	r3, r3, #12
 8001646:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800164a:	e022      	b.n	8001692 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800164c:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a13      	ldr	r2, [pc, #76]	@ (80016a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001652:	f023 0304 	bic.w	r3, r3, #4
 8001656:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001658:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800165a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800165e:	f023 030c 	bic.w	r3, r3, #12
 8001662:	4a10      	ldr	r2, [pc, #64]	@ (80016a4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001664:	f043 0304 	orr.w	r3, r3, #4
 8001668:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800166c:	e011      	b.n	8001692 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800166e:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a0b      	ldr	r2, [pc, #44]	@ (80016a0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001674:	f023 0304 	bic.w	r3, r3, #4
 8001678:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800167a:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800167c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001680:	f023 030c 	bic.w	r3, r3, #12
 8001684:	4a07      	ldr	r2, [pc, #28]	@ (80016a4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001686:	f043 0308 	orr.w	r3, r3, #8
 800168a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800168e:	e000      	b.n	8001692 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001690:	bf00      	nop
  }
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000e010 	.word	0xe000e010
 80016a4:	44020c00 	.word	0x44020c00

080016a8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80016b6:	e142      	b.n	800193e <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	2101      	movs	r1, #1
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	fa01 f303 	lsl.w	r3, r1, r3
 80016c4:	4013      	ands	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 8134 	beq.w	8001938 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_Init+0x38>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b12      	cmp	r3, #18
 80016de:	d125      	bne.n	800172c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	08da      	lsrs	r2, r3, #3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3208      	adds	r2, #8
 80016e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ec:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	220f      	movs	r2, #15
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	4013      	ands	r3, r2
 8001702:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	f003 020f 	and.w	r2, r3, #15
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	4313      	orrs	r3, r2
 800171c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	08da      	lsrs	r2, r3, #3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3208      	adds	r2, #8
 8001726:	6979      	ldr	r1, [r7, #20]
 8001728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	2203      	movs	r2, #3
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	4013      	ands	r3, r2
 8001742:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0203 	and.w	r2, r3, #3
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	4313      	orrs	r3, r2
 8001758:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d00b      	beq.n	8001780 <HAL_GPIO_Init+0xd8>
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d007      	beq.n	8001780 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001774:	2b11      	cmp	r3, #17
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b12      	cmp	r3, #18
 800177e:	d130      	bne.n	80017e2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	2203      	movs	r2, #3
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	4013      	ands	r3, r2
 8001796:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017b6:	2201      	movs	r2, #1
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	4013      	ands	r3, r2
 80017c4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	091b      	lsrs	r3, r3, #4
 80017cc:	f003 0201 	and.w	r2, r3, #1
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	4313      	orrs	r3, r2
 80017da:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d109      	bne.n	8001802 <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d11b      	bne.n	8001832 <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d017      	beq.n	8001832 <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	4013      	ands	r3, r2
 8001818:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	4313      	orrs	r3, r2
 800182a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d07c      	beq.n	8001938 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800183e:	4a47      	ldr	r2, [pc, #284]	@ (800195c <HAL_GPIO_Init+0x2b4>)
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	3318      	adds	r3, #24
 8001846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	220f      	movs	r2, #15
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	4013      	ands	r3, r2
 8001860:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	0a9a      	lsrs	r2, r3, #10
 8001866:	4b3e      	ldr	r3, [pc, #248]	@ (8001960 <HAL_GPIO_Init+0x2b8>)
 8001868:	4013      	ands	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	f002 0203 	and.w	r2, r2, #3
 8001870:	00d2      	lsls	r2, r2, #3
 8001872:	4093      	lsls	r3, r2
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	4313      	orrs	r3, r2
 8001878:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800187a:	4938      	ldr	r1, [pc, #224]	@ (800195c <HAL_GPIO_Init+0x2b4>)
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	089b      	lsrs	r3, r3, #2
 8001880:	3318      	adds	r3, #24
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001888:	4b34      	ldr	r3, [pc, #208]	@ (800195c <HAL_GPIO_Init+0x2b4>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	43db      	mvns	r3, r3
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	4013      	ands	r3, r2
 8001896:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80018ac:	4a2b      	ldr	r2, [pc, #172]	@ (800195c <HAL_GPIO_Init+0x2b4>)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80018b2:	4b2a      	ldr	r3, [pc, #168]	@ (800195c <HAL_GPIO_Init+0x2b4>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	4013      	ands	r3, r2
 80018c0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80018d6:	4a21      	ldr	r2, [pc, #132]	@ (800195c <HAL_GPIO_Init+0x2b4>)
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80018dc:	4b1f      	ldr	r3, [pc, #124]	@ (800195c <HAL_GPIO_Init+0x2b4>)
 80018de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018e2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	43db      	mvns	r3, r3
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	4013      	ands	r3, r2
 80018ec:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4313      	orrs	r3, r2
 8001900:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001902:	4a16      	ldr	r2, [pc, #88]	@ (800195c <HAL_GPIO_Init+0x2b4>)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800190a:	4b14      	ldr	r3, [pc, #80]	@ (800195c <HAL_GPIO_Init+0x2b4>)
 800190c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001910:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	43db      	mvns	r3, r3
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	4013      	ands	r3, r2
 800191a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4313      	orrs	r3, r2
 800192e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001930:	4a0a      	ldr	r2, [pc, #40]	@ (800195c <HAL_GPIO_Init+0x2b4>)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	3301      	adds	r3, #1
 800193c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	fa22 f303 	lsr.w	r3, r2, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	f47f aeb5 	bne.w	80016b8 <HAL_GPIO_Init+0x10>
  }
}
 800194e:	bf00      	nop
 8001950:	bf00      	nop
 8001952:	371c      	adds	r7, #28
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	44022000 	.word	0x44022000
 8001960:	002f7f7f 	.word	0x002f7f7f

08001964 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691a      	ldr	r2, [r3, #16]
 8001974:	887b      	ldrh	r3, [r7, #2]
 8001976:	4013      	ands	r3, r2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d002      	beq.n	8001982 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800197c:	2301      	movs	r3, #1
 800197e:	73fb      	strb	r3, [r7, #15]
 8001980:	e001      	b.n	8001986 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001986:	7bfb      	ldrb	r3, [r7, #15]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	807b      	strh	r3, [r7, #2]
 80019a0:	4613      	mov	r3, r2
 80019a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019a4:	787b      	ldrb	r3, [r7, #1]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019aa:	887a      	ldrh	r2, [r7, #2]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019b0:	e002      	b.n	80019b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019b2:	887a      	ldrh	r2, [r7, #2]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e08d      	b.n	8001af2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d106      	bne.n	80019f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff f94c 	bl	8000c88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2224      	movs	r2, #36	@ 0x24
 80019f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0201 	bic.w	r2, r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d107      	bne.n	8001a3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	e006      	b.n	8001a4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001a4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d108      	bne.n	8001a66 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	e007      	b.n	8001a76 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691a      	ldr	r2, [r3, #16]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69d9      	ldr	r1, [r3, #28]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1a      	ldr	r2, [r3, #32]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0201 	orr.w	r2, r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2220      	movs	r2, #32
 8001ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af02      	add	r7, sp, #8
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	607a      	str	r2, [r7, #4]
 8001b06:	461a      	mov	r2, r3
 8001b08:	460b      	mov	r3, r1
 8001b0a:	817b      	strh	r3, [r7, #10]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b20      	cmp	r3, #32
 8001b1a:	f040 80da 	bne.w	8001cd2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d101      	bne.n	8001b2c <HAL_I2C_Master_Transmit+0x30>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e0d3      	b.n	8001cd4 <HAL_I2C_Master_Transmit+0x1d8>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b34:	f7ff fc50 	bl	80013d8 <HAL_GetTick>
 8001b38:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	2319      	movs	r3, #25
 8001b40:	2201      	movs	r2, #1
 8001b42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 f8f0 	bl	8001d2c <I2C_WaitOnFlagUntilTimeout>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e0be      	b.n	8001cd4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2221      	movs	r2, #33	@ 0x21
 8001b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2210      	movs	r2, #16
 8001b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	893a      	ldrh	r2, [r7, #8]
 8001b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	2bff      	cmp	r3, #255	@ 0xff
 8001b86:	d90e      	bls.n	8001ba6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	22ff      	movs	r2, #255	@ 0xff
 8001b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	8979      	ldrh	r1, [r7, #10]
 8001b96:	4b51      	ldr	r3, [pc, #324]	@ (8001cdc <HAL_I2C_Master_Transmit+0x1e0>)
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 fa88 	bl	80020b4 <I2C_TransferConfig>
 8001ba4:	e06c      	b.n	8001c80 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	8979      	ldrh	r1, [r7, #10]
 8001bb8:	4b48      	ldr	r3, [pc, #288]	@ (8001cdc <HAL_I2C_Master_Transmit+0x1e0>)
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 fa77 	bl	80020b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001bc6:	e05b      	b.n	8001c80 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	6a39      	ldr	r1, [r7, #32]
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f000 f906 	bl	8001dde <I2C_WaitOnTXISFlagUntilTimeout>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e07b      	b.n	8001cd4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be0:	781a      	ldrb	r2, [r3, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c04:	3b01      	subs	r3, #1
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d034      	beq.n	8001c80 <HAL_I2C_Master_Transmit+0x184>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d130      	bne.n	8001c80 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	2200      	movs	r2, #0
 8001c26:	2180      	movs	r1, #128	@ 0x80
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 f87f 	bl	8001d2c <I2C_WaitOnFlagUntilTimeout>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e04d      	b.n	8001cd4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	2bff      	cmp	r3, #255	@ 0xff
 8001c40:	d90e      	bls.n	8001c60 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	22ff      	movs	r2, #255	@ 0xff
 8001c46:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	8979      	ldrh	r1, [r7, #10]
 8001c50:	2300      	movs	r3, #0
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f000 fa2b 	bl	80020b4 <I2C_TransferConfig>
 8001c5e:	e00f      	b.n	8001c80 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	8979      	ldrh	r1, [r7, #10]
 8001c72:	2300      	movs	r3, #0
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 fa1a 	bl	80020b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d19e      	bne.n	8001bc8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	6a39      	ldr	r1, [r7, #32]
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 f8ec 	bl	8001e6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e01a      	b.n	8001cd4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6859      	ldr	r1, [r3, #4]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce0 <HAL_I2C_Master_Transmit+0x1e4>)
 8001cb2:	400b      	ands	r3, r1
 8001cb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2220      	movs	r2, #32
 8001cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e000      	b.n	8001cd4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001cd2:	2302      	movs	r3, #2
  }
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	80002000 	.word	0x80002000
 8001ce0:	fe00e800 	.word	0xfe00e800

08001ce4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d103      	bne.n	8001d02 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d007      	beq.n	8001d20 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	699a      	ldr	r2, [r3, #24]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	619a      	str	r2, [r3, #24]
  }
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d3c:	e03b      	b.n	8001db6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	6839      	ldr	r1, [r7, #0]
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 f8d6 	bl	8001ef4 <I2C_IsErrorOccurred>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e041      	b.n	8001dd6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d02d      	beq.n	8001db6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d5a:	f7ff fb3d 	bl	80013d8 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d302      	bcc.n	8001d70 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d122      	bne.n	8001db6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	699a      	ldr	r2, [r3, #24]
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	bf0c      	ite	eq
 8001d80:	2301      	moveq	r3, #1
 8001d82:	2300      	movne	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d113      	bne.n	8001db6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d92:	f043 0220 	orr.w	r2, r3, #32
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e00f      	b.n	8001dd6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	699a      	ldr	r2, [r3, #24]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	bf0c      	ite	eq
 8001dc6:	2301      	moveq	r3, #1
 8001dc8:	2300      	movne	r3, #0
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	461a      	mov	r2, r3
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d0b4      	beq.n	8001d3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b084      	sub	sp, #16
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dea:	e033      	b.n	8001e54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	68b9      	ldr	r1, [r7, #8]
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 f87f 	bl	8001ef4 <I2C_IsErrorOccurred>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e031      	b.n	8001e64 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e06:	d025      	beq.n	8001e54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e08:	f7ff fae6 	bl	80013d8 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d302      	bcc.n	8001e1e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d11a      	bne.n	8001e54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d013      	beq.n	8001e54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e30:	f043 0220 	orr.w	r2, r3, #32
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e007      	b.n	8001e64 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d1c4      	bne.n	8001dec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e78:	e02f      	b.n	8001eda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 f838 	bl	8001ef4 <I2C_IsErrorOccurred>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e02d      	b.n	8001eea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e8e:	f7ff faa3 	bl	80013d8 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d302      	bcc.n	8001ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d11a      	bne.n	8001eda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	2b20      	cmp	r3, #32
 8001eb0:	d013      	beq.n	8001eda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb6:	f043 0220 	orr.w	r2, r3, #32
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e007      	b.n	8001eea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f003 0320 	and.w	r3, r3, #32
 8001ee4:	2b20      	cmp	r3, #32
 8001ee6:	d1c8      	bne.n	8001e7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	@ 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d068      	beq.n	8001ff2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2210      	movs	r2, #16
 8001f26:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f28:	e049      	b.n	8001fbe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f30:	d045      	beq.n	8001fbe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f32:	f7ff fa51 	bl	80013d8 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d302      	bcc.n	8001f48 <I2C_IsErrorOccurred+0x54>
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d13a      	bne.n	8001fbe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f5a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f6a:	d121      	bne.n	8001fb0 <I2C_IsErrorOccurred+0xbc>
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f72:	d01d      	beq.n	8001fb0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001f74:	7cfb      	ldrb	r3, [r7, #19]
 8001f76:	2b20      	cmp	r3, #32
 8001f78:	d01a      	beq.n	8001fb0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f88:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f8a:	f7ff fa25 	bl	80013d8 <HAL_GetTick>
 8001f8e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f90:	e00e      	b.n	8001fb0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f92:	f7ff fa21 	bl	80013d8 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b19      	cmp	r3, #25
 8001f9e:	d907      	bls.n	8001fb0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	f043 0320 	orr.w	r3, r3, #32
 8001fa6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001fae:	e006      	b.n	8001fbe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	f003 0320 	and.w	r3, r3, #32
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	d1e9      	bne.n	8001f92 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0320 	and.w	r3, r3, #32
 8001fc8:	2b20      	cmp	r3, #32
 8001fca:	d003      	beq.n	8001fd4 <I2C_IsErrorOccurred+0xe0>
 8001fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0aa      	beq.n	8001f2a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d103      	bne.n	8001fe4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	f043 0304 	orr.w	r3, r3, #4
 8001fea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00b      	beq.n	800201c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002014:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00b      	beq.n	800203e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	f043 0308 	orr.w	r3, r3, #8
 800202c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002036:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00b      	beq.n	8002060 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	f043 0302 	orr.w	r3, r3, #2
 800204e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002058:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002060:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01c      	beq.n	80020a2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f7ff fe3b 	bl	8001ce4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6859      	ldr	r1, [r3, #4]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b0d      	ldr	r3, [pc, #52]	@ (80020b0 <I2C_IsErrorOccurred+0x1bc>)
 800207a:	400b      	ands	r3, r1
 800207c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	431a      	orrs	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2220      	movs	r2, #32
 800208e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80020a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3728      	adds	r7, #40	@ 0x28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	fe00e800 	.word	0xfe00e800

080020b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	460b      	mov	r3, r1
 80020c0:	817b      	strh	r3, [r7, #10]
 80020c2:	4613      	mov	r3, r2
 80020c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020c6:	897b      	ldrh	r3, [r7, #10]
 80020c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020cc:	7a7b      	ldrb	r3, [r7, #9]
 80020ce:	041b      	lsls	r3, r3, #16
 80020d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020d4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	4313      	orrs	r3, r2
 80020de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020e2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	6a3b      	ldr	r3, [r7, #32]
 80020ec:	0d5b      	lsrs	r3, r3, #21
 80020ee:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80020f2:	4b08      	ldr	r3, [pc, #32]	@ (8002114 <I2C_TransferConfig+0x60>)
 80020f4:	430b      	orrs	r3, r1
 80020f6:	43db      	mvns	r3, r3
 80020f8:	ea02 0103 	and.w	r1, r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	430a      	orrs	r2, r1
 8002104:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002106:	bf00      	nop
 8002108:	371c      	adds	r7, #28
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	03ff63ff 	.word	0x03ff63ff

08002118 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b20      	cmp	r3, #32
 800212c:	d138      	bne.n	80021a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002138:	2302      	movs	r3, #2
 800213a:	e032      	b.n	80021a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2224      	movs	r2, #36	@ 0x24
 8002148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0201 	bic.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800216a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6819      	ldr	r1, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0201 	orr.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2220      	movs	r2, #32
 8002190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	e000      	b.n	80021a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021a0:	2302      	movs	r3, #2
  }
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b085      	sub	sp, #20
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b20      	cmp	r3, #32
 80021c2:	d139      	bne.n	8002238 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e033      	b.n	800223a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2224      	movs	r2, #36	@ 0x24
 80021de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0201 	bic.w	r2, r2, #1
 80021f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002200:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4313      	orrs	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	e000      	b.n	800223a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002238:	2302      	movs	r3, #2
  }
}
 800223a:	4618      	mov	r0, r3
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d102      	bne.n	800225c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	f000 bc28 	b.w	8002aac <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800225c:	4b94      	ldr	r3, [pc, #592]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	f003 0318 	and.w	r3, r3, #24
 8002264:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002266:	4b92      	ldr	r3, [pc, #584]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 8002268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0310 	and.w	r3, r3, #16
 8002278:	2b00      	cmp	r3, #0
 800227a:	d05b      	beq.n	8002334 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	2b08      	cmp	r3, #8
 8002280:	d005      	beq.n	800228e <HAL_RCC_OscConfig+0x46>
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	2b18      	cmp	r3, #24
 8002286:	d114      	bne.n	80022b2 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d111      	bne.n	80022b2 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d102      	bne.n	800229c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	f000 bc08 	b.w	8002aac <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800229c:	4b84      	ldr	r3, [pc, #528]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	041b      	lsls	r3, r3, #16
 80022aa:	4981      	ldr	r1, [pc, #516]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80022b0:	e040      	b.n	8002334 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d023      	beq.n	8002302 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80022ba:	4b7d      	ldr	r3, [pc, #500]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a7c      	ldr	r2, [pc, #496]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 80022c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c6:	f7ff f887 	bl	80013d8 <HAL_GetTick>
 80022ca:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80022ce:	f7ff f883 	bl	80013d8 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e3e5      	b.n	8002aac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80022e0:	4b73      	ldr	r3, [pc, #460]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80022ec:	4b70      	ldr	r3, [pc, #448]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	041b      	lsls	r3, r3, #16
 80022fa:	496d      	ldr	r1, [pc, #436]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	618b      	str	r3, [r1, #24]
 8002300:	e018      	b.n	8002334 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002302:	4b6b      	ldr	r3, [pc, #428]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a6a      	ldr	r2, [pc, #424]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 8002308:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800230c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230e:	f7ff f863 	bl	80013d8 <HAL_GetTick>
 8002312:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002316:	f7ff f85f 	bl	80013d8 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e3c1      	b.n	8002aac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002328:	4b61      	ldr	r3, [pc, #388]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f0      	bne.n	8002316 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80a0 	beq.w	8002482 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	2b10      	cmp	r3, #16
 8002346:	d005      	beq.n	8002354 <HAL_RCC_OscConfig+0x10c>
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	2b18      	cmp	r3, #24
 800234c:	d109      	bne.n	8002362 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	2b03      	cmp	r3, #3
 8002352:	d106      	bne.n	8002362 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	f040 8092 	bne.w	8002482 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e3a4      	b.n	8002aac <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800236a:	d106      	bne.n	800237a <HAL_RCC_OscConfig+0x132>
 800236c:	4b50      	ldr	r3, [pc, #320]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a4f      	ldr	r2, [pc, #316]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 8002372:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	e058      	b.n	800242c <HAL_RCC_OscConfig+0x1e4>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d112      	bne.n	80023a8 <HAL_RCC_OscConfig+0x160>
 8002382:	4b4b      	ldr	r3, [pc, #300]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a4a      	ldr	r2, [pc, #296]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 8002388:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	4b48      	ldr	r3, [pc, #288]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a47      	ldr	r2, [pc, #284]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 8002394:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	4b45      	ldr	r3, [pc, #276]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a44      	ldr	r2, [pc, #272]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 80023a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	e041      	b.n	800242c <HAL_RCC_OscConfig+0x1e4>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023b0:	d112      	bne.n	80023d8 <HAL_RCC_OscConfig+0x190>
 80023b2:	4b3f      	ldr	r3, [pc, #252]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a3e      	ldr	r2, [pc, #248]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 80023b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	4b3c      	ldr	r3, [pc, #240]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a3b      	ldr	r2, [pc, #236]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 80023c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	4b39      	ldr	r3, [pc, #228]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a38      	ldr	r2, [pc, #224]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 80023d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	e029      	b.n	800242c <HAL_RCC_OscConfig+0x1e4>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80023e0:	d112      	bne.n	8002408 <HAL_RCC_OscConfig+0x1c0>
 80023e2:	4b33      	ldr	r3, [pc, #204]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a32      	ldr	r2, [pc, #200]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 80023e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	4b30      	ldr	r3, [pc, #192]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a2f      	ldr	r2, [pc, #188]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 80023f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	4b2d      	ldr	r3, [pc, #180]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a2c      	ldr	r2, [pc, #176]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 8002400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e011      	b.n	800242c <HAL_RCC_OscConfig+0x1e4>
 8002408:	4b29      	ldr	r3, [pc, #164]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a28      	ldr	r2, [pc, #160]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 800240e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	4b26      	ldr	r3, [pc, #152]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a25      	ldr	r2, [pc, #148]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 800241a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	4b23      	ldr	r3, [pc, #140]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a22      	ldr	r2, [pc, #136]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 8002426:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800242a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d013      	beq.n	800245c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7fe ffd0 	bl	80013d8 <HAL_GetTick>
 8002438:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800243c:	f7fe ffcc 	bl	80013d8 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b64      	cmp	r3, #100	@ 0x64
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e32e      	b.n	8002aac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800244e:	4b18      	ldr	r3, [pc, #96]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f0      	beq.n	800243c <HAL_RCC_OscConfig+0x1f4>
 800245a:	e012      	b.n	8002482 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7fe ffbc 	bl	80013d8 <HAL_GetTick>
 8002460:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002464:	f7fe ffb8 	bl	80013d8 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b64      	cmp	r3, #100	@ 0x64
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e31a      	b.n	8002aac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002476:	4b0e      	ldr	r3, [pc, #56]	@ (80024b0 <HAL_RCC_OscConfig+0x268>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 809a 	beq.w	80025c4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d005      	beq.n	80024a2 <HAL_RCC_OscConfig+0x25a>
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	2b18      	cmp	r3, #24
 800249a:	d149      	bne.n	8002530 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d146      	bne.n	8002530 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d104      	bne.n	80024b4 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e2fe      	b.n	8002aac <HAL_RCC_OscConfig+0x864>
 80024ae:	bf00      	nop
 80024b0:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d11c      	bne.n	80024f4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80024ba:	4b9a      	ldr	r3, [pc, #616]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0218 	and.w	r2, r3, #24
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d014      	beq.n	80024f4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80024ca:	4b96      	ldr	r3, [pc, #600]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 0218 	bic.w	r2, r3, #24
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	4993      	ldr	r1, [pc, #588]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80024dc:	f000 fdd0 	bl	8003080 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024e0:	4b91      	ldr	r3, [pc, #580]	@ (8002728 <HAL_RCC_OscConfig+0x4e0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe fd19 	bl	8000f1c <HAL_InitTick>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e2db      	b.n	8002aac <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f4:	f7fe ff70 	bl	80013d8 <HAL_GetTick>
 80024f8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80024fc:	f7fe ff6c 	bl	80013d8 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e2ce      	b.n	8002aac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800250e:	4b85      	ldr	r3, [pc, #532]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800251a:	4b82      	ldr	r3, [pc, #520]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	041b      	lsls	r3, r3, #16
 8002528:	497e      	ldr	r1, [pc, #504]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 800252a:	4313      	orrs	r3, r2
 800252c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800252e:	e049      	b.n	80025c4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d02c      	beq.n	8002592 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002538:	4b7a      	ldr	r3, [pc, #488]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f023 0218 	bic.w	r2, r3, #24
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	4977      	ldr	r1, [pc, #476]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 8002546:	4313      	orrs	r3, r2
 8002548:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800254a:	4b76      	ldr	r3, [pc, #472]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a75      	ldr	r2, [pc, #468]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002556:	f7fe ff3f 	bl	80013d8 <HAL_GetTick>
 800255a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800255e:	f7fe ff3b 	bl	80013d8 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e29d      	b.n	8002aac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002570:	4b6c      	ldr	r3, [pc, #432]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800257c:	4b69      	ldr	r3, [pc, #420]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	041b      	lsls	r3, r3, #16
 800258a:	4966      	ldr	r1, [pc, #408]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 800258c:	4313      	orrs	r3, r2
 800258e:	610b      	str	r3, [r1, #16]
 8002590:	e018      	b.n	80025c4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002592:	4b64      	ldr	r3, [pc, #400]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a63      	ldr	r2, [pc, #396]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 8002598:	f023 0301 	bic.w	r3, r3, #1
 800259c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259e:	f7fe ff1b 	bl	80013d8 <HAL_GetTick>
 80025a2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80025a6:	f7fe ff17 	bl	80013d8 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e279      	b.n	8002aac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025b8:	4b5a      	ldr	r3, [pc, #360]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1f0      	bne.n	80025a6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d03c      	beq.n	800264a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d01c      	beq.n	8002612 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d8:	4b52      	ldr	r3, [pc, #328]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 80025da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025de:	4a51      	ldr	r2, [pc, #324]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 80025e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e8:	f7fe fef6 	bl	80013d8 <HAL_GetTick>
 80025ec:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80025f0:	f7fe fef2 	bl	80013d8 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e254      	b.n	8002aac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002602:	4b48      	ldr	r3, [pc, #288]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 8002604:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002608:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0ef      	beq.n	80025f0 <HAL_RCC_OscConfig+0x3a8>
 8002610:	e01b      	b.n	800264a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002612:	4b44      	ldr	r3, [pc, #272]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 8002614:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002618:	4a42      	ldr	r2, [pc, #264]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 800261a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800261e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002622:	f7fe fed9 	bl	80013d8 <HAL_GetTick>
 8002626:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800262a:	f7fe fed5 	bl	80013d8 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e237      	b.n	8002aac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800263c:	4b39      	ldr	r3, [pc, #228]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 800263e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002642:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1ef      	bne.n	800262a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 80d2 	beq.w	80027fc <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002658:	4b34      	ldr	r3, [pc, #208]	@ (800272c <HAL_RCC_OscConfig+0x4e4>)
 800265a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d118      	bne.n	8002696 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002664:	4b31      	ldr	r3, [pc, #196]	@ (800272c <HAL_RCC_OscConfig+0x4e4>)
 8002666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002668:	4a30      	ldr	r2, [pc, #192]	@ (800272c <HAL_RCC_OscConfig+0x4e4>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002670:	f7fe feb2 	bl	80013d8 <HAL_GetTick>
 8002674:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002678:	f7fe feae 	bl	80013d8 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e210      	b.n	8002aac <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800268a:	4b28      	ldr	r3, [pc, #160]	@ (800272c <HAL_RCC_OscConfig+0x4e4>)
 800268c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f0      	beq.n	8002678 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d108      	bne.n	80026b0 <HAL_RCC_OscConfig+0x468>
 800269e:	4b21      	ldr	r3, [pc, #132]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 80026a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026ae:	e074      	b.n	800279a <HAL_RCC_OscConfig+0x552>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d118      	bne.n	80026ea <HAL_RCC_OscConfig+0x4a2>
 80026b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 80026ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026be:	4a19      	ldr	r2, [pc, #100]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 80026c0:	f023 0301 	bic.w	r3, r3, #1
 80026c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026c8:	4b16      	ldr	r3, [pc, #88]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 80026ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026ce:	4a15      	ldr	r2, [pc, #84]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 80026d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026d8:	4b12      	ldr	r3, [pc, #72]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 80026da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026de:	4a11      	ldr	r2, [pc, #68]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 80026e0:	f023 0304 	bic.w	r3, r3, #4
 80026e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026e8:	e057      	b.n	800279a <HAL_RCC_OscConfig+0x552>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2b05      	cmp	r3, #5
 80026f0:	d11e      	bne.n	8002730 <HAL_RCC_OscConfig+0x4e8>
 80026f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 80026f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 80026fa:	f043 0304 	orr.w	r3, r3, #4
 80026fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002702:	4b08      	ldr	r3, [pc, #32]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 8002704:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002708:	4a06      	ldr	r2, [pc, #24]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 800270a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800270e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002712:	4b04      	ldr	r3, [pc, #16]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 8002714:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002718:	4a02      	ldr	r2, [pc, #8]	@ (8002724 <HAL_RCC_OscConfig+0x4dc>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002722:	e03a      	b.n	800279a <HAL_RCC_OscConfig+0x552>
 8002724:	44020c00 	.word	0x44020c00
 8002728:	20000004 	.word	0x20000004
 800272c:	44020800 	.word	0x44020800
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b85      	cmp	r3, #133	@ 0x85
 8002736:	d118      	bne.n	800276a <HAL_RCC_OscConfig+0x522>
 8002738:	4ba2      	ldr	r3, [pc, #648]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 800273a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800273e:	4aa1      	ldr	r2, [pc, #644]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 8002740:	f043 0304 	orr.w	r3, r3, #4
 8002744:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002748:	4b9e      	ldr	r3, [pc, #632]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 800274a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800274e:	4a9d      	ldr	r2, [pc, #628]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 8002750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002754:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002758:	4b9a      	ldr	r3, [pc, #616]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 800275a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800275e:	4a99      	ldr	r2, [pc, #612]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002768:	e017      	b.n	800279a <HAL_RCC_OscConfig+0x552>
 800276a:	4b96      	ldr	r3, [pc, #600]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 800276c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002770:	4a94      	ldr	r2, [pc, #592]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 8002772:	f023 0301 	bic.w	r3, r3, #1
 8002776:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800277a:	4b92      	ldr	r3, [pc, #584]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 800277c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002780:	4a90      	ldr	r2, [pc, #576]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 8002782:	f023 0304 	bic.w	r3, r3, #4
 8002786:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800278a:	4b8e      	ldr	r3, [pc, #568]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 800278c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002790:	4a8c      	ldr	r2, [pc, #560]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 8002792:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002796:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d016      	beq.n	80027d0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a2:	f7fe fe19 	bl	80013d8 <HAL_GetTick>
 80027a6:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027a8:	e00a      	b.n	80027c0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027aa:	f7fe fe15 	bl	80013d8 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e175      	b.n	8002aac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027c0:	4b80      	ldr	r3, [pc, #512]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 80027c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0ed      	beq.n	80027aa <HAL_RCC_OscConfig+0x562>
 80027ce:	e015      	b.n	80027fc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d0:	f7fe fe02 	bl	80013d8 <HAL_GetTick>
 80027d4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027d6:	e00a      	b.n	80027ee <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d8:	f7fe fdfe 	bl	80013d8 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e15e      	b.n	8002aac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027ee:	4b75      	ldr	r3, [pc, #468]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 80027f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1ed      	bne.n	80027d8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b00      	cmp	r3, #0
 8002806:	d036      	beq.n	8002876 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280c:	2b00      	cmp	r3, #0
 800280e:	d019      	beq.n	8002844 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002810:	4b6c      	ldr	r3, [pc, #432]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a6b      	ldr	r2, [pc, #428]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 8002816:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800281a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281c:	f7fe fddc 	bl	80013d8 <HAL_GetTick>
 8002820:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002824:	f7fe fdd8 	bl	80013d8 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e13a      	b.n	8002aac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002836:	4b63      	ldr	r3, [pc, #396]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0x5dc>
 8002842:	e018      	b.n	8002876 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002844:	4b5f      	ldr	r3, [pc, #380]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a5e      	ldr	r2, [pc, #376]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 800284a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800284e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002850:	f7fe fdc2 	bl	80013d8 <HAL_GetTick>
 8002854:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002858:	f7fe fdbe 	bl	80013d8 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e120      	b.n	8002aac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800286a:	4b56      	ldr	r3, [pc, #344]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 8115 	beq.w	8002aaa <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	2b18      	cmp	r3, #24
 8002884:	f000 80af 	beq.w	80029e6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288c:	2b02      	cmp	r3, #2
 800288e:	f040 8086 	bne.w	800299e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002892:	4b4c      	ldr	r3, [pc, #304]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a4b      	ldr	r2, [pc, #300]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 8002898:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800289c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289e:	f7fe fd9b 	bl	80013d8 <HAL_GetTick>
 80028a2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80028a6:	f7fe fd97 	bl	80013d8 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e0f9      	b.n	8002aac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80028b8:	4b42      	ldr	r3, [pc, #264]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1f0      	bne.n	80028a6 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80028c4:	4b3f      	ldr	r3, [pc, #252]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 80028c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80028cc:	f023 0303 	bic.w	r3, r3, #3
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80028d8:	0212      	lsls	r2, r2, #8
 80028da:	430a      	orrs	r2, r1
 80028dc:	4939      	ldr	r1, [pc, #228]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	628b      	str	r3, [r1, #40]	@ 0x28
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028e6:	3b01      	subs	r3, #1
 80028e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f0:	3b01      	subs	r3, #1
 80028f2:	025b      	lsls	r3, r3, #9
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028fc:	3b01      	subs	r3, #1
 80028fe:	041b      	lsls	r3, r3, #16
 8002900:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290a:	3b01      	subs	r3, #1
 800290c:	061b      	lsls	r3, r3, #24
 800290e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002912:	492c      	ldr	r1, [pc, #176]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 8002914:	4313      	orrs	r3, r2
 8002916:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002918:	4b2a      	ldr	r3, [pc, #168]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 800291a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291c:	4a29      	ldr	r2, [pc, #164]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 800291e:	f023 0310 	bic.w	r3, r3, #16
 8002922:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002928:	4a26      	ldr	r2, [pc, #152]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800292e:	4b25      	ldr	r3, [pc, #148]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 8002930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002932:	4a24      	ldr	r2, [pc, #144]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 8002934:	f043 0310 	orr.w	r3, r3, #16
 8002938:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800293a:	4b22      	ldr	r3, [pc, #136]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 800293c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293e:	f023 020c 	bic.w	r2, r3, #12
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002946:	491f      	ldr	r1, [pc, #124]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 8002948:	4313      	orrs	r3, r2
 800294a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800294c:	4b1d      	ldr	r3, [pc, #116]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 800294e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002950:	f023 0220 	bic.w	r2, r3, #32
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002958:	491a      	ldr	r1, [pc, #104]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 800295a:	4313      	orrs	r3, r2
 800295c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800295e:	4b19      	ldr	r3, [pc, #100]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 8002960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002962:	4a18      	ldr	r2, [pc, #96]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 8002964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002968:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800296a:	4b16      	ldr	r3, [pc, #88]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a15      	ldr	r2, [pc, #84]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 8002970:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7fe fd2f 	bl	80013d8 <HAL_GetTick>
 800297a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800297e:	f7fe fd2b 	bl	80013d8 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e08d      	b.n	8002aac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002990:	4b0c      	ldr	r3, [pc, #48]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x736>
 800299c:	e085      	b.n	8002aaa <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800299e:	4b09      	ldr	r3, [pc, #36]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a08      	ldr	r2, [pc, #32]	@ (80029c4 <HAL_RCC_OscConfig+0x77c>)
 80029a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029aa:	f7fe fd15 	bl	80013d8 <HAL_GetTick>
 80029ae:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80029b0:	e00a      	b.n	80029c8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80029b2:	f7fe fd11 	bl	80013d8 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d903      	bls.n	80029c8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e073      	b.n	8002aac <HAL_RCC_OscConfig+0x864>
 80029c4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80029c8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ab4 <HAL_RCC_OscConfig+0x86c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1ee      	bne.n	80029b2 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80029d4:	4b37      	ldr	r3, [pc, #220]	@ (8002ab4 <HAL_RCC_OscConfig+0x86c>)
 80029d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d8:	4a36      	ldr	r2, [pc, #216]	@ (8002ab4 <HAL_RCC_OscConfig+0x86c>)
 80029da:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80029de:	f023 0303 	bic.w	r3, r3, #3
 80029e2:	6293      	str	r3, [r2, #40]	@ 0x28
 80029e4:	e061      	b.n	8002aaa <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80029e6:	4b33      	ldr	r3, [pc, #204]	@ (8002ab4 <HAL_RCC_OscConfig+0x86c>)
 80029e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ea:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80029ec:	4b31      	ldr	r3, [pc, #196]	@ (8002ab4 <HAL_RCC_OscConfig+0x86c>)
 80029ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029f0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d031      	beq.n	8002a5e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	f003 0203 	and.w	r2, r3, #3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d12a      	bne.n	8002a5e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	0a1b      	lsrs	r3, r3, #8
 8002a0c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d122      	bne.n	8002a5e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a22:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d11a      	bne.n	8002a5e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	0a5b      	lsrs	r3, r3, #9
 8002a2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a34:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d111      	bne.n	8002a5e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	0c1b      	lsrs	r3, r3, #16
 8002a3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a46:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d108      	bne.n	8002a5e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	0e1b      	lsrs	r3, r3, #24
 8002a50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e024      	b.n	8002aac <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002a62:	4b14      	ldr	r3, [pc, #80]	@ (8002ab4 <HAL_RCC_OscConfig+0x86c>)
 8002a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a66:	08db      	lsrs	r3, r3, #3
 8002a68:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d01a      	beq.n	8002aaa <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002a74:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab4 <HAL_RCC_OscConfig+0x86c>)
 8002a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a78:	4a0e      	ldr	r2, [pc, #56]	@ (8002ab4 <HAL_RCC_OscConfig+0x86c>)
 8002a7a:	f023 0310 	bic.w	r3, r3, #16
 8002a7e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7fe fcaa 	bl	80013d8 <HAL_GetTick>
 8002a84:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002a86:	bf00      	nop
 8002a88:	f7fe fca6 	bl	80013d8 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d0f9      	beq.n	8002a88 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a98:	4a06      	ldr	r2, [pc, #24]	@ (8002ab4 <HAL_RCC_OscConfig+0x86c>)
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002a9e:	4b05      	ldr	r3, [pc, #20]	@ (8002ab4 <HAL_RCC_OscConfig+0x86c>)
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa2:	4a04      	ldr	r2, [pc, #16]	@ (8002ab4 <HAL_RCC_OscConfig+0x86c>)
 8002aa4:	f043 0310 	orr.w	r3, r3, #16
 8002aa8:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3720      	adds	r7, #32
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	44020c00 	.word	0x44020c00

08002ab8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e19e      	b.n	8002e0a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002acc:	4b83      	ldr	r3, [pc, #524]	@ (8002cdc <HAL_RCC_ClockConfig+0x224>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 030f 	and.w	r3, r3, #15
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d910      	bls.n	8002afc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ada:	4b80      	ldr	r3, [pc, #512]	@ (8002cdc <HAL_RCC_ClockConfig+0x224>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 020f 	bic.w	r2, r3, #15
 8002ae2:	497e      	ldr	r1, [pc, #504]	@ (8002cdc <HAL_RCC_ClockConfig+0x224>)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aea:	4b7c      	ldr	r3, [pc, #496]	@ (8002cdc <HAL_RCC_ClockConfig+0x224>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e186      	b.n	8002e0a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d012      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	695a      	ldr	r2, [r3, #20]
 8002b0c:	4b74      	ldr	r3, [pc, #464]	@ (8002ce0 <HAL_RCC_ClockConfig+0x228>)
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	0a1b      	lsrs	r3, r3, #8
 8002b12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d909      	bls.n	8002b2e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002b1a:	4b71      	ldr	r3, [pc, #452]	@ (8002ce0 <HAL_RCC_ClockConfig+0x228>)
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	496d      	ldr	r1, [pc, #436]	@ (8002ce0 <HAL_RCC_ClockConfig+0x228>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d012      	beq.n	8002b60 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691a      	ldr	r2, [r3, #16]
 8002b3e:	4b68      	ldr	r3, [pc, #416]	@ (8002ce0 <HAL_RCC_ClockConfig+0x228>)
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	091b      	lsrs	r3, r3, #4
 8002b44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d909      	bls.n	8002b60 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002b4c:	4b64      	ldr	r3, [pc, #400]	@ (8002ce0 <HAL_RCC_ClockConfig+0x228>)
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	4961      	ldr	r1, [pc, #388]	@ (8002ce0 <HAL_RCC_ClockConfig+0x228>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d010      	beq.n	8002b8e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	4b5b      	ldr	r3, [pc, #364]	@ (8002ce0 <HAL_RCC_ClockConfig+0x228>)
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d908      	bls.n	8002b8e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002b7c:	4b58      	ldr	r3, [pc, #352]	@ (8002ce0 <HAL_RCC_ClockConfig+0x228>)
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4955      	ldr	r1, [pc, #340]	@ (8002ce0 <HAL_RCC_ClockConfig+0x228>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d010      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	4b50      	ldr	r3, [pc, #320]	@ (8002ce0 <HAL_RCC_ClockConfig+0x228>)
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d908      	bls.n	8002bbc <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002baa:	4b4d      	ldr	r3, [pc, #308]	@ (8002ce0 <HAL_RCC_ClockConfig+0x228>)
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	f023 020f 	bic.w	r2, r3, #15
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	494a      	ldr	r1, [pc, #296]	@ (8002ce0 <HAL_RCC_ClockConfig+0x228>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 8093 	beq.w	8002cf0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d107      	bne.n	8002be2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002bd2:	4b43      	ldr	r3, [pc, #268]	@ (8002ce0 <HAL_RCC_ClockConfig+0x228>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d121      	bne.n	8002c22 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e113      	b.n	8002e0a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d107      	bne.n	8002bfa <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bea:	4b3d      	ldr	r3, [pc, #244]	@ (8002ce0 <HAL_RCC_ClockConfig+0x228>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d115      	bne.n	8002c22 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e107      	b.n	8002e0a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d107      	bne.n	8002c12 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002c02:	4b37      	ldr	r3, [pc, #220]	@ (8002ce0 <HAL_RCC_ClockConfig+0x228>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e0fb      	b.n	8002e0a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c12:	4b33      	ldr	r3, [pc, #204]	@ (8002ce0 <HAL_RCC_ClockConfig+0x228>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e0f3      	b.n	8002e0a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002c22:	4b2f      	ldr	r3, [pc, #188]	@ (8002ce0 <HAL_RCC_ClockConfig+0x228>)
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f023 0203 	bic.w	r2, r3, #3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	492c      	ldr	r1, [pc, #176]	@ (8002ce0 <HAL_RCC_ClockConfig+0x228>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c34:	f7fe fbd0 	bl	80013d8 <HAL_GetTick>
 8002c38:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d112      	bne.n	8002c68 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c42:	e00a      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002c44:	f7fe fbc8 	bl	80013d8 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e0d7      	b.n	8002e0a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c5a:	4b21      	ldr	r3, [pc, #132]	@ (8002ce0 <HAL_RCC_ClockConfig+0x228>)
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	f003 0318 	and.w	r3, r3, #24
 8002c62:	2b18      	cmp	r3, #24
 8002c64:	d1ee      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x18c>
 8002c66:	e043      	b.n	8002cf0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d112      	bne.n	8002c96 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c70:	e00a      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002c72:	f7fe fbb1 	bl	80013d8 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e0c0      	b.n	8002e0a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c88:	4b15      	ldr	r3, [pc, #84]	@ (8002ce0 <HAL_RCC_ClockConfig+0x228>)
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	f003 0318 	and.w	r3, r3, #24
 8002c90:	2b10      	cmp	r3, #16
 8002c92:	d1ee      	bne.n	8002c72 <HAL_RCC_ClockConfig+0x1ba>
 8002c94:	e02c      	b.n	8002cf0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d122      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca0:	f7fe fb9a 	bl	80013d8 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e0a9      	b.n	8002e0a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce0 <HAL_RCC_ClockConfig+0x228>)
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	f003 0318 	and.w	r3, r3, #24
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d1ee      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x1e8>
 8002cc2:	e015      	b.n	8002cf0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc4:	f7fe fb88 	bl	80013d8 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d906      	bls.n	8002ce4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e097      	b.n	8002e0a <HAL_RCC_ClockConfig+0x352>
 8002cda:	bf00      	nop
 8002cdc:	40022000 	.word	0x40022000
 8002ce0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ce4:	4b4b      	ldr	r3, [pc, #300]	@ (8002e14 <HAL_RCC_ClockConfig+0x35c>)
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	f003 0318 	and.w	r3, r3, #24
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1e9      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d010      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	4b44      	ldr	r3, [pc, #272]	@ (8002e14 <HAL_RCC_ClockConfig+0x35c>)
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	f003 030f 	and.w	r3, r3, #15
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d208      	bcs.n	8002d1e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002d0c:	4b41      	ldr	r3, [pc, #260]	@ (8002e14 <HAL_RCC_ClockConfig+0x35c>)
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	f023 020f 	bic.w	r2, r3, #15
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	493e      	ldr	r1, [pc, #248]	@ (8002e14 <HAL_RCC_ClockConfig+0x35c>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e18 <HAL_RCC_ClockConfig+0x360>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d210      	bcs.n	8002d4e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2c:	4b3a      	ldr	r3, [pc, #232]	@ (8002e18 <HAL_RCC_ClockConfig+0x360>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f023 020f 	bic.w	r2, r3, #15
 8002d34:	4938      	ldr	r1, [pc, #224]	@ (8002e18 <HAL_RCC_ClockConfig+0x360>)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3c:	4b36      	ldr	r3, [pc, #216]	@ (8002e18 <HAL_RCC_ClockConfig+0x360>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 030f 	and.w	r3, r3, #15
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d001      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e05d      	b.n	8002e0a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d010      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8002e14 <HAL_RCC_ClockConfig+0x35c>)
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d208      	bcs.n	8002d7c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002d6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002e14 <HAL_RCC_ClockConfig+0x35c>)
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	4927      	ldr	r1, [pc, #156]	@ (8002e14 <HAL_RCC_ClockConfig+0x35c>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d012      	beq.n	8002dae <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	4b21      	ldr	r3, [pc, #132]	@ (8002e14 <HAL_RCC_ClockConfig+0x35c>)
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d209      	bcs.n	8002dae <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e14 <HAL_RCC_ClockConfig+0x35c>)
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	491a      	ldr	r1, [pc, #104]	@ (8002e14 <HAL_RCC_ClockConfig+0x35c>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0310 	and.w	r3, r3, #16
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d012      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	4b15      	ldr	r3, [pc, #84]	@ (8002e14 <HAL_RCC_ClockConfig+0x35c>)
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	0a1b      	lsrs	r3, r3, #8
 8002dc4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d209      	bcs.n	8002de0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002dcc:	4b11      	ldr	r3, [pc, #68]	@ (8002e14 <HAL_RCC_ClockConfig+0x35c>)
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	021b      	lsls	r3, r3, #8
 8002dda:	490e      	ldr	r1, [pc, #56]	@ (8002e14 <HAL_RCC_ClockConfig+0x35c>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002de0:	f000 f822 	bl	8002e28 <HAL_RCC_GetSysClockFreq>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b0b      	ldr	r3, [pc, #44]	@ (8002e14 <HAL_RCC_ClockConfig+0x35c>)
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	490b      	ldr	r1, [pc, #44]	@ (8002e1c <HAL_RCC_ClockConfig+0x364>)
 8002df0:	5ccb      	ldrb	r3, [r1, r3]
 8002df2:	fa22 f303 	lsr.w	r3, r2, r3
 8002df6:	4a0a      	ldr	r2, [pc, #40]	@ (8002e20 <HAL_RCC_ClockConfig+0x368>)
 8002df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002e24 <HAL_RCC_ClockConfig+0x36c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fe f88c 	bl	8000f1c <HAL_InitTick>
 8002e04:	4603      	mov	r3, r0
 8002e06:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002e08:	7afb      	ldrb	r3, [r7, #11]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	44020c00 	.word	0x44020c00
 8002e18:	40022000 	.word	0x40022000
 8002e1c:	080091f0 	.word	0x080091f0
 8002e20:	20000000 	.word	0x20000000
 8002e24:	20000004 	.word	0x20000004

08002e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b089      	sub	sp, #36	@ 0x24
 8002e2c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002e2e:	4b8c      	ldr	r3, [pc, #560]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f003 0318 	and.w	r3, r3, #24
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d102      	bne.n	8002e40 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002e3a:	4b8a      	ldr	r3, [pc, #552]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	e107      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e40:	4b87      	ldr	r3, [pc, #540]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	f003 0318 	and.w	r3, r3, #24
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d112      	bne.n	8002e72 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002e4c:	4b84      	ldr	r3, [pc, #528]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0320 	and.w	r3, r3, #32
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d009      	beq.n	8002e6c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002e58:	4b81      	ldr	r3, [pc, #516]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	08db      	lsrs	r3, r3, #3
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	4a81      	ldr	r2, [pc, #516]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x240>)
 8002e64:	fa22 f303 	lsr.w	r3, r2, r3
 8002e68:	61fb      	str	r3, [r7, #28]
 8002e6a:	e0f1      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002e6c:	4b7e      	ldr	r3, [pc, #504]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x240>)
 8002e6e:	61fb      	str	r3, [r7, #28]
 8002e70:	e0ee      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e72:	4b7b      	ldr	r3, [pc, #492]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f003 0318 	and.w	r3, r3, #24
 8002e7a:	2b10      	cmp	r3, #16
 8002e7c:	d102      	bne.n	8002e84 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e7e:	4b7b      	ldr	r3, [pc, #492]	@ (800306c <HAL_RCC_GetSysClockFreq+0x244>)
 8002e80:	61fb      	str	r3, [r7, #28]
 8002e82:	e0e5      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e84:	4b76      	ldr	r3, [pc, #472]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	f003 0318 	and.w	r3, r3, #24
 8002e8c:	2b18      	cmp	r3, #24
 8002e8e:	f040 80dd 	bne.w	800304c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002e92:	4b73      	ldr	r3, [pc, #460]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002e9c:	4b70      	ldr	r3, [pc, #448]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea0:	0a1b      	lsrs	r3, r3, #8
 8002ea2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ea6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002ea8:	4b6d      	ldr	r3, [pc, #436]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x238>)
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eac:	091b      	lsrs	r3, r3, #4
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002eb4:	4b6a      	ldr	r3, [pc, #424]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x238>)
 8002eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002eb8:	08db      	lsrs	r3, r3, #3
 8002eba:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	fb02 f303 	mul.w	r3, r2, r3
 8002ec4:	ee07 3a90 	vmov	s15, r3
 8002ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ecc:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 80b7 	beq.w	8003046 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d003      	beq.n	8002ee6 <HAL_RCC_GetSysClockFreq+0xbe>
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d056      	beq.n	8002f92 <HAL_RCC_GetSysClockFreq+0x16a>
 8002ee4:	e077      	b.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002ee6:	4b5e      	ldr	r3, [pc, #376]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0320 	and.w	r3, r3, #32
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d02d      	beq.n	8002f4e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002ef2:	4b5b      	ldr	r3, [pc, #364]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	08db      	lsrs	r3, r3, #3
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	4a5a      	ldr	r2, [pc, #360]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x240>)
 8002efe:	fa22 f303 	lsr.w	r3, r2, r3
 8002f02:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	ee07 3a90 	vmov	s15, r3
 8002f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	ee07 3a90 	vmov	s15, r3
 8002f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f1c:	4b50      	ldr	r3, [pc, #320]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f24:	ee07 3a90 	vmov	s15, r3
 8002f28:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f30:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8003070 <HAL_RCC_GetSysClockFreq+0x248>
 8002f34:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f38:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f40:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f48:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002f4c:	e065      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	ee07 3a90 	vmov	s15, r3
 8002f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f58:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003074 <HAL_RCC_GetSysClockFreq+0x24c>
 8002f5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f60:	4b3f      	ldr	r3, [pc, #252]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f68:	ee07 3a90 	vmov	s15, r3
 8002f6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f70:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f74:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003070 <HAL_RCC_GetSysClockFreq+0x248>
 8002f78:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f84:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f8c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002f90:	e043      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	ee07 3a90 	vmov	s15, r3
 8002f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f9c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8003078 <HAL_RCC_GetSysClockFreq+0x250>
 8002fa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fa4:	4b2e      	ldr	r3, [pc, #184]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x238>)
 8002fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fac:	ee07 3a90 	vmov	s15, r3
 8002fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fb4:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fb8:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8003070 <HAL_RCC_GetSysClockFreq+0x248>
 8002fbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002fd4:	e021      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	ee07 3a90 	vmov	s15, r3
 8002fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fe0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800307c <HAL_RCC_GetSysClockFreq+0x254>
 8002fe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x238>)
 8002fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ff0:	ee07 3a90 	vmov	s15, r3
 8002ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ff8:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ffc:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8003070 <HAL_RCC_GetSysClockFreq+0x248>
 8003000:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003004:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003008:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800300c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003014:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003018:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800301a:	4b11      	ldr	r3, [pc, #68]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x238>)
 800301c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800301e:	0a5b      	lsrs	r3, r3, #9
 8003020:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003024:	3301      	adds	r3, #1
 8003026:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	ee07 3a90 	vmov	s15, r3
 800302e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003032:	edd7 6a06 	vldr	s13, [r7, #24]
 8003036:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800303a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800303e:	ee17 3a90 	vmov	r3, s15
 8003042:	61fb      	str	r3, [r7, #28]
 8003044:	e004      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	e001      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800304c:	4b06      	ldr	r3, [pc, #24]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x240>)
 800304e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003050:	69fb      	ldr	r3, [r7, #28]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3724      	adds	r7, #36	@ 0x24
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	44020c00 	.word	0x44020c00
 8003064:	003d0900 	.word	0x003d0900
 8003068:	03d09000 	.word	0x03d09000
 800306c:	007a1200 	.word	0x007a1200
 8003070:	46000000 	.word	0x46000000
 8003074:	4c742400 	.word	0x4c742400
 8003078:	4af42400 	.word	0x4af42400
 800307c:	4a742400 	.word	0x4a742400

08003080 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003084:	f7ff fed0 	bl	8002e28 <HAL_RCC_GetSysClockFreq>
 8003088:	4602      	mov	r2, r0
 800308a:	4b08      	ldr	r3, [pc, #32]	@ (80030ac <HAL_RCC_GetHCLKFreq+0x2c>)
 800308c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800308e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003092:	4907      	ldr	r1, [pc, #28]	@ (80030b0 <HAL_RCC_GetHCLKFreq+0x30>)
 8003094:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003096:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800309a:	fa22 f303 	lsr.w	r3, r2, r3
 800309e:	4a05      	ldr	r2, [pc, #20]	@ (80030b4 <HAL_RCC_GetHCLKFreq+0x34>)
 80030a0:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80030a2:	4b04      	ldr	r3, [pc, #16]	@ (80030b4 <HAL_RCC_GetHCLKFreq+0x34>)
 80030a4:	681b      	ldr	r3, [r3, #0]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	44020c00 	.word	0x44020c00
 80030b0:	080091f0 	.word	0x080091f0
 80030b4:	20000000 	.word	0x20000000

080030b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80030bc:	f7ff ffe0 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 80030c0:	4602      	mov	r2, r0
 80030c2:	4b06      	ldr	r3, [pc, #24]	@ (80030dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	091b      	lsrs	r3, r3, #4
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	4904      	ldr	r1, [pc, #16]	@ (80030e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030ce:	5ccb      	ldrb	r3, [r1, r3]
 80030d0:	f003 031f 	and.w	r3, r3, #31
 80030d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d8:	4618      	mov	r0, r3
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	44020c00 	.word	0x44020c00
 80030e0:	08009200 	.word	0x08009200

080030e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	221f      	movs	r2, #31
 80030f2:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80030f4:	4b15      	ldr	r3, [pc, #84]	@ (800314c <HAL_RCC_GetClockConfig+0x68>)
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	f003 0203 	and.w	r2, r3, #3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8003100:	4b12      	ldr	r3, [pc, #72]	@ (800314c <HAL_RCC_GetClockConfig+0x68>)
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f003 020f 	and.w	r2, r3, #15
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	091b      	lsrs	r3, r3, #4
 800311e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	0a1b      	lsrs	r3, r3, #8
 800312a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003132:	4b07      	ldr	r3, [pc, #28]	@ (8003150 <HAL_RCC_GetClockConfig+0x6c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 020f 	and.w	r2, r3, #15
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	601a      	str	r2, [r3, #0]
}
 800313e:	bf00      	nop
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	44020c00 	.word	0x44020c00
 8003150:	40022000 	.word	0x40022000

08003154 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003158:	b0d8      	sub	sp, #352	@ 0x160
 800315a:	af00      	add	r7, sp, #0
 800315c:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003160:	2300      	movs	r3, #0
 8003162:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003166:	2300      	movs	r3, #0
 8003168:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800316c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003174:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8003178:	2500      	movs	r5, #0
 800317a:	ea54 0305 	orrs.w	r3, r4, r5
 800317e:	d00b      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003180:	4bcd      	ldr	r3, [pc, #820]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003182:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003186:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800318a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800318e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003190:	4ac9      	ldr	r2, [pc, #804]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003192:	430b      	orrs	r3, r1
 8003194:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003198:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800319c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a0:	f002 0801 	and.w	r8, r2, #1
 80031a4:	f04f 0900 	mov.w	r9, #0
 80031a8:	ea58 0309 	orrs.w	r3, r8, r9
 80031ac:	d042      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80031ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80031b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b4:	2b05      	cmp	r3, #5
 80031b6:	d823      	bhi.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80031b8:	a201      	add	r2, pc, #4	@ (adr r2, 80031c0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80031ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031be:	bf00      	nop
 80031c0:	08003209 	.word	0x08003209
 80031c4:	080031d9 	.word	0x080031d9
 80031c8:	080031ed 	.word	0x080031ed
 80031cc:	08003209 	.word	0x08003209
 80031d0:	08003209 	.word	0x08003209
 80031d4:	08003209 	.word	0x08003209
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80031dc:	3308      	adds	r3, #8
 80031de:	4618      	mov	r0, r3
 80031e0:	f001 ff42 	bl	8005068 <RCCEx_PLL2_Config>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80031ea:	e00e      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80031ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80031f0:	3330      	adds	r3, #48	@ 0x30
 80031f2:	4618      	mov	r0, r3
 80031f4:	f001 ffd0 	bl	8005198 <RCCEx_PLL3_Config>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80031fe:	e004      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003206:	e000      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8003208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800320a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10c      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003212:	4ba9      	ldr	r3, [pc, #676]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003214:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003218:	f023 0107 	bic.w	r1, r3, #7
 800321c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003222:	4aa5      	ldr	r2, [pc, #660]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003224:	430b      	orrs	r3, r1
 8003226:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800322a:	e003      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800322c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003230:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003234:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323c:	f002 0a02 	and.w	sl, r2, #2
 8003240:	f04f 0b00 	mov.w	fp, #0
 8003244:	ea5a 030b 	orrs.w	r3, sl, fp
 8003248:	f000 8088 	beq.w	800335c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800324c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003252:	2b28      	cmp	r3, #40	@ 0x28
 8003254:	d868      	bhi.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003256:	a201      	add	r2, pc, #4	@ (adr r2, 800325c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325c:	08003331 	.word	0x08003331
 8003260:	08003329 	.word	0x08003329
 8003264:	08003329 	.word	0x08003329
 8003268:	08003329 	.word	0x08003329
 800326c:	08003329 	.word	0x08003329
 8003270:	08003329 	.word	0x08003329
 8003274:	08003329 	.word	0x08003329
 8003278:	08003329 	.word	0x08003329
 800327c:	08003301 	.word	0x08003301
 8003280:	08003329 	.word	0x08003329
 8003284:	08003329 	.word	0x08003329
 8003288:	08003329 	.word	0x08003329
 800328c:	08003329 	.word	0x08003329
 8003290:	08003329 	.word	0x08003329
 8003294:	08003329 	.word	0x08003329
 8003298:	08003329 	.word	0x08003329
 800329c:	08003315 	.word	0x08003315
 80032a0:	08003329 	.word	0x08003329
 80032a4:	08003329 	.word	0x08003329
 80032a8:	08003329 	.word	0x08003329
 80032ac:	08003329 	.word	0x08003329
 80032b0:	08003329 	.word	0x08003329
 80032b4:	08003329 	.word	0x08003329
 80032b8:	08003329 	.word	0x08003329
 80032bc:	08003331 	.word	0x08003331
 80032c0:	08003329 	.word	0x08003329
 80032c4:	08003329 	.word	0x08003329
 80032c8:	08003329 	.word	0x08003329
 80032cc:	08003329 	.word	0x08003329
 80032d0:	08003329 	.word	0x08003329
 80032d4:	08003329 	.word	0x08003329
 80032d8:	08003329 	.word	0x08003329
 80032dc:	08003331 	.word	0x08003331
 80032e0:	08003329 	.word	0x08003329
 80032e4:	08003329 	.word	0x08003329
 80032e8:	08003329 	.word	0x08003329
 80032ec:	08003329 	.word	0x08003329
 80032f0:	08003329 	.word	0x08003329
 80032f4:	08003329 	.word	0x08003329
 80032f8:	08003329 	.word	0x08003329
 80032fc:	08003331 	.word	0x08003331
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003300:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003304:	3308      	adds	r3, #8
 8003306:	4618      	mov	r0, r3
 8003308:	f001 feae 	bl	8005068 <RCCEx_PLL2_Config>
 800330c:	4603      	mov	r3, r0
 800330e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8003312:	e00e      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003314:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003318:	3330      	adds	r3, #48	@ 0x30
 800331a:	4618      	mov	r0, r3
 800331c:	f001 ff3c 	bl	8005198 <RCCEx_PLL3_Config>
 8003320:	4603      	mov	r3, r0
 8003322:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8003326:	e004      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800332e:	e000      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8003330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003332:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10c      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800333a:	4b5f      	ldr	r3, [pc, #380]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800333c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003340:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003344:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800334a:	4a5b      	ldr	r2, [pc, #364]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800334c:	430b      	orrs	r3, r1
 800334e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003352:	e003      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003354:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003358:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800335c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003364:	f002 0304 	and.w	r3, r2, #4
 8003368:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800336c:	2300      	movs	r3, #0
 800336e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8003372:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8003376:	460b      	mov	r3, r1
 8003378:	4313      	orrs	r3, r2
 800337a:	d04e      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800337c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003380:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003382:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003386:	d02c      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8003388:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800338c:	d825      	bhi.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x286>
 800338e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003392:	d028      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003394:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003398:	d81f      	bhi.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x286>
 800339a:	2bc0      	cmp	r3, #192	@ 0xc0
 800339c:	d025      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x296>
 800339e:	2bc0      	cmp	r3, #192	@ 0xc0
 80033a0:	d81b      	bhi.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x286>
 80033a2:	2b80      	cmp	r3, #128	@ 0x80
 80033a4:	d00f      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80033a6:	2b80      	cmp	r3, #128	@ 0x80
 80033a8:	d817      	bhi.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x286>
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d01f      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80033ae:	2b40      	cmp	r3, #64	@ 0x40
 80033b0:	d113      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033b6:	3308      	adds	r3, #8
 80033b8:	4618      	mov	r0, r3
 80033ba:	f001 fe55 	bl	8005068 <RCCEx_PLL2_Config>
 80033be:	4603      	mov	r3, r0
 80033c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80033c4:	e014      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80033c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033ca:	3330      	adds	r3, #48	@ 0x30
 80033cc:	4618      	mov	r0, r3
 80033ce:	f001 fee3 	bl	8005198 <RCCEx_PLL3_Config>
 80033d2:	4603      	mov	r3, r0
 80033d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80033d8:	e00a      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80033e0:	e006      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80033e2:	bf00      	nop
 80033e4:	e004      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80033e6:	bf00      	nop
 80033e8:	e002      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80033ea:	bf00      	nop
 80033ec:	e000      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80033ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10c      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80033f8:	4b2f      	ldr	r3, [pc, #188]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80033fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80033fe:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003402:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003406:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003408:	4a2b      	ldr	r2, [pc, #172]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800340a:	430b      	orrs	r3, r1
 800340c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003410:	e003      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003412:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003416:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800341a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003422:	f002 0308 	and.w	r3, r2, #8
 8003426:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800342a:	2300      	movs	r3, #0
 800342c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003430:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8003434:	460b      	mov	r3, r1
 8003436:	4313      	orrs	r3, r2
 8003438:	d056      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800343a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800343e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003440:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003444:	d031      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x356>
 8003446:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800344a:	d82a      	bhi.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800344c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003450:	d02d      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003452:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003456:	d824      	bhi.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003458:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800345c:	d029      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800345e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003462:	d81e      	bhi.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003464:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003468:	d011      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800346a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800346e:	d818      	bhi.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003470:	2b00      	cmp	r3, #0
 8003472:	d023      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003474:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003478:	d113      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800347a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800347e:	3308      	adds	r3, #8
 8003480:	4618      	mov	r0, r3
 8003482:	f001 fdf1 	bl	8005068 <RCCEx_PLL2_Config>
 8003486:	4603      	mov	r3, r0
 8003488:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800348c:	e017      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800348e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003492:	3330      	adds	r3, #48	@ 0x30
 8003494:	4618      	mov	r0, r3
 8003496:	f001 fe7f 	bl	8005198 <RCCEx_PLL3_Config>
 800349a:	4603      	mov	r3, r0
 800349c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80034a0:	e00d      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80034a8:	e009      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80034aa:	bf00      	nop
 80034ac:	e007      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80034ae:	bf00      	nop
 80034b0:	e005      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80034b2:	bf00      	nop
 80034b4:	e003      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80034b6:	bf00      	nop
 80034b8:	44020c00 	.word	0x44020c00
        break;
 80034bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10c      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80034c6:	4bbb      	ldr	r3, [pc, #748]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80034c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80034cc:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80034d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034d6:	4ab7      	ldr	r2, [pc, #732]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80034d8:	430b      	orrs	r3, r1
 80034da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80034de:	e003      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80034e4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f0:	f002 0310 	and.w	r3, r2, #16
 80034f4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80034f8:	2300      	movs	r3, #0
 80034fa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80034fe:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8003502:	460b      	mov	r3, r1
 8003504:	4313      	orrs	r3, r2
 8003506:	d053      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8003508:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800350c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800350e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003512:	d031      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003514:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003518:	d82a      	bhi.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800351a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800351e:	d02d      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003520:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003524:	d824      	bhi.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003526:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800352a:	d029      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800352c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003530:	d81e      	bhi.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003532:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003536:	d011      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003538:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800353c:	d818      	bhi.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800353e:	2b00      	cmp	r3, #0
 8003540:	d020      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8003542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003546:	d113      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003548:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800354c:	3308      	adds	r3, #8
 800354e:	4618      	mov	r0, r3
 8003550:	f001 fd8a 	bl	8005068 <RCCEx_PLL2_Config>
 8003554:	4603      	mov	r3, r0
 8003556:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800355a:	e014      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800355c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003560:	3330      	adds	r3, #48	@ 0x30
 8003562:	4618      	mov	r0, r3
 8003564:	f001 fe18 	bl	8005198 <RCCEx_PLL3_Config>
 8003568:	4603      	mov	r3, r0
 800356a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800356e:	e00a      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003576:	e006      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003578:	bf00      	nop
 800357a:	e004      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800357c:	bf00      	nop
 800357e:	e002      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003580:	bf00      	nop
 8003582:	e000      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003586:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10c      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800358e:	4b89      	ldr	r3, [pc, #548]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003590:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003594:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003598:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800359c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800359e:	4a85      	ldr	r2, [pc, #532]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80035a0:	430b      	orrs	r3, r1
 80035a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80035a6:	e003      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80035ac:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80035b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b8:	f002 0320 	and.w	r3, r2, #32
 80035bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80035c0:	2300      	movs	r3, #0
 80035c2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80035c6:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 80035ca:	460b      	mov	r3, r1
 80035cc:	4313      	orrs	r3, r2
 80035ce:	d053      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80035d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80035da:	d031      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80035dc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80035e0:	d82a      	bhi.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80035e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035e6:	d02d      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80035e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035ec:	d824      	bhi.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80035ee:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80035f2:	d029      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80035f4:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80035f8:	d81e      	bhi.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80035fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035fe:	d011      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003600:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003604:	d818      	bhi.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003606:	2b00      	cmp	r3, #0
 8003608:	d020      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800360a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800360e:	d113      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003610:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003614:	3308      	adds	r3, #8
 8003616:	4618      	mov	r0, r3
 8003618:	f001 fd26 	bl	8005068 <RCCEx_PLL2_Config>
 800361c:	4603      	mov	r3, r0
 800361e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8003622:	e014      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003624:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003628:	3330      	adds	r3, #48	@ 0x30
 800362a:	4618      	mov	r0, r3
 800362c:	f001 fdb4 	bl	8005198 <RCCEx_PLL3_Config>
 8003630:	4603      	mov	r3, r0
 8003632:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8003636:	e00a      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800363e:	e006      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003640:	bf00      	nop
 8003642:	e004      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003644:	bf00      	nop
 8003646:	e002      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003648:	bf00      	nop
 800364a:	e000      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800364c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800364e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10c      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8003656:	4b57      	ldr	r3, [pc, #348]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003658:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800365c:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8003660:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003666:	4a53      	ldr	r2, [pc, #332]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003668:	430b      	orrs	r3, r1
 800366a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800366e:	e003      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003670:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003674:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003678:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003684:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003688:	2300      	movs	r3, #0
 800368a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800368e:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8003692:	460b      	mov	r3, r1
 8003694:	4313      	orrs	r3, r2
 8003696:	d053      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8003698:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800369c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800369e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80036a2:	d031      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80036a4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80036a8:	d82a      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80036aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036ae:	d02d      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80036b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036b4:	d824      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80036b6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80036ba:	d029      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80036bc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80036c0:	d81e      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80036c2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80036c6:	d011      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x598>
 80036c8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80036cc:	d818      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d020      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80036d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036d6:	d113      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036dc:	3308      	adds	r3, #8
 80036de:	4618      	mov	r0, r3
 80036e0:	f001 fcc2 	bl	8005068 <RCCEx_PLL2_Config>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80036ea:	e014      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80036ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036f0:	3330      	adds	r3, #48	@ 0x30
 80036f2:	4618      	mov	r0, r3
 80036f4:	f001 fd50 	bl	8005198 <RCCEx_PLL3_Config>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80036fe:	e00a      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003706:	e006      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003708:	bf00      	nop
 800370a:	e004      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800370c:	bf00      	nop
 800370e:	e002      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003710:	bf00      	nop
 8003712:	e000      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003716:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10c      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800371e:	4b25      	ldr	r3, [pc, #148]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003720:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003724:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8003728:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800372c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800372e:	4a21      	ldr	r2, [pc, #132]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003730:	430b      	orrs	r3, r1
 8003732:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003736:	e003      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003738:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800373c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003740:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003748:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800374c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003750:	2300      	movs	r3, #0
 8003752:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003756:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800375a:	460b      	mov	r3, r1
 800375c:	4313      	orrs	r3, r2
 800375e:	d055      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8003760:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003764:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003766:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800376a:	d033      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x680>
 800376c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003770:	d82c      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003772:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003776:	d02f      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003778:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800377c:	d826      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x678>
 800377e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003782:	d02b      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x688>
 8003784:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003788:	d820      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x678>
 800378a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800378e:	d013      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003790:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003794:	d81a      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d022      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800379a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800379e:	d115      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037a4:	3308      	adds	r3, #8
 80037a6:	4618      	mov	r0, r3
 80037a8:	f001 fc5e 	bl	8005068 <RCCEx_PLL2_Config>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80037b2:	e016      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80037b4:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80037b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037bc:	3330      	adds	r3, #48	@ 0x30
 80037be:	4618      	mov	r0, r3
 80037c0:	f001 fcea 	bl	8005198 <RCCEx_PLL3_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80037ca:	e00a      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80037d2:	e006      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80037d4:	bf00      	nop
 80037d6:	e004      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80037d8:	bf00      	nop
 80037da:	e002      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80037dc:	bf00      	nop
 80037de:	e000      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80037e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10c      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80037ea:	4bbb      	ldr	r3, [pc, #748]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80037ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037f0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80037f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037fa:	4ab7      	ldr	r2, [pc, #732]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80037fc:	430b      	orrs	r3, r1
 80037fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003802:	e003      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003804:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003808:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800380c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003814:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8003818:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800381c:	2300      	movs	r3, #0
 800381e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003822:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8003826:	460b      	mov	r3, r1
 8003828:	4313      	orrs	r3, r2
 800382a:	d053      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 800382c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003830:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003832:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003836:	d031      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003838:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800383c:	d82a      	bhi.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800383e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003842:	d02d      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003844:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003848:	d824      	bhi.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800384a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800384e:	d029      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8003850:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003854:	d81e      	bhi.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003856:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800385a:	d011      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800385c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003860:	d818      	bhi.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003862:	2b00      	cmp	r3, #0
 8003864:	d020      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8003866:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800386a:	d113      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800386c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003870:	3308      	adds	r3, #8
 8003872:	4618      	mov	r0, r3
 8003874:	f001 fbf8 	bl	8005068 <RCCEx_PLL2_Config>
 8003878:	4603      	mov	r3, r0
 800387a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800387e:	e014      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003880:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003884:	3330      	adds	r3, #48	@ 0x30
 8003886:	4618      	mov	r0, r3
 8003888:	f001 fc86 	bl	8005198 <RCCEx_PLL3_Config>
 800388c:	4603      	mov	r3, r0
 800388e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8003892:	e00a      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800389a:	e006      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800389c:	bf00      	nop
 800389e:	e004      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80038a0:	bf00      	nop
 80038a2:	e002      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80038a4:	bf00      	nop
 80038a6:	e000      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80038a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10c      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80038b2:	4b89      	ldr	r3, [pc, #548]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80038b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80038b8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80038bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038c2:	4a85      	ldr	r2, [pc, #532]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80038c4:	430b      	orrs	r3, r1
 80038c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80038ca:	e003      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038cc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80038d0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80038d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038dc:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80038e0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80038e4:	2300      	movs	r3, #0
 80038e6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80038ea:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80038ee:	460b      	mov	r3, r1
 80038f0:	4313      	orrs	r3, r2
 80038f2:	d055      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80038f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038fc:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8003900:	d031      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8003902:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8003906:	d82a      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003908:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800390c:	d02d      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x816>
 800390e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003912:	d824      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003914:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003918:	d029      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800391a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800391e:	d81e      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003920:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003924:	d011      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8003926:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800392a:	d818      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800392c:	2b00      	cmp	r3, #0
 800392e:	d020      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8003930:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003934:	d113      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003936:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800393a:	3308      	adds	r3, #8
 800393c:	4618      	mov	r0, r3
 800393e:	f001 fb93 	bl	8005068 <RCCEx_PLL2_Config>
 8003942:	4603      	mov	r3, r0
 8003944:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003948:	e014      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800394a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800394e:	3330      	adds	r3, #48	@ 0x30
 8003950:	4618      	mov	r0, r3
 8003952:	f001 fc21 	bl	8005198 <RCCEx_PLL3_Config>
 8003956:	4603      	mov	r3, r0
 8003958:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800395c:	e00a      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003964:	e006      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003966:	bf00      	nop
 8003968:	e004      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800396a:	bf00      	nop
 800396c:	e002      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800396e:	bf00      	nop
 8003970:	e000      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003972:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003974:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10d      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 800397c:	4b56      	ldr	r3, [pc, #344]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800397e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003982:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8003986:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800398a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800398e:	4a52      	ldr	r2, [pc, #328]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003990:	430b      	orrs	r3, r1
 8003992:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003996:	e003      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003998:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800399c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80039a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80039ac:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80039b0:	2300      	movs	r3, #0
 80039b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80039b6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80039ba:	460b      	mov	r3, r1
 80039bc:	4313      	orrs	r3, r2
 80039be:	d044      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80039c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039c8:	2b05      	cmp	r3, #5
 80039ca:	d823      	bhi.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80039cc:	a201      	add	r2, pc, #4	@ (adr r2, 80039d4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80039ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d2:	bf00      	nop
 80039d4:	08003a1d 	.word	0x08003a1d
 80039d8:	080039ed 	.word	0x080039ed
 80039dc:	08003a01 	.word	0x08003a01
 80039e0:	08003a1d 	.word	0x08003a1d
 80039e4:	08003a1d 	.word	0x08003a1d
 80039e8:	08003a1d 	.word	0x08003a1d
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039f0:	3308      	adds	r3, #8
 80039f2:	4618      	mov	r0, r3
 80039f4:	f001 fb38 	bl	8005068 <RCCEx_PLL2_Config>
 80039f8:	4603      	mov	r3, r0
 80039fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80039fe:	e00e      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a04:	3330      	adds	r3, #48	@ 0x30
 8003a06:	4618      	mov	r0, r3
 8003a08:	f001 fbc6 	bl	8005198 <RCCEx_PLL3_Config>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003a12:	e004      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003a1a:	e000      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8003a1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10d      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8003a26:	4b2c      	ldr	r3, [pc, #176]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003a28:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003a2c:	f023 0107 	bic.w	r1, r3, #7
 8003a30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a38:	4a27      	ldr	r2, [pc, #156]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003a3a:	430b      	orrs	r3, r1
 8003a3c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003a40:	e003      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a42:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a46:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8003a4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a52:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003a56:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003a60:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003a64:	460b      	mov	r3, r1
 8003a66:	4313      	orrs	r3, r2
 8003a68:	d04f      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8003a6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a72:	2b50      	cmp	r3, #80	@ 0x50
 8003a74:	d029      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003a76:	2b50      	cmp	r3, #80	@ 0x50
 8003a78:	d823      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003a7a:	2b40      	cmp	r3, #64	@ 0x40
 8003a7c:	d027      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8003a7e:	2b40      	cmp	r3, #64	@ 0x40
 8003a80:	d81f      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003a82:	2b30      	cmp	r3, #48	@ 0x30
 8003a84:	d025      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8003a86:	2b30      	cmp	r3, #48	@ 0x30
 8003a88:	d81b      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003a8a:	2b20      	cmp	r3, #32
 8003a8c:	d00f      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003a8e:	2b20      	cmp	r3, #32
 8003a90:	d817      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d022      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003a96:	2b10      	cmp	r3, #16
 8003a98:	d113      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f001 fae1 	bl	8005068 <RCCEx_PLL2_Config>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003aac:	e017      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003aae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ab2:	3330      	adds	r3, #48	@ 0x30
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f001 fb6f 	bl	8005198 <RCCEx_PLL3_Config>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003ac0:	e00d      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003ac8:	e009      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003aca:	bf00      	nop
 8003acc:	e007      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003ace:	bf00      	nop
 8003ad0:	e005      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003ad2:	bf00      	nop
 8003ad4:	e003      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8003ad6:	bf00      	nop
 8003ad8:	44020c00 	.word	0x44020c00
        break;
 8003adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ade:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10d      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8003ae6:	4baf      	ldr	r3, [pc, #700]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003ae8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003aec:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003af0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af8:	4aaa      	ldr	r2, [pc, #680]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003afa:	430b      	orrs	r3, r1
 8003afc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003b00:	e003      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b02:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b06:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b12:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003b16:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003b20:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4313      	orrs	r3, r2
 8003b28:	d055      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003b2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b32:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003b36:	d031      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8003b38:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003b3c:	d82a      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003b3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b42:	d02d      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003b44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b48:	d824      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003b4a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b4e:	d029      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003b50:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b54:	d81e      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003b56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b5a:	d011      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8003b5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b60:	d818      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d020      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8003b66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b6a:	d113      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b70:	3308      	adds	r3, #8
 8003b72:	4618      	mov	r0, r3
 8003b74:	f001 fa78 	bl	8005068 <RCCEx_PLL2_Config>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003b7e:	e014      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b84:	3330      	adds	r3, #48	@ 0x30
 8003b86:	4618      	mov	r0, r3
 8003b88:	f001 fb06 	bl	8005198 <RCCEx_PLL3_Config>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003b92:	e00a      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003b9a:	e006      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003b9c:	bf00      	nop
 8003b9e:	e004      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003ba0:	bf00      	nop
 8003ba2:	e002      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003ba4:	bf00      	nop
 8003ba6:	e000      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003baa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10d      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003bb2:	4b7c      	ldr	r3, [pc, #496]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bb8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003bbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bc4:	4a77      	ldr	r2, [pc, #476]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003bc6:	430b      	orrs	r3, r1
 8003bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003bcc:	e003      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003bd2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bde:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003be2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003be6:	2300      	movs	r3, #0
 8003be8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003bec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	d03d      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003bf6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bfe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c02:	d01b      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003c04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c08:	d814      	bhi.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003c0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c0e:	d017      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003c10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c14:	d80e      	bhi.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d014      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003c1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c1e:	d109      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c24:	3330      	adds	r3, #48	@ 0x30
 8003c26:	4618      	mov	r0, r3
 8003c28:	f001 fab6 	bl	8005198 <RCCEx_PLL3_Config>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003c32:	e008      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003c3a:	e004      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003c3c:	bf00      	nop
 8003c3e:	e002      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003c40:	bf00      	nop
 8003c42:	e000      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c46:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10d      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003c4e:	4b55      	ldr	r3, [pc, #340]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003c50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c54:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003c58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c60:	4a50      	ldr	r2, [pc, #320]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003c62:	430b      	orrs	r3, r1
 8003c64:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003c68:	e003      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c6e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003c7e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c82:	2300      	movs	r3, #0
 8003c84:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c88:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	d03d      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003c92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c9a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003c9e:	d01b      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8003ca0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003ca4:	d814      	bhi.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003ca6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003caa:	d017      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8003cac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003cb0:	d80e      	bhi.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d014      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8003cb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cba:	d109      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003cbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cc0:	3330      	adds	r3, #48	@ 0x30
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f001 fa68 	bl	8005198 <RCCEx_PLL3_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003cce:	e008      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003cd6:	e004      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003cd8:	bf00      	nop
 8003cda:	e002      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003cdc:	bf00      	nop
 8003cde:	e000      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10d      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003cea:	4b2e      	ldr	r3, [pc, #184]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003cec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003cf0:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003cf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cfc:	4a29      	ldr	r2, [pc, #164]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003cfe:	430b      	orrs	r3, r1
 8003d00:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003d04:	e003      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d0a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d16:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003d1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003d24:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	d040      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003d2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d3a:	d01b      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003d3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d40:	d814      	bhi.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003d42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d46:	d017      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003d48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d4c:	d80e      	bhi.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d014      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003d52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d56:	d109      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d5c:	3330      	adds	r3, #48	@ 0x30
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f001 fa1a 	bl	8005198 <RCCEx_PLL3_Config>
 8003d64:	4603      	mov	r3, r0
 8003d66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003d6a:	e008      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003d72:	e004      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003d74:	bf00      	nop
 8003d76:	e002      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003d78:	bf00      	nop
 8003d7a:	e000      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d110      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003d86:	4b07      	ldr	r3, [pc, #28]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003d88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003d8c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003d90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d98:	4a02      	ldr	r2, [pc, #8]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003d9a:	430b      	orrs	r3, r1
 8003d9c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003da0:	e006      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003da2:	bf00      	nop
 8003da4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003dac:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003db0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db8:	2100      	movs	r1, #0
 8003dba:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8003dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003dc6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	d03d      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8003dd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003dd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003dd8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ddc:	d01b      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003dde:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003de2:	d814      	bhi.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003de4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003de8:	d017      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8003dea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003dee:	d80e      	bhi.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d014      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003df4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003df8:	d109      	bne.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003dfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003dfe:	3330      	adds	r3, #48	@ 0x30
 8003e00:	4618      	mov	r0, r3
 8003e02:	f001 f9c9 	bl	8005198 <RCCEx_PLL3_Config>
 8003e06:	4603      	mov	r3, r0
 8003e08:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003e0c:	e008      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003e14:	e004      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003e16:	bf00      	nop
 8003e18:	e002      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003e1a:	bf00      	nop
 8003e1c:	e000      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003e1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e20:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10d      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003e28:	4bbe      	ldr	r3, [pc, #760]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e2e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003e32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e3a:	4aba      	ldr	r2, [pc, #744]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003e42:	e003      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e44:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e48:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003e4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e54:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003e58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e62:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003e66:	460b      	mov	r3, r1
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	d035      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003e6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003e74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e78:	d015      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8003e7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e7e:	d80e      	bhi.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d012      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003e84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e88:	d109      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e8e:	3330      	adds	r3, #48	@ 0x30
 8003e90:	4618      	mov	r0, r3
 8003e92:	f001 f981 	bl	8005198 <RCCEx_PLL3_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003e9c:	e006      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003ea4:	e002      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003ea6:	bf00      	nop
 8003ea8:	e000      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003eaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10d      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003eb4:	4b9b      	ldr	r3, [pc, #620]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003eb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003eba:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003ebe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ec2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003ec6:	4a97      	ldr	r2, [pc, #604]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003ece:	e003      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ed4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003ed8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8003ee6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003eee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	d00e      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003ef8:	4b8a      	ldr	r3, [pc, #552]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	4a89      	ldr	r2, [pc, #548]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003efe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003f02:	61d3      	str	r3, [r2, #28]
 8003f04:	4b87      	ldr	r3, [pc, #540]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f06:	69d9      	ldr	r1, [r3, #28]
 8003f08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f0c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003f10:	4a84      	ldr	r2, [pc, #528]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f12:	430b      	orrs	r3, r1
 8003f14:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003f22:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f26:	2300      	movs	r3, #0
 8003f28:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003f2c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003f30:	460b      	mov	r3, r1
 8003f32:	4313      	orrs	r3, r2
 8003f34:	d055      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003f36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f3e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003f42:	d031      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8003f44:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003f48:	d82a      	bhi.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f4e:	d02d      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003f50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f54:	d824      	bhi.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003f56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f5a:	d029      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003f5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f60:	d81e      	bhi.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003f62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f66:	d011      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8003f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f6c:	d818      	bhi.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d020      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003f72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f76:	d113      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f001 f872 	bl	8005068 <RCCEx_PLL2_Config>
 8003f84:	4603      	mov	r3, r0
 8003f86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003f8a:	e014      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f90:	3330      	adds	r3, #48	@ 0x30
 8003f92:	4618      	mov	r0, r3
 8003f94:	f001 f900 	bl	8005198 <RCCEx_PLL3_Config>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003fa6:	e006      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003fa8:	bf00      	nop
 8003faa:	e004      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003fac:	bf00      	nop
 8003fae:	e002      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003fb0:	bf00      	nop
 8003fb2:	e000      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10d      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003fbe:	4b59      	ldr	r3, [pc, #356]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003fc0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003fc4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003fc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003fd0:	4a54      	ldr	r2, [pc, #336]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003fd2:	430b      	orrs	r3, r1
 8003fd4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003fd8:	e003      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fda:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003fde:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003fe2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003fee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ff8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4313      	orrs	r3, r2
 8004000:	d055      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004002:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004006:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800400a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800400e:	d031      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8004010:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004014:	d82a      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004016:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800401a:	d02d      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 800401c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004020:	d824      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004022:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004026:	d029      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8004028:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800402c:	d81e      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800402e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004032:	d011      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8004034:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004038:	d818      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800403a:	2b00      	cmp	r3, #0
 800403c:	d020      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800403e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004042:	d113      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004044:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004048:	3308      	adds	r3, #8
 800404a:	4618      	mov	r0, r3
 800404c:	f001 f80c 	bl	8005068 <RCCEx_PLL2_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004056:	e014      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004058:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800405c:	3330      	adds	r3, #48	@ 0x30
 800405e:	4618      	mov	r0, r3
 8004060:	f001 f89a 	bl	8005198 <RCCEx_PLL3_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800406a:	e00a      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004072:	e006      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004074:	bf00      	nop
 8004076:	e004      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004078:	bf00      	nop
 800407a:	e002      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800407c:	bf00      	nop
 800407e:	e000      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004082:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10d      	bne.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800408a:	4b26      	ldr	r3, [pc, #152]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800408c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004090:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004094:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004098:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800409c:	4a21      	ldr	r2, [pc, #132]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800409e:	430b      	orrs	r3, r1
 80040a0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80040a4:	e003      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80040aa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80040ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b6:	2100      	movs	r1, #0
 80040b8:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 80040bc:	f003 0320 	and.w	r3, r3, #32
 80040c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80040c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80040c8:	460b      	mov	r3, r1
 80040ca:	4313      	orrs	r3, r2
 80040cc:	d057      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 80040ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80040d6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040da:	d033      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 80040dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040e0:	d82c      	bhi.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80040e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040e6:	d02f      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 80040e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040ec:	d826      	bhi.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80040ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80040f2:	d02b      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xff8>
 80040f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80040f8:	d820      	bhi.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80040fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040fe:	d013      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004100:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004104:	d81a      	bhi.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004106:	2b00      	cmp	r3, #0
 8004108:	d022      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800410a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800410e:	d115      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004110:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004114:	3308      	adds	r3, #8
 8004116:	4618      	mov	r0, r3
 8004118:	f000 ffa6 	bl	8005068 <RCCEx_PLL2_Config>
 800411c:	4603      	mov	r3, r0
 800411e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004122:	e016      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8004124:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004128:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800412c:	3330      	adds	r3, #48	@ 0x30
 800412e:	4618      	mov	r0, r3
 8004130:	f001 f832 	bl	8005198 <RCCEx_PLL3_Config>
 8004134:	4603      	mov	r3, r0
 8004136:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800413a:	e00a      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004142:	e006      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004144:	bf00      	nop
 8004146:	e004      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004148:	bf00      	nop
 800414a:	e002      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800414c:	bf00      	nop
 800414e:	e000      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004150:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004152:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10d      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800415a:	4bbb      	ldr	r3, [pc, #748]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800415c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004160:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004164:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004168:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800416c:	4ab6      	ldr	r2, [pc, #728]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800416e:	430b      	orrs	r3, r1
 8004170:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004174:	e003      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004176:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800417a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800417e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004186:	2100      	movs	r1, #0
 8004188:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800418c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004190:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004194:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004198:	460b      	mov	r3, r1
 800419a:	4313      	orrs	r3, r2
 800419c:	d055      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800419e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80041a6:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80041aa:	d031      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80041ac:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80041b0:	d82a      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80041b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041b6:	d02d      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80041b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041bc:	d824      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80041be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041c2:	d029      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80041c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041c8:	d81e      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80041ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041ce:	d011      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 80041d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041d4:	d818      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d020      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80041da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041de:	d113      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041e4:	3308      	adds	r3, #8
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 ff3e 	bl	8005068 <RCCEx_PLL2_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80041f2:	e014      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041f8:	3330      	adds	r3, #48	@ 0x30
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 ffcc 	bl	8005198 <RCCEx_PLL3_Config>
 8004200:	4603      	mov	r3, r0
 8004202:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004206:	e00a      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800420e:	e006      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004210:	bf00      	nop
 8004212:	e004      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004214:	bf00      	nop
 8004216:	e002      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004218:	bf00      	nop
 800421a:	e000      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800421c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800421e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10d      	bne.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8004226:	4b88      	ldr	r3, [pc, #544]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004228:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800422c:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8004230:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004234:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004238:	4a83      	ldr	r2, [pc, #524]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800423a:	430b      	orrs	r3, r1
 800423c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004240:	e003      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004242:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004246:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800424a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004252:	2100      	movs	r1, #0
 8004254:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8004258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800425c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004260:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004264:	460b      	mov	r3, r1
 8004266:	4313      	orrs	r3, r2
 8004268:	d055      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800426a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800426e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004272:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004276:	d031      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8004278:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800427c:	d82a      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800427e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004282:	d02d      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8004284:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004288:	d824      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800428a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800428e:	d029      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8004290:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004294:	d81e      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004296:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800429a:	d011      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 800429c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042a0:	d818      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d020      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80042a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042aa:	d113      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042b0:	3308      	adds	r3, #8
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 fed8 	bl	8005068 <RCCEx_PLL2_Config>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80042be:	e014      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042c4:	3330      	adds	r3, #48	@ 0x30
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 ff66 	bl	8005198 <RCCEx_PLL3_Config>
 80042cc:	4603      	mov	r3, r0
 80042ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80042d2:	e00a      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80042da:	e006      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80042dc:	bf00      	nop
 80042de:	e004      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80042e0:	bf00      	nop
 80042e2:	e002      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80042e4:	bf00      	nop
 80042e6:	e000      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80042e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10d      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 80042f2:	4b55      	ldr	r3, [pc, #340]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80042f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80042f8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80042fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004300:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004304:	4a50      	ldr	r2, [pc, #320]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004306:	430b      	orrs	r3, r1
 8004308:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800430c:	e003      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800430e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004312:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8004316:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800431a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431e:	2100      	movs	r1, #0
 8004320:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8004324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004328:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800432c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004330:	460b      	mov	r3, r1
 8004332:	4313      	orrs	r3, r2
 8004334:	d055      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8004336:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800433a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800433e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004342:	d031      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8004344:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004348:	d82a      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800434a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800434e:	d02d      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8004350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004354:	d824      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004356:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800435a:	d029      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800435c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004360:	d81e      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004362:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004366:	d011      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8004368:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800436c:	d818      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800436e:	2b00      	cmp	r3, #0
 8004370:	d020      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8004372:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004376:	d113      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004378:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800437c:	3308      	adds	r3, #8
 800437e:	4618      	mov	r0, r3
 8004380:	f000 fe72 	bl	8005068 <RCCEx_PLL2_Config>
 8004384:	4603      	mov	r3, r0
 8004386:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800438a:	e014      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800438c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004390:	3330      	adds	r3, #48	@ 0x30
 8004392:	4618      	mov	r0, r3
 8004394:	f000 ff00 	bl	8005198 <RCCEx_PLL3_Config>
 8004398:	4603      	mov	r3, r0
 800439a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800439e:	e00a      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80043a6:	e006      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80043a8:	bf00      	nop
 80043aa:	e004      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80043ac:	bf00      	nop
 80043ae:	e002      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80043b0:	bf00      	nop
 80043b2:	e000      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80043b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10d      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80043be:	4b22      	ldr	r3, [pc, #136]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80043c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80043c4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80043c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80043d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80043d2:	430b      	orrs	r3, r1
 80043d4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80043d8:	e003      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80043de:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ea:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80043ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043f2:	2300      	movs	r3, #0
 80043f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80043f8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80043fc:	460b      	mov	r3, r1
 80043fe:	4313      	orrs	r3, r2
 8004400:	d055      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004402:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004406:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800440a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800440e:	d035      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8004410:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004414:	d82e      	bhi.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004416:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800441a:	d031      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800441c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004420:	d828      	bhi.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004422:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004426:	d01b      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8004428:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800442c:	d822      	bhi.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8004432:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004436:	d009      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8004438:	e01c      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800443a:	4b03      	ldr	r3, [pc, #12]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800443c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443e:	4a02      	ldr	r2, [pc, #8]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004444:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004446:	e01c      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8004448:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800444c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004450:	3308      	adds	r3, #8
 8004452:	4618      	mov	r0, r3
 8004454:	f000 fe08 	bl	8005068 <RCCEx_PLL2_Config>
 8004458:	4603      	mov	r3, r0
 800445a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800445e:	e010      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004460:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004464:	3330      	adds	r3, #48	@ 0x30
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fe96 	bl	8005198 <RCCEx_PLL3_Config>
 800446c:	4603      	mov	r3, r0
 800446e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004472:	e006      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800447a:	e002      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800447c:	bf00      	nop
 800447e:	e000      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004482:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10d      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800448a:	4bc3      	ldr	r3, [pc, #780]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800448c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004490:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004494:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004498:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800449c:	4abe      	ldr	r2, [pc, #760]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800449e:	430b      	orrs	r3, r1
 80044a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80044a4:	e003      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80044aa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80044ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b6:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80044ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80044be:	2300      	movs	r3, #0
 80044c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80044c4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80044c8:	460b      	mov	r3, r1
 80044ca:	4313      	orrs	r3, r2
 80044cc:	d051      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80044ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80044d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044da:	d033      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80044dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044e0:	d82c      	bhi.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80044e2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80044e6:	d02d      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80044e8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80044ec:	d826      	bhi.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80044ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044f2:	d019      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 80044f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044f8:	d820      	bhi.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80044fe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004502:	d007      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8004504:	e01a      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004506:	4ba4      	ldr	r3, [pc, #656]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450a:	4aa3      	ldr	r2, [pc, #652]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800450c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004510:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004512:	e018      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004514:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004518:	3308      	adds	r3, #8
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fda4 	bl	8005068 <RCCEx_PLL2_Config>
 8004520:	4603      	mov	r3, r0
 8004522:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004526:	e00e      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004528:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800452c:	3330      	adds	r3, #48	@ 0x30
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fe32 	bl	8005198 <RCCEx_PLL3_Config>
 8004534:	4603      	mov	r3, r0
 8004536:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800453a:	e004      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004542:	e000      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8004544:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004546:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10d      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800454e:	4b92      	ldr	r3, [pc, #584]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004554:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8004558:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800455c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004560:	4a8d      	ldr	r2, [pc, #564]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004562:	430b      	orrs	r3, r1
 8004564:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004568:	e003      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800456e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004572:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800457e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004580:	2300      	movs	r3, #0
 8004582:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004584:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004588:	460b      	mov	r3, r1
 800458a:	4313      	orrs	r3, r2
 800458c:	d032      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800458e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004592:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004596:	2b05      	cmp	r3, #5
 8004598:	d80f      	bhi.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800459a:	2b03      	cmp	r3, #3
 800459c:	d211      	bcs.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d911      	bls.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d109      	bne.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045aa:	3308      	adds	r3, #8
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fd5b 	bl	8005068 <RCCEx_PLL2_Config>
 80045b2:	4603      	mov	r3, r0
 80045b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80045b8:	e006      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80045c0:	e002      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80045c2:	bf00      	nop
 80045c4:	e000      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80045c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10d      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80045d0:	4b71      	ldr	r3, [pc, #452]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80045d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80045d6:	f023 0107 	bic.w	r1, r3, #7
 80045da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80045e2:	4a6d      	ldr	r2, [pc, #436]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80045e4:	430b      	orrs	r3, r1
 80045e6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80045ea:	e003      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80045f0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80045f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fc:	2100      	movs	r1, #0
 80045fe:	6739      	str	r1, [r7, #112]	@ 0x70
 8004600:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004604:	677b      	str	r3, [r7, #116]	@ 0x74
 8004606:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800460a:	460b      	mov	r3, r1
 800460c:	4313      	orrs	r3, r2
 800460e:	d024      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004610:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004614:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d005      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 800461c:	2b08      	cmp	r3, #8
 800461e:	d005      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004626:	e002      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004628:	bf00      	nop
 800462a:	e000      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800462c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800462e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10d      	bne.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004636:	4b58      	ldr	r3, [pc, #352]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004638:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800463c:	f023 0108 	bic.w	r1, r3, #8
 8004640:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004644:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004648:	4a53      	ldr	r2, [pc, #332]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800464a:	430b      	orrs	r3, r1
 800464c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004650:	e003      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004652:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004656:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800465a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800465e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004662:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004666:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004668:	2300      	movs	r3, #0
 800466a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800466c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004670:	460b      	mov	r3, r1
 8004672:	4313      	orrs	r3, r2
 8004674:	f000 80b9 	beq.w	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004678:	4b48      	ldr	r3, [pc, #288]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800467a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467c:	4a47      	ldr	r2, [pc, #284]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800467e:	f043 0301 	orr.w	r3, r3, #1
 8004682:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004684:	f7fc fea8 	bl	80013d8 <HAL_GetTick>
 8004688:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800468c:	e00b      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800468e:	f7fc fea3 	bl	80013d8 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d903      	bls.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80046a4:	e005      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80046a6:	4b3d      	ldr	r3, [pc, #244]	@ (800479c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80046a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0ed      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80046b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f040 8093 	bne.w	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046bc:	4b36      	ldr	r3, [pc, #216]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80046be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046c6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80046ca:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d023      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80046d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046d6:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80046da:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80046de:	4293      	cmp	r3, r2
 80046e0:	d01b      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046e2:	4b2d      	ldr	r3, [pc, #180]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80046e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046ec:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046f0:	4b29      	ldr	r3, [pc, #164]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80046f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046f6:	4a28      	ldr	r2, [pc, #160]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80046f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004700:	4b25      	ldr	r3, [pc, #148]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004702:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004706:	4a24      	ldr	r2, [pc, #144]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004708:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800470c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004710:	4a21      	ldr	r2, [pc, #132]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004712:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004716:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800471a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d019      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004726:	f7fc fe57 	bl	80013d8 <HAL_GetTick>
 800472a:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800472e:	e00d      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004730:	f7fc fe52 	bl	80013d8 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800473a:	1ad2      	subs	r2, r2, r3
 800473c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004740:	429a      	cmp	r2, r3
 8004742:	d903      	bls.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 800474a:	e006      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800474c:	4b12      	ldr	r3, [pc, #72]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800474e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0ea      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800475a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800475e:	2b00      	cmp	r3, #0
 8004760:	d13a      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004762:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004766:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800476a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800476e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004772:	d115      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8004774:	4b08      	ldr	r3, [pc, #32]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800477c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004780:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8004784:	091b      	lsrs	r3, r3, #4
 8004786:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800478a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800478e:	4a02      	ldr	r2, [pc, #8]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004790:	430b      	orrs	r3, r1
 8004792:	61d3      	str	r3, [r2, #28]
 8004794:	e00a      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8004796:	bf00      	nop
 8004798:	44020c00 	.word	0x44020c00
 800479c:	44020800 	.word	0x44020800
 80047a0:	4b9f      	ldr	r3, [pc, #636]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	4a9e      	ldr	r2, [pc, #632]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047a6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80047aa:	61d3      	str	r3, [r2, #28]
 80047ac:	4b9c      	ldr	r3, [pc, #624]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047b2:	4a9b      	ldr	r2, [pc, #620]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80047bc:	4b98      	ldr	r3, [pc, #608]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047be:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80047c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047c6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80047ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ce:	4a94      	ldr	r2, [pc, #592]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047d0:	430b      	orrs	r3, r1
 80047d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80047d6:	e008      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047d8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80047dc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 80047e0:	e003      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80047e6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80047ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f2:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80047f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80047f8:	2300      	movs	r3, #0
 80047fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80047fc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004800:	460b      	mov	r3, r1
 8004802:	4313      	orrs	r3, r2
 8004804:	d035      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004806:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800480a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800480e:	2b30      	cmp	r3, #48	@ 0x30
 8004810:	d014      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8004812:	2b30      	cmp	r3, #48	@ 0x30
 8004814:	d80e      	bhi.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8004816:	2b20      	cmp	r3, #32
 8004818:	d012      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800481a:	2b20      	cmp	r3, #32
 800481c:	d80a      	bhi.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800481e:	2b00      	cmp	r3, #0
 8004820:	d010      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8004822:	2b10      	cmp	r3, #16
 8004824:	d106      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004826:	4b7e      	ldr	r3, [pc, #504]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800482a:	4a7d      	ldr	r2, [pc, #500]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800482c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004830:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8004832:	e008      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800483a:	e004      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800483c:	bf00      	nop
 800483e:	e002      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004840:	bf00      	nop
 8004842:	e000      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004846:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10d      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800484e:	4b74      	ldr	r3, [pc, #464]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004850:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004854:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004858:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800485c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004860:	4a6f      	ldr	r2, [pc, #444]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004862:	430b      	orrs	r3, r1
 8004864:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004868:	e003      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800486a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800486e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004872:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487a:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800487e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004880:	2300      	movs	r3, #0
 8004882:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004884:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004888:	460b      	mov	r3, r1
 800488a:	4313      	orrs	r3, r2
 800488c:	d033      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800488e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004892:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800489a:	2b40      	cmp	r3, #64	@ 0x40
 800489c:	d007      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800489e:	e010      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a0:	4b5f      	ldr	r3, [pc, #380]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a4:	4a5e      	ldr	r2, [pc, #376]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048aa:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80048ac:	e00d      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048b2:	3308      	adds	r3, #8
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 fbd7 	bl	8005068 <RCCEx_PLL2_Config>
 80048ba:	4603      	mov	r3, r0
 80048bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80048c0:	e003      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80048c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10d      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80048d2:	4b53      	ldr	r3, [pc, #332]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80048d8:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80048dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048e0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80048e4:	4a4e      	ldr	r2, [pc, #312]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048e6:	430b      	orrs	r3, r1
 80048e8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80048ec:	e003      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80048f2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80048f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fe:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004902:	653b      	str	r3, [r7, #80]	@ 0x50
 8004904:	2300      	movs	r3, #0
 8004906:	657b      	str	r3, [r7, #84]	@ 0x54
 8004908:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800490c:	460b      	mov	r3, r1
 800490e:	4313      	orrs	r3, r2
 8004910:	d033      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8004912:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004916:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800491e:	2b80      	cmp	r3, #128	@ 0x80
 8004920:	d007      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8004922:	e010      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004924:	4b3e      	ldr	r3, [pc, #248]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004928:	4a3d      	ldr	r2, [pc, #244]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800492a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800492e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004930:	e00d      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004932:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004936:	3308      	adds	r3, #8
 8004938:	4618      	mov	r0, r3
 800493a:	f000 fb95 	bl	8005068 <RCCEx_PLL2_Config>
 800493e:	4603      	mov	r3, r0
 8004940:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004944:	e003      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800494c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800494e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10d      	bne.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8004956:	4b32      	ldr	r3, [pc, #200]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004958:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800495c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004960:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004964:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004968:	4a2d      	ldr	r2, [pc, #180]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800496a:	430b      	orrs	r3, r1
 800496c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004970:	e003      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004972:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004976:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800497a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800497e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004982:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004986:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004988:	2300      	movs	r3, #0
 800498a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800498c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004990:	460b      	mov	r3, r1
 8004992:	4313      	orrs	r3, r2
 8004994:	d04a      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8004996:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800499a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d827      	bhi.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80049a2:	a201      	add	r2, pc, #4	@ (adr r2, 80049a8 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80049a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a8:	080049bd 	.word	0x080049bd
 80049ac:	080049cb 	.word	0x080049cb
 80049b0:	080049df 	.word	0x080049df
 80049b4:	080049fb 	.word	0x080049fb
 80049b8:	080049fb 	.word	0x080049fb
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049bc:	4b18      	ldr	r3, [pc, #96]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80049be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c0:	4a17      	ldr	r2, [pc, #92]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80049c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049c6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80049c8:	e018      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049ce:	3308      	adds	r3, #8
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 fb49 	bl	8005068 <RCCEx_PLL2_Config>
 80049d6:	4603      	mov	r3, r0
 80049d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80049dc:	e00e      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049e2:	3330      	adds	r3, #48	@ 0x30
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 fbd7 	bl	8005198 <RCCEx_PLL3_Config>
 80049ea:	4603      	mov	r3, r0
 80049ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80049f0:	e004      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80049f8:	e000      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80049fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10f      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004a04:	4b06      	ldr	r3, [pc, #24]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a0a:	f023 0107 	bic.w	r1, r3, #7
 8004a0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a16:	4a02      	ldr	r2, [pc, #8]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004a18:	430b      	orrs	r3, r1
 8004a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a1e:	e005      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8004a20:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a24:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a28:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004a2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a34:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004a38:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a3e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004a42:	460b      	mov	r3, r1
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f000 8081 	beq.w	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8004a4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a52:	2b20      	cmp	r3, #32
 8004a54:	d85f      	bhi.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8004a56:	a201      	add	r2, pc, #4	@ (adr r2, 8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8004a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5c:	08004ae1 	.word	0x08004ae1
 8004a60:	08004b17 	.word	0x08004b17
 8004a64:	08004b17 	.word	0x08004b17
 8004a68:	08004b17 	.word	0x08004b17
 8004a6c:	08004b17 	.word	0x08004b17
 8004a70:	08004b17 	.word	0x08004b17
 8004a74:	08004b17 	.word	0x08004b17
 8004a78:	08004b17 	.word	0x08004b17
 8004a7c:	08004aef 	.word	0x08004aef
 8004a80:	08004b17 	.word	0x08004b17
 8004a84:	08004b17 	.word	0x08004b17
 8004a88:	08004b17 	.word	0x08004b17
 8004a8c:	08004b17 	.word	0x08004b17
 8004a90:	08004b17 	.word	0x08004b17
 8004a94:	08004b17 	.word	0x08004b17
 8004a98:	08004b17 	.word	0x08004b17
 8004a9c:	08004b03 	.word	0x08004b03
 8004aa0:	08004b17 	.word	0x08004b17
 8004aa4:	08004b17 	.word	0x08004b17
 8004aa8:	08004b17 	.word	0x08004b17
 8004aac:	08004b17 	.word	0x08004b17
 8004ab0:	08004b17 	.word	0x08004b17
 8004ab4:	08004b17 	.word	0x08004b17
 8004ab8:	08004b17 	.word	0x08004b17
 8004abc:	08004b1f 	.word	0x08004b1f
 8004ac0:	08004b17 	.word	0x08004b17
 8004ac4:	08004b17 	.word	0x08004b17
 8004ac8:	08004b17 	.word	0x08004b17
 8004acc:	08004b17 	.word	0x08004b17
 8004ad0:	08004b17 	.word	0x08004b17
 8004ad4:	08004b17 	.word	0x08004b17
 8004ad8:	08004b17 	.word	0x08004b17
 8004adc:	08004b1f 	.word	0x08004b1f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ae0:	4bab      	ldr	r3, [pc, #684]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae4:	4aaa      	ldr	r2, [pc, #680]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004ae6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aea:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004aec:	e018      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004aee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004af2:	3308      	adds	r3, #8
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 fab7 	bl	8005068 <RCCEx_PLL2_Config>
 8004afa:	4603      	mov	r3, r0
 8004afc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004b00:	e00e      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b06:	3330      	adds	r3, #48	@ 0x30
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 fb45 	bl	8005198 <RCCEx_PLL3_Config>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004b14:	e004      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004b1c:	e000      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8004b1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b20:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10d      	bne.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004b28:	4b99      	ldr	r3, [pc, #612]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b2e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004b32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b3a:	4a95      	ldr	r2, [pc, #596]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b42:	e003      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b44:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b48:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004b4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004b58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b5e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004b62:	460b      	mov	r3, r1
 8004b64:	4313      	orrs	r3, r2
 8004b66:	d04e      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004b68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b74:	d02e      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8004b76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b7a:	d827      	bhi.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004b7c:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b7e:	d02b      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8004b80:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b82:	d823      	bhi.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004b84:	2b80      	cmp	r3, #128	@ 0x80
 8004b86:	d017      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8004b88:	2b80      	cmp	r3, #128	@ 0x80
 8004b8a:	d81f      	bhi.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8004b90:	2b40      	cmp	r3, #64	@ 0x40
 8004b92:	d007      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8004b94:	e01a      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b96:	4b7e      	ldr	r3, [pc, #504]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b9a:	4a7d      	ldr	r2, [pc, #500]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004b9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ba0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004ba2:	e01a      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ba4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ba8:	3308      	adds	r3, #8
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 fa5c 	bl	8005068 <RCCEx_PLL2_Config>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004bb6:	e010      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bbc:	3330      	adds	r3, #48	@ 0x30
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 faea 	bl	8005198 <RCCEx_PLL3_Config>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004bca:	e006      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004bd2:	e002      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004bd4:	bf00      	nop
 8004bd6:	e000      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004bd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bda:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10d      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004be2:	4b6b      	ldr	r3, [pc, #428]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004be8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004bec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004bf4:	4a66      	ldr	r2, [pc, #408]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004bf6:	430b      	orrs	r3, r1
 8004bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bfc:	e003      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c02:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004c06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004c12:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c14:	2300      	movs	r3, #0
 8004c16:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c18:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	d055      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004c22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c26:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004c2a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004c2e:	d031      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8004c30:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004c34:	d82a      	bhi.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004c36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c3a:	d02d      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8004c3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c40:	d824      	bhi.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004c42:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004c46:	d029      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8004c48:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004c4c:	d81e      	bhi.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c52:	d011      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8004c54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c58:	d818      	bhi.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d020      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8004c5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c62:	d113      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c68:	3308      	adds	r3, #8
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 f9fc 	bl	8005068 <RCCEx_PLL2_Config>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004c76:	e014      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c7c:	3330      	adds	r3, #48	@ 0x30
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fa8a 	bl	8005198 <RCCEx_PLL3_Config>
 8004c84:	4603      	mov	r3, r0
 8004c86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004c8a:	e00a      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004c92:	e006      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004c94:	bf00      	nop
 8004c96:	e004      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004c98:	bf00      	nop
 8004c9a:	e002      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004c9c:	bf00      	nop
 8004c9e:	e000      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004ca0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ca2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10d      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8004caa:	4b39      	ldr	r3, [pc, #228]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cb0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004cb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cb8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004cbc:	4a34      	ldr	r2, [pc, #208]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004cbe:	430b      	orrs	r3, r1
 8004cc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004cc4:	e003      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004cca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8004cce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004cda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cdc:	2300      	movs	r3, #0
 8004cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ce0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	d058      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8004cea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cf2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004cf6:	d031      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8004cf8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004cfc:	d82a      	bhi.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004cfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d02:	d02d      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004d04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d08:	d824      	bhi.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004d0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d0e:	d029      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8004d10:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d14:	d81e      	bhi.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004d16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d1a:	d011      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8004d1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d20:	d818      	bhi.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d020      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8004d26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d2a:	d113      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d30:	3308      	adds	r3, #8
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 f998 	bl	8005068 <RCCEx_PLL2_Config>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004d3e:	e014      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d44:	3330      	adds	r3, #48	@ 0x30
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 fa26 	bl	8005198 <RCCEx_PLL3_Config>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004d52:	e00a      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004d5a:	e006      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004d5c:	bf00      	nop
 8004d5e:	e004      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004d60:	bf00      	nop
 8004d62:	e002      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004d64:	bf00      	nop
 8004d66:	e000      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004d68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d6a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d110      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8004d72:	4b07      	ldr	r3, [pc, #28]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d78:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004d7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d84:	4902      	ldr	r1, [pc, #8]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004d8c:	e006      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8004d8e:	bf00      	nop
 8004d90:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d94:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d98:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	2100      	movs	r1, #0
 8004da6:	6239      	str	r1, [r7, #32]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004db2:	460b      	mov	r3, r1
 8004db4:	4313      	orrs	r3, r2
 8004db6:	d055      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8004db8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004dc0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004dc4:	d031      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8004dc6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004dca:	d82a      	bhi.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004dcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dd0:	d02d      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8004dd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dd6:	d824      	bhi.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004dd8:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004ddc:	d029      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8004dde:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004de2:	d81e      	bhi.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004de8:	d011      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8004dea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dee:	d818      	bhi.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d020      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8004df4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004df8:	d113      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004dfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dfe:	3308      	adds	r3, #8
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 f931 	bl	8005068 <RCCEx_PLL2_Config>
 8004e06:	4603      	mov	r3, r0
 8004e08:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e0c:	e014      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e12:	3330      	adds	r3, #48	@ 0x30
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 f9bf 	bl	8005198 <RCCEx_PLL3_Config>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e20:	e00a      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004e28:	e006      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004e2a:	bf00      	nop
 8004e2c:	e004      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004e2e:	bf00      	nop
 8004e30:	e002      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004e32:	bf00      	nop
 8004e34:	e000      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004e36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e38:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10d      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8004e40:	4b88      	ldr	r3, [pc, #544]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e46:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8004e4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004e52:	4984      	ldr	r1, [pc, #528]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004e5a:	e003      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e5c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e60:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004e64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	61b9      	str	r1, [r7, #24]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	61fb      	str	r3, [r7, #28]
 8004e76:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	d03d      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004e80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e84:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004e88:	2b03      	cmp	r3, #3
 8004e8a:	d81c      	bhi.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8004e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8004e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e92:	bf00      	nop
 8004e94:	08004ecf 	.word	0x08004ecf
 8004e98:	08004ea5 	.word	0x08004ea5
 8004e9c:	08004eb3 	.word	0x08004eb3
 8004ea0:	08004ecf 	.word	0x08004ecf
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ea4:	4b6f      	ldr	r3, [pc, #444]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea8:	4a6e      	ldr	r2, [pc, #440]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004eae:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004eb0:	e00e      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004eb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004eb6:	3308      	adds	r3, #8
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 f8d5 	bl	8005068 <RCCEx_PLL2_Config>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004ec4:	e004      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004ecc:	e000      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8004ece:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ed0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10d      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004ed8:	4b62      	ldr	r3, [pc, #392]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004eda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ede:	f023 0203 	bic.w	r2, r3, #3
 8004ee2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ee6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004eea:	495e      	ldr	r1, [pc, #376]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004ef2:	e003      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ef8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004efc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f04:	2100      	movs	r1, #0
 8004f06:	6139      	str	r1, [r7, #16]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004f12:	460b      	mov	r3, r1
 8004f14:	4313      	orrs	r3, r2
 8004f16:	d03a      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004f18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f1c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004f20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f24:	d00e      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8004f26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f2a:	d815      	bhi.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d017      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8004f30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f34:	d110      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f36:	4b4b      	ldr	r3, [pc, #300]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3a:	4a4a      	ldr	r2, [pc, #296]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f40:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004f42:	e00e      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f48:	3308      	adds	r3, #8
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 f88c 	bl	8005068 <RCCEx_PLL2_Config>
 8004f50:	4603      	mov	r3, r0
 8004f52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004f56:	e004      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004f5e:	e000      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8004f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f62:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10d      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f78:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004f7c:	4939      	ldr	r1, [pc, #228]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8004f84:	e003      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f86:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f8a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f96:	2100      	movs	r1, #0
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	f003 0310 	and.w	r3, r3, #16
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	d038      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004faa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fae:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004fb2:	2b30      	cmp	r3, #48	@ 0x30
 8004fb4:	d01b      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8004fb6:	2b30      	cmp	r3, #48	@ 0x30
 8004fb8:	d815      	bhi.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8004fba:	2b10      	cmp	r3, #16
 8004fbc:	d002      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8004fbe:	2b20      	cmp	r3, #32
 8004fc0:	d007      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8004fc2:	e010      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fc4:	4b27      	ldr	r3, [pc, #156]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc8:	4a26      	ldr	r2, [pc, #152]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004fca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fce:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004fd0:	e00e      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004fd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fd6:	3330      	adds	r3, #48	@ 0x30
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 f8dd 	bl	8005198 <RCCEx_PLL3_Config>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004fe4:	e004      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004fec:	e000      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8004fee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ff0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10d      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004ffa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ffe:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005002:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005006:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800500a:	4916      	ldr	r1, [pc, #88]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005012:	e003      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005014:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005018:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800501c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005024:	2100      	movs	r1, #0
 8005026:	6039      	str	r1, [r7, #0]
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	607b      	str	r3, [r7, #4]
 800502e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005032:	460b      	mov	r3, r1
 8005034:	4313      	orrs	r3, r2
 8005036:	d00c      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005038:	4b0a      	ldr	r3, [pc, #40]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800503a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800503e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005042:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005046:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800504a:	4906      	ldr	r1, [pc, #24]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800504c:	4313      	orrs	r3, r2
 800504e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8005052:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8005056:	4618      	mov	r0, r3
 8005058:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800505c:	46bd      	mov	sp, r7
 800505e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005062:	bf00      	nop
 8005064:	44020c00 	.word	0x44020c00

08005068 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005070:	4b48      	ldr	r3, [pc, #288]	@ (8005194 <RCCEx_PLL2_Config+0x12c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a47      	ldr	r2, [pc, #284]	@ (8005194 <RCCEx_PLL2_Config+0x12c>)
 8005076:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800507a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800507c:	f7fc f9ac 	bl	80013d8 <HAL_GetTick>
 8005080:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005082:	e008      	b.n	8005096 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005084:	f7fc f9a8 	bl	80013d8 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e07a      	b.n	800518c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005096:	4b3f      	ldr	r3, [pc, #252]	@ (8005194 <RCCEx_PLL2_Config+0x12c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1f0      	bne.n	8005084 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80050a2:	4b3c      	ldr	r3, [pc, #240]	@ (8005194 <RCCEx_PLL2_Config+0x12c>)
 80050a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80050aa:	f023 0303 	bic.w	r3, r3, #3
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6811      	ldr	r1, [r2, #0]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	6852      	ldr	r2, [r2, #4]
 80050b6:	0212      	lsls	r2, r2, #8
 80050b8:	430a      	orrs	r2, r1
 80050ba:	4936      	ldr	r1, [pc, #216]	@ (8005194 <RCCEx_PLL2_Config+0x12c>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	3b01      	subs	r3, #1
 80050c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	025b      	lsls	r3, r3, #9
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	431a      	orrs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	3b01      	subs	r3, #1
 80050dc:	041b      	lsls	r3, r3, #16
 80050de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80050e2:	431a      	orrs	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	061b      	lsls	r3, r3, #24
 80050ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80050f0:	4928      	ldr	r1, [pc, #160]	@ (8005194 <RCCEx_PLL2_Config+0x12c>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80050f6:	4b27      	ldr	r3, [pc, #156]	@ (8005194 <RCCEx_PLL2_Config+0x12c>)
 80050f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fa:	f023 020c 	bic.w	r2, r3, #12
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	4924      	ldr	r1, [pc, #144]	@ (8005194 <RCCEx_PLL2_Config+0x12c>)
 8005104:	4313      	orrs	r3, r2
 8005106:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005108:	4b22      	ldr	r3, [pc, #136]	@ (8005194 <RCCEx_PLL2_Config+0x12c>)
 800510a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510c:	f023 0220 	bic.w	r2, r3, #32
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	491f      	ldr	r1, [pc, #124]	@ (8005194 <RCCEx_PLL2_Config+0x12c>)
 8005116:	4313      	orrs	r3, r2
 8005118:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800511a:	4b1e      	ldr	r3, [pc, #120]	@ (8005194 <RCCEx_PLL2_Config+0x12c>)
 800511c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005122:	491c      	ldr	r1, [pc, #112]	@ (8005194 <RCCEx_PLL2_Config+0x12c>)
 8005124:	4313      	orrs	r3, r2
 8005126:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005128:	4b1a      	ldr	r3, [pc, #104]	@ (8005194 <RCCEx_PLL2_Config+0x12c>)
 800512a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512c:	4a19      	ldr	r2, [pc, #100]	@ (8005194 <RCCEx_PLL2_Config+0x12c>)
 800512e:	f023 0310 	bic.w	r3, r3, #16
 8005132:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005134:	4b17      	ldr	r3, [pc, #92]	@ (8005194 <RCCEx_PLL2_Config+0x12c>)
 8005136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005138:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800513c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6a12      	ldr	r2, [r2, #32]
 8005144:	00d2      	lsls	r2, r2, #3
 8005146:	4913      	ldr	r1, [pc, #76]	@ (8005194 <RCCEx_PLL2_Config+0x12c>)
 8005148:	4313      	orrs	r3, r2
 800514a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800514c:	4b11      	ldr	r3, [pc, #68]	@ (8005194 <RCCEx_PLL2_Config+0x12c>)
 800514e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005150:	4a10      	ldr	r2, [pc, #64]	@ (8005194 <RCCEx_PLL2_Config+0x12c>)
 8005152:	f043 0310 	orr.w	r3, r3, #16
 8005156:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005158:	4b0e      	ldr	r3, [pc, #56]	@ (8005194 <RCCEx_PLL2_Config+0x12c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a0d      	ldr	r2, [pc, #52]	@ (8005194 <RCCEx_PLL2_Config+0x12c>)
 800515e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005162:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005164:	f7fc f938 	bl	80013d8 <HAL_GetTick>
 8005168:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800516a:	e008      	b.n	800517e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800516c:	f7fc f934 	bl	80013d8 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e006      	b.n	800518c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800517e:	4b05      	ldr	r3, [pc, #20]	@ (8005194 <RCCEx_PLL2_Config+0x12c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0f0      	beq.n	800516c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800518a:	2300      	movs	r3, #0

}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	44020c00 	.word	0x44020c00

08005198 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 80051a0:	4b48      	ldr	r3, [pc, #288]	@ (80052c4 <RCCEx_PLL3_Config+0x12c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a47      	ldr	r2, [pc, #284]	@ (80052c4 <RCCEx_PLL3_Config+0x12c>)
 80051a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051aa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80051ac:	f7fc f914 	bl	80013d8 <HAL_GetTick>
 80051b0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051b2:	e008      	b.n	80051c6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80051b4:	f7fc f910 	bl	80013d8 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e07a      	b.n	80052bc <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051c6:	4b3f      	ldr	r3, [pc, #252]	@ (80052c4 <RCCEx_PLL3_Config+0x12c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1f0      	bne.n	80051b4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80051d2:	4b3c      	ldr	r3, [pc, #240]	@ (80052c4 <RCCEx_PLL3_Config+0x12c>)
 80051d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80051da:	f023 0303 	bic.w	r3, r3, #3
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6811      	ldr	r1, [r2, #0]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	6852      	ldr	r2, [r2, #4]
 80051e6:	0212      	lsls	r2, r2, #8
 80051e8:	430a      	orrs	r2, r1
 80051ea:	4936      	ldr	r1, [pc, #216]	@ (80052c4 <RCCEx_PLL3_Config+0x12c>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	630b      	str	r3, [r1, #48]	@ 0x30
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	3b01      	subs	r3, #1
 80051f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	3b01      	subs	r3, #1
 8005200:	025b      	lsls	r3, r3, #9
 8005202:	b29b      	uxth	r3, r3
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	3b01      	subs	r3, #1
 800520c:	041b      	lsls	r3, r3, #16
 800520e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005212:	431a      	orrs	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	3b01      	subs	r3, #1
 800521a:	061b      	lsls	r3, r3, #24
 800521c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005220:	4928      	ldr	r1, [pc, #160]	@ (80052c4 <RCCEx_PLL3_Config+0x12c>)
 8005222:	4313      	orrs	r3, r2
 8005224:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005226:	4b27      	ldr	r3, [pc, #156]	@ (80052c4 <RCCEx_PLL3_Config+0x12c>)
 8005228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800522a:	f023 020c 	bic.w	r2, r3, #12
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	4924      	ldr	r1, [pc, #144]	@ (80052c4 <RCCEx_PLL3_Config+0x12c>)
 8005234:	4313      	orrs	r3, r2
 8005236:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8005238:	4b22      	ldr	r3, [pc, #136]	@ (80052c4 <RCCEx_PLL3_Config+0x12c>)
 800523a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800523c:	f023 0220 	bic.w	r2, r3, #32
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	491f      	ldr	r1, [pc, #124]	@ (80052c4 <RCCEx_PLL3_Config+0x12c>)
 8005246:	4313      	orrs	r3, r2
 8005248:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800524a:	4b1e      	ldr	r3, [pc, #120]	@ (80052c4 <RCCEx_PLL3_Config+0x12c>)
 800524c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005252:	491c      	ldr	r1, [pc, #112]	@ (80052c4 <RCCEx_PLL3_Config+0x12c>)
 8005254:	4313      	orrs	r3, r2
 8005256:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8005258:	4b1a      	ldr	r3, [pc, #104]	@ (80052c4 <RCCEx_PLL3_Config+0x12c>)
 800525a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800525c:	4a19      	ldr	r2, [pc, #100]	@ (80052c4 <RCCEx_PLL3_Config+0x12c>)
 800525e:	f023 0310 	bic.w	r3, r3, #16
 8005262:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8005264:	4b17      	ldr	r3, [pc, #92]	@ (80052c4 <RCCEx_PLL3_Config+0x12c>)
 8005266:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005268:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800526c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6a12      	ldr	r2, [r2, #32]
 8005274:	00d2      	lsls	r2, r2, #3
 8005276:	4913      	ldr	r1, [pc, #76]	@ (80052c4 <RCCEx_PLL3_Config+0x12c>)
 8005278:	4313      	orrs	r3, r2
 800527a:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800527c:	4b11      	ldr	r3, [pc, #68]	@ (80052c4 <RCCEx_PLL3_Config+0x12c>)
 800527e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005280:	4a10      	ldr	r2, [pc, #64]	@ (80052c4 <RCCEx_PLL3_Config+0x12c>)
 8005282:	f043 0310 	orr.w	r3, r3, #16
 8005286:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8005288:	4b0e      	ldr	r3, [pc, #56]	@ (80052c4 <RCCEx_PLL3_Config+0x12c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a0d      	ldr	r2, [pc, #52]	@ (80052c4 <RCCEx_PLL3_Config+0x12c>)
 800528e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005292:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005294:	f7fc f8a0 	bl	80013d8 <HAL_GetTick>
 8005298:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800529a:	e008      	b.n	80052ae <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800529c:	f7fc f89c 	bl	80013d8 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d901      	bls.n	80052ae <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e006      	b.n	80052bc <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052ae:	4b05      	ldr	r3, [pc, #20]	@ (80052c4 <RCCEx_PLL3_Config+0x12c>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d0f0      	beq.n	800529c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	44020c00 	.word	0x44020c00

080052c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e049      	b.n	800536e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d106      	bne.n	80052f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7fb ffb0 	bl	8001254 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3304      	adds	r3, #4
 8005304:	4619      	mov	r1, r3
 8005306:	4610      	mov	r0, r2
 8005308:	f000 fe50 	bl	8005fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
	...

08005378 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b01      	cmp	r3, #1
 800538a:	d001      	beq.n	8005390 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e07c      	b.n	800548a <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68da      	ldr	r2, [r3, #12]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0201 	orr.w	r2, r2, #1
 80053a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a3a      	ldr	r2, [pc, #232]	@ (8005498 <HAL_TIM_Base_Start_IT+0x120>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d04a      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0xd0>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a39      	ldr	r2, [pc, #228]	@ (800549c <HAL_TIM_Base_Start_IT+0x124>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d045      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0xd0>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053c4:	d040      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0xd0>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053ce:	d03b      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0xd0>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a32      	ldr	r2, [pc, #200]	@ (80054a0 <HAL_TIM_Base_Start_IT+0x128>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d036      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0xd0>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a31      	ldr	r2, [pc, #196]	@ (80054a4 <HAL_TIM_Base_Start_IT+0x12c>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d031      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0xd0>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a2f      	ldr	r2, [pc, #188]	@ (80054a8 <HAL_TIM_Base_Start_IT+0x130>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d02c      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0xd0>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a2e      	ldr	r2, [pc, #184]	@ (80054ac <HAL_TIM_Base_Start_IT+0x134>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d027      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0xd0>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a2c      	ldr	r2, [pc, #176]	@ (80054b0 <HAL_TIM_Base_Start_IT+0x138>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d022      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0xd0>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a2b      	ldr	r2, [pc, #172]	@ (80054b4 <HAL_TIM_Base_Start_IT+0x13c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d01d      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0xd0>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a29      	ldr	r2, [pc, #164]	@ (80054b8 <HAL_TIM_Base_Start_IT+0x140>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d018      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0xd0>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a28      	ldr	r2, [pc, #160]	@ (80054bc <HAL_TIM_Base_Start_IT+0x144>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d013      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0xd0>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a26      	ldr	r2, [pc, #152]	@ (80054c0 <HAL_TIM_Base_Start_IT+0x148>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00e      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0xd0>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a25      	ldr	r2, [pc, #148]	@ (80054c4 <HAL_TIM_Base_Start_IT+0x14c>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d009      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0xd0>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a23      	ldr	r2, [pc, #140]	@ (80054c8 <HAL_TIM_Base_Start_IT+0x150>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d004      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0xd0>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a22      	ldr	r2, [pc, #136]	@ (80054cc <HAL_TIM_Base_Start_IT+0x154>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d115      	bne.n	8005474 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689a      	ldr	r2, [r3, #8]
 800544e:	4b20      	ldr	r3, [pc, #128]	@ (80054d0 <HAL_TIM_Base_Start_IT+0x158>)
 8005450:	4013      	ands	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b06      	cmp	r3, #6
 8005458:	d015      	beq.n	8005486 <HAL_TIM_Base_Start_IT+0x10e>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005460:	d011      	beq.n	8005486 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f042 0201 	orr.w	r2, r2, #1
 8005470:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005472:	e008      	b.n	8005486 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0201 	orr.w	r2, r2, #1
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	e000      	b.n	8005488 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005486:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	40012c00 	.word	0x40012c00
 800549c:	50012c00 	.word	0x50012c00
 80054a0:	40000400 	.word	0x40000400
 80054a4:	50000400 	.word	0x50000400
 80054a8:	40000800 	.word	0x40000800
 80054ac:	50000800 	.word	0x50000800
 80054b0:	40000c00 	.word	0x40000c00
 80054b4:	50000c00 	.word	0x50000c00
 80054b8:	40013400 	.word	0x40013400
 80054bc:	50013400 	.word	0x50013400
 80054c0:	40001800 	.word	0x40001800
 80054c4:	50001800 	.word	0x50001800
 80054c8:	40014000 	.word	0x40014000
 80054cc:	50014000 	.word	0x50014000
 80054d0:	00010007 	.word	0x00010007

080054d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e049      	b.n	800557a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d106      	bne.n	8005500 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f841 	bl	8005582 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3304      	adds	r3, #4
 8005510:	4619      	mov	r1, r3
 8005512:	4610      	mov	r0, r2
 8005514:	f000 fd4a 	bl	8005fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
	...

08005598 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d109      	bne.n	80055bc <HAL_TIM_PWM_Start+0x24>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	bf14      	ite	ne
 80055b4:	2301      	movne	r3, #1
 80055b6:	2300      	moveq	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	e03c      	b.n	8005636 <HAL_TIM_PWM_Start+0x9e>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d109      	bne.n	80055d6 <HAL_TIM_PWM_Start+0x3e>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	bf14      	ite	ne
 80055ce:	2301      	movne	r3, #1
 80055d0:	2300      	moveq	r3, #0
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	e02f      	b.n	8005636 <HAL_TIM_PWM_Start+0x9e>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d109      	bne.n	80055f0 <HAL_TIM_PWM_Start+0x58>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	bf14      	ite	ne
 80055e8:	2301      	movne	r3, #1
 80055ea:	2300      	moveq	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	e022      	b.n	8005636 <HAL_TIM_PWM_Start+0x9e>
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	2b0c      	cmp	r3, #12
 80055f4:	d109      	bne.n	800560a <HAL_TIM_PWM_Start+0x72>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b01      	cmp	r3, #1
 8005600:	bf14      	ite	ne
 8005602:	2301      	movne	r3, #1
 8005604:	2300      	moveq	r3, #0
 8005606:	b2db      	uxtb	r3, r3
 8005608:	e015      	b.n	8005636 <HAL_TIM_PWM_Start+0x9e>
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b10      	cmp	r3, #16
 800560e:	d109      	bne.n	8005624 <HAL_TIM_PWM_Start+0x8c>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b01      	cmp	r3, #1
 800561a:	bf14      	ite	ne
 800561c:	2301      	movne	r3, #1
 800561e:	2300      	moveq	r3, #0
 8005620:	b2db      	uxtb	r3, r3
 8005622:	e008      	b.n	8005636 <HAL_TIM_PWM_Start+0x9e>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b01      	cmp	r3, #1
 800562e:	bf14      	ite	ne
 8005630:	2301      	movne	r3, #1
 8005632:	2300      	moveq	r3, #0
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e0e2      	b.n	8005804 <HAL_TIM_PWM_Start+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d104      	bne.n	800564e <HAL_TIM_PWM_Start+0xb6>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800564c:	e023      	b.n	8005696 <HAL_TIM_PWM_Start+0xfe>
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b04      	cmp	r3, #4
 8005652:	d104      	bne.n	800565e <HAL_TIM_PWM_Start+0xc6>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800565c:	e01b      	b.n	8005696 <HAL_TIM_PWM_Start+0xfe>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b08      	cmp	r3, #8
 8005662:	d104      	bne.n	800566e <HAL_TIM_PWM_Start+0xd6>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800566c:	e013      	b.n	8005696 <HAL_TIM_PWM_Start+0xfe>
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b0c      	cmp	r3, #12
 8005672:	d104      	bne.n	800567e <HAL_TIM_PWM_Start+0xe6>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800567c:	e00b      	b.n	8005696 <HAL_TIM_PWM_Start+0xfe>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b10      	cmp	r3, #16
 8005682:	d104      	bne.n	800568e <HAL_TIM_PWM_Start+0xf6>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800568c:	e003      	b.n	8005696 <HAL_TIM_PWM_Start+0xfe>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2202      	movs	r2, #2
 8005692:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2201      	movs	r2, #1
 800569c:	6839      	ldr	r1, [r7, #0]
 800569e:	4618      	mov	r0, r3
 80056a0:	f001 fa20 	bl	8006ae4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a58      	ldr	r2, [pc, #352]	@ (800580c <HAL_TIM_PWM_Start+0x274>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d02c      	beq.n	8005708 <HAL_TIM_PWM_Start+0x170>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a57      	ldr	r2, [pc, #348]	@ (8005810 <HAL_TIM_PWM_Start+0x278>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d027      	beq.n	8005708 <HAL_TIM_PWM_Start+0x170>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a55      	ldr	r2, [pc, #340]	@ (8005814 <HAL_TIM_PWM_Start+0x27c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d022      	beq.n	8005708 <HAL_TIM_PWM_Start+0x170>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a54      	ldr	r2, [pc, #336]	@ (8005818 <HAL_TIM_PWM_Start+0x280>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d01d      	beq.n	8005708 <HAL_TIM_PWM_Start+0x170>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a52      	ldr	r2, [pc, #328]	@ (800581c <HAL_TIM_PWM_Start+0x284>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d018      	beq.n	8005708 <HAL_TIM_PWM_Start+0x170>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a51      	ldr	r2, [pc, #324]	@ (8005820 <HAL_TIM_PWM_Start+0x288>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d013      	beq.n	8005708 <HAL_TIM_PWM_Start+0x170>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a4f      	ldr	r2, [pc, #316]	@ (8005824 <HAL_TIM_PWM_Start+0x28c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d00e      	beq.n	8005708 <HAL_TIM_PWM_Start+0x170>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a4e      	ldr	r2, [pc, #312]	@ (8005828 <HAL_TIM_PWM_Start+0x290>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d009      	beq.n	8005708 <HAL_TIM_PWM_Start+0x170>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a4c      	ldr	r2, [pc, #304]	@ (800582c <HAL_TIM_PWM_Start+0x294>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d004      	beq.n	8005708 <HAL_TIM_PWM_Start+0x170>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a4b      	ldr	r2, [pc, #300]	@ (8005830 <HAL_TIM_PWM_Start+0x298>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d101      	bne.n	800570c <HAL_TIM_PWM_Start+0x174>
 8005708:	2301      	movs	r3, #1
 800570a:	e000      	b.n	800570e <HAL_TIM_PWM_Start+0x176>
 800570c:	2300      	movs	r3, #0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d007      	beq.n	8005722 <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005720:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a39      	ldr	r2, [pc, #228]	@ (800580c <HAL_TIM_PWM_Start+0x274>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d04a      	beq.n	80057c2 <HAL_TIM_PWM_Start+0x22a>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a37      	ldr	r2, [pc, #220]	@ (8005810 <HAL_TIM_PWM_Start+0x278>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d045      	beq.n	80057c2 <HAL_TIM_PWM_Start+0x22a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800573e:	d040      	beq.n	80057c2 <HAL_TIM_PWM_Start+0x22a>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005748:	d03b      	beq.n	80057c2 <HAL_TIM_PWM_Start+0x22a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a39      	ldr	r2, [pc, #228]	@ (8005834 <HAL_TIM_PWM_Start+0x29c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d036      	beq.n	80057c2 <HAL_TIM_PWM_Start+0x22a>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a37      	ldr	r2, [pc, #220]	@ (8005838 <HAL_TIM_PWM_Start+0x2a0>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d031      	beq.n	80057c2 <HAL_TIM_PWM_Start+0x22a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a36      	ldr	r2, [pc, #216]	@ (800583c <HAL_TIM_PWM_Start+0x2a4>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d02c      	beq.n	80057c2 <HAL_TIM_PWM_Start+0x22a>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a34      	ldr	r2, [pc, #208]	@ (8005840 <HAL_TIM_PWM_Start+0x2a8>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d027      	beq.n	80057c2 <HAL_TIM_PWM_Start+0x22a>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a33      	ldr	r2, [pc, #204]	@ (8005844 <HAL_TIM_PWM_Start+0x2ac>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d022      	beq.n	80057c2 <HAL_TIM_PWM_Start+0x22a>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a31      	ldr	r2, [pc, #196]	@ (8005848 <HAL_TIM_PWM_Start+0x2b0>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d01d      	beq.n	80057c2 <HAL_TIM_PWM_Start+0x22a>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a22      	ldr	r2, [pc, #136]	@ (8005814 <HAL_TIM_PWM_Start+0x27c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d018      	beq.n	80057c2 <HAL_TIM_PWM_Start+0x22a>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a20      	ldr	r2, [pc, #128]	@ (8005818 <HAL_TIM_PWM_Start+0x280>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d013      	beq.n	80057c2 <HAL_TIM_PWM_Start+0x22a>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a2b      	ldr	r2, [pc, #172]	@ (800584c <HAL_TIM_PWM_Start+0x2b4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00e      	beq.n	80057c2 <HAL_TIM_PWM_Start+0x22a>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a29      	ldr	r2, [pc, #164]	@ (8005850 <HAL_TIM_PWM_Start+0x2b8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d009      	beq.n	80057c2 <HAL_TIM_PWM_Start+0x22a>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a1a      	ldr	r2, [pc, #104]	@ (800581c <HAL_TIM_PWM_Start+0x284>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d004      	beq.n	80057c2 <HAL_TIM_PWM_Start+0x22a>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a18      	ldr	r2, [pc, #96]	@ (8005820 <HAL_TIM_PWM_Start+0x288>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d115      	bne.n	80057ee <HAL_TIM_PWM_Start+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	4b22      	ldr	r3, [pc, #136]	@ (8005854 <HAL_TIM_PWM_Start+0x2bc>)
 80057ca:	4013      	ands	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2b06      	cmp	r3, #6
 80057d2:	d015      	beq.n	8005800 <HAL_TIM_PWM_Start+0x268>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057da:	d011      	beq.n	8005800 <HAL_TIM_PWM_Start+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0201 	orr.w	r2, r2, #1
 80057ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ec:	e008      	b.n	8005800 <HAL_TIM_PWM_Start+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f042 0201 	orr.w	r2, r2, #1
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	e000      	b.n	8005802 <HAL_TIM_PWM_Start+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005800:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	40012c00 	.word	0x40012c00
 8005810:	50012c00 	.word	0x50012c00
 8005814:	40013400 	.word	0x40013400
 8005818:	50013400 	.word	0x50013400
 800581c:	40014000 	.word	0x40014000
 8005820:	50014000 	.word	0x50014000
 8005824:	40014400 	.word	0x40014400
 8005828:	50014400 	.word	0x50014400
 800582c:	40014800 	.word	0x40014800
 8005830:	50014800 	.word	0x50014800
 8005834:	40000400 	.word	0x40000400
 8005838:	50000400 	.word	0x50000400
 800583c:	40000800 	.word	0x40000800
 8005840:	50000800 	.word	0x50000800
 8005844:	40000c00 	.word	0x40000c00
 8005848:	50000c00 	.word	0x50000c00
 800584c:	40001800 	.word	0x40001800
 8005850:	50001800 	.word	0x50001800
 8005854:	00010007 	.word	0x00010007

08005858 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d020      	beq.n	80058bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01b      	beq.n	80058bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f06f 0202 	mvn.w	r2, #2
 800588c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fb64 	bl	8005f70 <HAL_TIM_IC_CaptureCallback>
 80058a8:	e005      	b.n	80058b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fb56 	bl	8005f5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 fb67 	bl	8005f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f003 0304 	and.w	r3, r3, #4
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d020      	beq.n	8005908 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d01b      	beq.n	8005908 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f06f 0204 	mvn.w	r2, #4
 80058d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2202      	movs	r2, #2
 80058de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fb3e 	bl	8005f70 <HAL_TIM_IC_CaptureCallback>
 80058f4:	e005      	b.n	8005902 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fb30 	bl	8005f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fb41 	bl	8005f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f003 0308 	and.w	r3, r3, #8
 800590e:	2b00      	cmp	r3, #0
 8005910:	d020      	beq.n	8005954 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f003 0308 	and.w	r3, r3, #8
 8005918:	2b00      	cmp	r3, #0
 800591a:	d01b      	beq.n	8005954 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f06f 0208 	mvn.w	r2, #8
 8005924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2204      	movs	r2, #4
 800592a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	f003 0303 	and.w	r3, r3, #3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fb18 	bl	8005f70 <HAL_TIM_IC_CaptureCallback>
 8005940:	e005      	b.n	800594e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fb0a 	bl	8005f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fb1b 	bl	8005f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f003 0310 	and.w	r3, r3, #16
 800595a:	2b00      	cmp	r3, #0
 800595c:	d020      	beq.n	80059a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f003 0310 	and.w	r3, r3, #16
 8005964:	2b00      	cmp	r3, #0
 8005966:	d01b      	beq.n	80059a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f06f 0210 	mvn.w	r2, #16
 8005970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2208      	movs	r2, #8
 8005976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 faf2 	bl	8005f70 <HAL_TIM_IC_CaptureCallback>
 800598c:	e005      	b.n	800599a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fae4 	bl	8005f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 faf5 	bl	8005f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00c      	beq.n	80059c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d007      	beq.n	80059c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f06f 0201 	mvn.w	r2, #1
 80059bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7fb fa8a 	bl	8000ed8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d104      	bne.n	80059d8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00c      	beq.n	80059f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d007      	beq.n	80059f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80059ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f001 f979 	bl	8006ce4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00c      	beq.n	8005a16 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d007      	beq.n	8005a16 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f001 f971 	bl	8006cf8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00c      	beq.n	8005a3a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d007      	beq.n	8005a3a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 faaf 	bl	8005f98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	f003 0320 	and.w	r3, r3, #32
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00c      	beq.n	8005a5e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f003 0320 	and.w	r3, r3, #32
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d007      	beq.n	8005a5e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f06f 0220 	mvn.w	r2, #32
 8005a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f001 f939 	bl	8006cd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00c      	beq.n	8005a82 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d007      	beq.n	8005a82 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f001 f945 	bl	8006d0c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00c      	beq.n	8005aa6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d007      	beq.n	8005aa6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f001 f93d 	bl	8006d20 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00c      	beq.n	8005aca <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d007      	beq.n	8005aca <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f001 f935 	bl	8006d34 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00c      	beq.n	8005aee <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d007      	beq.n	8005aee <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f001 f92d 	bl	8006d48 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005aee:	bf00      	nop
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b04:	2300      	movs	r3, #0
 8005b06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d101      	bne.n	8005b16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b12:	2302      	movs	r3, #2
 8005b14:	e0ff      	b.n	8005d16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b14      	cmp	r3, #20
 8005b22:	f200 80f0 	bhi.w	8005d06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b26:	a201      	add	r2, pc, #4	@ (adr r2, 8005b2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2c:	08005b81 	.word	0x08005b81
 8005b30:	08005d07 	.word	0x08005d07
 8005b34:	08005d07 	.word	0x08005d07
 8005b38:	08005d07 	.word	0x08005d07
 8005b3c:	08005bc1 	.word	0x08005bc1
 8005b40:	08005d07 	.word	0x08005d07
 8005b44:	08005d07 	.word	0x08005d07
 8005b48:	08005d07 	.word	0x08005d07
 8005b4c:	08005c03 	.word	0x08005c03
 8005b50:	08005d07 	.word	0x08005d07
 8005b54:	08005d07 	.word	0x08005d07
 8005b58:	08005d07 	.word	0x08005d07
 8005b5c:	08005c43 	.word	0x08005c43
 8005b60:	08005d07 	.word	0x08005d07
 8005b64:	08005d07 	.word	0x08005d07
 8005b68:	08005d07 	.word	0x08005d07
 8005b6c:	08005c85 	.word	0x08005c85
 8005b70:	08005d07 	.word	0x08005d07
 8005b74:	08005d07 	.word	0x08005d07
 8005b78:	08005d07 	.word	0x08005d07
 8005b7c:	08005cc5 	.word	0x08005cc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68b9      	ldr	r1, [r7, #8]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 fb3a 	bl	8006200 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	699a      	ldr	r2, [r3, #24]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0208 	orr.w	r2, r2, #8
 8005b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699a      	ldr	r2, [r3, #24]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0204 	bic.w	r2, r2, #4
 8005baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6999      	ldr	r1, [r3, #24]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	691a      	ldr	r2, [r3, #16]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	619a      	str	r2, [r3, #24]
      break;
 8005bbe:	e0a5      	b.n	8005d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68b9      	ldr	r1, [r7, #8]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 fbdc 	bl	8006384 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	699a      	ldr	r2, [r3, #24]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6999      	ldr	r1, [r3, #24]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	021a      	lsls	r2, r3, #8
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	619a      	str	r2, [r3, #24]
      break;
 8005c00:	e084      	b.n	8005d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68b9      	ldr	r1, [r7, #8]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 fc6b 	bl	80064e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69da      	ldr	r2, [r3, #28]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f042 0208 	orr.w	r2, r2, #8
 8005c1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	69da      	ldr	r2, [r3, #28]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 0204 	bic.w	r2, r2, #4
 8005c2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69d9      	ldr	r1, [r3, #28]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	691a      	ldr	r2, [r3, #16]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	61da      	str	r2, [r3, #28]
      break;
 8005c40:	e064      	b.n	8005d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fcf9 	bl	8006640 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69da      	ldr	r2, [r3, #28]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69da      	ldr	r2, [r3, #28]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69d9      	ldr	r1, [r3, #28]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	021a      	lsls	r2, r3, #8
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	61da      	str	r2, [r3, #28]
      break;
 8005c82:	e043      	b.n	8005d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68b9      	ldr	r1, [r7, #8]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 fd88 	bl	80067a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0208 	orr.w	r2, r2, #8
 8005c9e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0204 	bic.w	r2, r2, #4
 8005cae:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	691a      	ldr	r2, [r3, #16]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005cc2:	e023      	b.n	8005d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68b9      	ldr	r1, [r7, #8]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 fdea 	bl	80068a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cde:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	021a      	lsls	r2, r3, #8
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005d04:	e002      	b.n	8005d0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	75fb      	strb	r3, [r7, #23]
      break;
 8005d0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop

08005d20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d101      	bne.n	8005d3c <HAL_TIM_ConfigClockSource+0x1c>
 8005d38:	2302      	movs	r3, #2
 8005d3a:	e0fe      	b.n	8005f3a <HAL_TIM_ConfigClockSource+0x21a>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005d5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d78:	f000 80c9 	beq.w	8005f0e <HAL_TIM_ConfigClockSource+0x1ee>
 8005d7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d80:	f200 80ce 	bhi.w	8005f20 <HAL_TIM_ConfigClockSource+0x200>
 8005d84:	4a6f      	ldr	r2, [pc, #444]	@ (8005f44 <HAL_TIM_ConfigClockSource+0x224>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	f000 80c1 	beq.w	8005f0e <HAL_TIM_ConfigClockSource+0x1ee>
 8005d8c:	4a6d      	ldr	r2, [pc, #436]	@ (8005f44 <HAL_TIM_ConfigClockSource+0x224>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	f200 80c6 	bhi.w	8005f20 <HAL_TIM_ConfigClockSource+0x200>
 8005d94:	4a6c      	ldr	r2, [pc, #432]	@ (8005f48 <HAL_TIM_ConfigClockSource+0x228>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	f000 80b9 	beq.w	8005f0e <HAL_TIM_ConfigClockSource+0x1ee>
 8005d9c:	4a6a      	ldr	r2, [pc, #424]	@ (8005f48 <HAL_TIM_ConfigClockSource+0x228>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	f200 80be 	bhi.w	8005f20 <HAL_TIM_ConfigClockSource+0x200>
 8005da4:	4a69      	ldr	r2, [pc, #420]	@ (8005f4c <HAL_TIM_ConfigClockSource+0x22c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	f000 80b1 	beq.w	8005f0e <HAL_TIM_ConfigClockSource+0x1ee>
 8005dac:	4a67      	ldr	r2, [pc, #412]	@ (8005f4c <HAL_TIM_ConfigClockSource+0x22c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	f200 80b6 	bhi.w	8005f20 <HAL_TIM_ConfigClockSource+0x200>
 8005db4:	4a66      	ldr	r2, [pc, #408]	@ (8005f50 <HAL_TIM_ConfigClockSource+0x230>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	f000 80a9 	beq.w	8005f0e <HAL_TIM_ConfigClockSource+0x1ee>
 8005dbc:	4a64      	ldr	r2, [pc, #400]	@ (8005f50 <HAL_TIM_ConfigClockSource+0x230>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	f200 80ae 	bhi.w	8005f20 <HAL_TIM_ConfigClockSource+0x200>
 8005dc4:	4a63      	ldr	r2, [pc, #396]	@ (8005f54 <HAL_TIM_ConfigClockSource+0x234>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	f000 80a1 	beq.w	8005f0e <HAL_TIM_ConfigClockSource+0x1ee>
 8005dcc:	4a61      	ldr	r2, [pc, #388]	@ (8005f54 <HAL_TIM_ConfigClockSource+0x234>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	f200 80a6 	bhi.w	8005f20 <HAL_TIM_ConfigClockSource+0x200>
 8005dd4:	4a60      	ldr	r2, [pc, #384]	@ (8005f58 <HAL_TIM_ConfigClockSource+0x238>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	f000 8099 	beq.w	8005f0e <HAL_TIM_ConfigClockSource+0x1ee>
 8005ddc:	4a5e      	ldr	r2, [pc, #376]	@ (8005f58 <HAL_TIM_ConfigClockSource+0x238>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	f200 809e 	bhi.w	8005f20 <HAL_TIM_ConfigClockSource+0x200>
 8005de4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005de8:	f000 8091 	beq.w	8005f0e <HAL_TIM_ConfigClockSource+0x1ee>
 8005dec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005df0:	f200 8096 	bhi.w	8005f20 <HAL_TIM_ConfigClockSource+0x200>
 8005df4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005df8:	f000 8089 	beq.w	8005f0e <HAL_TIM_ConfigClockSource+0x1ee>
 8005dfc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e00:	f200 808e 	bhi.w	8005f20 <HAL_TIM_ConfigClockSource+0x200>
 8005e04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e08:	d03e      	beq.n	8005e88 <HAL_TIM_ConfigClockSource+0x168>
 8005e0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e0e:	f200 8087 	bhi.w	8005f20 <HAL_TIM_ConfigClockSource+0x200>
 8005e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e16:	f000 8086 	beq.w	8005f26 <HAL_TIM_ConfigClockSource+0x206>
 8005e1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e1e:	d87f      	bhi.n	8005f20 <HAL_TIM_ConfigClockSource+0x200>
 8005e20:	2b70      	cmp	r3, #112	@ 0x70
 8005e22:	d01a      	beq.n	8005e5a <HAL_TIM_ConfigClockSource+0x13a>
 8005e24:	2b70      	cmp	r3, #112	@ 0x70
 8005e26:	d87b      	bhi.n	8005f20 <HAL_TIM_ConfigClockSource+0x200>
 8005e28:	2b60      	cmp	r3, #96	@ 0x60
 8005e2a:	d050      	beq.n	8005ece <HAL_TIM_ConfigClockSource+0x1ae>
 8005e2c:	2b60      	cmp	r3, #96	@ 0x60
 8005e2e:	d877      	bhi.n	8005f20 <HAL_TIM_ConfigClockSource+0x200>
 8005e30:	2b50      	cmp	r3, #80	@ 0x50
 8005e32:	d03c      	beq.n	8005eae <HAL_TIM_ConfigClockSource+0x18e>
 8005e34:	2b50      	cmp	r3, #80	@ 0x50
 8005e36:	d873      	bhi.n	8005f20 <HAL_TIM_ConfigClockSource+0x200>
 8005e38:	2b40      	cmp	r3, #64	@ 0x40
 8005e3a:	d058      	beq.n	8005eee <HAL_TIM_ConfigClockSource+0x1ce>
 8005e3c:	2b40      	cmp	r3, #64	@ 0x40
 8005e3e:	d86f      	bhi.n	8005f20 <HAL_TIM_ConfigClockSource+0x200>
 8005e40:	2b30      	cmp	r3, #48	@ 0x30
 8005e42:	d064      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0x1ee>
 8005e44:	2b30      	cmp	r3, #48	@ 0x30
 8005e46:	d86b      	bhi.n	8005f20 <HAL_TIM_ConfigClockSource+0x200>
 8005e48:	2b20      	cmp	r3, #32
 8005e4a:	d060      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0x1ee>
 8005e4c:	2b20      	cmp	r3, #32
 8005e4e:	d867      	bhi.n	8005f20 <HAL_TIM_ConfigClockSource+0x200>
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d05c      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0x1ee>
 8005e54:	2b10      	cmp	r3, #16
 8005e56:	d05a      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0x1ee>
 8005e58:	e062      	b.n	8005f20 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e6a:	f000 fe1b 	bl	8006aa4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	609a      	str	r2, [r3, #8]
      break;
 8005e86:	e04f      	b.n	8005f28 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e98:	f000 fe04 	bl	8006aa4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689a      	ldr	r2, [r3, #8]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005eaa:	609a      	str	r2, [r3, #8]
      break;
 8005eac:	e03c      	b.n	8005f28 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f000 fd76 	bl	80069ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2150      	movs	r1, #80	@ 0x50
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 fdcf 	bl	8006a6a <TIM_ITRx_SetConfig>
      break;
 8005ecc:	e02c      	b.n	8005f28 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eda:	461a      	mov	r2, r3
 8005edc:	f000 fd95 	bl	8006a0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2160      	movs	r1, #96	@ 0x60
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 fdbf 	bl	8006a6a <TIM_ITRx_SetConfig>
      break;
 8005eec:	e01c      	b.n	8005f28 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005efa:	461a      	mov	r2, r3
 8005efc:	f000 fd56 	bl	80069ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2140      	movs	r1, #64	@ 0x40
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 fdaf 	bl	8006a6a <TIM_ITRx_SetConfig>
      break;
 8005f0c:	e00c      	b.n	8005f28 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4619      	mov	r1, r3
 8005f18:	4610      	mov	r0, r2
 8005f1a:	f000 fda6 	bl	8006a6a <TIM_ITRx_SetConfig>
      break;
 8005f1e:	e003      	b.n	8005f28 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	73fb      	strb	r3, [r7, #15]
      break;
 8005f24:	e000      	b.n	8005f28 <HAL_TIM_ConfigClockSource+0x208>
      break;
 8005f26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	00100070 	.word	0x00100070
 8005f48:	00100060 	.word	0x00100060
 8005f4c:	00100050 	.word	0x00100050
 8005f50:	00100040 	.word	0x00100040
 8005f54:	00100030 	.word	0x00100030
 8005f58:	00100020 	.word	0x00100020

08005f5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a7a      	ldr	r2, [pc, #488]	@ (80061a8 <TIM_Base_SetConfig+0x1fc>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d02b      	beq.n	800601c <TIM_Base_SetConfig+0x70>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a79      	ldr	r2, [pc, #484]	@ (80061ac <TIM_Base_SetConfig+0x200>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d027      	beq.n	800601c <TIM_Base_SetConfig+0x70>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fd2:	d023      	beq.n	800601c <TIM_Base_SetConfig+0x70>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fda:	d01f      	beq.n	800601c <TIM_Base_SetConfig+0x70>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a74      	ldr	r2, [pc, #464]	@ (80061b0 <TIM_Base_SetConfig+0x204>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d01b      	beq.n	800601c <TIM_Base_SetConfig+0x70>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a73      	ldr	r2, [pc, #460]	@ (80061b4 <TIM_Base_SetConfig+0x208>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d017      	beq.n	800601c <TIM_Base_SetConfig+0x70>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a72      	ldr	r2, [pc, #456]	@ (80061b8 <TIM_Base_SetConfig+0x20c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d013      	beq.n	800601c <TIM_Base_SetConfig+0x70>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a71      	ldr	r2, [pc, #452]	@ (80061bc <TIM_Base_SetConfig+0x210>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d00f      	beq.n	800601c <TIM_Base_SetConfig+0x70>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a70      	ldr	r2, [pc, #448]	@ (80061c0 <TIM_Base_SetConfig+0x214>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d00b      	beq.n	800601c <TIM_Base_SetConfig+0x70>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a6f      	ldr	r2, [pc, #444]	@ (80061c4 <TIM_Base_SetConfig+0x218>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d007      	beq.n	800601c <TIM_Base_SetConfig+0x70>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a6e      	ldr	r2, [pc, #440]	@ (80061c8 <TIM_Base_SetConfig+0x21c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d003      	beq.n	800601c <TIM_Base_SetConfig+0x70>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a6d      	ldr	r2, [pc, #436]	@ (80061cc <TIM_Base_SetConfig+0x220>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d108      	bne.n	800602e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	4313      	orrs	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a5d      	ldr	r2, [pc, #372]	@ (80061a8 <TIM_Base_SetConfig+0x1fc>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d05b      	beq.n	80060ee <TIM_Base_SetConfig+0x142>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a5c      	ldr	r2, [pc, #368]	@ (80061ac <TIM_Base_SetConfig+0x200>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d057      	beq.n	80060ee <TIM_Base_SetConfig+0x142>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006044:	d053      	beq.n	80060ee <TIM_Base_SetConfig+0x142>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800604c:	d04f      	beq.n	80060ee <TIM_Base_SetConfig+0x142>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a57      	ldr	r2, [pc, #348]	@ (80061b0 <TIM_Base_SetConfig+0x204>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d04b      	beq.n	80060ee <TIM_Base_SetConfig+0x142>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a56      	ldr	r2, [pc, #344]	@ (80061b4 <TIM_Base_SetConfig+0x208>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d047      	beq.n	80060ee <TIM_Base_SetConfig+0x142>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a55      	ldr	r2, [pc, #340]	@ (80061b8 <TIM_Base_SetConfig+0x20c>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d043      	beq.n	80060ee <TIM_Base_SetConfig+0x142>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a54      	ldr	r2, [pc, #336]	@ (80061bc <TIM_Base_SetConfig+0x210>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d03f      	beq.n	80060ee <TIM_Base_SetConfig+0x142>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a53      	ldr	r2, [pc, #332]	@ (80061c0 <TIM_Base_SetConfig+0x214>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d03b      	beq.n	80060ee <TIM_Base_SetConfig+0x142>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a52      	ldr	r2, [pc, #328]	@ (80061c4 <TIM_Base_SetConfig+0x218>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d037      	beq.n	80060ee <TIM_Base_SetConfig+0x142>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a51      	ldr	r2, [pc, #324]	@ (80061c8 <TIM_Base_SetConfig+0x21c>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d033      	beq.n	80060ee <TIM_Base_SetConfig+0x142>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a50      	ldr	r2, [pc, #320]	@ (80061cc <TIM_Base_SetConfig+0x220>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d02f      	beq.n	80060ee <TIM_Base_SetConfig+0x142>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a4f      	ldr	r2, [pc, #316]	@ (80061d0 <TIM_Base_SetConfig+0x224>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d02b      	beq.n	80060ee <TIM_Base_SetConfig+0x142>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a4e      	ldr	r2, [pc, #312]	@ (80061d4 <TIM_Base_SetConfig+0x228>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d027      	beq.n	80060ee <TIM_Base_SetConfig+0x142>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a4d      	ldr	r2, [pc, #308]	@ (80061d8 <TIM_Base_SetConfig+0x22c>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d023      	beq.n	80060ee <TIM_Base_SetConfig+0x142>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a4c      	ldr	r2, [pc, #304]	@ (80061dc <TIM_Base_SetConfig+0x230>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d01f      	beq.n	80060ee <TIM_Base_SetConfig+0x142>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a4b      	ldr	r2, [pc, #300]	@ (80061e0 <TIM_Base_SetConfig+0x234>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d01b      	beq.n	80060ee <TIM_Base_SetConfig+0x142>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a4a      	ldr	r2, [pc, #296]	@ (80061e4 <TIM_Base_SetConfig+0x238>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d017      	beq.n	80060ee <TIM_Base_SetConfig+0x142>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a49      	ldr	r2, [pc, #292]	@ (80061e8 <TIM_Base_SetConfig+0x23c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d013      	beq.n	80060ee <TIM_Base_SetConfig+0x142>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a48      	ldr	r2, [pc, #288]	@ (80061ec <TIM_Base_SetConfig+0x240>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d00f      	beq.n	80060ee <TIM_Base_SetConfig+0x142>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a47      	ldr	r2, [pc, #284]	@ (80061f0 <TIM_Base_SetConfig+0x244>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00b      	beq.n	80060ee <TIM_Base_SetConfig+0x142>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a46      	ldr	r2, [pc, #280]	@ (80061f4 <TIM_Base_SetConfig+0x248>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d007      	beq.n	80060ee <TIM_Base_SetConfig+0x142>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a45      	ldr	r2, [pc, #276]	@ (80061f8 <TIM_Base_SetConfig+0x24c>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d003      	beq.n	80060ee <TIM_Base_SetConfig+0x142>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a44      	ldr	r2, [pc, #272]	@ (80061fc <TIM_Base_SetConfig+0x250>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d108      	bne.n	8006100 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a20      	ldr	r2, [pc, #128]	@ (80061a8 <TIM_Base_SetConfig+0x1fc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d023      	beq.n	8006174 <TIM_Base_SetConfig+0x1c8>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a1f      	ldr	r2, [pc, #124]	@ (80061ac <TIM_Base_SetConfig+0x200>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d01f      	beq.n	8006174 <TIM_Base_SetConfig+0x1c8>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a24      	ldr	r2, [pc, #144]	@ (80061c8 <TIM_Base_SetConfig+0x21c>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d01b      	beq.n	8006174 <TIM_Base_SetConfig+0x1c8>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a23      	ldr	r2, [pc, #140]	@ (80061cc <TIM_Base_SetConfig+0x220>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d017      	beq.n	8006174 <TIM_Base_SetConfig+0x1c8>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a28      	ldr	r2, [pc, #160]	@ (80061e8 <TIM_Base_SetConfig+0x23c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d013      	beq.n	8006174 <TIM_Base_SetConfig+0x1c8>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a27      	ldr	r2, [pc, #156]	@ (80061ec <TIM_Base_SetConfig+0x240>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d00f      	beq.n	8006174 <TIM_Base_SetConfig+0x1c8>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a26      	ldr	r2, [pc, #152]	@ (80061f0 <TIM_Base_SetConfig+0x244>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d00b      	beq.n	8006174 <TIM_Base_SetConfig+0x1c8>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a25      	ldr	r2, [pc, #148]	@ (80061f4 <TIM_Base_SetConfig+0x248>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d007      	beq.n	8006174 <TIM_Base_SetConfig+0x1c8>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a24      	ldr	r2, [pc, #144]	@ (80061f8 <TIM_Base_SetConfig+0x24c>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d003      	beq.n	8006174 <TIM_Base_SetConfig+0x1c8>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a23      	ldr	r2, [pc, #140]	@ (80061fc <TIM_Base_SetConfig+0x250>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d103      	bne.n	800617c <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	691a      	ldr	r2, [r3, #16]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b01      	cmp	r3, #1
 800618c:	d105      	bne.n	800619a <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f023 0201 	bic.w	r2, r3, #1
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	611a      	str	r2, [r3, #16]
  }
}
 800619a:	bf00      	nop
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	40012c00 	.word	0x40012c00
 80061ac:	50012c00 	.word	0x50012c00
 80061b0:	40000400 	.word	0x40000400
 80061b4:	50000400 	.word	0x50000400
 80061b8:	40000800 	.word	0x40000800
 80061bc:	50000800 	.word	0x50000800
 80061c0:	40000c00 	.word	0x40000c00
 80061c4:	50000c00 	.word	0x50000c00
 80061c8:	40013400 	.word	0x40013400
 80061cc:	50013400 	.word	0x50013400
 80061d0:	40001800 	.word	0x40001800
 80061d4:	50001800 	.word	0x50001800
 80061d8:	40001c00 	.word	0x40001c00
 80061dc:	50001c00 	.word	0x50001c00
 80061e0:	40002000 	.word	0x40002000
 80061e4:	50002000 	.word	0x50002000
 80061e8:	40014000 	.word	0x40014000
 80061ec:	50014000 	.word	0x50014000
 80061f0:	40014400 	.word	0x40014400
 80061f4:	50014400 	.word	0x50014400
 80061f8:	40014800 	.word	0x40014800
 80061fc:	50014800 	.word	0x50014800

08006200 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	f023 0201 	bic.w	r2, r3, #1
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800622e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f023 0303 	bic.w	r3, r3, #3
 800623a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4313      	orrs	r3, r2
 8006244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f023 0302 	bic.w	r3, r3, #2
 800624c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	4313      	orrs	r3, r2
 8006256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a40      	ldr	r2, [pc, #256]	@ (800635c <TIM_OC1_SetConfig+0x15c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d023      	beq.n	80062a8 <TIM_OC1_SetConfig+0xa8>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a3f      	ldr	r2, [pc, #252]	@ (8006360 <TIM_OC1_SetConfig+0x160>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d01f      	beq.n	80062a8 <TIM_OC1_SetConfig+0xa8>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a3e      	ldr	r2, [pc, #248]	@ (8006364 <TIM_OC1_SetConfig+0x164>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d01b      	beq.n	80062a8 <TIM_OC1_SetConfig+0xa8>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a3d      	ldr	r2, [pc, #244]	@ (8006368 <TIM_OC1_SetConfig+0x168>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d017      	beq.n	80062a8 <TIM_OC1_SetConfig+0xa8>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a3c      	ldr	r2, [pc, #240]	@ (800636c <TIM_OC1_SetConfig+0x16c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d013      	beq.n	80062a8 <TIM_OC1_SetConfig+0xa8>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a3b      	ldr	r2, [pc, #236]	@ (8006370 <TIM_OC1_SetConfig+0x170>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d00f      	beq.n	80062a8 <TIM_OC1_SetConfig+0xa8>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a3a      	ldr	r2, [pc, #232]	@ (8006374 <TIM_OC1_SetConfig+0x174>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d00b      	beq.n	80062a8 <TIM_OC1_SetConfig+0xa8>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a39      	ldr	r2, [pc, #228]	@ (8006378 <TIM_OC1_SetConfig+0x178>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d007      	beq.n	80062a8 <TIM_OC1_SetConfig+0xa8>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a38      	ldr	r2, [pc, #224]	@ (800637c <TIM_OC1_SetConfig+0x17c>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d003      	beq.n	80062a8 <TIM_OC1_SetConfig+0xa8>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a37      	ldr	r2, [pc, #220]	@ (8006380 <TIM_OC1_SetConfig+0x180>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d10c      	bne.n	80062c2 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f023 0308 	bic.w	r3, r3, #8
 80062ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f023 0304 	bic.w	r3, r3, #4
 80062c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a25      	ldr	r2, [pc, #148]	@ (800635c <TIM_OC1_SetConfig+0x15c>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d023      	beq.n	8006312 <TIM_OC1_SetConfig+0x112>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a24      	ldr	r2, [pc, #144]	@ (8006360 <TIM_OC1_SetConfig+0x160>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d01f      	beq.n	8006312 <TIM_OC1_SetConfig+0x112>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a23      	ldr	r2, [pc, #140]	@ (8006364 <TIM_OC1_SetConfig+0x164>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d01b      	beq.n	8006312 <TIM_OC1_SetConfig+0x112>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a22      	ldr	r2, [pc, #136]	@ (8006368 <TIM_OC1_SetConfig+0x168>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d017      	beq.n	8006312 <TIM_OC1_SetConfig+0x112>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a21      	ldr	r2, [pc, #132]	@ (800636c <TIM_OC1_SetConfig+0x16c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d013      	beq.n	8006312 <TIM_OC1_SetConfig+0x112>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a20      	ldr	r2, [pc, #128]	@ (8006370 <TIM_OC1_SetConfig+0x170>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d00f      	beq.n	8006312 <TIM_OC1_SetConfig+0x112>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a1f      	ldr	r2, [pc, #124]	@ (8006374 <TIM_OC1_SetConfig+0x174>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d00b      	beq.n	8006312 <TIM_OC1_SetConfig+0x112>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a1e      	ldr	r2, [pc, #120]	@ (8006378 <TIM_OC1_SetConfig+0x178>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d007      	beq.n	8006312 <TIM_OC1_SetConfig+0x112>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a1d      	ldr	r2, [pc, #116]	@ (800637c <TIM_OC1_SetConfig+0x17c>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d003      	beq.n	8006312 <TIM_OC1_SetConfig+0x112>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a1c      	ldr	r2, [pc, #112]	@ (8006380 <TIM_OC1_SetConfig+0x180>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d111      	bne.n	8006336 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	4313      	orrs	r3, r2
 8006334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	621a      	str	r2, [r3, #32]
}
 8006350:	bf00      	nop
 8006352:	371c      	adds	r7, #28
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	40012c00 	.word	0x40012c00
 8006360:	50012c00 	.word	0x50012c00
 8006364:	40013400 	.word	0x40013400
 8006368:	50013400 	.word	0x50013400
 800636c:	40014000 	.word	0x40014000
 8006370:	50014000 	.word	0x50014000
 8006374:	40014400 	.word	0x40014400
 8006378:	50014400 	.word	0x50014400
 800637c:	40014800 	.word	0x40014800
 8006380:	50014800 	.word	0x50014800

08006384 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	f023 0210 	bic.w	r2, r3, #16
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	021b      	lsls	r3, r3, #8
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f023 0320 	bic.w	r3, r3, #32
 80063d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	011b      	lsls	r3, r3, #4
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	4313      	orrs	r3, r2
 80063de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a36      	ldr	r2, [pc, #216]	@ (80064bc <TIM_OC2_SetConfig+0x138>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d00b      	beq.n	8006400 <TIM_OC2_SetConfig+0x7c>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a35      	ldr	r2, [pc, #212]	@ (80064c0 <TIM_OC2_SetConfig+0x13c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d007      	beq.n	8006400 <TIM_OC2_SetConfig+0x7c>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a34      	ldr	r2, [pc, #208]	@ (80064c4 <TIM_OC2_SetConfig+0x140>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d003      	beq.n	8006400 <TIM_OC2_SetConfig+0x7c>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a33      	ldr	r2, [pc, #204]	@ (80064c8 <TIM_OC2_SetConfig+0x144>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d10d      	bne.n	800641c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	011b      	lsls	r3, r3, #4
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	4313      	orrs	r3, r2
 8006412:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800641a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a27      	ldr	r2, [pc, #156]	@ (80064bc <TIM_OC2_SetConfig+0x138>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d023      	beq.n	800646c <TIM_OC2_SetConfig+0xe8>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a26      	ldr	r2, [pc, #152]	@ (80064c0 <TIM_OC2_SetConfig+0x13c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d01f      	beq.n	800646c <TIM_OC2_SetConfig+0xe8>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a25      	ldr	r2, [pc, #148]	@ (80064c4 <TIM_OC2_SetConfig+0x140>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d01b      	beq.n	800646c <TIM_OC2_SetConfig+0xe8>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a24      	ldr	r2, [pc, #144]	@ (80064c8 <TIM_OC2_SetConfig+0x144>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d017      	beq.n	800646c <TIM_OC2_SetConfig+0xe8>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a23      	ldr	r2, [pc, #140]	@ (80064cc <TIM_OC2_SetConfig+0x148>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d013      	beq.n	800646c <TIM_OC2_SetConfig+0xe8>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a22      	ldr	r2, [pc, #136]	@ (80064d0 <TIM_OC2_SetConfig+0x14c>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d00f      	beq.n	800646c <TIM_OC2_SetConfig+0xe8>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a21      	ldr	r2, [pc, #132]	@ (80064d4 <TIM_OC2_SetConfig+0x150>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d00b      	beq.n	800646c <TIM_OC2_SetConfig+0xe8>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a20      	ldr	r2, [pc, #128]	@ (80064d8 <TIM_OC2_SetConfig+0x154>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d007      	beq.n	800646c <TIM_OC2_SetConfig+0xe8>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a1f      	ldr	r2, [pc, #124]	@ (80064dc <TIM_OC2_SetConfig+0x158>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d003      	beq.n	800646c <TIM_OC2_SetConfig+0xe8>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a1e      	ldr	r2, [pc, #120]	@ (80064e0 <TIM_OC2_SetConfig+0x15c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d113      	bne.n	8006494 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006472:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800647a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	4313      	orrs	r3, r2
 8006486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	4313      	orrs	r3, r2
 8006492:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	621a      	str	r2, [r3, #32]
}
 80064ae:	bf00      	nop
 80064b0:	371c      	adds	r7, #28
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	40012c00 	.word	0x40012c00
 80064c0:	50012c00 	.word	0x50012c00
 80064c4:	40013400 	.word	0x40013400
 80064c8:	50013400 	.word	0x50013400
 80064cc:	40014000 	.word	0x40014000
 80064d0:	50014000 	.word	0x50014000
 80064d4:	40014400 	.word	0x40014400
 80064d8:	50014400 	.word	0x50014400
 80064dc:	40014800 	.word	0x40014800
 80064e0:	50014800 	.word	0x50014800

080064e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006512:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f023 0303 	bic.w	r3, r3, #3
 800651e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	4313      	orrs	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	021b      	lsls	r3, r3, #8
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	4313      	orrs	r3, r2
 800653c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a35      	ldr	r2, [pc, #212]	@ (8006618 <TIM_OC3_SetConfig+0x134>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d00b      	beq.n	800655e <TIM_OC3_SetConfig+0x7a>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a34      	ldr	r2, [pc, #208]	@ (800661c <TIM_OC3_SetConfig+0x138>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d007      	beq.n	800655e <TIM_OC3_SetConfig+0x7a>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a33      	ldr	r2, [pc, #204]	@ (8006620 <TIM_OC3_SetConfig+0x13c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d003      	beq.n	800655e <TIM_OC3_SetConfig+0x7a>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a32      	ldr	r2, [pc, #200]	@ (8006624 <TIM_OC3_SetConfig+0x140>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d10d      	bne.n	800657a <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006564:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	021b      	lsls	r3, r3, #8
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	4313      	orrs	r3, r2
 8006570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a26      	ldr	r2, [pc, #152]	@ (8006618 <TIM_OC3_SetConfig+0x134>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d023      	beq.n	80065ca <TIM_OC3_SetConfig+0xe6>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a25      	ldr	r2, [pc, #148]	@ (800661c <TIM_OC3_SetConfig+0x138>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d01f      	beq.n	80065ca <TIM_OC3_SetConfig+0xe6>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a24      	ldr	r2, [pc, #144]	@ (8006620 <TIM_OC3_SetConfig+0x13c>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d01b      	beq.n	80065ca <TIM_OC3_SetConfig+0xe6>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a23      	ldr	r2, [pc, #140]	@ (8006624 <TIM_OC3_SetConfig+0x140>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d017      	beq.n	80065ca <TIM_OC3_SetConfig+0xe6>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a22      	ldr	r2, [pc, #136]	@ (8006628 <TIM_OC3_SetConfig+0x144>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d013      	beq.n	80065ca <TIM_OC3_SetConfig+0xe6>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a21      	ldr	r2, [pc, #132]	@ (800662c <TIM_OC3_SetConfig+0x148>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d00f      	beq.n	80065ca <TIM_OC3_SetConfig+0xe6>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a20      	ldr	r2, [pc, #128]	@ (8006630 <TIM_OC3_SetConfig+0x14c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d00b      	beq.n	80065ca <TIM_OC3_SetConfig+0xe6>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a1f      	ldr	r2, [pc, #124]	@ (8006634 <TIM_OC3_SetConfig+0x150>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d007      	beq.n	80065ca <TIM_OC3_SetConfig+0xe6>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a1e      	ldr	r2, [pc, #120]	@ (8006638 <TIM_OC3_SetConfig+0x154>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d003      	beq.n	80065ca <TIM_OC3_SetConfig+0xe6>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a1d      	ldr	r2, [pc, #116]	@ (800663c <TIM_OC3_SetConfig+0x158>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d113      	bne.n	80065f2 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	011b      	lsls	r3, r3, #4
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	621a      	str	r2, [r3, #32]
}
 800660c:	bf00      	nop
 800660e:	371c      	adds	r7, #28
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	40012c00 	.word	0x40012c00
 800661c:	50012c00 	.word	0x50012c00
 8006620:	40013400 	.word	0x40013400
 8006624:	50013400 	.word	0x50013400
 8006628:	40014000 	.word	0x40014000
 800662c:	50014000 	.word	0x50014000
 8006630:	40014400 	.word	0x40014400
 8006634:	50014400 	.word	0x50014400
 8006638:	40014800 	.word	0x40014800
 800663c:	50014800 	.word	0x50014800

08006640 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006640:	b480      	push	{r7}
 8006642:	b087      	sub	sp, #28
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800666e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800667a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	021b      	lsls	r3, r3, #8
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	4313      	orrs	r3, r2
 8006686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800668e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	031b      	lsls	r3, r3, #12
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	4313      	orrs	r3, r2
 800669a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a36      	ldr	r2, [pc, #216]	@ (8006778 <TIM_OC4_SetConfig+0x138>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00b      	beq.n	80066bc <TIM_OC4_SetConfig+0x7c>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a35      	ldr	r2, [pc, #212]	@ (800677c <TIM_OC4_SetConfig+0x13c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d007      	beq.n	80066bc <TIM_OC4_SetConfig+0x7c>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a34      	ldr	r2, [pc, #208]	@ (8006780 <TIM_OC4_SetConfig+0x140>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d003      	beq.n	80066bc <TIM_OC4_SetConfig+0x7c>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a33      	ldr	r2, [pc, #204]	@ (8006784 <TIM_OC4_SetConfig+0x144>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d10d      	bne.n	80066d8 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	031b      	lsls	r3, r3, #12
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a27      	ldr	r2, [pc, #156]	@ (8006778 <TIM_OC4_SetConfig+0x138>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d023      	beq.n	8006728 <TIM_OC4_SetConfig+0xe8>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a26      	ldr	r2, [pc, #152]	@ (800677c <TIM_OC4_SetConfig+0x13c>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d01f      	beq.n	8006728 <TIM_OC4_SetConfig+0xe8>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a25      	ldr	r2, [pc, #148]	@ (8006780 <TIM_OC4_SetConfig+0x140>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d01b      	beq.n	8006728 <TIM_OC4_SetConfig+0xe8>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a24      	ldr	r2, [pc, #144]	@ (8006784 <TIM_OC4_SetConfig+0x144>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d017      	beq.n	8006728 <TIM_OC4_SetConfig+0xe8>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a23      	ldr	r2, [pc, #140]	@ (8006788 <TIM_OC4_SetConfig+0x148>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d013      	beq.n	8006728 <TIM_OC4_SetConfig+0xe8>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a22      	ldr	r2, [pc, #136]	@ (800678c <TIM_OC4_SetConfig+0x14c>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d00f      	beq.n	8006728 <TIM_OC4_SetConfig+0xe8>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a21      	ldr	r2, [pc, #132]	@ (8006790 <TIM_OC4_SetConfig+0x150>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d00b      	beq.n	8006728 <TIM_OC4_SetConfig+0xe8>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a20      	ldr	r2, [pc, #128]	@ (8006794 <TIM_OC4_SetConfig+0x154>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d007      	beq.n	8006728 <TIM_OC4_SetConfig+0xe8>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a1f      	ldr	r2, [pc, #124]	@ (8006798 <TIM_OC4_SetConfig+0x158>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d003      	beq.n	8006728 <TIM_OC4_SetConfig+0xe8>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a1e      	ldr	r2, [pc, #120]	@ (800679c <TIM_OC4_SetConfig+0x15c>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d113      	bne.n	8006750 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800672e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006736:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	019b      	lsls	r3, r3, #6
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	4313      	orrs	r3, r2
 8006742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	019b      	lsls	r3, r3, #6
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685a      	ldr	r2, [r3, #4]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	621a      	str	r2, [r3, #32]
}
 800676a:	bf00      	nop
 800676c:	371c      	adds	r7, #28
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	40012c00 	.word	0x40012c00
 800677c:	50012c00 	.word	0x50012c00
 8006780:	40013400 	.word	0x40013400
 8006784:	50013400 	.word	0x50013400
 8006788:	40014000 	.word	0x40014000
 800678c:	50014000 	.word	0x50014000
 8006790:	40014400 	.word	0x40014400
 8006794:	50014400 	.word	0x50014400
 8006798:	40014800 	.word	0x40014800
 800679c:	50014800 	.word	0x50014800

080067a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	4313      	orrs	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80067e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	041b      	lsls	r3, r3, #16
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a21      	ldr	r2, [pc, #132]	@ (800687c <TIM_OC5_SetConfig+0xdc>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d023      	beq.n	8006842 <TIM_OC5_SetConfig+0xa2>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a20      	ldr	r2, [pc, #128]	@ (8006880 <TIM_OC5_SetConfig+0xe0>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d01f      	beq.n	8006842 <TIM_OC5_SetConfig+0xa2>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a1f      	ldr	r2, [pc, #124]	@ (8006884 <TIM_OC5_SetConfig+0xe4>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d01b      	beq.n	8006842 <TIM_OC5_SetConfig+0xa2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a1e      	ldr	r2, [pc, #120]	@ (8006888 <TIM_OC5_SetConfig+0xe8>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d017      	beq.n	8006842 <TIM_OC5_SetConfig+0xa2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a1d      	ldr	r2, [pc, #116]	@ (800688c <TIM_OC5_SetConfig+0xec>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d013      	beq.n	8006842 <TIM_OC5_SetConfig+0xa2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a1c      	ldr	r2, [pc, #112]	@ (8006890 <TIM_OC5_SetConfig+0xf0>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d00f      	beq.n	8006842 <TIM_OC5_SetConfig+0xa2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a1b      	ldr	r2, [pc, #108]	@ (8006894 <TIM_OC5_SetConfig+0xf4>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d00b      	beq.n	8006842 <TIM_OC5_SetConfig+0xa2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a1a      	ldr	r2, [pc, #104]	@ (8006898 <TIM_OC5_SetConfig+0xf8>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d007      	beq.n	8006842 <TIM_OC5_SetConfig+0xa2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a19      	ldr	r2, [pc, #100]	@ (800689c <TIM_OC5_SetConfig+0xfc>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d003      	beq.n	8006842 <TIM_OC5_SetConfig+0xa2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a18      	ldr	r2, [pc, #96]	@ (80068a0 <TIM_OC5_SetConfig+0x100>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d109      	bne.n	8006856 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006848:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	021b      	lsls	r3, r3, #8
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	621a      	str	r2, [r3, #32]
}
 8006870:	bf00      	nop
 8006872:	371c      	adds	r7, #28
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	40012c00 	.word	0x40012c00
 8006880:	50012c00 	.word	0x50012c00
 8006884:	40013400 	.word	0x40013400
 8006888:	50013400 	.word	0x50013400
 800688c:	40014000 	.word	0x40014000
 8006890:	50014000 	.word	0x50014000
 8006894:	40014400 	.word	0x40014400
 8006898:	50014400 	.word	0x50014400
 800689c:	40014800 	.word	0x40014800
 80068a0:	50014800 	.word	0x50014800

080068a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b087      	sub	sp, #28
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	021b      	lsls	r3, r3, #8
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80068ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	051b      	lsls	r3, r3, #20
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a22      	ldr	r2, [pc, #136]	@ (8006984 <TIM_OC6_SetConfig+0xe0>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d023      	beq.n	8006948 <TIM_OC6_SetConfig+0xa4>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a21      	ldr	r2, [pc, #132]	@ (8006988 <TIM_OC6_SetConfig+0xe4>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d01f      	beq.n	8006948 <TIM_OC6_SetConfig+0xa4>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a20      	ldr	r2, [pc, #128]	@ (800698c <TIM_OC6_SetConfig+0xe8>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d01b      	beq.n	8006948 <TIM_OC6_SetConfig+0xa4>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a1f      	ldr	r2, [pc, #124]	@ (8006990 <TIM_OC6_SetConfig+0xec>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d017      	beq.n	8006948 <TIM_OC6_SetConfig+0xa4>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a1e      	ldr	r2, [pc, #120]	@ (8006994 <TIM_OC6_SetConfig+0xf0>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d013      	beq.n	8006948 <TIM_OC6_SetConfig+0xa4>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a1d      	ldr	r2, [pc, #116]	@ (8006998 <TIM_OC6_SetConfig+0xf4>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00f      	beq.n	8006948 <TIM_OC6_SetConfig+0xa4>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a1c      	ldr	r2, [pc, #112]	@ (800699c <TIM_OC6_SetConfig+0xf8>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d00b      	beq.n	8006948 <TIM_OC6_SetConfig+0xa4>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a1b      	ldr	r2, [pc, #108]	@ (80069a0 <TIM_OC6_SetConfig+0xfc>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d007      	beq.n	8006948 <TIM_OC6_SetConfig+0xa4>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a1a      	ldr	r2, [pc, #104]	@ (80069a4 <TIM_OC6_SetConfig+0x100>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d003      	beq.n	8006948 <TIM_OC6_SetConfig+0xa4>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a19      	ldr	r2, [pc, #100]	@ (80069a8 <TIM_OC6_SetConfig+0x104>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d109      	bne.n	800695c <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800694e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	029b      	lsls	r3, r3, #10
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	4313      	orrs	r3, r2
 800695a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	621a      	str	r2, [r3, #32]
}
 8006976:	bf00      	nop
 8006978:	371c      	adds	r7, #28
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	40012c00 	.word	0x40012c00
 8006988:	50012c00 	.word	0x50012c00
 800698c:	40013400 	.word	0x40013400
 8006990:	50013400 	.word	0x50013400
 8006994:	40014000 	.word	0x40014000
 8006998:	50014000 	.word	0x50014000
 800699c:	40014400 	.word	0x40014400
 80069a0:	50014400 	.word	0x50014400
 80069a4:	40014800 	.word	0x40014800
 80069a8:	50014800 	.word	0x50014800

080069ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	f023 0201 	bic.w	r2, r3, #1
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	011b      	lsls	r3, r3, #4
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	4313      	orrs	r3, r2
 80069e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f023 030a 	bic.w	r3, r3, #10
 80069e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	621a      	str	r2, [r3, #32]
}
 80069fe:	bf00      	nop
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b087      	sub	sp, #28
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	60f8      	str	r0, [r7, #12]
 8006a12:	60b9      	str	r1, [r7, #8]
 8006a14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6a1b      	ldr	r3, [r3, #32]
 8006a20:	f023 0210 	bic.w	r2, r3, #16
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	031b      	lsls	r3, r3, #12
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	011b      	lsls	r3, r3, #4
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	621a      	str	r2, [r3, #32]
}
 8006a5e:	bf00      	nop
 8006a60:	371c      	adds	r7, #28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b085      	sub	sp, #20
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006a80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	f043 0307 	orr.w	r3, r3, #7
 8006a90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	609a      	str	r2, [r3, #8]
}
 8006a98:	bf00      	nop
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006abe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	021a      	lsls	r2, r3, #8
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	609a      	str	r2, [r3, #8]
}
 8006ad8:	bf00      	nop
 8006ada:	371c      	adds	r7, #28
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f003 031f 	and.w	r3, r3, #31
 8006af6:	2201      	movs	r2, #1
 8006af8:	fa02 f303 	lsl.w	r3, r2, r3
 8006afc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6a1a      	ldr	r2, [r3, #32]
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	43db      	mvns	r3, r3
 8006b06:	401a      	ands	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6a1a      	ldr	r2, [r3, #32]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	f003 031f 	and.w	r3, r3, #31
 8006b16:	6879      	ldr	r1, [r7, #4]
 8006b18:	fa01 f303 	lsl.w	r3, r1, r3
 8006b1c:	431a      	orrs	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	621a      	str	r2, [r3, #32]
}
 8006b22:	bf00      	nop
 8006b24:	371c      	adds	r7, #28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
	...

08006b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d101      	bne.n	8006b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b44:	2302      	movs	r3, #2
 8006b46:	e0a1      	b.n	8006c8c <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a4a      	ldr	r2, [pc, #296]	@ (8006c98 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d00e      	beq.n	8006b90 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a49      	ldr	r2, [pc, #292]	@ (8006c9c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d009      	beq.n	8006b90 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a47      	ldr	r2, [pc, #284]	@ (8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d004      	beq.n	8006b90 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a46      	ldr	r2, [pc, #280]	@ (8006ca4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d108      	bne.n	8006ba2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006b96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006ba8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a34      	ldr	r2, [pc, #208]	@ (8006c98 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d04a      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a33      	ldr	r2, [pc, #204]	@ (8006c9c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d045      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bdc:	d040      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006be6:	d03b      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a2e      	ldr	r2, [pc, #184]	@ (8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d036      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a2d      	ldr	r2, [pc, #180]	@ (8006cac <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d031      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a2b      	ldr	r2, [pc, #172]	@ (8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d02c      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a2a      	ldr	r2, [pc, #168]	@ (8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d027      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a28      	ldr	r2, [pc, #160]	@ (8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d022      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a27      	ldr	r2, [pc, #156]	@ (8006cbc <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d01d      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a1d      	ldr	r2, [pc, #116]	@ (8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d018      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a1c      	ldr	r2, [pc, #112]	@ (8006ca4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d013      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a20      	ldr	r2, [pc, #128]	@ (8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d00e      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a1f      	ldr	r2, [pc, #124]	@ (8006cc4 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d009      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a1d      	ldr	r2, [pc, #116]	@ (8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d004      	beq.n	8006c60 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a1c      	ldr	r2, [pc, #112]	@ (8006ccc <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d10c      	bne.n	8006c7a <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3714      	adds	r7, #20
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	40012c00 	.word	0x40012c00
 8006c9c:	50012c00 	.word	0x50012c00
 8006ca0:	40013400 	.word	0x40013400
 8006ca4:	50013400 	.word	0x50013400
 8006ca8:	40000400 	.word	0x40000400
 8006cac:	50000400 	.word	0x50000400
 8006cb0:	40000800 	.word	0x40000800
 8006cb4:	50000800 	.word	0x50000800
 8006cb8:	40000c00 	.word	0x40000c00
 8006cbc:	50000c00 	.word	0x50000c00
 8006cc0:	40001800 	.word	0x40001800
 8006cc4:	50001800 	.word	0x50001800
 8006cc8:	40014000 	.word	0x40014000
 8006ccc:	50014000 	.word	0x50014000

08006cd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <__NVIC_SetPriority>:
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	4603      	mov	r3, r0
 8006d64:	6039      	str	r1, [r7, #0]
 8006d66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006d68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	db0a      	blt.n	8006d86 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	490c      	ldr	r1, [pc, #48]	@ (8006da8 <__NVIC_SetPriority+0x4c>)
 8006d76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d7a:	0112      	lsls	r2, r2, #4
 8006d7c:	b2d2      	uxtb	r2, r2
 8006d7e:	440b      	add	r3, r1
 8006d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006d84:	e00a      	b.n	8006d9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	4908      	ldr	r1, [pc, #32]	@ (8006dac <__NVIC_SetPriority+0x50>)
 8006d8c:	88fb      	ldrh	r3, [r7, #6]
 8006d8e:	f003 030f 	and.w	r3, r3, #15
 8006d92:	3b04      	subs	r3, #4
 8006d94:	0112      	lsls	r2, r2, #4
 8006d96:	b2d2      	uxtb	r2, r2
 8006d98:	440b      	add	r3, r1
 8006d9a:	761a      	strb	r2, [r3, #24]
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr
 8006da8:	e000e100 	.word	0xe000e100
 8006dac:	e000ed00 	.word	0xe000ed00

08006db0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006db0:	b580      	push	{r7, lr}
 8006db2:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 8006db4:	4b05      	ldr	r3, [pc, #20]	@ (8006dcc <SysTick_Handler+0x1c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006db8:	f001 fba6 	bl	8008508 <xTaskGetSchedulerState>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d001      	beq.n	8006dc6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006dc2:	f001 ff51 	bl	8008c68 <xPortSysTickHandler>
  }
}
 8006dc6:	bf00      	nop
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	e000e010 	.word	0xe000e010

08006dd0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	f06f 0004 	mvn.w	r0, #4
 8006dda:	f7ff ffbf 	bl	8006d5c <__NVIC_SetPriority>
#endif
}
 8006dde:	bf00      	nop
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b086      	sub	sp, #24
 8006de6:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 8006de8:	2300      	movs	r3, #0
 8006dea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dec:	f3ef 8305 	mrs	r3, IPSR
 8006df0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006df2:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	617b      	str	r3, [r7, #20]
 8006dfc:	e013      	b.n	8006e26 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 8006dfe:	f001 fb83 	bl	8008508 <xTaskGetSchedulerState>
 8006e02:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d00d      	beq.n	8006e26 <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8006e0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e10:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d105      	bne.n	8006e22 <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e16:	f3ef 8311 	mrs	r3, BASEPRI
 8006e1a:	607b      	str	r3, [r7, #4]
  return(result);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 8006e22:	2301      	movs	r3, #1
 8006e24:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 8006e26:	697b      	ldr	r3, [r7, #20]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3718      	adds	r7, #24
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8006e36:	f7ff ffd4 	bl	8006de2 <IRQ_Context>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d003      	beq.n	8006e48 <osKernelInitialize+0x18>
    stat = osErrorISR;
 8006e40:	f06f 0305 	mvn.w	r3, #5
 8006e44:	607b      	str	r3, [r7, #4]
 8006e46:	e012      	b.n	8006e6e <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 8006e48:	f001 fb5e 	bl	8008508 <xTaskGetSchedulerState>
 8006e4c:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d109      	bne.n	8006e68 <osKernelInitialize+0x38>
 8006e54:	4b08      	ldr	r3, [pc, #32]	@ (8006e78 <osKernelInitialize+0x48>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d105      	bne.n	8006e68 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006e5c:	4b06      	ldr	r3, [pc, #24]	@ (8006e78 <osKernelInitialize+0x48>)
 8006e5e:	2201      	movs	r2, #1
 8006e60:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	607b      	str	r3, [r7, #4]
 8006e66:	e002      	b.n	8006e6e <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 8006e68:	f04f 33ff 	mov.w	r3, #4294967295
 8006e6c:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8006e6e:	687b      	ldr	r3, [r7, #4]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3708      	adds	r7, #8
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	20000124 	.word	0x20000124

08006e7c <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8006e82:	f7ff ffae 	bl	8006de2 <IRQ_Context>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d003      	beq.n	8006e94 <osKernelStart+0x18>
    stat = osErrorISR;
 8006e8c:	f06f 0305 	mvn.w	r3, #5
 8006e90:	607b      	str	r3, [r7, #4]
 8006e92:	e016      	b.n	8006ec2 <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 8006e94:	f001 fb38 	bl	8008508 <xTaskGetSchedulerState>
 8006e98:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d10d      	bne.n	8006ebc <osKernelStart+0x40>
 8006ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8006ecc <osKernelStart+0x50>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d109      	bne.n	8006ebc <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006ea8:	f7ff ff92 	bl	8006dd0 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 8006eac:	4b07      	ldr	r3, [pc, #28]	@ (8006ecc <osKernelStart+0x50>)
 8006eae:	2202      	movs	r2, #2
 8006eb0:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006eb2:	f000 fdf7 	bl	8007aa4 <vTaskStartScheduler>
      stat = osOK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	607b      	str	r3, [r7, #4]
 8006eba:	e002      	b.n	8006ec2 <osKernelStart+0x46>
    } else {
      stat = osError;
 8006ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec0:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8006ec2:	687b      	ldr	r3, [r7, #4]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	20000124 	.word	0x20000124

08006ed0 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b08e      	sub	sp, #56	@ 0x38
 8006ed4:	af04      	add	r7, sp, #16
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006edc:	2300      	movs	r3, #0
 8006ede:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 8006ee0:	f7ff ff7f 	bl	8006de2 <IRQ_Context>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d17e      	bne.n	8006fe8 <osThreadNew+0x118>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d07b      	beq.n	8006fe8 <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 8006ef0:	2380      	movs	r3, #128	@ 0x80
 8006ef2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006ef4:	2318      	movs	r3, #24
 8006ef6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006efc:	f04f 33ff 	mov.w	r3, #4294967295
 8006f00:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d045      	beq.n	8006f94 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <osThreadNew+0x46>
        name = attr->name;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d008      	beq.n	8006f3c <osThreadNew+0x6c>
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	2b38      	cmp	r3, #56	@ 0x38
 8006f2e:	d805      	bhi.n	8006f3c <osThreadNew+0x6c>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	e054      	b.n	8006fea <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	695b      	ldr	r3, [r3, #20]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d003      	beq.n	8006f50 <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	089b      	lsrs	r3, r3, #2
 8006f4e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00e      	beq.n	8006f76 <osThreadNew+0xa6>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	2b5b      	cmp	r3, #91	@ 0x5b
 8006f5e:	d90a      	bls.n	8006f76 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d006      	beq.n	8006f76 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 8006f70:	2301      	movs	r3, #1
 8006f72:	61bb      	str	r3, [r7, #24]
 8006f74:	e010      	b.n	8006f98 <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10c      	bne.n	8006f98 <osThreadNew+0xc8>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d108      	bne.n	8006f98 <osThreadNew+0xc8>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d104      	bne.n	8006f98 <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	61bb      	str	r3, [r7, #24]
 8006f92:	e001      	b.n	8006f98 <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 8006f94:	2300      	movs	r3, #0
 8006f96:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d110      	bne.n	8006fc0 <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006fa6:	9202      	str	r2, [sp, #8]
 8006fa8:	9301      	str	r3, [sp, #4]
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	6a3a      	ldr	r2, [r7, #32]
 8006fb2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f000 fba5 	bl	8007704 <xTaskCreateStatic>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	617b      	str	r3, [r7, #20]
 8006fbe:	e013      	b.n	8006fe8 <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d110      	bne.n	8006fe8 <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	f107 0314 	add.w	r3, r7, #20
 8006fce:	9301      	str	r3, [sp, #4]
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 fbe0 	bl	800779e <xTaskCreate>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d001      	beq.n	8006fe8 <osThreadNew+0x118>
            hTask = NULL;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 8006fe8:	697b      	ldr	r3, [r7, #20]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3728      	adds	r7, #40	@ 0x28
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b084      	sub	sp, #16
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 8006ffa:	f7ff fef2 	bl	8006de2 <IRQ_Context>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d003      	beq.n	800700c <osDelay+0x1a>
    stat = osErrorISR;
 8007004:	f06f 0305 	mvn.w	r3, #5
 8007008:	60fb      	str	r3, [r7, #12]
 800700a:	e007      	b.n	800701c <osDelay+0x2a>
  }
  else {
    stat = osOK;
 800700c:	2300      	movs	r3, #0
 800700e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d002      	beq.n	800701c <osDelay+0x2a>
      vTaskDelay(ticks);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fd1e 	bl	8007a58 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 800701c:	68fb      	ldr	r3, [r7, #12]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
	...

08007028 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	4a07      	ldr	r2, [pc, #28]	@ (8007054 <vApplicationGetIdleTaskMemory+0x2c>)
 8007038:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	4a06      	ldr	r2, [pc, #24]	@ (8007058 <vApplicationGetIdleTaskMemory+0x30>)
 800703e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2280      	movs	r2, #128	@ 0x80
 8007044:	601a      	str	r2, [r3, #0]
}
 8007046:	bf00      	nop
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	20000128 	.word	0x20000128
 8007058:	20000184 	.word	0x20000184

0800705c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	4a07      	ldr	r2, [pc, #28]	@ (8007088 <vApplicationGetTimerTaskMemory+0x2c>)
 800706c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	4a06      	ldr	r2, [pc, #24]	@ (800708c <vApplicationGetTimerTaskMemory+0x30>)
 8007072:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2280      	movs	r2, #128	@ 0x80
 8007078:	601a      	str	r2, [r3, #0]
}
 800707a:	bf00      	nop
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	20000384 	.word	0x20000384
 800708c:	200003e0 	.word	0x200003e0

08007090 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f103 0208 	add.w	r2, r3, #8
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f04f 32ff 	mov.w	r2, #4294967295
 80070a8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f103 0208 	add.w	r2, r3, #8
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f103 0208 	add.w	r2, r3, #8
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80070de:	bf00      	nop
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80070ea:	b480      	push	{r7}
 80070ec:	b085      	sub	sp, #20
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
 80070f2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007100:	d103      	bne.n	800710a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	60fb      	str	r3, [r7, #12]
 8007108:	e00c      	b.n	8007124 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	3308      	adds	r3, #8
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	e002      	b.n	8007118 <vListInsert+0x2e>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	60fb      	str	r3, [r7, #12]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	429a      	cmp	r2, r3
 8007122:	d2f6      	bcs.n	8007112 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	683a      	ldr	r2, [r7, #0]
 800713e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	1c5a      	adds	r2, r3, #1
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	601a      	str	r2, [r3, #0]
}
 8007150:	bf00      	nop
 8007152:	3714      	adds	r7, #20
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	6892      	ldr	r2, [r2, #8]
 8007172:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	6852      	ldr	r2, [r2, #4]
 800717c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	429a      	cmp	r2, r3
 8007186:	d103      	bne.n	8007190 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	689a      	ldr	r2, [r3, #8]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	1e5a      	subs	r2, r3, #1
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80071ba:	2301      	movs	r3, #1
 80071bc:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d103      	bne.n	80071d0 <xQueueGenericReset+0x20>
 80071c8:	f001 febe 	bl	8008f48 <ulSetInterruptMask>
 80071cc:	bf00      	nop
 80071ce:	e7fd      	b.n	80071cc <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d057      	beq.n	8007286 <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d053      	beq.n	8007286 <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071e6:	2100      	movs	r1, #0
 80071e8:	fba3 2302 	umull	r2, r3, r3, r2
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d000      	beq.n	80071f2 <xQueueGenericReset+0x42>
 80071f0:	2101      	movs	r1, #1
 80071f2:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d146      	bne.n	8007286 <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 80071f8:	f001 fd0a 	bl	8008c10 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007204:	68b9      	ldr	r1, [r7, #8]
 8007206:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007208:	fb01 f303 	mul.w	r3, r1, r3
 800720c:	441a      	add	r2, r3
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	2200      	movs	r2, #0
 8007216:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007228:	3b01      	subs	r3, #1
 800722a:	68b9      	ldr	r1, [r7, #8]
 800722c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800722e:	fb01 f303 	mul.w	r3, r1, r3
 8007232:	441a      	add	r2, r3
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	22ff      	movs	r2, #255	@ 0xff
 800723c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	22ff      	movs	r2, #255	@ 0xff
 8007244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10e      	bne.n	800726c <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d014      	beq.n	8007280 <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	3310      	adds	r3, #16
 800725a:	4618      	mov	r0, r3
 800725c:	f000 ff4a 	bl	80080f4 <xTaskRemoveFromEventList>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00c      	beq.n	8007280 <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8007266:	f001 fcc1 	bl	8008bec <vPortYield>
 800726a:	e009      	b.n	8007280 <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	3310      	adds	r3, #16
 8007270:	4618      	mov	r0, r3
 8007272:	f7ff ff0d 	bl	8007090 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	3324      	adds	r3, #36	@ 0x24
 800727a:	4618      	mov	r0, r3
 800727c:	f7ff ff08 	bl	8007090 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8007280:	f001 fcd8 	bl	8008c34 <vPortExitCritical>
 8007284:	e001      	b.n	800728a <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 8007286:	2300      	movs	r3, #0
 8007288:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d103      	bne.n	8007298 <xQueueGenericReset+0xe8>
 8007290:	f001 fe5a 	bl	8008f48 <ulSetInterruptMask>
 8007294:	bf00      	nop
 8007296:	e7fd      	b.n	8007294 <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8007298:	68fb      	ldr	r3, [r7, #12]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b088      	sub	sp, #32
 80072a6:	af02      	add	r7, sp, #8
 80072a8:	60f8      	str	r0, [r7, #12]
 80072aa:	60b9      	str	r1, [r7, #8]
 80072ac:	607a      	str	r2, [r7, #4]
 80072ae:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 80072b0:	2300      	movs	r3, #0
 80072b2:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d103      	bne.n	80072c2 <xQueueGenericCreateStatic+0x20>
 80072ba:	f001 fe45 	bl	8008f48 <ulSetInterruptMask>
 80072be:	bf00      	nop
 80072c0:	e7fd      	b.n	80072be <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d029      	beq.n	800731c <xQueueGenericCreateStatic+0x7a>
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d026      	beq.n	800731c <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d002      	beq.n	80072da <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d020      	beq.n	800731c <xQueueGenericCreateStatic+0x7a>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d102      	bne.n	80072e6 <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d11a      	bne.n	800731c <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 80072e6:	2350      	movs	r3, #80	@ 0x50
 80072e8:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	2b50      	cmp	r3, #80	@ 0x50
 80072ee:	d003      	beq.n	80072f8 <xQueueGenericCreateStatic+0x56>
 80072f0:	f001 fe2a 	bl	8008f48 <ulSetInterruptMask>
 80072f4:	bf00      	nop
 80072f6:	e7fd      	b.n	80072f4 <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 80072f8:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007306:	f897 2020 	ldrb.w	r2, [r7, #32]
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	4613      	mov	r3, r2
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	68b9      	ldr	r1, [r7, #8]
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f000 f80d 	bl	8007334 <prvInitialiseNewQueue>
 800731a:	e006      	b.n	800732a <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d103      	bne.n	800732a <xQueueGenericCreateStatic+0x88>
 8007322:	f001 fe11 	bl	8008f48 <ulSetInterruptMask>
 8007326:	bf00      	nop
 8007328:	e7fd      	b.n	8007326 <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800732a:	697b      	ldr	r3, [r7, #20]
    }
 800732c:	4618      	mov	r0, r3
 800732e:	3718      	adds	r7, #24
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
 8007340:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d103      	bne.n	8007350 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	69ba      	ldr	r2, [r7, #24]
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	e002      	b.n	8007356 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007362:	2101      	movs	r1, #1
 8007364:	69b8      	ldr	r0, [r7, #24]
 8007366:	f7ff ff23 	bl	80071b0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	78fa      	ldrb	r2, [r7, #3]
 800736e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8007372:	bf00      	nop
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b08a      	sub	sp, #40	@ 0x28
 800737e:	af00      	add	r7, sp, #0
 8007380:	60f8      	str	r0, [r7, #12]
 8007382:	60b9      	str	r1, [r7, #8]
 8007384:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8007386:	2300      	movs	r3, #0
 8007388:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d103      	bne.n	800739c <xQueueReceive+0x22>
 8007394:	f001 fdd8 	bl	8008f48 <ulSetInterruptMask>
 8007398:	bf00      	nop
 800739a:	e7fd      	b.n	8007398 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d103      	bne.n	80073aa <xQueueReceive+0x30>
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <xQueueReceive+0x34>
 80073aa:	2301      	movs	r3, #1
 80073ac:	e000      	b.n	80073b0 <xQueueReceive+0x36>
 80073ae:	2300      	movs	r3, #0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d103      	bne.n	80073bc <xQueueReceive+0x42>
 80073b4:	f001 fdc8 	bl	8008f48 <ulSetInterruptMask>
 80073b8:	bf00      	nop
 80073ba:	e7fd      	b.n	80073b8 <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073bc:	f001 f8a4 	bl	8008508 <xTaskGetSchedulerState>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d102      	bne.n	80073cc <xQueueReceive+0x52>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d101      	bne.n	80073d0 <xQueueReceive+0x56>
 80073cc:	2301      	movs	r3, #1
 80073ce:	e000      	b.n	80073d2 <xQueueReceive+0x58>
 80073d0:	2300      	movs	r3, #0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d103      	bne.n	80073de <xQueueReceive+0x64>
 80073d6:	f001 fdb7 	bl	8008f48 <ulSetInterruptMask>
 80073da:	bf00      	nop
 80073dc:	e7fd      	b.n	80073da <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80073de:	f001 fc17 	bl	8008c10 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e6:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d019      	beq.n	8007422 <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80073ee:	68b9      	ldr	r1, [r7, #8]
 80073f0:	6a38      	ldr	r0, [r7, #32]
 80073f2:	f000 f87e 	bl	80074f2 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	1e5a      	subs	r2, r3, #1
 80073fa:	6a3b      	ldr	r3, [r7, #32]
 80073fc:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073fe:	6a3b      	ldr	r3, [r7, #32]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d009      	beq.n	800741a <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	3310      	adds	r3, #16
 800740a:	4618      	mov	r0, r3
 800740c:	f000 fe72 	bl	80080f4 <xTaskRemoveFromEventList>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d001      	beq.n	800741a <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8007416:	f001 fbe9 	bl	8008bec <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800741a:	f001 fc0b 	bl	8008c34 <vPortExitCritical>
                return pdPASS;
 800741e:	2301      	movs	r3, #1
 8007420:	e063      	b.n	80074ea <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d103      	bne.n	8007430 <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8007428:	f001 fc04 	bl	8008c34 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800742c:	2300      	movs	r3, #0
 800742e:	e05c      	b.n	80074ea <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 8007430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007432:	2b00      	cmp	r3, #0
 8007434:	d106      	bne.n	8007444 <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007436:	f107 0314 	add.w	r3, r7, #20
 800743a:	4618      	mov	r0, r3
 800743c:	f000 ff28 	bl	8008290 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8007440:	2301      	movs	r3, #1
 8007442:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8007444:	f001 fbf6 	bl	8008c34 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8007448:	f000 fb88 	bl	8007b5c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800744c:	f001 fbe0 	bl	8008c10 <vPortEnterCritical>
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007456:	b25b      	sxtb	r3, r3
 8007458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745c:	d103      	bne.n	8007466 <xQueueReceive+0xec>
 800745e:	6a3b      	ldr	r3, [r7, #32]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007466:	6a3b      	ldr	r3, [r7, #32]
 8007468:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800746c:	b25b      	sxtb	r3, r3
 800746e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007472:	d103      	bne.n	800747c <xQueueReceive+0x102>
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800747c:	f001 fbda 	bl	8008c34 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007480:	1d3a      	adds	r2, r7, #4
 8007482:	f107 0314 	add.w	r3, r7, #20
 8007486:	4611      	mov	r1, r2
 8007488:	4618      	mov	r0, r3
 800748a:	f000 ff17 	bl	80082bc <xTaskCheckForTimeOut>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d11d      	bne.n	80074d0 <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007494:	6a38      	ldr	r0, [r7, #32]
 8007496:	f000 f8a4 	bl	80075e2 <prvIsQueueEmpty>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d011      	beq.n	80074c4 <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	3324      	adds	r3, #36	@ 0x24
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	4611      	mov	r1, r2
 80074a8:	4618      	mov	r0, r3
 80074aa:	f000 fdc7 	bl	800803c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80074ae:	6a38      	ldr	r0, [r7, #32]
 80074b0:	f000 f845 	bl	800753e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80074b4:	f000 fb60 	bl	8007b78 <xTaskResumeAll>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d18f      	bne.n	80073de <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 80074be:	f001 fb95 	bl	8008bec <vPortYield>
 80074c2:	e78c      	b.n	80073de <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80074c4:	6a38      	ldr	r0, [r7, #32]
 80074c6:	f000 f83a 	bl	800753e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80074ca:	f000 fb55 	bl	8007b78 <xTaskResumeAll>
 80074ce:	e786      	b.n	80073de <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80074d0:	6a38      	ldr	r0, [r7, #32]
 80074d2:	f000 f834 	bl	800753e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80074d6:	f000 fb4f 	bl	8007b78 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074da:	6a38      	ldr	r0, [r7, #32]
 80074dc:	f000 f881 	bl	80075e2 <prvIsQueueEmpty>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f43f af7b 	beq.w	80073de <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80074e8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3728      	adds	r7, #40	@ 0x28
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b082      	sub	sp, #8
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007500:	2b00      	cmp	r3, #0
 8007502:	d018      	beq.n	8007536 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68da      	ldr	r2, [r3, #12]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800750c:	441a      	add	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68da      	ldr	r2, [r3, #12]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	429a      	cmp	r2, r3
 800751c:	d303      	bcc.n	8007526 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	68d9      	ldr	r1, [r3, #12]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800752e:	461a      	mov	r2, r3
 8007530:	6838      	ldr	r0, [r7, #0]
 8007532:	f001 fdf7 	bl	8009124 <memcpy>
    }
}
 8007536:	bf00      	nop
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8007546:	f001 fb63 	bl	8008c10 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007550:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007552:	e011      	b.n	8007578 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007558:	2b00      	cmp	r3, #0
 800755a:	d012      	beq.n	8007582 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	3324      	adds	r3, #36	@ 0x24
 8007560:	4618      	mov	r0, r3
 8007562:	f000 fdc7 	bl	80080f4 <xTaskRemoveFromEventList>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d001      	beq.n	8007570 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800756c:	f000 fefe 	bl	800836c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8007570:	7bfb      	ldrb	r3, [r7, #15]
 8007572:	3b01      	subs	r3, #1
 8007574:	b2db      	uxtb	r3, r3
 8007576:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800757c:	2b00      	cmp	r3, #0
 800757e:	dce9      	bgt.n	8007554 <prvUnlockQueue+0x16>
 8007580:	e000      	b.n	8007584 <prvUnlockQueue+0x46>
                    break;
 8007582:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	22ff      	movs	r2, #255	@ 0xff
 8007588:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800758c:	f001 fb52 	bl	8008c34 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8007590:	f001 fb3e 	bl	8008c10 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800759a:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800759c:	e011      	b.n	80075c2 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d012      	beq.n	80075cc <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	3310      	adds	r3, #16
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 fda2 	bl	80080f4 <xTaskRemoveFromEventList>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80075b6:	f000 fed9 	bl	800836c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80075ba:	7bbb      	ldrb	r3, [r7, #14]
 80075bc:	3b01      	subs	r3, #1
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80075c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	dce9      	bgt.n	800759e <prvUnlockQueue+0x60>
 80075ca:	e000      	b.n	80075ce <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80075cc:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	22ff      	movs	r2, #255	@ 0xff
 80075d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80075d6:	f001 fb2d 	bl	8008c34 <vPortExitCritical>
}
 80075da:	bf00      	nop
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b084      	sub	sp, #16
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80075ea:	f001 fb11 	bl	8008c10 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d102      	bne.n	80075fc <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80075f6:	2301      	movs	r3, #1
 80075f8:	60fb      	str	r3, [r7, #12]
 80075fa:	e001      	b.n	8007600 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80075fc:	2300      	movs	r3, #0
 80075fe:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8007600:	f001 fb18 	bl	8008c34 <vPortExitCritical>

    return xReturn;
 8007604:	68fb      	ldr	r3, [r7, #12]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
	...

08007610 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800761a:	2300      	movs	r3, #0
 800761c:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d103      	bne.n	800762c <vQueueAddToRegistry+0x1c>
 8007624:	f001 fc90 	bl	8008f48 <ulSetInterruptMask>
 8007628:	bf00      	nop
 800762a:	e7fd      	b.n	8007628 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d024      	beq.n	800767c <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007632:	2300      	movs	r3, #0
 8007634:	60fb      	str	r3, [r7, #12]
 8007636:	e01e      	b.n	8007676 <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8007638:	4a17      	ldr	r2, [pc, #92]	@ (8007698 <vQueueAddToRegistry+0x88>)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	00db      	lsls	r3, r3, #3
 800763e:	4413      	add	r3, r2
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	429a      	cmp	r2, r3
 8007646:	d105      	bne.n	8007654 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	00db      	lsls	r3, r3, #3
 800764c:	4a12      	ldr	r2, [pc, #72]	@ (8007698 <vQueueAddToRegistry+0x88>)
 800764e:	4413      	add	r3, r2
 8007650:	60bb      	str	r3, [r7, #8]
                    break;
 8007652:	e013      	b.n	800767c <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10a      	bne.n	8007670 <vQueueAddToRegistry+0x60>
 800765a:	4a0f      	ldr	r2, [pc, #60]	@ (8007698 <vQueueAddToRegistry+0x88>)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d104      	bne.n	8007670 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	00db      	lsls	r3, r3, #3
 800766a:	4a0b      	ldr	r2, [pc, #44]	@ (8007698 <vQueueAddToRegistry+0x88>)
 800766c:	4413      	add	r3, r2
 800766e:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3301      	adds	r3, #1
 8007674:	60fb      	str	r3, [r7, #12]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2b07      	cmp	r3, #7
 800767a:	d9dd      	bls.n	8007638 <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d005      	beq.n	800768e <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	683a      	ldr	r2, [r7, #0]
 8007686:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800768e:	bf00      	nop
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	200005e0 	.word	0x200005e0

0800769c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80076ac:	f001 fab0 	bl	8008c10 <vPortEnterCritical>
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80076b6:	b25b      	sxtb	r3, r3
 80076b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076bc:	d103      	bne.n	80076c6 <vQueueWaitForMessageRestricted+0x2a>
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80076cc:	b25b      	sxtb	r3, r3
 80076ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d2:	d103      	bne.n	80076dc <vQueueWaitForMessageRestricted+0x40>
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076dc:	f001 faaa 	bl	8008c34 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d106      	bne.n	80076f6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	3324      	adds	r3, #36	@ 0x24
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	68b9      	ldr	r1, [r7, #8]
 80076f0:	4618      	mov	r0, r3
 80076f2:	f000 fcc1 	bl	8008078 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80076f6:	6978      	ldr	r0, [r7, #20]
 80076f8:	f7ff ff21 	bl	800753e <prvUnlockQueue>
    }
 80076fc:	bf00      	nop
 80076fe:	3718      	adds	r7, #24
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8007704:	b580      	push	{r7, lr}
 8007706:	b08c      	sub	sp, #48	@ 0x30
 8007708:	af04      	add	r7, sp, #16
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
 8007710:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8007712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007714:	2b00      	cmp	r3, #0
 8007716:	d103      	bne.n	8007720 <xTaskCreateStatic+0x1c>
 8007718:	f001 fc16 	bl	8008f48 <ulSetInterruptMask>
 800771c:	bf00      	nop
 800771e:	e7fd      	b.n	800771c <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 8007720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007722:	2b00      	cmp	r3, #0
 8007724:	d103      	bne.n	800772e <xTaskCreateStatic+0x2a>
 8007726:	f001 fc0f 	bl	8008f48 <ulSetInterruptMask>
 800772a:	bf00      	nop
 800772c:	e7fd      	b.n	800772a <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800772e:	235c      	movs	r3, #92	@ 0x5c
 8007730:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	2b5c      	cmp	r3, #92	@ 0x5c
 8007736:	d003      	beq.n	8007740 <xTaskCreateStatic+0x3c>
 8007738:	f001 fc06 	bl	8008f48 <ulSetInterruptMask>
 800773c:	bf00      	nop
 800773e:	e7fd      	b.n	800773c <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007740:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007744:	2b00      	cmp	r3, #0
 8007746:	d023      	beq.n	8007790 <xTaskCreateStatic+0x8c>
 8007748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800774a:	2b00      	cmp	r3, #0
 800774c:	d020      	beq.n	8007790 <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800774e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007750:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8007752:	225c      	movs	r2, #92	@ 0x5c
 8007754:	2100      	movs	r1, #0
 8007756:	69f8      	ldr	r0, [r7, #28]
 8007758:	f001 fcb7 	bl	80090ca <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007760:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	2202      	movs	r2, #2
 8007766:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800776a:	2300      	movs	r3, #0
 800776c:	9303      	str	r3, [sp, #12]
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	9302      	str	r3, [sp, #8]
 8007772:	f107 0318 	add.w	r3, r7, #24
 8007776:	9301      	str	r3, [sp, #4]
 8007778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	68b9      	ldr	r1, [r7, #8]
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f000 f855 	bl	8007832 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8007788:	69f8      	ldr	r0, [r7, #28]
 800778a:	f000 f8d5 	bl	8007938 <prvAddNewTaskToReadyList>
 800778e:	e001      	b.n	8007794 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 8007790:	2300      	movs	r3, #0
 8007792:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8007794:	69bb      	ldr	r3, [r7, #24]
    }
 8007796:	4618      	mov	r0, r3
 8007798:	3720      	adds	r7, #32
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800779e:	b580      	push	{r7, lr}
 80077a0:	b08c      	sub	sp, #48	@ 0x30
 80077a2:	af04      	add	r7, sp, #16
 80077a4:	60f8      	str	r0, [r7, #12]
 80077a6:	60b9      	str	r1, [r7, #8]
 80077a8:	603b      	str	r3, [r7, #0]
 80077aa:	4613      	mov	r3, r2
 80077ac:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80077ae:	88fb      	ldrh	r3, [r7, #6]
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	4618      	mov	r0, r3
 80077b4:	f001 fc28 	bl	8009008 <pvPortMalloc>
 80077b8:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d013      	beq.n	80077e8 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80077c0:	205c      	movs	r0, #92	@ 0x5c
 80077c2:	f001 fc21 	bl	8009008 <pvPortMalloc>
 80077c6:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d008      	beq.n	80077e0 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80077ce:	225c      	movs	r2, #92	@ 0x5c
 80077d0:	2100      	movs	r1, #0
 80077d2:	69f8      	ldr	r0, [r7, #28]
 80077d4:	f001 fc79 	bl	80090ca <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80077de:	e005      	b.n	80077ec <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80077e0:	6978      	ldr	r0, [r7, #20]
 80077e2:	f001 fc63 	bl	80090ac <vPortFree>
 80077e6:	e001      	b.n	80077ec <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80077e8:	2300      	movs	r3, #0
 80077ea:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d017      	beq.n	8007822 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80077fa:	88fa      	ldrh	r2, [r7, #6]
 80077fc:	2300      	movs	r3, #0
 80077fe:	9303      	str	r3, [sp, #12]
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	9302      	str	r3, [sp, #8]
 8007804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007806:	9301      	str	r3, [sp, #4]
 8007808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800780a:	9300      	str	r3, [sp, #0]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	68b9      	ldr	r1, [r7, #8]
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f000 f80e 	bl	8007832 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8007816:	69f8      	ldr	r0, [r7, #28]
 8007818:	f000 f88e 	bl	8007938 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800781c:	2301      	movs	r3, #1
 800781e:	61bb      	str	r3, [r7, #24]
 8007820:	e002      	b.n	8007828 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007822:	f04f 33ff 	mov.w	r3, #4294967295
 8007826:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8007828:	69bb      	ldr	r3, [r7, #24]
    }
 800782a:	4618      	mov	r0, r3
 800782c:	3720      	adds	r7, #32
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b086      	sub	sp, #24
 8007836:	af00      	add	r7, sp, #0
 8007838:	60f8      	str	r0, [r7, #12]
 800783a:	60b9      	str	r1, [r7, #8]
 800783c:	607a      	str	r2, [r7, #4]
 800783e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007842:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	461a      	mov	r2, r3
 800784a:	21a5      	movs	r1, #165	@ 0xa5
 800784c:	f001 fc3d 	bl	80090ca <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007852:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800785a:	3b01      	subs	r3, #1
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	4413      	add	r3, r2
 8007860:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	f023 0307 	bic.w	r3, r3, #7
 8007868:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	f003 0307 	and.w	r3, r3, #7
 8007870:	2b00      	cmp	r3, #0
 8007872:	d003      	beq.n	800787c <prvInitialiseNewTask+0x4a>
 8007874:	f001 fb68 	bl	8008f48 <ulSetInterruptMask>
 8007878:	bf00      	nop
 800787a:	e7fd      	b.n	8007878 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d01e      	beq.n	80078c0 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007882:	2300      	movs	r3, #0
 8007884:	617b      	str	r3, [r7, #20]
 8007886:	e012      	b.n	80078ae <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	4413      	add	r3, r2
 800788e:	7819      	ldrb	r1, [r3, #0]
 8007890:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	4413      	add	r3, r2
 8007896:	3334      	adds	r3, #52	@ 0x34
 8007898:	460a      	mov	r2, r1
 800789a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	4413      	add	r3, r2
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d006      	beq.n	80078b6 <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	3301      	adds	r3, #1
 80078ac:	617b      	str	r3, [r7, #20]
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2b0f      	cmp	r3, #15
 80078b2:	d9e9      	bls.n	8007888 <prvInitialiseNewTask+0x56>
 80078b4:	e000      	b.n	80078b8 <prvInitialiseNewTask+0x86>
            {
                break;
 80078b6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80078b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	2b37      	cmp	r3, #55	@ 0x37
 80078c4:	d903      	bls.n	80078ce <prvInitialiseNewTask+0x9c>
 80078c6:	f001 fb3f 	bl	8008f48 <ulSetInterruptMask>
 80078ca:	bf00      	nop
 80078cc:	e7fd      	b.n	80078ca <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80078ce:	6a3b      	ldr	r3, [r7, #32]
 80078d0:	2b37      	cmp	r3, #55	@ 0x37
 80078d2:	d901      	bls.n	80078d8 <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80078d4:	2337      	movs	r3, #55	@ 0x37
 80078d6:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80078d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078da:	6a3a      	ldr	r2, [r7, #32]
 80078dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80078de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e0:	6a3a      	ldr	r2, [r7, #32]
 80078e2:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80078e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e6:	3304      	adds	r3, #4
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7ff fbf1 	bl	80070d0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80078ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f0:	3318      	adds	r3, #24
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7ff fbec 	bl	80070d0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80078f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078fc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078fe:	6a3b      	ldr	r3, [r7, #32]
 8007900:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007906:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800790a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800790c:	625a      	str	r2, [r3, #36]	@ 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800790e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007910:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	6938      	ldr	r0, [r7, #16]
 8007918:	f001 f9d8 	bl	8008ccc <pxPortInitialiseStack>
 800791c:	4602      	mov	r2, r0
 800791e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007920:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8007922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007924:	2b00      	cmp	r3, #0
 8007926:	d002      	beq.n	800792e <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800792c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800792e:	bf00      	nop
 8007930:	3718      	adds	r7, #24
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
	...

08007938 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8007940:	f001 f966 	bl	8008c10 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8007944:	4b3e      	ldr	r3, [pc, #248]	@ (8007a40 <prvAddNewTaskToReadyList+0x108>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3301      	adds	r3, #1
 800794a:	4a3d      	ldr	r2, [pc, #244]	@ (8007a40 <prvAddNewTaskToReadyList+0x108>)
 800794c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800794e:	4b3d      	ldr	r3, [pc, #244]	@ (8007a44 <prvAddNewTaskToReadyList+0x10c>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d109      	bne.n	800796a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8007956:	4a3b      	ldr	r2, [pc, #236]	@ (8007a44 <prvAddNewTaskToReadyList+0x10c>)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800795c:	4b38      	ldr	r3, [pc, #224]	@ (8007a40 <prvAddNewTaskToReadyList+0x108>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d110      	bne.n	8007986 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8007964:	f000 fd1e 	bl	80083a4 <prvInitialiseTaskLists>
 8007968:	e00d      	b.n	8007986 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800796a:	4b37      	ldr	r3, [pc, #220]	@ (8007a48 <prvAddNewTaskToReadyList+0x110>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d109      	bne.n	8007986 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007972:	4b34      	ldr	r3, [pc, #208]	@ (8007a44 <prvAddNewTaskToReadyList+0x10c>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800797c:	429a      	cmp	r2, r3
 800797e:	d802      	bhi.n	8007986 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8007980:	4a30      	ldr	r2, [pc, #192]	@ (8007a44 <prvAddNewTaskToReadyList+0x10c>)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8007986:	4b31      	ldr	r3, [pc, #196]	@ (8007a4c <prvAddNewTaskToReadyList+0x114>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3301      	adds	r3, #1
 800798c:	4a2f      	ldr	r2, [pc, #188]	@ (8007a4c <prvAddNewTaskToReadyList+0x114>)
 800798e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007990:	4b2e      	ldr	r3, [pc, #184]	@ (8007a4c <prvAddNewTaskToReadyList+0x114>)
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800799c:	4b2c      	ldr	r3, [pc, #176]	@ (8007a50 <prvAddNewTaskToReadyList+0x118>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d903      	bls.n	80079ac <prvAddNewTaskToReadyList+0x74>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a8:	4a29      	ldr	r2, [pc, #164]	@ (8007a50 <prvAddNewTaskToReadyList+0x118>)
 80079aa:	6013      	str	r3, [r2, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079b0:	4928      	ldr	r1, [pc, #160]	@ (8007a54 <prvAddNewTaskToReadyList+0x11c>)
 80079b2:	4613      	mov	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	440b      	add	r3, r1
 80079bc:	3304      	adds	r3, #4
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	60fb      	str	r3, [r7, #12]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	609a      	str	r2, [r3, #8]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	689a      	ldr	r2, [r3, #8]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	60da      	str	r2, [r3, #12]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	3204      	adds	r2, #4
 80079d8:	605a      	str	r2, [r3, #4]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	1d1a      	adds	r2, r3, #4
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	609a      	str	r2, [r3, #8]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079e6:	4613      	mov	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4a19      	ldr	r2, [pc, #100]	@ (8007a54 <prvAddNewTaskToReadyList+0x11c>)
 80079f0:	441a      	add	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	615a      	str	r2, [r3, #20]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079fa:	4916      	ldr	r1, [pc, #88]	@ (8007a54 <prvAddNewTaskToReadyList+0x11c>)
 80079fc:	4613      	mov	r3, r2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	440b      	add	r3, r1
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	1c59      	adds	r1, r3, #1
 8007a0a:	4812      	ldr	r0, [pc, #72]	@ (8007a54 <prvAddNewTaskToReadyList+0x11c>)
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4413      	add	r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	4403      	add	r3, r0
 8007a16:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8007a18:	f001 f90c 	bl	8008c34 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8007a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a48 <prvAddNewTaskToReadyList+0x110>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d008      	beq.n	8007a36 <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a24:	4b07      	ldr	r3, [pc, #28]	@ (8007a44 <prvAddNewTaskToReadyList+0x10c>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d201      	bcs.n	8007a36 <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8007a32:	f001 f8db 	bl	8008bec <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007a36:	bf00      	nop
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	20000af4 	.word	0x20000af4
 8007a44:	20000620 	.word	0x20000620
 8007a48:	20000b00 	.word	0x20000b00
 8007a4c:	20000b10 	.word	0x20000b10
 8007a50:	20000afc 	.word	0x20000afc
 8007a54:	20000624 	.word	0x20000624

08007a58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8007a60:	2300      	movs	r3, #0
 8007a62:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d010      	beq.n	8007a8c <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 8007a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa0 <vTaskDelay+0x48>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <vTaskDelay+0x22>
 8007a72:	f001 fa69 	bl	8008f48 <ulSetInterruptMask>
 8007a76:	bf00      	nop
 8007a78:	e7fd      	b.n	8007a76 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 8007a7a:	f000 f86f 	bl	8007b5c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a7e:	2100      	movs	r1, #0
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fd5f 	bl	8008544 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8007a86:	f000 f877 	bl	8007b78 <xTaskResumeAll>
 8007a8a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 8007a92:	f001 f8ab 	bl	8008bec <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8007a96:	bf00      	nop
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20000b1c 	.word	0x20000b1c

08007aa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b088      	sub	sp, #32
 8007aa8:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007ab2:	463a      	mov	r2, r7
 8007ab4:	1d39      	adds	r1, r7, #4
 8007ab6:	f107 0308 	add.w	r3, r7, #8
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7ff fab4 	bl	8007028 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	9202      	str	r2, [sp, #8]
 8007ac8:	9301      	str	r3, [sp, #4]
 8007aca:	2300      	movs	r3, #0
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	2300      	movs	r3, #0
 8007ad0:	460a      	mov	r2, r1
 8007ad2:	491b      	ldr	r1, [pc, #108]	@ (8007b40 <vTaskStartScheduler+0x9c>)
 8007ad4:	481b      	ldr	r0, [pc, #108]	@ (8007b44 <vTaskStartScheduler+0xa0>)
 8007ad6:	f7ff fe15 	bl	8007704 <xTaskCreateStatic>
 8007ada:	4603      	mov	r3, r0
 8007adc:	4a1a      	ldr	r2, [pc, #104]	@ (8007b48 <vTaskStartScheduler+0xa4>)
 8007ade:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8007ae0:	4b19      	ldr	r3, [pc, #100]	@ (8007b48 <vTaskStartScheduler+0xa4>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d002      	beq.n	8007aee <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	60fb      	str	r3, [r7, #12]
 8007aec:	e001      	b.n	8007af2 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 8007aee:	2300      	movs	r3, #0
 8007af0:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d102      	bne.n	8007afe <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 8007af8:	f000 fd92 	bl	8008620 <xTimerCreateTimerTask>
 8007afc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d10e      	bne.n	8007b22 <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8007b04:	f001 fa20 	bl	8008f48 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8007b08:	4b10      	ldr	r3, [pc, #64]	@ (8007b4c <vTaskStartScheduler+0xa8>)
 8007b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b0e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8007b10:	4b0f      	ldr	r3, [pc, #60]	@ (8007b50 <vTaskStartScheduler+0xac>)
 8007b12:	2201      	movs	r2, #1
 8007b14:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b16:	4b0f      	ldr	r3, [pc, #60]	@ (8007b54 <vTaskStartScheduler+0xb0>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8007b1c:	f001 f960 	bl	8008de0 <xPortStartScheduler>
 8007b20:	e007      	b.n	8007b32 <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b28:	d103      	bne.n	8007b32 <vTaskStartScheduler+0x8e>
 8007b2a:	f001 fa0d 	bl	8008f48 <ulSetInterruptMask>
 8007b2e:	bf00      	nop
 8007b30:	e7fd      	b.n	8007b2e <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8007b32:	4b09      	ldr	r3, [pc, #36]	@ (8007b58 <vTaskStartScheduler+0xb4>)
 8007b34:	681b      	ldr	r3, [r3, #0]
}
 8007b36:	bf00      	nop
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	08009190 	.word	0x08009190
 8007b44:	08008385 	.word	0x08008385
 8007b48:	20000b18 	.word	0x20000b18
 8007b4c:	20000b14 	.word	0x20000b14
 8007b50:	20000b00 	.word	0x20000b00
 8007b54:	20000af8 	.word	0x20000af8
 8007b58:	08009208 	.word	0x08009208

08007b5c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8007b60:	4b04      	ldr	r3, [pc, #16]	@ (8007b74 <vTaskSuspendAll+0x18>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3301      	adds	r3, #1
 8007b66:	4a03      	ldr	r2, [pc, #12]	@ (8007b74 <vTaskSuspendAll+0x18>)
 8007b68:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8007b6a:	bf00      	nop
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	20000b1c 	.word	0x20000b1c

08007b78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8007b82:	2300      	movs	r3, #0
 8007b84:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8007b86:	4b6b      	ldr	r3, [pc, #428]	@ (8007d34 <xTaskResumeAll+0x1bc>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d103      	bne.n	8007b96 <xTaskResumeAll+0x1e>
 8007b8e:	f001 f9db 	bl	8008f48 <ulSetInterruptMask>
 8007b92:	bf00      	nop
 8007b94:	e7fd      	b.n	8007b92 <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8007b96:	f001 f83b 	bl	8008c10 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8007b9a:	4b66      	ldr	r3, [pc, #408]	@ (8007d34 <xTaskResumeAll+0x1bc>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	4a64      	ldr	r2, [pc, #400]	@ (8007d34 <xTaskResumeAll+0x1bc>)
 8007ba2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8007ba4:	4b63      	ldr	r3, [pc, #396]	@ (8007d34 <xTaskResumeAll+0x1bc>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f040 80bb 	bne.w	8007d24 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007bae:	4b62      	ldr	r3, [pc, #392]	@ (8007d38 <xTaskResumeAll+0x1c0>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 80b6 	beq.w	8007d24 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bb8:	e08b      	b.n	8007cd2 <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bba:	4b60      	ldr	r3, [pc, #384]	@ (8007d3c <xTaskResumeAll+0x1c4>)
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc6:	60bb      	str	r3, [r7, #8]
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	69db      	ldr	r3, [r3, #28]
 8007bcc:	697a      	ldr	r2, [r7, #20]
 8007bce:	6a12      	ldr	r2, [r2, #32]
 8007bd0:	609a      	str	r2, [r3, #8]
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	6a1b      	ldr	r3, [r3, #32]
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	69d2      	ldr	r2, [r2, #28]
 8007bda:	605a      	str	r2, [r3, #4]
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	3318      	adds	r3, #24
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d103      	bne.n	8007bf0 <xTaskResumeAll+0x78>
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	6a1a      	ldr	r2, [r3, #32]
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	605a      	str	r2, [r3, #4]
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	629a      	str	r2, [r3, #40]	@ 0x28
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	1e5a      	subs	r2, r3, #1
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	695b      	ldr	r3, [r3, #20]
 8007c04:	607b      	str	r3, [r7, #4]
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	68d2      	ldr	r2, [r2, #12]
 8007c0e:	609a      	str	r2, [r3, #8]
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	6892      	ldr	r2, [r2, #8]
 8007c18:	605a      	str	r2, [r3, #4]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	3304      	adds	r3, #4
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d103      	bne.n	8007c2e <xTaskResumeAll+0xb6>
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	68da      	ldr	r2, [r3, #12]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	605a      	str	r2, [r3, #4]
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	2200      	movs	r2, #0
 8007c32:	615a      	str	r2, [r3, #20]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	1e5a      	subs	r2, r3, #1
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c42:	4b3f      	ldr	r3, [pc, #252]	@ (8007d40 <xTaskResumeAll+0x1c8>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d903      	bls.n	8007c52 <xTaskResumeAll+0xda>
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c4e:	4a3c      	ldr	r2, [pc, #240]	@ (8007d40 <xTaskResumeAll+0x1c8>)
 8007c50:	6013      	str	r3, [r2, #0]
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c56:	493b      	ldr	r1, [pc, #236]	@ (8007d44 <xTaskResumeAll+0x1cc>)
 8007c58:	4613      	mov	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	4413      	add	r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	440b      	add	r3, r1
 8007c62:	3304      	adds	r3, #4
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	603b      	str	r3, [r7, #0]
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	683a      	ldr	r2, [r7, #0]
 8007c6c:	609a      	str	r2, [r3, #8]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	689a      	ldr	r2, [r3, #8]
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	60da      	str	r2, [r3, #12]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	3204      	adds	r2, #4
 8007c7e:	605a      	str	r2, [r3, #4]
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	1d1a      	adds	r2, r3, #4
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	609a      	str	r2, [r3, #8]
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4413      	add	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4a2b      	ldr	r2, [pc, #172]	@ (8007d44 <xTaskResumeAll+0x1cc>)
 8007c96:	441a      	add	r2, r3
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	615a      	str	r2, [r3, #20]
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ca0:	4928      	ldr	r1, [pc, #160]	@ (8007d44 <xTaskResumeAll+0x1cc>)
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4413      	add	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	440b      	add	r3, r1
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	1c59      	adds	r1, r3, #1
 8007cb0:	4824      	ldr	r0, [pc, #144]	@ (8007d44 <xTaskResumeAll+0x1cc>)
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4413      	add	r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4403      	add	r3, r0
 8007cbc:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cc2:	4b21      	ldr	r3, [pc, #132]	@ (8007d48 <xTaskResumeAll+0x1d0>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d902      	bls.n	8007cd2 <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 8007ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8007d4c <xTaskResumeAll+0x1d4>)
 8007cce:	2201      	movs	r2, #1
 8007cd0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8007d3c <xTaskResumeAll+0x1c4>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f47f af6f 	bne.w	8007bba <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8007ce2:	f000 fbf5 	bl	80084d0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8007d50 <xTaskResumeAll+0x1d8>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d010      	beq.n	8007d14 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8007cf2:	f000 f83f 	bl	8007d74 <xTaskIncrementTick>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d002      	beq.n	8007d02 <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 8007cfc:	4b13      	ldr	r3, [pc, #76]	@ (8007d4c <xTaskResumeAll+0x1d4>)
 8007cfe:	2201      	movs	r2, #1
 8007d00:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	3b01      	subs	r3, #1
 8007d06:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1f1      	bne.n	8007cf2 <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 8007d0e:	4b10      	ldr	r3, [pc, #64]	@ (8007d50 <xTaskResumeAll+0x1d8>)
 8007d10:	2200      	movs	r2, #0
 8007d12:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8007d14:	4b0d      	ldr	r3, [pc, #52]	@ (8007d4c <xTaskResumeAll+0x1d4>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d003      	beq.n	8007d24 <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8007d20:	f000 ff64 	bl	8008bec <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8007d24:	f000 ff86 	bl	8008c34 <vPortExitCritical>

    return xAlreadyYielded;
 8007d28:	693b      	ldr	r3, [r7, #16]
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3718      	adds	r7, #24
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	20000b1c 	.word	0x20000b1c
 8007d38:	20000af4 	.word	0x20000af4
 8007d3c:	20000ab4 	.word	0x20000ab4
 8007d40:	20000afc 	.word	0x20000afc
 8007d44:	20000624 	.word	0x20000624
 8007d48:	20000620 	.word	0x20000620
 8007d4c:	20000b08 	.word	0x20000b08
 8007d50:	20000b04 	.word	0x20000b04

08007d54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8007d5a:	4b05      	ldr	r3, [pc, #20]	@ (8007d70 <xTaskGetTickCount+0x1c>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8007d60:	687b      	ldr	r3, [r7, #4]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	20000af8 	.word	0x20000af8

08007d74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b088      	sub	sp, #32
 8007d78:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8007d7e:	4b7a      	ldr	r3, [pc, #488]	@ (8007f68 <xTaskIncrementTick+0x1f4>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f040 80e6 	bne.w	8007f54 <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d88:	4b78      	ldr	r3, [pc, #480]	@ (8007f6c <xTaskIncrementTick+0x1f8>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007d90:	4a76      	ldr	r2, [pc, #472]	@ (8007f6c <xTaskIncrementTick+0x1f8>)
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d119      	bne.n	8007dd0 <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 8007d9c:	4b74      	ldr	r3, [pc, #464]	@ (8007f70 <xTaskIncrementTick+0x1fc>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d003      	beq.n	8007dae <xTaskIncrementTick+0x3a>
 8007da6:	f001 f8cf 	bl	8008f48 <ulSetInterruptMask>
 8007daa:	bf00      	nop
 8007dac:	e7fd      	b.n	8007daa <xTaskIncrementTick+0x36>
 8007dae:	4b70      	ldr	r3, [pc, #448]	@ (8007f70 <xTaskIncrementTick+0x1fc>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	617b      	str	r3, [r7, #20]
 8007db4:	4b6f      	ldr	r3, [pc, #444]	@ (8007f74 <xTaskIncrementTick+0x200>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a6d      	ldr	r2, [pc, #436]	@ (8007f70 <xTaskIncrementTick+0x1fc>)
 8007dba:	6013      	str	r3, [r2, #0]
 8007dbc:	4a6d      	ldr	r2, [pc, #436]	@ (8007f74 <xTaskIncrementTick+0x200>)
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	6013      	str	r3, [r2, #0]
 8007dc2:	4b6d      	ldr	r3, [pc, #436]	@ (8007f78 <xTaskIncrementTick+0x204>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	4a6b      	ldr	r2, [pc, #428]	@ (8007f78 <xTaskIncrementTick+0x204>)
 8007dca:	6013      	str	r3, [r2, #0]
 8007dcc:	f000 fb80 	bl	80084d0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8007dd0:	4b6a      	ldr	r3, [pc, #424]	@ (8007f7c <xTaskIncrementTick+0x208>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	f0c0 80a7 	bcc.w	8007f2a <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ddc:	4b64      	ldr	r3, [pc, #400]	@ (8007f70 <xTaskIncrementTick+0x1fc>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d104      	bne.n	8007df0 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007de6:	4b65      	ldr	r3, [pc, #404]	@ (8007f7c <xTaskIncrementTick+0x208>)
 8007de8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dec:	601a      	str	r2, [r3, #0]
                    break;
 8007dee:	e09c      	b.n	8007f2a <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007df0:	4b5f      	ldr	r3, [pc, #380]	@ (8007f70 <xTaskIncrementTick+0x1fc>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8007e00:	69ba      	ldr	r2, [r7, #24]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d203      	bcs.n	8007e10 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007e08:	4a5c      	ldr	r2, [pc, #368]	@ (8007f7c <xTaskIncrementTick+0x208>)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8007e0e:	e08c      	b.n	8007f2a <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	695b      	ldr	r3, [r3, #20]
 8007e14:	60bb      	str	r3, [r7, #8]
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	68d2      	ldr	r2, [r2, #12]
 8007e1e:	609a      	str	r2, [r3, #8]
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	6892      	ldr	r2, [r2, #8]
 8007e28:	605a      	str	r2, [r3, #4]
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	685a      	ldr	r2, [r3, #4]
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	3304      	adds	r3, #4
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d103      	bne.n	8007e3e <xTaskIncrementTick+0xca>
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	68da      	ldr	r2, [r3, #12]
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	605a      	str	r2, [r3, #4]
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	2200      	movs	r2, #0
 8007e42:	615a      	str	r2, [r3, #20]
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	1e5a      	subs	r2, r3, #1
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d01e      	beq.n	8007e94 <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e5a:	607b      	str	r3, [r7, #4]
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	69db      	ldr	r3, [r3, #28]
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	6a12      	ldr	r2, [r2, #32]
 8007e64:	609a      	str	r2, [r3, #8]
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	6a1b      	ldr	r3, [r3, #32]
 8007e6a:	693a      	ldr	r2, [r7, #16]
 8007e6c:	69d2      	ldr	r2, [r2, #28]
 8007e6e:	605a      	str	r2, [r3, #4]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	3318      	adds	r3, #24
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d103      	bne.n	8007e84 <xTaskIncrementTick+0x110>
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	6a1a      	ldr	r2, [r3, #32]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	605a      	str	r2, [r3, #4]
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	2200      	movs	r2, #0
 8007e88:	629a      	str	r2, [r3, #40]	@ 0x28
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	1e5a      	subs	r2, r3, #1
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e98:	4b39      	ldr	r3, [pc, #228]	@ (8007f80 <xTaskIncrementTick+0x20c>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d903      	bls.n	8007ea8 <xTaskIncrementTick+0x134>
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea4:	4a36      	ldr	r2, [pc, #216]	@ (8007f80 <xTaskIncrementTick+0x20c>)
 8007ea6:	6013      	str	r3, [r2, #0]
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eac:	4935      	ldr	r1, [pc, #212]	@ (8007f84 <xTaskIncrementTick+0x210>)
 8007eae:	4613      	mov	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	440b      	add	r3, r1
 8007eb8:	3304      	adds	r3, #4
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	603b      	str	r3, [r7, #0]
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	609a      	str	r2, [r3, #8]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	689a      	ldr	r2, [r3, #8]
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	60da      	str	r2, [r3, #12]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	3204      	adds	r2, #4
 8007ed4:	605a      	str	r2, [r3, #4]
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	1d1a      	adds	r2, r3, #4
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	609a      	str	r2, [r3, #8]
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	4413      	add	r3, r2
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	4a26      	ldr	r2, [pc, #152]	@ (8007f84 <xTaskIncrementTick+0x210>)
 8007eec:	441a      	add	r2, r3
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	615a      	str	r2, [r3, #20]
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ef6:	4923      	ldr	r1, [pc, #140]	@ (8007f84 <xTaskIncrementTick+0x210>)
 8007ef8:	4613      	mov	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	440b      	add	r3, r1
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	1c59      	adds	r1, r3, #1
 8007f06:	481f      	ldr	r0, [pc, #124]	@ (8007f84 <xTaskIncrementTick+0x210>)
 8007f08:	4613      	mov	r3, r2
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	4413      	add	r3, r2
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	4403      	add	r3, r0
 8007f12:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f18:	4b1b      	ldr	r3, [pc, #108]	@ (8007f88 <xTaskIncrementTick+0x214>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	f67f af5c 	bls.w	8007ddc <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 8007f24:	2301      	movs	r3, #1
 8007f26:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f28:	e758      	b.n	8007ddc <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f2a:	4b17      	ldr	r3, [pc, #92]	@ (8007f88 <xTaskIncrementTick+0x214>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f30:	4914      	ldr	r1, [pc, #80]	@ (8007f84 <xTaskIncrementTick+0x210>)
 8007f32:	4613      	mov	r3, r2
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4413      	add	r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	440b      	add	r3, r1
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d901      	bls.n	8007f46 <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 8007f42:	2301      	movs	r3, #1
 8007f44:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8007f46:	4b11      	ldr	r3, [pc, #68]	@ (8007f8c <xTaskIncrementTick+0x218>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d007      	beq.n	8007f5e <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	61fb      	str	r3, [r7, #28]
 8007f52:	e004      	b.n	8007f5e <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8007f54:	4b0e      	ldr	r3, [pc, #56]	@ (8007f90 <xTaskIncrementTick+0x21c>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	4a0d      	ldr	r2, [pc, #52]	@ (8007f90 <xTaskIncrementTick+0x21c>)
 8007f5c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8007f5e:	69fb      	ldr	r3, [r7, #28]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3720      	adds	r7, #32
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	20000b1c 	.word	0x20000b1c
 8007f6c:	20000af8 	.word	0x20000af8
 8007f70:	20000aac 	.word	0x20000aac
 8007f74:	20000ab0 	.word	0x20000ab0
 8007f78:	20000b0c 	.word	0x20000b0c
 8007f7c:	20000b14 	.word	0x20000b14
 8007f80:	20000afc 	.word	0x20000afc
 8007f84:	20000624 	.word	0x20000624
 8007f88:	20000620 	.word	0x20000620
 8007f8c:	20000b08 	.word	0x20000b08
 8007f90:	20000b04 	.word	0x20000b04

08007f94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8007f9a:	4b23      	ldr	r3, [pc, #140]	@ (8008028 <vTaskSwitchContext+0x94>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d003      	beq.n	8007faa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8007fa2:	4b22      	ldr	r3, [pc, #136]	@ (800802c <vTaskSwitchContext+0x98>)
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8007fa8:	e039      	b.n	800801e <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 8007faa:	4b20      	ldr	r3, [pc, #128]	@ (800802c <vTaskSwitchContext+0x98>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8008030 <vTaskSwitchContext+0x9c>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	607b      	str	r3, [r7, #4]
 8007fb6:	e009      	b.n	8007fcc <vTaskSwitchContext+0x38>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d103      	bne.n	8007fc6 <vTaskSwitchContext+0x32>
 8007fbe:	f000 ffc3 	bl	8008f48 <ulSetInterruptMask>
 8007fc2:	bf00      	nop
 8007fc4:	e7fd      	b.n	8007fc2 <vTaskSwitchContext+0x2e>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	607b      	str	r3, [r7, #4]
 8007fcc:	4919      	ldr	r1, [pc, #100]	@ (8008034 <vTaskSwitchContext+0xa0>)
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4413      	add	r3, r2
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	440b      	add	r3, r1
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d0eb      	beq.n	8007fb8 <vTaskSwitchContext+0x24>
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4a12      	ldr	r2, [pc, #72]	@ (8008034 <vTaskSwitchContext+0xa0>)
 8007fec:	4413      	add	r3, r2
 8007fee:	603b      	str	r3, [r7, #0]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	605a      	str	r2, [r3, #4]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	3308      	adds	r3, #8
 8008002:	429a      	cmp	r2, r3
 8008004:	d103      	bne.n	800800e <vTaskSwitchContext+0x7a>
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	68da      	ldr	r2, [r3, #12]
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	605a      	str	r2, [r3, #4]
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	4a08      	ldr	r2, [pc, #32]	@ (8008038 <vTaskSwitchContext+0xa4>)
 8008016:	6013      	str	r3, [r2, #0]
 8008018:	4a05      	ldr	r2, [pc, #20]	@ (8008030 <vTaskSwitchContext+0x9c>)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6013      	str	r3, [r2, #0]
}
 800801e:	bf00      	nop
 8008020:	3708      	adds	r7, #8
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	20000b1c 	.word	0x20000b1c
 800802c:	20000b08 	.word	0x20000b08
 8008030:	20000afc 	.word	0x20000afc
 8008034:	20000624 	.word	0x20000624
 8008038:	20000620 	.word	0x20000620

0800803c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d103      	bne.n	8008054 <vTaskPlaceOnEventList+0x18>
 800804c:	f000 ff7c 	bl	8008f48 <ulSetInterruptMask>
 8008050:	bf00      	nop
 8008052:	e7fd      	b.n	8008050 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008054:	4b07      	ldr	r3, [pc, #28]	@ (8008074 <vTaskPlaceOnEventList+0x38>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	3318      	adds	r3, #24
 800805a:	4619      	mov	r1, r3
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7ff f844 	bl	80070ea <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008062:	2101      	movs	r1, #1
 8008064:	6838      	ldr	r0, [r7, #0]
 8008066:	f000 fa6d 	bl	8008544 <prvAddCurrentTaskToDelayedList>
}
 800806a:	bf00      	nop
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	20000620 	.word	0x20000620

08008078 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8008078:	b580      	push	{r7, lr}
 800807a:	b086      	sub	sp, #24
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d103      	bne.n	8008092 <vTaskPlaceOnEventListRestricted+0x1a>
 800808a:	f000 ff5d 	bl	8008f48 <ulSetInterruptMask>
 800808e:	bf00      	nop
 8008090:	e7fd      	b.n	800808e <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	617b      	str	r3, [r7, #20]
 8008098:	4b15      	ldr	r3, [pc, #84]	@ (80080f0 <vTaskPlaceOnEventListRestricted+0x78>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	697a      	ldr	r2, [r7, #20]
 800809e:	61da      	str	r2, [r3, #28]
 80080a0:	4b13      	ldr	r3, [pc, #76]	@ (80080f0 <vTaskPlaceOnEventListRestricted+0x78>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	6892      	ldr	r2, [r2, #8]
 80080a8:	621a      	str	r2, [r3, #32]
 80080aa:	4b11      	ldr	r3, [pc, #68]	@ (80080f0 <vTaskPlaceOnEventListRestricted+0x78>)
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	3218      	adds	r2, #24
 80080b4:	605a      	str	r2, [r3, #4]
 80080b6:	4b0e      	ldr	r3, [pc, #56]	@ (80080f0 <vTaskPlaceOnEventListRestricted+0x78>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f103 0218 	add.w	r2, r3, #24
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	609a      	str	r2, [r3, #8]
 80080c2:	4b0b      	ldr	r3, [pc, #44]	@ (80080f0 <vTaskPlaceOnEventListRestricted+0x78>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	1c5a      	adds	r2, r3, #1
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d002      	beq.n	80080e0 <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 80080da:	f04f 33ff 	mov.w	r3, #4294967295
 80080de:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80080e0:	6879      	ldr	r1, [r7, #4]
 80080e2:	68b8      	ldr	r0, [r7, #8]
 80080e4:	f000 fa2e 	bl	8008544 <prvAddCurrentTaskToDelayedList>
    }
 80080e8:	bf00      	nop
 80080ea:	3718      	adds	r7, #24
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	20000620 	.word	0x20000620

080080f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b088      	sub	sp, #32
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d103      	bne.n	8008112 <xTaskRemoveFromEventList+0x1e>
 800810a:	f000 ff1d 	bl	8008f48 <ulSetInterruptMask>
 800810e:	bf00      	nop
 8008110:	e7fd      	b.n	800810e <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008116:	617b      	str	r3, [r7, #20]
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	69db      	ldr	r3, [r3, #28]
 800811c:	69ba      	ldr	r2, [r7, #24]
 800811e:	6a12      	ldr	r2, [r2, #32]
 8008120:	609a      	str	r2, [r3, #8]
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	6a1b      	ldr	r3, [r3, #32]
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	69d2      	ldr	r2, [r2, #28]
 800812a:	605a      	str	r2, [r3, #4]
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	685a      	ldr	r2, [r3, #4]
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	3318      	adds	r3, #24
 8008134:	429a      	cmp	r2, r3
 8008136:	d103      	bne.n	8008140 <xTaskRemoveFromEventList+0x4c>
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	6a1a      	ldr	r2, [r3, #32]
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	605a      	str	r2, [r3, #4]
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	2200      	movs	r2, #0
 8008144:	629a      	str	r2, [r3, #40]	@ 0x28
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	1e5a      	subs	r2, r3, #1
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8008150:	4b49      	ldr	r3, [pc, #292]	@ (8008278 <xTaskRemoveFromEventList+0x184>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d15f      	bne.n	8008218 <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	695b      	ldr	r3, [r3, #20]
 800815c:	60fb      	str	r3, [r7, #12]
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	69ba      	ldr	r2, [r7, #24]
 8008164:	68d2      	ldr	r2, [r2, #12]
 8008166:	609a      	str	r2, [r3, #8]
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	69ba      	ldr	r2, [r7, #24]
 800816e:	6892      	ldr	r2, [r2, #8]
 8008170:	605a      	str	r2, [r3, #4]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	3304      	adds	r3, #4
 800817a:	429a      	cmp	r2, r3
 800817c:	d103      	bne.n	8008186 <xTaskRemoveFromEventList+0x92>
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	68da      	ldr	r2, [r3, #12]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	605a      	str	r2, [r3, #4]
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	2200      	movs	r2, #0
 800818a:	615a      	str	r2, [r3, #20]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	1e5a      	subs	r2, r3, #1
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800819a:	4b38      	ldr	r3, [pc, #224]	@ (800827c <xTaskRemoveFromEventList+0x188>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d903      	bls.n	80081aa <xTaskRemoveFromEventList+0xb6>
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a6:	4a35      	ldr	r2, [pc, #212]	@ (800827c <xTaskRemoveFromEventList+0x188>)
 80081a8:	6013      	str	r3, [r2, #0]
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081ae:	4934      	ldr	r1, [pc, #208]	@ (8008280 <xTaskRemoveFromEventList+0x18c>)
 80081b0:	4613      	mov	r3, r2
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4413      	add	r3, r2
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	440b      	add	r3, r1
 80081ba:	3304      	adds	r3, #4
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	60bb      	str	r3, [r7, #8]
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	609a      	str	r2, [r3, #8]
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	689a      	ldr	r2, [r3, #8]
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	60da      	str	r2, [r3, #12]
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	69ba      	ldr	r2, [r7, #24]
 80081d4:	3204      	adds	r2, #4
 80081d6:	605a      	str	r2, [r3, #4]
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	1d1a      	adds	r2, r3, #4
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	609a      	str	r2, [r3, #8]
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081e4:	4613      	mov	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4a24      	ldr	r2, [pc, #144]	@ (8008280 <xTaskRemoveFromEventList+0x18c>)
 80081ee:	441a      	add	r2, r3
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	615a      	str	r2, [r3, #20]
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081f8:	4921      	ldr	r1, [pc, #132]	@ (8008280 <xTaskRemoveFromEventList+0x18c>)
 80081fa:	4613      	mov	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	440b      	add	r3, r1
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	1c59      	adds	r1, r3, #1
 8008208:	481d      	ldr	r0, [pc, #116]	@ (8008280 <xTaskRemoveFromEventList+0x18c>)
 800820a:	4613      	mov	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4413      	add	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4403      	add	r3, r0
 8008214:	6019      	str	r1, [r3, #0]
 8008216:	e01b      	b.n	8008250 <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008218:	4b1a      	ldr	r3, [pc, #104]	@ (8008284 <xTaskRemoveFromEventList+0x190>)
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	613b      	str	r3, [r7, #16]
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	693a      	ldr	r2, [r7, #16]
 8008222:	61da      	str	r2, [r3, #28]
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	689a      	ldr	r2, [r3, #8]
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	621a      	str	r2, [r3, #32]
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	69ba      	ldr	r2, [r7, #24]
 8008232:	3218      	adds	r2, #24
 8008234:	605a      	str	r2, [r3, #4]
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	f103 0218 	add.w	r2, r3, #24
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	609a      	str	r2, [r3, #8]
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	4a10      	ldr	r2, [pc, #64]	@ (8008284 <xTaskRemoveFromEventList+0x190>)
 8008244:	629a      	str	r2, [r3, #40]	@ 0x28
 8008246:	4b0f      	ldr	r3, [pc, #60]	@ (8008284 <xTaskRemoveFromEventList+0x190>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3301      	adds	r3, #1
 800824c:	4a0d      	ldr	r2, [pc, #52]	@ (8008284 <xTaskRemoveFromEventList+0x190>)
 800824e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008254:	4b0c      	ldr	r3, [pc, #48]	@ (8008288 <xTaskRemoveFromEventList+0x194>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800825a:	429a      	cmp	r2, r3
 800825c:	d905      	bls.n	800826a <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800825e:	2301      	movs	r3, #1
 8008260:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8008262:	4b0a      	ldr	r3, [pc, #40]	@ (800828c <xTaskRemoveFromEventList+0x198>)
 8008264:	2201      	movs	r2, #1
 8008266:	601a      	str	r2, [r3, #0]
 8008268:	e001      	b.n	800826e <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 800826a:	2300      	movs	r3, #0
 800826c:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800826e:	69fb      	ldr	r3, [r7, #28]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3720      	adds	r7, #32
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	20000b1c 	.word	0x20000b1c
 800827c:	20000afc 	.word	0x20000afc
 8008280:	20000624 	.word	0x20000624
 8008284:	20000ab4 	.word	0x20000ab4
 8008288:	20000620 	.word	0x20000620
 800828c:	20000b08 	.word	0x20000b08

08008290 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008298:	4b06      	ldr	r3, [pc, #24]	@ (80082b4 <vTaskInternalSetTimeOutState+0x24>)
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80082a0:	4b05      	ldr	r3, [pc, #20]	@ (80082b8 <vTaskInternalSetTimeOutState+0x28>)
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	605a      	str	r2, [r3, #4]
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr
 80082b4:	20000b0c 	.word	0x20000b0c
 80082b8:	20000af8 	.word	0x20000af8

080082bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b086      	sub	sp, #24
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d103      	bne.n	80082d4 <xTaskCheckForTimeOut+0x18>
 80082cc:	f000 fe3c 	bl	8008f48 <ulSetInterruptMask>
 80082d0:	bf00      	nop
 80082d2:	e7fd      	b.n	80082d0 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d103      	bne.n	80082e2 <xTaskCheckForTimeOut+0x26>
 80082da:	f000 fe35 	bl	8008f48 <ulSetInterruptMask>
 80082de:	bf00      	nop
 80082e0:	e7fd      	b.n	80082de <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 80082e2:	f000 fc95 	bl	8008c10 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80082e6:	4b1f      	ldr	r3, [pc, #124]	@ (8008364 <xTaskCheckForTimeOut+0xa8>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	693a      	ldr	r2, [r7, #16]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082fe:	d102      	bne.n	8008306 <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8008300:	2300      	movs	r3, #0
 8008302:	617b      	str	r3, [r7, #20]
 8008304:	e026      	b.n	8008354 <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	4b17      	ldr	r3, [pc, #92]	@ (8008368 <xTaskCheckForTimeOut+0xac>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	429a      	cmp	r2, r3
 8008310:	d00a      	beq.n	8008328 <xTaskCheckForTimeOut+0x6c>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	693a      	ldr	r2, [r7, #16]
 8008318:	429a      	cmp	r2, r3
 800831a:	d305      	bcc.n	8008328 <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800831c:	2301      	movs	r3, #1
 800831e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	2200      	movs	r2, #0
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	e015      	b.n	8008354 <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	429a      	cmp	r2, r3
 8008330:	d20b      	bcs.n	800834a <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	1ad2      	subs	r2, r2, r3
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f7ff ffa6 	bl	8008290 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8008344:	2300      	movs	r3, #0
 8008346:	617b      	str	r3, [r7, #20]
 8008348:	e004      	b.n	8008354 <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	2200      	movs	r2, #0
 800834e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8008350:	2301      	movs	r3, #1
 8008352:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8008354:	f000 fc6e 	bl	8008c34 <vPortExitCritical>

    return xReturn;
 8008358:	697b      	ldr	r3, [r7, #20]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3718      	adds	r7, #24
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	20000af8 	.word	0x20000af8
 8008368:	20000b0c 	.word	0x20000b0c

0800836c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800836c:	b480      	push	{r7}
 800836e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8008370:	4b03      	ldr	r3, [pc, #12]	@ (8008380 <vTaskMissedYield+0x14>)
 8008372:	2201      	movs	r2, #1
 8008374:	601a      	str	r2, [r3, #0]
}
 8008376:	bf00      	nop
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr
 8008380:	20000b08 	.word	0x20000b08

08008384 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800838c:	f000 f84a 	bl	8008424 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008390:	4b03      	ldr	r3, [pc, #12]	@ (80083a0 <prvIdleTask+0x1c>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d9f9      	bls.n	800838c <prvIdleTask+0x8>
            {
                taskYIELD();
 8008398:	f000 fc28 	bl	8008bec <vPortYield>
        prvCheckTasksWaitingTermination();
 800839c:	e7f6      	b.n	800838c <prvIdleTask+0x8>
 800839e:	bf00      	nop
 80083a0:	20000624 	.word	0x20000624

080083a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083aa:	2300      	movs	r3, #0
 80083ac:	607b      	str	r3, [r7, #4]
 80083ae:	e00c      	b.n	80083ca <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	4613      	mov	r3, r2
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4413      	add	r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	4a12      	ldr	r2, [pc, #72]	@ (8008404 <prvInitialiseTaskLists+0x60>)
 80083bc:	4413      	add	r3, r2
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fe fe66 	bl	8007090 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	3301      	adds	r3, #1
 80083c8:	607b      	str	r3, [r7, #4]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b37      	cmp	r3, #55	@ 0x37
 80083ce:	d9ef      	bls.n	80083b0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80083d0:	480d      	ldr	r0, [pc, #52]	@ (8008408 <prvInitialiseTaskLists+0x64>)
 80083d2:	f7fe fe5d 	bl	8007090 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80083d6:	480d      	ldr	r0, [pc, #52]	@ (800840c <prvInitialiseTaskLists+0x68>)
 80083d8:	f7fe fe5a 	bl	8007090 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80083dc:	480c      	ldr	r0, [pc, #48]	@ (8008410 <prvInitialiseTaskLists+0x6c>)
 80083de:	f7fe fe57 	bl	8007090 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80083e2:	480c      	ldr	r0, [pc, #48]	@ (8008414 <prvInitialiseTaskLists+0x70>)
 80083e4:	f7fe fe54 	bl	8007090 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80083e8:	480b      	ldr	r0, [pc, #44]	@ (8008418 <prvInitialiseTaskLists+0x74>)
 80083ea:	f7fe fe51 	bl	8007090 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80083ee:	4b0b      	ldr	r3, [pc, #44]	@ (800841c <prvInitialiseTaskLists+0x78>)
 80083f0:	4a05      	ldr	r2, [pc, #20]	@ (8008408 <prvInitialiseTaskLists+0x64>)
 80083f2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80083f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008420 <prvInitialiseTaskLists+0x7c>)
 80083f6:	4a05      	ldr	r2, [pc, #20]	@ (800840c <prvInitialiseTaskLists+0x68>)
 80083f8:	601a      	str	r2, [r3, #0]
}
 80083fa:	bf00      	nop
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	20000624 	.word	0x20000624
 8008408:	20000a84 	.word	0x20000a84
 800840c:	20000a98 	.word	0x20000a98
 8008410:	20000ab4 	.word	0x20000ab4
 8008414:	20000ac8 	.word	0x20000ac8
 8008418:	20000ae0 	.word	0x20000ae0
 800841c:	20000aac 	.word	0x20000aac
 8008420:	20000ab0 	.word	0x20000ab0

08008424 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800842a:	e019      	b.n	8008460 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800842c:	f000 fbf0 	bl	8008c10 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008430:	4b10      	ldr	r3, [pc, #64]	@ (8008474 <prvCheckTasksWaitingTermination+0x50>)
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	3304      	adds	r3, #4
 800843c:	4618      	mov	r0, r3
 800843e:	f7fe fe8d 	bl	800715c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8008442:	4b0d      	ldr	r3, [pc, #52]	@ (8008478 <prvCheckTasksWaitingTermination+0x54>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	3b01      	subs	r3, #1
 8008448:	4a0b      	ldr	r2, [pc, #44]	@ (8008478 <prvCheckTasksWaitingTermination+0x54>)
 800844a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800844c:	4b0b      	ldr	r3, [pc, #44]	@ (800847c <prvCheckTasksWaitingTermination+0x58>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	3b01      	subs	r3, #1
 8008452:	4a0a      	ldr	r2, [pc, #40]	@ (800847c <prvCheckTasksWaitingTermination+0x58>)
 8008454:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8008456:	f000 fbed 	bl	8008c34 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f810 	bl	8008480 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008460:	4b06      	ldr	r3, [pc, #24]	@ (800847c <prvCheckTasksWaitingTermination+0x58>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1e1      	bne.n	800842c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8008468:	bf00      	nop
 800846a:	bf00      	nop
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	20000ac8 	.word	0x20000ac8
 8008478:	20000af4 	.word	0x20000af4
 800847c:	20000adc 	.word	0x20000adc

08008480 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800848e:	2b00      	cmp	r3, #0
 8008490:	d108      	bne.n	80084a4 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008496:	4618      	mov	r0, r3
 8008498:	f000 fe08 	bl	80090ac <vPortFree>
                vPortFree( pxTCB );
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 fe05 	bl	80090ac <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80084a2:	e011      	b.n	80084c8 <prvDeleteTCB+0x48>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d103      	bne.n	80084b6 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fdfc 	bl	80090ac <vPortFree>
    }
 80084b4:	e008      	b.n	80084c8 <prvDeleteTCB+0x48>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d003      	beq.n	80084c8 <prvDeleteTCB+0x48>
 80084c0:	f000 fd42 	bl	8008f48 <ulSetInterruptMask>
 80084c4:	bf00      	nop
 80084c6:	e7fd      	b.n	80084c4 <prvDeleteTCB+0x44>
    }
 80084c8:	bf00      	nop
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80084d0:	b480      	push	{r7}
 80084d2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084d4:	4b0a      	ldr	r3, [pc, #40]	@ (8008500 <prvResetNextTaskUnblockTime+0x30>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d104      	bne.n	80084e8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80084de:	4b09      	ldr	r3, [pc, #36]	@ (8008504 <prvResetNextTaskUnblockTime+0x34>)
 80084e0:	f04f 32ff 	mov.w	r2, #4294967295
 80084e4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80084e6:	e005      	b.n	80084f4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80084e8:	4b05      	ldr	r3, [pc, #20]	@ (8008500 <prvResetNextTaskUnblockTime+0x30>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a04      	ldr	r2, [pc, #16]	@ (8008504 <prvResetNextTaskUnblockTime+0x34>)
 80084f2:	6013      	str	r3, [r2, #0]
}
 80084f4:	bf00      	nop
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	20000aac 	.word	0x20000aac
 8008504:	20000b14 	.word	0x20000b14

08008508 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800850e:	4b0b      	ldr	r3, [pc, #44]	@ (800853c <xTaskGetSchedulerState+0x34>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d102      	bne.n	800851c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8008516:	2301      	movs	r3, #1
 8008518:	607b      	str	r3, [r7, #4]
 800851a:	e008      	b.n	800852e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800851c:	4b08      	ldr	r3, [pc, #32]	@ (8008540 <xTaskGetSchedulerState+0x38>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d102      	bne.n	800852a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8008524:	2302      	movs	r3, #2
 8008526:	607b      	str	r3, [r7, #4]
 8008528:	e001      	b.n	800852e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800852a:	2300      	movs	r3, #0
 800852c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800852e:	687b      	ldr	r3, [r7, #4]
    }
 8008530:	4618      	mov	r0, r3
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	20000b00 	.word	0x20000b00
 8008540:	20000b1c 	.word	0x20000b1c

08008544 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800854e:	4b2e      	ldr	r3, [pc, #184]	@ (8008608 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008554:	4b2d      	ldr	r3, [pc, #180]	@ (800860c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	3304      	adds	r3, #4
 800855a:	4618      	mov	r0, r3
 800855c:	f7fe fdfe 	bl	800715c <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008566:	d124      	bne.n	80085b2 <prvAddCurrentTaskToDelayedList+0x6e>
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d021      	beq.n	80085b2 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800856e:	4b28      	ldr	r3, [pc, #160]	@ (8008610 <prvAddCurrentTaskToDelayedList+0xcc>)
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	613b      	str	r3, [r7, #16]
 8008574:	4b25      	ldr	r3, [pc, #148]	@ (800860c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	609a      	str	r2, [r3, #8]
 800857c:	4b23      	ldr	r3, [pc, #140]	@ (800860c <prvAddCurrentTaskToDelayedList+0xc8>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	693a      	ldr	r2, [r7, #16]
 8008582:	6892      	ldr	r2, [r2, #8]
 8008584:	60da      	str	r2, [r3, #12]
 8008586:	4b21      	ldr	r3, [pc, #132]	@ (800860c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	3204      	adds	r2, #4
 8008590:	605a      	str	r2, [r3, #4]
 8008592:	4b1e      	ldr	r3, [pc, #120]	@ (800860c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	1d1a      	adds	r2, r3, #4
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	609a      	str	r2, [r3, #8]
 800859c:	4b1b      	ldr	r3, [pc, #108]	@ (800860c <prvAddCurrentTaskToDelayedList+0xc8>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a1b      	ldr	r2, [pc, #108]	@ (8008610 <prvAddCurrentTaskToDelayedList+0xcc>)
 80085a2:	615a      	str	r2, [r3, #20]
 80085a4:	4b1a      	ldr	r3, [pc, #104]	@ (8008610 <prvAddCurrentTaskToDelayedList+0xcc>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	3301      	adds	r3, #1
 80085aa:	4a19      	ldr	r2, [pc, #100]	@ (8008610 <prvAddCurrentTaskToDelayedList+0xcc>)
 80085ac:	6013      	str	r3, [r2, #0]
 80085ae:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80085b0:	e026      	b.n	8008600 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80085b2:	697a      	ldr	r2, [r7, #20]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4413      	add	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80085ba:	4b14      	ldr	r3, [pc, #80]	@ (800860c <prvAddCurrentTaskToDelayedList+0xc8>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d209      	bcs.n	80085de <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085ca:	4b12      	ldr	r3, [pc, #72]	@ (8008614 <prvAddCurrentTaskToDelayedList+0xd0>)
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	4b0f      	ldr	r3, [pc, #60]	@ (800860c <prvAddCurrentTaskToDelayedList+0xc8>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	3304      	adds	r3, #4
 80085d4:	4619      	mov	r1, r3
 80085d6:	4610      	mov	r0, r2
 80085d8:	f7fe fd87 	bl	80070ea <vListInsert>
}
 80085dc:	e010      	b.n	8008600 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085de:	4b0e      	ldr	r3, [pc, #56]	@ (8008618 <prvAddCurrentTaskToDelayedList+0xd4>)
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	4b0a      	ldr	r3, [pc, #40]	@ (800860c <prvAddCurrentTaskToDelayedList+0xc8>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3304      	adds	r3, #4
 80085e8:	4619      	mov	r1, r3
 80085ea:	4610      	mov	r0, r2
 80085ec:	f7fe fd7d 	bl	80070ea <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80085f0:	4b0a      	ldr	r3, [pc, #40]	@ (800861c <prvAddCurrentTaskToDelayedList+0xd8>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d202      	bcs.n	8008600 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 80085fa:	4a08      	ldr	r2, [pc, #32]	@ (800861c <prvAddCurrentTaskToDelayedList+0xd8>)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6013      	str	r3, [r2, #0]
}
 8008600:	bf00      	nop
 8008602:	3718      	adds	r7, #24
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	20000af8 	.word	0x20000af8
 800860c:	20000620 	.word	0x20000620
 8008610:	20000ae0 	.word	0x20000ae0
 8008614:	20000ab0 	.word	0x20000ab0
 8008618:	20000aac 	.word	0x20000aac
 800861c:	20000b14 	.word	0x20000b14

08008620 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8008620:	b580      	push	{r7, lr}
 8008622:	b088      	sub	sp, #32
 8008624:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8008626:	2300      	movs	r3, #0
 8008628:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800862a:	f000 fa5f 	bl	8008aec <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800862e:	4b18      	ldr	r3, [pc, #96]	@ (8008690 <xTimerCreateTimerTask+0x70>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d020      	beq.n	8008678 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8008636:	2300      	movs	r3, #0
 8008638:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800863a:	2300      	movs	r3, #0
 800863c:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800863e:	463a      	mov	r2, r7
 8008640:	1d39      	adds	r1, r7, #4
 8008642:	f107 0308 	add.w	r3, r7, #8
 8008646:	4618      	mov	r0, r3
 8008648:	f7fe fd08 	bl	800705c <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	9202      	str	r2, [sp, #8]
 8008654:	9301      	str	r3, [sp, #4]
 8008656:	2302      	movs	r3, #2
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	2300      	movs	r3, #0
 800865c:	460a      	mov	r2, r1
 800865e:	490d      	ldr	r1, [pc, #52]	@ (8008694 <xTimerCreateTimerTask+0x74>)
 8008660:	480d      	ldr	r0, [pc, #52]	@ (8008698 <xTimerCreateTimerTask+0x78>)
 8008662:	f7ff f84f 	bl	8007704 <xTaskCreateStatic>
 8008666:	4603      	mov	r3, r0
 8008668:	4a0c      	ldr	r2, [pc, #48]	@ (800869c <xTimerCreateTimerTask+0x7c>)
 800866a:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800866c:	4b0b      	ldr	r3, [pc, #44]	@ (800869c <xTimerCreateTimerTask+0x7c>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d001      	beq.n	8008678 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 8008674:	2301      	movs	r3, #1
 8008676:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d103      	bne.n	8008686 <xTimerCreateTimerTask+0x66>
 800867e:	f000 fc63 	bl	8008f48 <ulSetInterruptMask>
 8008682:	bf00      	nop
 8008684:	e7fd      	b.n	8008682 <xTimerCreateTimerTask+0x62>
        return xReturn;
 8008686:	68fb      	ldr	r3, [r7, #12]
    }
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	20000b50 	.word	0x20000b50
 8008694:	08009198 	.word	0x08009198
 8008698:	08008745 	.word	0x08008745
 800869c:	20000b54 	.word	0x20000b54

080086a0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80086ac:	e008      	b.n	80086c0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	4413      	add	r3, r2
 80086b6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6a1b      	ldr	r3, [r3, #32]
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	699a      	ldr	r2, [r3, #24]
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	18d1      	adds	r1, r2, r3
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f000 f8d7 	bl	8008880 <prvInsertTimerInActiveList>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d1ea      	bne.n	80086ae <prvReloadTimer+0xe>
        }
    }
 80086d8:	bf00      	nop
 80086da:	bf00      	nop
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
	...

080086e4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086ee:	4b14      	ldr	r3, [pc, #80]	@ (8008740 <prvProcessExpiredTimer+0x5c>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	3304      	adds	r3, #4
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fe fd2d 	bl	800715c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008708:	f003 0304 	and.w	r3, r3, #4
 800870c:	2b00      	cmp	r3, #0
 800870e:	d005      	beq.n	800871c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8008710:	683a      	ldr	r2, [r7, #0]
 8008712:	6879      	ldr	r1, [r7, #4]
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f7ff ffc3 	bl	80086a0 <prvReloadTimer>
 800871a:	e008      	b.n	800872e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008722:	f023 0301 	bic.w	r3, r3, #1
 8008726:	b2da      	uxtb	r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6a1b      	ldr	r3, [r3, #32]
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	4798      	blx	r3
    }
 8008736:	bf00      	nop
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	20000b48 	.word	0x20000b48

08008744 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800874c:	f107 0308 	add.w	r3, r7, #8
 8008750:	4618      	mov	r0, r3
 8008752:	f000 f851 	bl	80087f8 <prvGetNextExpireTime>
 8008756:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	4619      	mov	r1, r3
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f000 f805 	bl	800876c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8008762:	f000 f8cf 	bl	8008904 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008766:	bf00      	nop
 8008768:	e7f0      	b.n	800874c <prvTimerTask+0x8>
	...

0800876c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8008776:	f7ff f9f1 	bl	8007b5c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800877a:	f107 0308 	add.w	r3, r7, #8
 800877e:	4618      	mov	r0, r3
 8008780:	f000 f85e 	bl	8008840 <prvSampleTimeNow>
 8008784:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d12a      	bne.n	80087e2 <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10a      	bne.n	80087a8 <prvProcessTimerOrBlockTask+0x3c>
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	429a      	cmp	r2, r3
 8008798:	d806      	bhi.n	80087a8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800879a:	f7ff f9ed 	bl	8007b78 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800879e:	68f9      	ldr	r1, [r7, #12]
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f7ff ff9f 	bl	80086e4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80087a6:	e01e      	b.n	80087e6 <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d008      	beq.n	80087c0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80087ae:	4b10      	ldr	r3, [pc, #64]	@ (80087f0 <prvProcessTimerOrBlockTask+0x84>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d101      	bne.n	80087bc <prvProcessTimerOrBlockTask+0x50>
 80087b8:	2301      	movs	r3, #1
 80087ba:	e000      	b.n	80087be <prvProcessTimerOrBlockTask+0x52>
 80087bc:	2300      	movs	r3, #0
 80087be:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80087c0:	4b0c      	ldr	r3, [pc, #48]	@ (80087f4 <prvProcessTimerOrBlockTask+0x88>)
 80087c2:	6818      	ldr	r0, [r3, #0]
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	4619      	mov	r1, r3
 80087ce:	f7fe ff65 	bl	800769c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80087d2:	f7ff f9d1 	bl	8007b78 <xTaskResumeAll>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d104      	bne.n	80087e6 <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 80087dc:	f000 fa06 	bl	8008bec <vPortYield>
    }
 80087e0:	e001      	b.n	80087e6 <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 80087e2:	f7ff f9c9 	bl	8007b78 <xTaskResumeAll>
    }
 80087e6:	bf00      	nop
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	20000b4c 	.word	0x20000b4c
 80087f4:	20000b50 	.word	0x20000b50

080087f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008800:	4b0e      	ldr	r3, [pc, #56]	@ (800883c <prvGetNextExpireTime+0x44>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d101      	bne.n	800880e <prvGetNextExpireTime+0x16>
 800880a:	2201      	movs	r2, #1
 800880c:	e000      	b.n	8008810 <prvGetNextExpireTime+0x18>
 800880e:	2200      	movs	r2, #0
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d105      	bne.n	8008828 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800881c:	4b07      	ldr	r3, [pc, #28]	@ (800883c <prvGetNextExpireTime+0x44>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	60fb      	str	r3, [r7, #12]
 8008826:	e001      	b.n	800882c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8008828:	2300      	movs	r3, #0
 800882a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800882c:	68fb      	ldr	r3, [r7, #12]
    }
 800882e:	4618      	mov	r0, r3
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	20000b48 	.word	0x20000b48

08008840 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8008848:	f7ff fa84 	bl	8007d54 <xTaskGetTickCount>
 800884c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800884e:	4b0b      	ldr	r3, [pc, #44]	@ (800887c <prvSampleTimeNow+0x3c>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	429a      	cmp	r2, r3
 8008856:	d205      	bcs.n	8008864 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8008858:	f000 f922 	bl	8008aa0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	601a      	str	r2, [r3, #0]
 8008862:	e002      	b.n	800886a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800886a:	4a04      	ldr	r2, [pc, #16]	@ (800887c <prvSampleTimeNow+0x3c>)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8008870:	68fb      	ldr	r3, [r7, #12]
    }
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	20000b58 	.word	0x20000b58

08008880 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
 800888c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800888e:	2300      	movs	r3, #0
 8008890:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d812      	bhi.n	80088cc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	1ad2      	subs	r2, r2, r3
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	699b      	ldr	r3, [r3, #24]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d302      	bcc.n	80088ba <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80088b4:	2301      	movs	r3, #1
 80088b6:	617b      	str	r3, [r7, #20]
 80088b8:	e01b      	b.n	80088f2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80088ba:	4b10      	ldr	r3, [pc, #64]	@ (80088fc <prvInsertTimerInActiveList+0x7c>)
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	3304      	adds	r3, #4
 80088c2:	4619      	mov	r1, r3
 80088c4:	4610      	mov	r0, r2
 80088c6:	f7fe fc10 	bl	80070ea <vListInsert>
 80088ca:	e012      	b.n	80088f2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d206      	bcs.n	80088e2 <prvInsertTimerInActiveList+0x62>
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d302      	bcc.n	80088e2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80088dc:	2301      	movs	r3, #1
 80088de:	617b      	str	r3, [r7, #20]
 80088e0:	e007      	b.n	80088f2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088e2:	4b07      	ldr	r3, [pc, #28]	@ (8008900 <prvInsertTimerInActiveList+0x80>)
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	3304      	adds	r3, #4
 80088ea:	4619      	mov	r1, r3
 80088ec:	4610      	mov	r0, r2
 80088ee:	f7fe fbfc 	bl	80070ea <vListInsert>
            }
        }

        return xProcessTimerNow;
 80088f2:	697b      	ldr	r3, [r7, #20]
    }
 80088f4:	4618      	mov	r0, r3
 80088f6:	3718      	adds	r7, #24
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	20000b4c 	.word	0x20000b4c
 8008900:	20000b48 	.word	0x20000b48

08008904 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8008904:	b580      	push	{r7, lr}
 8008906:	b088      	sub	sp, #32
 8008908:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800890a:	e0b7      	b.n	8008a7c <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	da11      	bge.n	8008936 <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008912:	1d3b      	adds	r3, r7, #4
 8008914:	3304      	adds	r3, #4
 8008916:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d103      	bne.n	8008926 <prvProcessReceivedCommands+0x22>
 800891e:	f000 fb13 	bl	8008f48 <ulSetInterruptMask>
 8008922:	bf00      	nop
 8008924:	e7fd      	b.n	8008922 <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	69fa      	ldr	r2, [r7, #28]
 800892c:	6850      	ldr	r0, [r2, #4]
 800892e:	69fa      	ldr	r2, [r7, #28]
 8008930:	6892      	ldr	r2, [r2, #8]
 8008932:	4611      	mov	r1, r2
 8008934:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	f2c0 809f 	blt.w	8008a7c <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d004      	beq.n	8008954 <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	3304      	adds	r3, #4
 800894e:	4618      	mov	r0, r3
 8008950:	f7fe fc04 	bl	800715c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008954:	463b      	mov	r3, r7
 8008956:	4618      	mov	r0, r3
 8008958:	f7ff ff72 	bl	8008840 <prvSampleTimeNow>
 800895c:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	3b01      	subs	r3, #1
 8008962:	2b08      	cmp	r3, #8
 8008964:	f200 8087 	bhi.w	8008a76 <prvProcessReceivedCommands+0x172>
 8008968:	a201      	add	r2, pc, #4	@ (adr r2, 8008970 <prvProcessReceivedCommands+0x6c>)
 800896a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896e:	bf00      	nop
 8008970:	08008995 	.word	0x08008995
 8008974:	08008995 	.word	0x08008995
 8008978:	080089fd 	.word	0x080089fd
 800897c:	08008a11 	.word	0x08008a11
 8008980:	08008a4d 	.word	0x08008a4d
 8008984:	08008995 	.word	0x08008995
 8008988:	08008995 	.word	0x08008995
 800898c:	080089fd 	.word	0x080089fd
 8008990:	08008a11 	.word	0x08008a11
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800899a:	f043 0301 	orr.w	r3, r3, #1
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	699b      	ldr	r3, [r3, #24]
 80089ac:	18d1      	adds	r1, r2, r3
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	697a      	ldr	r2, [r7, #20]
 80089b2:	69b8      	ldr	r0, [r7, #24]
 80089b4:	f7ff ff64 	bl	8008880 <prvInsertTimerInActiveList>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d05d      	beq.n	8008a7a <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089c4:	f003 0304 	and.w	r3, r3, #4
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d009      	beq.n	80089e0 <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	4413      	add	r3, r2
 80089d4:	697a      	ldr	r2, [r7, #20]
 80089d6:	4619      	mov	r1, r3
 80089d8:	69b8      	ldr	r0, [r7, #24]
 80089da:	f7ff fe61 	bl	80086a0 <prvReloadTimer>
 80089de:	e008      	b.n	80089f2 <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089e6:	f023 0301 	bic.w	r3, r3, #1
 80089ea:	b2da      	uxtb	r2, r3
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	69b8      	ldr	r0, [r7, #24]
 80089f8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80089fa:	e03e      	b.n	8008a7a <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a02:	f023 0301 	bic.w	r3, r3, #1
 8008a06:	b2da      	uxtb	r2, r3
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8008a0e:	e035      	b.n	8008a7c <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a16:	f043 0301 	orr.w	r3, r3, #1
 8008a1a:	b2da      	uxtb	r2, r3
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	699b      	ldr	r3, [r3, #24]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d103      	bne.n	8008a38 <prvProcessReceivedCommands+0x134>
 8008a30:	f000 fa8a 	bl	8008f48 <ulSetInterruptMask>
 8008a34:	bf00      	nop
 8008a36:	e7fd      	b.n	8008a34 <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	699a      	ldr	r2, [r3, #24]
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	18d1      	adds	r1, r2, r3
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	69b8      	ldr	r0, [r7, #24]
 8008a46:	f7ff ff1b 	bl	8008880 <prvInsertTimerInActiveList>
                        break;
 8008a4a:	e017      	b.n	8008a7c <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a52:	f003 0302 	and.w	r3, r3, #2
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d103      	bne.n	8008a62 <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 8008a5a:	69b8      	ldr	r0, [r7, #24]
 8008a5c:	f000 fb26 	bl	80090ac <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8008a60:	e00c      	b.n	8008a7c <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a68:	f023 0301 	bic.w	r3, r3, #1
 8008a6c:	b2da      	uxtb	r2, r3
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8008a74:	e002      	b.n	8008a7c <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 8008a76:	bf00      	nop
 8008a78:	e000      	b.n	8008a7c <prvProcessReceivedCommands+0x178>
                        break;
 8008a7a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a7c:	4b07      	ldr	r3, [pc, #28]	@ (8008a9c <prvProcessReceivedCommands+0x198>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	1d39      	adds	r1, r7, #4
 8008a82:	2200      	movs	r2, #0
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7fe fc78 	bl	800737a <xQueueReceive>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f47f af3d 	bne.w	800890c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8008a92:	bf00      	nop
 8008a94:	bf00      	nop
 8008a96:	3720      	adds	r7, #32
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	20000b50 	.word	0x20000b50

08008aa0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008aa6:	e009      	b.n	8008abc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8008ae4 <prvSwitchTimerLists+0x44>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8008ab2:	f04f 31ff 	mov.w	r1, #4294967295
 8008ab6:	6838      	ldr	r0, [r7, #0]
 8008ab8:	f7ff fe14 	bl	80086e4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008abc:	4b09      	ldr	r3, [pc, #36]	@ (8008ae4 <prvSwitchTimerLists+0x44>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1f0      	bne.n	8008aa8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8008ac6:	4b07      	ldr	r3, [pc, #28]	@ (8008ae4 <prvSwitchTimerLists+0x44>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8008acc:	4b06      	ldr	r3, [pc, #24]	@ (8008ae8 <prvSwitchTimerLists+0x48>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a04      	ldr	r2, [pc, #16]	@ (8008ae4 <prvSwitchTimerLists+0x44>)
 8008ad2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8008ad4:	4a04      	ldr	r2, [pc, #16]	@ (8008ae8 <prvSwitchTimerLists+0x48>)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6013      	str	r3, [r2, #0]
    }
 8008ada:	bf00      	nop
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	20000b48 	.word	0x20000b48
 8008ae8:	20000b4c 	.word	0x20000b4c

08008aec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8008af2:	f000 f88d 	bl	8008c10 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8008af6:	4b15      	ldr	r3, [pc, #84]	@ (8008b4c <prvCheckForValidListAndQueue+0x60>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d120      	bne.n	8008b40 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8008afe:	4814      	ldr	r0, [pc, #80]	@ (8008b50 <prvCheckForValidListAndQueue+0x64>)
 8008b00:	f7fe fac6 	bl	8007090 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8008b04:	4813      	ldr	r0, [pc, #76]	@ (8008b54 <prvCheckForValidListAndQueue+0x68>)
 8008b06:	f7fe fac3 	bl	8007090 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8008b0a:	4b13      	ldr	r3, [pc, #76]	@ (8008b58 <prvCheckForValidListAndQueue+0x6c>)
 8008b0c:	4a10      	ldr	r2, [pc, #64]	@ (8008b50 <prvCheckForValidListAndQueue+0x64>)
 8008b0e:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8008b10:	4b12      	ldr	r3, [pc, #72]	@ (8008b5c <prvCheckForValidListAndQueue+0x70>)
 8008b12:	4a10      	ldr	r2, [pc, #64]	@ (8008b54 <prvCheckForValidListAndQueue+0x68>)
 8008b14:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b16:	2300      	movs	r3, #0
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	4b11      	ldr	r3, [pc, #68]	@ (8008b60 <prvCheckForValidListAndQueue+0x74>)
 8008b1c:	4a11      	ldr	r2, [pc, #68]	@ (8008b64 <prvCheckForValidListAndQueue+0x78>)
 8008b1e:	2110      	movs	r1, #16
 8008b20:	200a      	movs	r0, #10
 8008b22:	f7fe fbbe 	bl	80072a2 <xQueueGenericCreateStatic>
 8008b26:	4603      	mov	r3, r0
 8008b28:	4a08      	ldr	r2, [pc, #32]	@ (8008b4c <prvCheckForValidListAndQueue+0x60>)
 8008b2a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8008b2c:	4b07      	ldr	r3, [pc, #28]	@ (8008b4c <prvCheckForValidListAndQueue+0x60>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d005      	beq.n	8008b40 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b34:	4b05      	ldr	r3, [pc, #20]	@ (8008b4c <prvCheckForValidListAndQueue+0x60>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	490b      	ldr	r1, [pc, #44]	@ (8008b68 <prvCheckForValidListAndQueue+0x7c>)
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fe fd68 	bl	8007610 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008b40:	f000 f878 	bl	8008c34 <vPortExitCritical>
    }
 8008b44:	bf00      	nop
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	20000b50 	.word	0x20000b50
 8008b50:	20000b20 	.word	0x20000b20
 8008b54:	20000b34 	.word	0x20000b34
 8008b58:	20000b48 	.word	0x20000b48
 8008b5c:	20000b4c 	.word	0x20000b4c
 8008b60:	20000bfc 	.word	0x20000bfc
 8008b64:	20000b5c 	.word	0x20000b5c
 8008b68:	080091a0 	.word	0x080091a0

08008b6c <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b70:	4b0b      	ldr	r3, [pc, #44]	@ (8008ba0 <vPortSetupTimerInterrupt+0x34>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b76:	4b0b      	ldr	r3, [pc, #44]	@ (8008ba4 <vPortSetupTimerInterrupt+0x38>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008ba8 <vPortSetupTimerInterrupt+0x3c>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a0a      	ldr	r2, [pc, #40]	@ (8008bac <vPortSetupTimerInterrupt+0x40>)
 8008b82:	fba2 2303 	umull	r2, r3, r2, r3
 8008b86:	099b      	lsrs	r3, r3, #6
 8008b88:	4a09      	ldr	r2, [pc, #36]	@ (8008bb0 <vPortSetupTimerInterrupt+0x44>)
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8008b8e:	4b04      	ldr	r3, [pc, #16]	@ (8008ba0 <vPortSetupTimerInterrupt+0x34>)
 8008b90:	2207      	movs	r2, #7
 8008b92:	601a      	str	r2, [r3, #0]
}
 8008b94:	bf00      	nop
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	e000e010 	.word	0xe000e010
 8008ba4:	e000e018 	.word	0xe000e018
 8008ba8:	20000000 	.word	0x20000000
 8008bac:	10624dd3 	.word	0x10624dd3
 8008bb0:	e000e014 	.word	0xe000e014

08008bb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 8008bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8008be8 <prvTaskExitError+0x34>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc6:	d003      	beq.n	8008bd0 <prvTaskExitError+0x1c>
 8008bc8:	f000 f9be 	bl	8008f48 <ulSetInterruptMask>
 8008bcc:	bf00      	nop
 8008bce:	e7fd      	b.n	8008bcc <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 8008bd0:	f000 f9ba 	bl	8008f48 <ulSetInterruptMask>

    while( ulDummy == 0 )
 8008bd4:	bf00      	nop
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d0fc      	beq.n	8008bd6 <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 8008bdc:	bf00      	nop
 8008bde:	bf00      	nop
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	2000000c 	.word	0x2000000c

08008bec <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8008bec:	b480      	push	{r7}
 8008bee:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008bf0:	4b06      	ldr	r3, [pc, #24]	@ (8008c0c <vPortYield+0x20>)
 8008bf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bf6:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8008bf8:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8008bfc:	f3bf 8f6f 	isb	sy
}
 8008c00:	bf00      	nop
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	e000ed04 	.word	0xe000ed04

08008c10 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8008c14:	f000 f998 	bl	8008f48 <ulSetInterruptMask>
    ulCriticalNesting++;
 8008c18:	4b05      	ldr	r3, [pc, #20]	@ (8008c30 <vPortEnterCritical+0x20>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	4a04      	ldr	r2, [pc, #16]	@ (8008c30 <vPortEnterCritical+0x20>)
 8008c20:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8008c22:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8008c26:	f3bf 8f6f 	isb	sy
}
 8008c2a:	bf00      	nop
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	2000000c 	.word	0x2000000c

08008c34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 8008c38:	4b0a      	ldr	r3, [pc, #40]	@ (8008c64 <vPortExitCritical+0x30>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d103      	bne.n	8008c48 <vPortExitCritical+0x14>
 8008c40:	f000 f982 	bl	8008f48 <ulSetInterruptMask>
 8008c44:	bf00      	nop
 8008c46:	e7fd      	b.n	8008c44 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 8008c48:	4b06      	ldr	r3, [pc, #24]	@ (8008c64 <vPortExitCritical+0x30>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	4a05      	ldr	r2, [pc, #20]	@ (8008c64 <vPortExitCritical+0x30>)
 8008c50:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 8008c52:	4b04      	ldr	r3, [pc, #16]	@ (8008c64 <vPortExitCritical+0x30>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d102      	bne.n	8008c60 <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	f000 f981 	bl	8008f62 <vClearInterruptMask>
    }
}
 8008c60:	bf00      	nop
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	2000000c 	.word	0x2000000c

08008c68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c6e:	f000 f96b 	bl	8008f48 <ulSetInterruptMask>
 8008c72:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008c74:	f7ff f87e 	bl	8007d74 <xTaskIncrementTick>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d003      	beq.n	8008c86 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c7e:	4b05      	ldr	r3, [pc, #20]	@ (8008c94 <xPortSysTickHandler+0x2c>)
 8008c80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c84:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f96b 	bl	8008f62 <vClearInterruptMask>
}
 8008c8c:	bf00      	nop
 8008c8e:	3708      	adds	r7, #8
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	e000ed04 	.word	0xe000ed04

08008c98 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	3b02      	subs	r3, #2
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 8008cae:	7afb      	ldrb	r3, [r7, #11]
 8008cb0:	2b66      	cmp	r3, #102	@ 0x66
 8008cb2:	d102      	bne.n	8008cba <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 8008cb4:	f000 f914 	bl	8008ee0 <vRestoreContextOfFirstTask>
            break;
 8008cb8:	e003      	b.n	8008cc2 <vPortSVCHandler_C+0x2a>
                break;
        #endif /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 1 ) */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 8008cba:	f000 f945 	bl	8008f48 <ulSetInterruptMask>
 8008cbe:	bf00      	nop
 8008cc0:	e7fd      	b.n	8008cbe <vPortSVCHandler_C+0x26>
    }
}
 8008cc2:	bf00      	nop
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
	...

08008ccc <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
 8008cd8:	603b      	str	r3, [r7, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	3b04      	subs	r3, #4
 8008cde:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008ce6:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	3b04      	subs	r3, #4
 8008cec:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	3b04      	subs	r3, #4
 8008cf8:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
 8008cfa:	4a38      	ldr	r2, [pc, #224]	@ (8008ddc <pxPortInitialiseStack+0x110>)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	3b04      	subs	r3, #4
 8008d04:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 8008d0c:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	3b04      	subs	r3, #4
 8008d12:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8008d1a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	3b04      	subs	r3, #4
 8008d20:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 8008d28:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	3b04      	subs	r3, #4
 8008d2e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8008d36:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	3b04      	subs	r3, #4
 8008d3c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
 8008d3e:	683a      	ldr	r2, [r7, #0]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	3b04      	subs	r3, #4
 8008d48:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8008d50:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	3b04      	subs	r3, #4
 8008d56:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8008d5e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	3b04      	subs	r3, #4
 8008d64:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 8008d6c:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	3b04      	subs	r3, #4
 8008d72:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 8008d7a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	3b04      	subs	r3, #4
 8008d80:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 8008d88:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	3b04      	subs	r3, #4
 8008d8e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 8008d96:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	3b04      	subs	r3, #4
 8008d9c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 8008da4:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	3b04      	subs	r3, #4
 8008daa:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 8008db2:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	3b04      	subs	r3, #4
 8008db8:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 8008dc0:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	3b04      	subs	r3, #4
 8008dc6:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 8008dc8:	68ba      	ldr	r2, [r7, #8]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	601a      	str	r2, [r3, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
 8008dce:	68fb      	ldr	r3, [r7, #12]
    }
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3714      	adds	r7, #20
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr
 8008ddc:	08008bb5 	.word	0x08008bb5

08008de0 <xPortStartScheduler>:

#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8008de6:	2300      	movs	r3, #0
 8008de8:	60bb      	str	r3, [r7, #8]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = portNVIC_SHPR2_REG;
 8008dea:	4b35      	ldr	r3, [pc, #212]	@ (8008ec0 <xPortStartScheduler+0xe0>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	60fb      	str	r3, [r7, #12]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        portNVIC_SHPR2_REG = 0xFF000000;
 8008df0:	4b33      	ldr	r3, [pc, #204]	@ (8008ec0 <xPortStartScheduler+0xe0>)
 8008df2:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8008df6:	601a      	str	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 8008df8:	4b31      	ldr	r3, [pc, #196]	@ (8008ec0 <xPortStartScheduler+0xe0>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	0e1b      	lsrs	r3, r3, #24
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e02:	79fb      	ldrb	r3, [r7, #7]
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008e0a:	b2da      	uxtb	r2, r3
 8008e0c:	4b2d      	ldr	r3, [pc, #180]	@ (8008ec4 <xPortStartScheduler+0xe4>)
 8008e0e:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8008e10:	4b2c      	ldr	r3, [pc, #176]	@ (8008ec4 <xPortStartScheduler+0xe4>)
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d103      	bne.n	8008e20 <xPortStartScheduler+0x40>
 8008e18:	f000 f896 	bl	8008f48 <ulSetInterruptMask>
 8008e1c:	bf00      	nop
 8008e1e:	e7fd      	b.n	8008e1c <xPortStartScheduler+0x3c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8008e20:	79fb      	ldrb	r3, [r7, #7]
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	43db      	mvns	r3, r3
 8008e26:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00b      	beq.n	8008e46 <xPortStartScheduler+0x66>
 8008e2e:	f000 f88b 	bl	8008f48 <ulSetInterruptMask>
 8008e32:	bf00      	nop
 8008e34:	e7fd      	b.n	8008e32 <xPortStartScheduler+0x52>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e3c:	79fb      	ldrb	r3, [r7, #7]
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	005b      	lsls	r3, r3, #1
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e46:	79fb      	ldrb	r3, [r7, #7]
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e4e:	2b80      	cmp	r3, #128	@ 0x80
 8008e50:	d0f1      	beq.n	8008e36 <xPortStartScheduler+0x56>
        }

        if( ulImplementedPrioBits == 8 )
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	2b08      	cmp	r3, #8
 8008e56:	d103      	bne.n	8008e60 <xPortStartScheduler+0x80>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8008e58:	4b1b      	ldr	r3, [pc, #108]	@ (8008ec8 <xPortStartScheduler+0xe8>)
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	601a      	str	r2, [r3, #0]
 8008e5e:	e004      	b.n	8008e6a <xPortStartScheduler+0x8a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	f1c3 0307 	rsb	r3, r3, #7
 8008e66:	4a18      	ldr	r2, [pc, #96]	@ (8008ec8 <xPortStartScheduler+0xe8>)
 8008e68:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e6a:	4b17      	ldr	r3, [pc, #92]	@ (8008ec8 <xPortStartScheduler+0xe8>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	021b      	lsls	r3, r3, #8
 8008e70:	4a15      	ldr	r2, [pc, #84]	@ (8008ec8 <xPortStartScheduler+0xe8>)
 8008e72:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e74:	4b14      	ldr	r3, [pc, #80]	@ (8008ec8 <xPortStartScheduler+0xe8>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008e7c:	4a12      	ldr	r2, [pc, #72]	@ (8008ec8 <xPortStartScheduler+0xe8>)
 8008e7e:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        portNVIC_SHPR2_REG = ulOriginalPriority;
 8008e80:	4a0f      	ldr	r2, [pc, #60]	@ (8008ec0 <xPortStartScheduler+0xe0>)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6013      	str	r3, [r2, #0]
    }
    #endif /* #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) ) */

    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8008e86:	4b11      	ldr	r3, [pc, #68]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a10      	ldr	r2, [pc, #64]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e90:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008e92:	4b0e      	ldr	r3, [pc, #56]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a0d      	ldr	r2, [pc, #52]	@ (8008ecc <xPortStartScheduler+0xec>)
 8008e98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e9c:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008e9e:	f7ff fe65 	bl	8008b6c <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 8008ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8008ed0 <xPortStartScheduler+0xf0>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif

    /* Start the first task. */
    vStartFirstTask();
 8008ea8:	f000 f83a 	bl	8008f20 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008eac:	f7ff f872 	bl	8007f94 <vTaskSwitchContext>
    prvTaskExitError();
 8008eb0:	f7ff fe80 	bl	8008bb4 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	e000ed1c 	.word	0xe000ed1c
 8008ec4:	20000c4c 	.word	0x20000c4c
 8008ec8:	20000c50 	.word	0x20000c50
 8008ecc:	e000ed20 	.word	0xe000ed20
 8008ed0:	2000000c 	.word	0x2000000c
	...

08008ee0 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8008ee0:	4a0b      	ldr	r2, [pc, #44]	@ (8008f10 <pxCurrentTCBConst2>)
 8008ee2:	6811      	ldr	r1, [r2, #0]
 8008ee4:	6808      	ldr	r0, [r1, #0]
 8008ee6:	c806      	ldmia	r0!, {r1, r2}
 8008ee8:	f381 880b 	msr	PSPLIM, r1
 8008eec:	2102      	movs	r1, #2
 8008eee:	f381 8814 	msr	CONTROL, r1
 8008ef2:	3020      	adds	r0, #32
 8008ef4:	f380 8809 	msr	PSP, r0
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	f04f 0000 	mov.w	r0, #0
 8008f00:	f380 8811 	msr	BASEPRI, r0
 8008f04:	4710      	bx	r2
 8008f06:	bf00      	nop
 8008f08:	f3af 8000 	nop.w
 8008f0c:	f3af 8000 	nop.w

08008f10 <pxCurrentTCBConst2>:
 8008f10:	20000620 	.word	0x20000620
            "   bx   r2                                         \n" /* Finally, branch to EXC_RETURN. */
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
    }
 8008f14:	bf00      	nop
 8008f16:	bf00      	nop
	...

08008f20 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8008f20:	4807      	ldr	r0, [pc, #28]	@ (8008f40 <xVTORConst>)
 8008f22:	6800      	ldr	r0, [r0, #0]
 8008f24:	6800      	ldr	r0, [r0, #0]
 8008f26:	f380 8808 	msr	MSP, r0
 8008f2a:	b662      	cpsie	i
 8008f2c:	b661      	cpsie	f
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	f3bf 8f6f 	isb	sy
 8008f36:	df66      	svc	102	@ 0x66
 8008f38:	bf00      	nop
 8008f3a:	bf00      	nop
 8008f3c:	f3af 8000 	nop.w

08008f40 <xVTORConst>:
 8008f40:	e000ed08 	.word	0xe000ed08
        "                                                   \n"
        "   .align 4                                        \n"
        "xVTORConst: .word 0xe000ed08                       \n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 8008f44:	bf00      	nop
 8008f46:	bf00      	nop

08008f48 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8008f48:	f3ef 8011 	mrs	r0, BASEPRI
 8008f4c:	f04f 0150 	mov.w	r1, #80	@ 0x50
 8008f50:	f381 8811 	msr	BASEPRI, r1
 8008f54:	f3bf 8f4f 	dsb	sy
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8008f5e:	bf00      	nop
 8008f60:	4618      	mov	r0, r3

08008f62 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8008f62:	f380 8811 	msr	BASEPRI, r0
 8008f66:	f3bf 8f4f 	dsb	sy
 8008f6a:	f3bf 8f6f 	isb	sy
 8008f6e:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::: "memory"
    );
}
 8008f70:	bf00      	nop
	...

08008f80 <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8008f80:	f3ef 8009 	mrs	r0, PSP
 8008f84:	f3ef 820b 	mrs	r2, PSPLIM
 8008f88:	4673      	mov	r3, lr
 8008f8a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8008f8e:	4a10      	ldr	r2, [pc, #64]	@ (8008fd0 <pxCurrentTCBConst>)
 8008f90:	6811      	ldr	r1, [r2, #0]
 8008f92:	6008      	str	r0, [r1, #0]
 8008f94:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008f98:	f380 8811 	msr	BASEPRI, r0
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	f3bf 8f6f 	isb	sy
 8008fa4:	f7fe fff6 	bl	8007f94 <vTaskSwitchContext>
 8008fa8:	f04f 0000 	mov.w	r0, #0
 8008fac:	f380 8811 	msr	BASEPRI, r0
 8008fb0:	4a07      	ldr	r2, [pc, #28]	@ (8008fd0 <pxCurrentTCBConst>)
 8008fb2:	6811      	ldr	r1, [r2, #0]
 8008fb4:	6808      	ldr	r0, [r1, #0]
 8008fb6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8008fba:	f382 880b 	msr	PSPLIM, r2
 8008fbe:	f380 8809 	msr	PSP, r0
 8008fc2:	4718      	bx	r3
 8008fc4:	f3af 8000 	nop.w
 8008fc8:	f3af 8000 	nop.w
 8008fcc:	f3af 8000 	nop.w

08008fd0 <pxCurrentTCBConst>:
 8008fd0:	20000620 	.word	0x20000620
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst: .word pxCurrentTCB              \n"
            ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
        );
    }
 8008fd4:	bf00      	nop
 8008fd6:	bf00      	nop
	...

08008fe0 <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8008fe0:	f01e 0f04 	tst.w	lr, #4
 8008fe4:	bf0c      	ite	eq
 8008fe6:	f3ef 8008 	mrseq	r0, MSP
 8008fea:	f3ef 8009 	mrsne	r0, PSP
 8008fee:	4904      	ldr	r1, [pc, #16]	@ (8009000 <svchandler_address_const>)
 8008ff0:	4708      	bx	r1
 8008ff2:	bf00      	nop
 8008ff4:	f3af 8000 	nop.w
 8008ff8:	f3af 8000 	nop.w
 8008ffc:	f3af 8000 	nop.w

08009000 <svchandler_address_const>:
 8009000:	08008c99 	.word	0x08008c99
            "   bx r1                                           \n"
            "                                                   \n"
            "   .align 4                                        \n"
            "svchandler_address_const: .word vPortSVCHandler_C  \n"
        );
    }
 8009004:	bf00      	nop
 8009006:	bf00      	nop

08009008 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8009010:	2300      	movs	r3, #0
 8009012:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f003 0307 	and.w	r3, r3, #7
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00e      	beq.n	800903c <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f023 0307 	bic.w	r3, r3, #7
 8009024:	3308      	adds	r3, #8
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	429a      	cmp	r2, r3
 800902a:	d205      	bcs.n	8009038 <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f023 0307 	bic.w	r3, r3, #7
 8009032:	3308      	adds	r3, #8
 8009034:	607b      	str	r3, [r7, #4]
 8009036:	e001      	b.n	800903c <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 8009038:	2300      	movs	r3, #0
 800903a:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 800903c:	f7fe fd8e 	bl	8007b5c <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8009040:	4b17      	ldr	r3, [pc, #92]	@ (80090a0 <pvPortMalloc+0x98>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d105      	bne.n	8009054 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8009048:	4b16      	ldr	r3, [pc, #88]	@ (80090a4 <pvPortMalloc+0x9c>)
 800904a:	f023 0307 	bic.w	r3, r3, #7
 800904e:	461a      	mov	r2, r3
 8009050:	4b13      	ldr	r3, [pc, #76]	@ (80090a0 <pvPortMalloc+0x98>)
 8009052:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d01b      	beq.n	8009092 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800905a:	4b13      	ldr	r3, [pc, #76]	@ (80090a8 <pvPortMalloc+0xa0>)
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8009062:	f641 72f7 	movw	r2, #8183	@ 0x1ff7
 8009066:	4293      	cmp	r3, r2
 8009068:	d813      	bhi.n	8009092 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 800906a:	4b0f      	ldr	r3, [pc, #60]	@ (80090a8 <pvPortMalloc+0xa0>)
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	441a      	add	r2, r3
 8009072:	4b0d      	ldr	r3, [pc, #52]	@ (80090a8 <pvPortMalloc+0xa0>)
 8009074:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8009076:	429a      	cmp	r2, r3
 8009078:	d90b      	bls.n	8009092 <pvPortMalloc+0x8a>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 800907a:	4b09      	ldr	r3, [pc, #36]	@ (80090a0 <pvPortMalloc+0x98>)
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	4b0a      	ldr	r3, [pc, #40]	@ (80090a8 <pvPortMalloc+0xa0>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4413      	add	r3, r2
 8009084:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8009086:	4b08      	ldr	r3, [pc, #32]	@ (80090a8 <pvPortMalloc+0xa0>)
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4413      	add	r3, r2
 800908e:	4a06      	ldr	r2, [pc, #24]	@ (80090a8 <pvPortMalloc+0xa0>)
 8009090:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8009092:	f7fe fd71 	bl	8007b78 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8009096:	68fb      	ldr	r3, [r7, #12]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	20002c58 	.word	0x20002c58
 80090a4:	20000c5b 	.word	0x20000c5b
 80090a8:	20002c54 	.word	0x20002c54

080090ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d003      	beq.n	80090c2 <vPortFree+0x16>
 80090ba:	f7ff ff45 	bl	8008f48 <ulSetInterruptMask>
 80090be:	bf00      	nop
 80090c0:	e7fd      	b.n	80090be <vPortFree+0x12>
}
 80090c2:	bf00      	nop
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <memset>:
 80090ca:	4402      	add	r2, r0
 80090cc:	4603      	mov	r3, r0
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d100      	bne.n	80090d4 <memset+0xa>
 80090d2:	4770      	bx	lr
 80090d4:	f803 1b01 	strb.w	r1, [r3], #1
 80090d8:	e7f9      	b.n	80090ce <memset+0x4>
	...

080090dc <__libc_init_array>:
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	4d0d      	ldr	r5, [pc, #52]	@ (8009114 <__libc_init_array+0x38>)
 80090e0:	2600      	movs	r6, #0
 80090e2:	4c0d      	ldr	r4, [pc, #52]	@ (8009118 <__libc_init_array+0x3c>)
 80090e4:	1b64      	subs	r4, r4, r5
 80090e6:	10a4      	asrs	r4, r4, #2
 80090e8:	42a6      	cmp	r6, r4
 80090ea:	d109      	bne.n	8009100 <__libc_init_array+0x24>
 80090ec:	4d0b      	ldr	r5, [pc, #44]	@ (800911c <__libc_init_array+0x40>)
 80090ee:	2600      	movs	r6, #0
 80090f0:	4c0b      	ldr	r4, [pc, #44]	@ (8009120 <__libc_init_array+0x44>)
 80090f2:	f000 f825 	bl	8009140 <_init>
 80090f6:	1b64      	subs	r4, r4, r5
 80090f8:	10a4      	asrs	r4, r4, #2
 80090fa:	42a6      	cmp	r6, r4
 80090fc:	d105      	bne.n	800910a <__libc_init_array+0x2e>
 80090fe:	bd70      	pop	{r4, r5, r6, pc}
 8009100:	f855 3b04 	ldr.w	r3, [r5], #4
 8009104:	3601      	adds	r6, #1
 8009106:	4798      	blx	r3
 8009108:	e7ee      	b.n	80090e8 <__libc_init_array+0xc>
 800910a:	f855 3b04 	ldr.w	r3, [r5], #4
 800910e:	3601      	adds	r6, #1
 8009110:	4798      	blx	r3
 8009112:	e7f2      	b.n	80090fa <__libc_init_array+0x1e>
 8009114:	0800920c 	.word	0x0800920c
 8009118:	0800920c 	.word	0x0800920c
 800911c:	0800920c 	.word	0x0800920c
 8009120:	08009210 	.word	0x08009210

08009124 <memcpy>:
 8009124:	440a      	add	r2, r1
 8009126:	1e43      	subs	r3, r0, #1
 8009128:	4291      	cmp	r1, r2
 800912a:	d100      	bne.n	800912e <memcpy+0xa>
 800912c:	4770      	bx	lr
 800912e:	b510      	push	{r4, lr}
 8009130:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009134:	4291      	cmp	r1, r2
 8009136:	f803 4f01 	strb.w	r4, [r3, #1]!
 800913a:	d1f9      	bne.n	8009130 <memcpy+0xc>
 800913c:	bd10      	pop	{r4, pc}
	...

08009140 <_init>:
 8009140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009142:	bf00      	nop
 8009144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009146:	bc08      	pop	{r3}
 8009148:	469e      	mov	lr, r3
 800914a:	4770      	bx	lr

0800914c <_fini>:
 800914c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800914e:	bf00      	nop
 8009150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009152:	bc08      	pop	{r3}
 8009154:	469e      	mov	lr, r3
 8009156:	4770      	bx	lr
