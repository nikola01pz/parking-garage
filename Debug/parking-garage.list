
parking-garage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad50  08000250  08000250  00001250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  0800afa0  0800afa0  0000bfa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0d0  0800b0d0  0000d078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800b0d0  0800b0d0  0000d078  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800b0d0  0800b0d0  0000d078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0d0  0800b0d0  0000c0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b0d4  0800b0d4  0000c0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800b0d8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ee0  20000078  0800b150  0000d078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002f58  0800b150  0000df58  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000d078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000229e7  00000000  00000000  0000d0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045ea  00000000  00000000  0002fa95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e78  00000000  00000000  00034080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017f7  00000000  00000000  00035ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036c74  00000000  00000000  000376ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002542c  00000000  00000000  0006e363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001561f8  00000000  00000000  0009378f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e9987  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084ac  00000000  00000000  001e99cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001f1e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000078 	.word	0x20000078
 800026c:	00000000 	.word	0x00000000
 8000270:	0800af88 	.word	0x0800af88

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	2000007c 	.word	0x2000007c
 800028c:	0800af88 	.word	0x0800af88

08000290 <MX_FREERTOS_Init>:
  .name = "parkingControlTask",
  .priority = (osPriority_t) osPriorityNormal,
  .stack_size = 128 * 4
};

void MX_FREERTOS_Init(void) {
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0

  rampControlTaskHandle = osThreadNew(StartRampControlTask, NULL, &rampControlTask_attributes);
 8000294:	4a08      	ldr	r2, [pc, #32]	@ (80002b8 <MX_FREERTOS_Init+0x28>)
 8000296:	2100      	movs	r1, #0
 8000298:	4808      	ldr	r0, [pc, #32]	@ (80002bc <MX_FREERTOS_Init+0x2c>)
 800029a:	f008 f8b3 	bl	8008404 <osThreadNew>
 800029e:	4603      	mov	r3, r0
 80002a0:	4a07      	ldr	r2, [pc, #28]	@ (80002c0 <MX_FREERTOS_Init+0x30>)
 80002a2:	6013      	str	r3, [r2, #0]

  parkingControlTaskHandle = osThreadNew(StartParkingControlTask, NULL, &parkingControlTask_attributes);
 80002a4:	4a07      	ldr	r2, [pc, #28]	@ (80002c4 <MX_FREERTOS_Init+0x34>)
 80002a6:	2100      	movs	r1, #0
 80002a8:	4807      	ldr	r0, [pc, #28]	@ (80002c8 <MX_FREERTOS_Init+0x38>)
 80002aa:	f008 f8ab 	bl	8008404 <osThreadNew>
 80002ae:	4603      	mov	r3, r0
 80002b0:	4a06      	ldr	r2, [pc, #24]	@ (80002cc <MX_FREERTOS_Init+0x3c>)
 80002b2:	6013      	str	r3, [r2, #0]

}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	0800b038 	.word	0x0800b038
 80002bc:	080002d1 	.word	0x080002d1
 80002c0:	20000150 	.word	0x20000150
 80002c4:	0800b05c 	.word	0x0800b05c
 80002c8:	08000391 	.word	0x08000391
 80002cc:	20000154 	.word	0x20000154

080002d0 <StartRampControlTask>:

void StartRampControlTask(void *argument)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b088      	sub	sp, #32
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	int updated = 1;
 80002d8:	2301      	movs	r3, #1
 80002da:	61fb      	str	r3, [r7, #28]
	int total_capacity = 0;
 80002dc:	2300      	movs	r3, #0
 80002de:	61bb      	str	r3, [r7, #24]
	int r1, old_r1 = 0;
 80002e0:	2300      	movs	r3, #0
 80002e2:	617b      	str	r3, [r7, #20]
	int r2 = 0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	613b      	str	r3, [r7, #16]

	HD44780_Init(2);
 80002e8:	2002      	movs	r0, #2
 80002ea:	f000 fc3b 	bl	8000b64 <HD44780_Init>
	HD44780_Clear();
 80002ee:	f000 fcbd 	bl	8000c6c <HD44780_Clear>

	for(;;)
	{

		r1 = HAL_GPIO_ReadPin(GPIOG, RAMP_ENTER_Pin);
 80002f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002f6:	4821      	ldr	r0, [pc, #132]	@ (800037c <StartRampControlTask+0xac>)
 80002f8:	f002 fa54 	bl	80027a4 <HAL_GPIO_ReadPin>
 80002fc:	4603      	mov	r3, r0
 80002fe:	60fb      	str	r3, [r7, #12]
		r2 = HAL_GPIO_ReadPin(GPIOB, RAMP_EXIT_Pin);
 8000300:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000304:	481e      	ldr	r0, [pc, #120]	@ (8000380 <StartRampControlTask+0xb0>)
 8000306:	f002 fa4d 	bl	80027a4 <HAL_GPIO_ReadPin>
 800030a:	4603      	mov	r3, r0
 800030c:	613b      	str	r3, [r7, #16]

		if(updated)
 800030e:	69fb      	ldr	r3, [r7, #28]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d003      	beq.n	800031c <StartRampControlTask+0x4c>
		{
			update_availability();
 8000314:	f000 f950 	bl	80005b8 <update_availability>

			updated = 0;
 8000318:	2300      	movs	r3, #0
 800031a:	61fb      	str	r3, [r7, #28]
		}

		if((r1==1) && (old_r1 != r1))
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d119      	bne.n	8000356 <StartRampControlTask+0x86>
 8000322:	697a      	ldr	r2, [r7, #20]
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	429a      	cmp	r2, r3
 8000328:	d015      	beq.n	8000356 <StartRampControlTask+0x86>
		{
			if(total_capacity == 12)
 800032a:	69bb      	ldr	r3, [r7, #24]
 800032c:	2b0c      	cmp	r3, #12
 800032e:	d105      	bne.n	800033c <StartRampControlTask+0x6c>
			{
				HD44780_Clear();
 8000330:	f000 fc9c 	bl	8000c6c <HD44780_Clear>
				HD44780_PrintStr("Parking full");
 8000334:	4813      	ldr	r0, [pc, #76]	@ (8000384 <StartRampControlTask+0xb4>)
 8000336:	f000 fd21 	bl	8000d7c <HD44780_PrintStr>
 800033a:	e00c      	b.n	8000356 <StartRampControlTask+0x86>
			} else
			{
				HD44780_Clear();
 800033c:	f000 fc96 	bl	8000c6c <HD44780_Clear>
				HD44780_PrintStr("Welcome.");
 8000340:	4811      	ldr	r0, [pc, #68]	@ (8000388 <StartRampControlTask+0xb8>)
 8000342:	f000 fd1b 	bl	8000d7c <HD44780_PrintStr>

				raise_ramp(TIM_CHANNEL_2);
 8000346:	2004      	movs	r0, #4
 8000348:	f000 f95e 	bl	8000608 <raise_ramp>
				total_capacity++;
 800034c:	69bb      	ldr	r3, [r7, #24]
 800034e:	3301      	adds	r3, #1
 8000350:	61bb      	str	r3, [r7, #24]
				updated = 1;
 8000352:	2301      	movs	r3, #1
 8000354:	61fb      	str	r3, [r7, #28]
			}
		}
		old_r1 = r1;
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	617b      	str	r3, [r7, #20]

		if(r2==1)
 800035a:	693b      	ldr	r3, [r7, #16]
 800035c:	2b01      	cmp	r3, #1
 800035e:	d1c8      	bne.n	80002f2 <StartRampControlTask+0x22>
		{
			HD44780_Clear();
 8000360:	f000 fc84 	bl	8000c6c <HD44780_Clear>
			HD44780_PrintStr("Goodbye.");
 8000364:	4809      	ldr	r0, [pc, #36]	@ (800038c <StartRampControlTask+0xbc>)
 8000366:	f000 fd09 	bl	8000d7c <HD44780_PrintStr>

			raise_ramp(TIM_CHANNEL_1);
 800036a:	2000      	movs	r0, #0
 800036c:	f000 f94c 	bl	8000608 <raise_ramp>
			total_capacity--;
 8000370:	69bb      	ldr	r3, [r7, #24]
 8000372:	3b01      	subs	r3, #1
 8000374:	61bb      	str	r3, [r7, #24]
			updated = 1;
 8000376:	2301      	movs	r3, #1
 8000378:	61fb      	str	r3, [r7, #28]
		r1 = HAL_GPIO_ReadPin(GPIOG, RAMP_ENTER_Pin);
 800037a:	e7ba      	b.n	80002f2 <StartRampControlTask+0x22>
 800037c:	42021800 	.word	0x42021800
 8000380:	42020400 	.word	0x42020400
 8000384:	0800afc4 	.word	0x0800afc4
 8000388:	0800afd4 	.word	0x0800afd4
 800038c:	0800afe0 	.word	0x0800afe0

08000390 <StartParkingControlTask>:
	}

}

void StartParkingControlTask(void *argument)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000398:	2200      	movs	r2, #0
 800039a:	491c      	ldr	r1, [pc, #112]	@ (800040c <StartParkingControlTask+0x7c>)
 800039c:	481c      	ldr	r0, [pc, #112]	@ (8000410 <StartParkingControlTask+0x80>)
 800039e:	f005 ffe1 	bl	8006364 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80003a2:	2200      	movs	r2, #0
 80003a4:	491b      	ldr	r1, [pc, #108]	@ (8000414 <StartParkingControlTask+0x84>)
 80003a6:	481a      	ldr	r0, [pc, #104]	@ (8000410 <StartParkingControlTask+0x80>)
 80003a8:	f006 f8c4 	bl	8006534 <HAL_RTC_GetDate>
		current_seconds = sTime.Hours * 3600 + sTime.Minutes * 60 + sTime.Seconds;
 80003ac:	4b17      	ldr	r3, [pc, #92]	@ (800040c <StartParkingControlTask+0x7c>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	461a      	mov	r2, r3
 80003b2:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80003b6:	fb03 f202 	mul.w	r2, r3, r2
 80003ba:	4b14      	ldr	r3, [pc, #80]	@ (800040c <StartParkingControlTask+0x7c>)
 80003bc:	785b      	ldrb	r3, [r3, #1]
 80003be:	4619      	mov	r1, r3
 80003c0:	460b      	mov	r3, r1
 80003c2:	011b      	lsls	r3, r3, #4
 80003c4:	1a5b      	subs	r3, r3, r1
 80003c6:	009b      	lsls	r3, r3, #2
 80003c8:	4413      	add	r3, r2
 80003ca:	4a10      	ldr	r2, [pc, #64]	@ (800040c <StartParkingControlTask+0x7c>)
 80003cc:	7892      	ldrb	r2, [r2, #2]
 80003ce:	4413      	add	r3, r2
 80003d0:	4a11      	ldr	r2, [pc, #68]	@ (8000418 <StartParkingControlTask+0x88>)
 80003d2:	6013      	str	r3, [r2, #0]

		check_capacity();
 80003d4:	f000 f822 	bl	800041c <check_capacity>

		check_parking1();
 80003d8:	f000 fef4 	bl	80011c4 <check_parking1>
		check_parking2();
 80003dc:	f000 ff4e 	bl	800127c <check_parking2>
		check_parking3();
 80003e0:	f000 ffa8 	bl	8001334 <check_parking3>
		check_parking4();
 80003e4:	f001 f800 	bl	80013e8 <check_parking4>
		check_parking5();
 80003e8:	f001 f85a 	bl	80014a0 <check_parking5>
		check_parking6();
 80003ec:	f001 f8b6 	bl	800155c <check_parking6>
		check_parking7();
 80003f0:	f001 f90e 	bl	8001610 <check_parking7>
		check_parking8();
 80003f4:	f001 f966 	bl	80016c4 <check_parking8>
		check_parking9();
 80003f8:	f001 f9c2 	bl	8001780 <check_parking9>
		check_parking10();
 80003fc:	f001 fa1e 	bl	800183c <check_parking10>
		check_parking11();
 8000400:	f001 fa78 	bl	80018f4 <check_parking11>
		check_parking12();
 8000404:	f001 face 	bl	80019a4 <check_parking12>
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000408:	bf00      	nop
 800040a:	e7c5      	b.n	8000398 <StartParkingControlTask+0x8>
 800040c:	20000138 	.word	0x20000138
 8000410:	200001bc 	.word	0x200001bc
 8000414:	2000014c 	.word	0x2000014c
 8000418:	200000a4 	.word	0x200000a4

0800041c <check_capacity>:
	}

}

void check_capacity()
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	static int old_main = 0;
	static int old_disabled = 0;

    main_capacity = check_main_capacity();
 8000420:	f000 f82a 	bl	8000478 <check_main_capacity>
 8000424:	4603      	mov	r3, r0
 8000426:	4a10      	ldr	r2, [pc, #64]	@ (8000468 <check_capacity+0x4c>)
 8000428:	6013      	str	r3, [r2, #0]
	if(old_main != main_capacity)
 800042a:	4b10      	ldr	r3, [pc, #64]	@ (800046c <check_capacity+0x50>)
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	4b0e      	ldr	r3, [pc, #56]	@ (8000468 <check_capacity+0x4c>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	429a      	cmp	r2, r3
 8000434:	d005      	beq.n	8000442 <check_capacity+0x26>
	{
		update_availability();
 8000436:	f000 f8bf 	bl	80005b8 <update_availability>
	    old_main = main_capacity;
 800043a:	4b0b      	ldr	r3, [pc, #44]	@ (8000468 <check_capacity+0x4c>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a0b      	ldr	r2, [pc, #44]	@ (800046c <check_capacity+0x50>)
 8000440:	6013      	str	r3, [r2, #0]
	}

    disabled_capacity = check_disabled_capacity();
 8000442:	f000 f887 	bl	8000554 <check_disabled_capacity>
 8000446:	4603      	mov	r3, r0
 8000448:	4a09      	ldr	r2, [pc, #36]	@ (8000470 <check_capacity+0x54>)
 800044a:	6013      	str	r3, [r2, #0]
	if(old_disabled != disabled_capacity)
 800044c:	4b09      	ldr	r3, [pc, #36]	@ (8000474 <check_capacity+0x58>)
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	4b07      	ldr	r3, [pc, #28]	@ (8000470 <check_capacity+0x54>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	429a      	cmp	r2, r3
 8000456:	d005      	beq.n	8000464 <check_capacity+0x48>
	{
		update_availability();
 8000458:	f000 f8ae 	bl	80005b8 <update_availability>
		old_disabled = disabled_capacity;
 800045c:	4b04      	ldr	r3, [pc, #16]	@ (8000470 <check_capacity+0x54>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a04      	ldr	r2, [pc, #16]	@ (8000474 <check_capacity+0x58>)
 8000462:	6013      	str	r3, [r2, #0]
	}
}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000000 	.word	0x20000000
 800046c:	20000158 	.word	0x20000158
 8000470:	20000004 	.word	0x20000004
 8000474:	2000015c 	.word	0x2000015c

08000478 <check_main_capacity>:

int check_main_capacity()
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08c      	sub	sp, #48	@ 0x30
 800047c:	af00      	add	r7, sp, #0
	int capacity[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 800047e:	463b      	mov	r3, r7
 8000480:	2228      	movs	r2, #40	@ 0x28
 8000482:	2100      	movs	r1, #0
 8000484:	4618      	mov	r0, r3
 8000486:	f00a f8ef 	bl	800a668 <memset>

	capacity[0] = HAL_GPIO_ReadPin(GPIOE, P1_Pin);
 800048a:	2101      	movs	r1, #1
 800048c:	482d      	ldr	r0, [pc, #180]	@ (8000544 <check_main_capacity+0xcc>)
 800048e:	f002 f989 	bl	80027a4 <HAL_GPIO_ReadPin>
 8000492:	4603      	mov	r3, r0
 8000494:	603b      	str	r3, [r7, #0]
	capacity[1] = HAL_GPIO_ReadPin(GPIOB, P2_Pin);
 8000496:	2101      	movs	r1, #1
 8000498:	482b      	ldr	r0, [pc, #172]	@ (8000548 <check_main_capacity+0xd0>)
 800049a:	f002 f983 	bl	80027a4 <HAL_GPIO_ReadPin>
 800049e:	4603      	mov	r3, r0
 80004a0:	607b      	str	r3, [r7, #4]
	capacity[2] = HAL_GPIO_ReadPin(GPIOD, P3_Pin);
 80004a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004a6:	4829      	ldr	r0, [pc, #164]	@ (800054c <check_main_capacity+0xd4>)
 80004a8:	f002 f97c 	bl	80027a4 <HAL_GPIO_ReadPin>
 80004ac:	4603      	mov	r3, r0
 80004ae:	60bb      	str	r3, [r7, #8]
	capacity[3] = HAL_GPIO_ReadPin(GPIOD, P4_Pin);
 80004b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004b4:	4825      	ldr	r0, [pc, #148]	@ (800054c <check_main_capacity+0xd4>)
 80004b6:	f002 f975 	bl	80027a4 <HAL_GPIO_ReadPin>
 80004ba:	4603      	mov	r3, r0
 80004bc:	60fb      	str	r3, [r7, #12]
	capacity[4] = HAL_GPIO_ReadPin(GPIOB, P5_Pin);
 80004be:	2104      	movs	r1, #4
 80004c0:	4821      	ldr	r0, [pc, #132]	@ (8000548 <check_main_capacity+0xd0>)
 80004c2:	f002 f96f 	bl	80027a4 <HAL_GPIO_ReadPin>
 80004c6:	4603      	mov	r3, r0
 80004c8:	613b      	str	r3, [r7, #16]
	capacity[5] = HAL_GPIO_ReadPin(GPIOB, P6_Pin);
 80004ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004ce:	481e      	ldr	r0, [pc, #120]	@ (8000548 <check_main_capacity+0xd0>)
 80004d0:	f002 f968 	bl	80027a4 <HAL_GPIO_ReadPin>
 80004d4:	4603      	mov	r3, r0
 80004d6:	617b      	str	r3, [r7, #20]
	capacity[6] = HAL_GPIO_ReadPin(GPIOF, P7_Pin);
 80004d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004dc:	481c      	ldr	r0, [pc, #112]	@ (8000550 <check_main_capacity+0xd8>)
 80004de:	f002 f961 	bl	80027a4 <HAL_GPIO_ReadPin>
 80004e2:	4603      	mov	r3, r0
 80004e4:	61bb      	str	r3, [r7, #24]
	capacity[7] = HAL_GPIO_ReadPin(GPIOE, P8_Pin);
 80004e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004ea:	4816      	ldr	r0, [pc, #88]	@ (8000544 <check_main_capacity+0xcc>)
 80004ec:	f002 f95a 	bl	80027a4 <HAL_GPIO_ReadPin>
 80004f0:	4603      	mov	r3, r0
 80004f2:	61fb      	str	r3, [r7, #28]
	capacity[8] = HAL_GPIO_ReadPin(GPIOE, P9_Pin);
 80004f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004f8:	4812      	ldr	r0, [pc, #72]	@ (8000544 <check_main_capacity+0xcc>)
 80004fa:	f002 f953 	bl	80027a4 <HAL_GPIO_ReadPin>
 80004fe:	4603      	mov	r3, r0
 8000500:	623b      	str	r3, [r7, #32]
	capacity[9] = HAL_GPIO_ReadPin(GPIOF, P10_Pin);
 8000502:	2108      	movs	r1, #8
 8000504:	4812      	ldr	r0, [pc, #72]	@ (8000550 <check_main_capacity+0xd8>)
 8000506:	f002 f94d 	bl	80027a4 <HAL_GPIO_ReadPin>
 800050a:	4603      	mov	r3, r0
 800050c:	627b      	str	r3, [r7, #36]	@ 0x24

	int temp = 10;
 800050e:	230a      	movs	r3, #10
 8000510:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(int i = 0; i < 10; i++)
 8000512:	2300      	movs	r3, #0
 8000514:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000516:	e00d      	b.n	8000534 <check_main_capacity+0xbc>
	{
		if(capacity[i] == 1)
 8000518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	3330      	adds	r3, #48	@ 0x30
 800051e:	443b      	add	r3, r7
 8000520:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d102      	bne.n	800052e <check_main_capacity+0xb6>
			temp--;
 8000528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800052a:	3b01      	subs	r3, #1
 800052c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(int i = 0; i < 10; i++)
 800052e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000530:	3301      	adds	r3, #1
 8000532:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000536:	2b09      	cmp	r3, #9
 8000538:	ddee      	ble.n	8000518 <check_main_capacity+0xa0>
	}


	return temp;
 800053a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800053c:	4618      	mov	r0, r3
 800053e:	3730      	adds	r7, #48	@ 0x30
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	42021000 	.word	0x42021000
 8000548:	42020400 	.word	0x42020400
 800054c:	42020c00 	.word	0x42020c00
 8000550:	42021400 	.word	0x42021400

08000554 <check_disabled_capacity>:

int check_disabled_capacity()
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
	int capacity[2] = {0, 0};
 800055a:	2300      	movs	r3, #0
 800055c:	603b      	str	r3, [r7, #0]
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]

	capacity[0] = HAL_GPIO_ReadPin(GPIOG, P11_Pin);
 8000562:	2102      	movs	r1, #2
 8000564:	4812      	ldr	r0, [pc, #72]	@ (80005b0 <check_disabled_capacity+0x5c>)
 8000566:	f002 f91d 	bl	80027a4 <HAL_GPIO_ReadPin>
 800056a:	4603      	mov	r3, r0
 800056c:	603b      	str	r3, [r7, #0]
	capacity[1] = HAL_GPIO_ReadPin(GPIOD, P12_Pin);
 800056e:	2101      	movs	r1, #1
 8000570:	4810      	ldr	r0, [pc, #64]	@ (80005b4 <check_disabled_capacity+0x60>)
 8000572:	f002 f917 	bl	80027a4 <HAL_GPIO_ReadPin>
 8000576:	4603      	mov	r3, r0
 8000578:	607b      	str	r3, [r7, #4]

	int temp = 2;
 800057a:	2302      	movs	r3, #2
 800057c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2; i++)
 800057e:	2300      	movs	r3, #0
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	e00d      	b.n	80005a0 <check_disabled_capacity+0x4c>
	{
		if(capacity[i] == 1)
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	3310      	adds	r3, #16
 800058a:	443b      	add	r3, r7
 800058c:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d102      	bne.n	800059a <check_disabled_capacity+0x46>
			temp--;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	3b01      	subs	r3, #1
 8000598:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 2; i++)
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	3301      	adds	r3, #1
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	ddee      	ble.n	8000584 <check_disabled_capacity+0x30>
	}


	return temp;
 80005a6:	68fb      	ldr	r3, [r7, #12]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	42021800 	.word	0x42021800
 80005b4:	42020c00 	.word	0x42020c00

080005b8 <update_availability>:

void update_availability()
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	snprintf(display_out, sizeof(display_out), "Main Lot: %d", main_capacity);
 80005bc:	4b0d      	ldr	r3, [pc, #52]	@ (80005f4 <update_availability+0x3c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0d      	ldr	r2, [pc, #52]	@ (80005f8 <update_availability+0x40>)
 80005c2:	2110      	movs	r1, #16
 80005c4:	480d      	ldr	r0, [pc, #52]	@ (80005fc <update_availability+0x44>)
 80005c6:	f00a f819 	bl	800a5fc <sniprintf>
	HD44780_Clear();
 80005ca:	f000 fb4f 	bl	8000c6c <HD44780_Clear>
	HD44780_PrintStr(display_out);
 80005ce:	480b      	ldr	r0, [pc, #44]	@ (80005fc <update_availability+0x44>)
 80005d0:	f000 fbd4 	bl	8000d7c <HD44780_PrintStr>
	HD44780_SetCursor(0, 1);
 80005d4:	2101      	movs	r1, #1
 80005d6:	2000      	movs	r0, #0
 80005d8:	f000 fb5e 	bl	8000c98 <HD44780_SetCursor>
	snprintf(display_out, sizeof(display_out), "Disabled Lot: %d", disabled_capacity);
 80005dc:	4b08      	ldr	r3, [pc, #32]	@ (8000600 <update_availability+0x48>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a08      	ldr	r2, [pc, #32]	@ (8000604 <update_availability+0x4c>)
 80005e2:	2110      	movs	r1, #16
 80005e4:	4805      	ldr	r0, [pc, #20]	@ (80005fc <update_availability+0x44>)
 80005e6:	f00a f809 	bl	800a5fc <sniprintf>
	HD44780_PrintStr(display_out);
 80005ea:	4804      	ldr	r0, [pc, #16]	@ (80005fc <update_availability+0x44>)
 80005ec:	f000 fbc6 	bl	8000d7c <HD44780_PrintStr>
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000000 	.word	0x20000000
 80005f8:	0800afec 	.word	0x0800afec
 80005fc:	20000094 	.word	0x20000094
 8000600:	20000004 	.word	0x20000004
 8000604:	0800affc 	.word	0x0800affc

08000608 <raise_ramp>:

void raise_ramp(char channel)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	int x = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
	for(x=750; x>250; x=x-1)
 8000616:	f240 23ee 	movw	r3, #750	@ 0x2ee
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	e031      	b.n	8000682 <raise_ramp+0x7a>
	{
		__HAL_TIM_SET_COMPARE(&htim3,channel, x);
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d104      	bne.n	800062e <raise_ramp+0x26>
 8000624:	4b3a      	ldr	r3, [pc, #232]	@ (8000710 <raise_ramp+0x108>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	635a      	str	r2, [r3, #52]	@ 0x34
 800062c:	e023      	b.n	8000676 <raise_ramp+0x6e>
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b04      	cmp	r3, #4
 8000632:	d104      	bne.n	800063e <raise_ramp+0x36>
 8000634:	4b36      	ldr	r3, [pc, #216]	@ (8000710 <raise_ramp+0x108>)
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	6393      	str	r3, [r2, #56]	@ 0x38
 800063c:	e01b      	b.n	8000676 <raise_ramp+0x6e>
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2b08      	cmp	r3, #8
 8000642:	d104      	bne.n	800064e <raise_ramp+0x46>
 8000644:	4b32      	ldr	r3, [pc, #200]	@ (8000710 <raise_ramp+0x108>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800064c:	e013      	b.n	8000676 <raise_ramp+0x6e>
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b0c      	cmp	r3, #12
 8000652:	d104      	bne.n	800065e <raise_ramp+0x56>
 8000654:	4b2e      	ldr	r3, [pc, #184]	@ (8000710 <raise_ramp+0x108>)
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	6413      	str	r3, [r2, #64]	@ 0x40
 800065c:	e00b      	b.n	8000676 <raise_ramp+0x6e>
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b10      	cmp	r3, #16
 8000662:	d104      	bne.n	800066e <raise_ramp+0x66>
 8000664:	4b2a      	ldr	r3, [pc, #168]	@ (8000710 <raise_ramp+0x108>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	6493      	str	r3, [r2, #72]	@ 0x48
 800066c:	e003      	b.n	8000676 <raise_ramp+0x6e>
 800066e:	4b28      	ldr	r3, [pc, #160]	@ (8000710 <raise_ramp+0x108>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	64d3      	str	r3, [r2, #76]	@ 0x4c
		osDelay(5);
 8000676:	2005      	movs	r0, #5
 8000678:	f007 ff55 	bl	8008526 <osDelay>
	for(x=750; x>250; x=x-1)
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3b01      	subs	r3, #1
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	2bfa      	cmp	r3, #250	@ 0xfa
 8000686:	dcca      	bgt.n	800061e <raise_ramp+0x16>
	}
	osDelay(3000);
 8000688:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800068c:	f007 ff4b 	bl	8008526 <osDelay>
	for(x=250; x<750; x=x+1)
 8000690:	23fa      	movs	r3, #250	@ 0xfa
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	e031      	b.n	80006fa <raise_ramp+0xf2>
	{
		__HAL_TIM_SET_COMPARE(&htim3,channel, x);
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d104      	bne.n	80006a6 <raise_ramp+0x9e>
 800069c:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <raise_ramp+0x108>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	635a      	str	r2, [r3, #52]	@ 0x34
 80006a4:	e023      	b.n	80006ee <raise_ramp+0xe6>
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b04      	cmp	r3, #4
 80006aa:	d104      	bne.n	80006b6 <raise_ramp+0xae>
 80006ac:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <raise_ramp+0x108>)
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	6393      	str	r3, [r2, #56]	@ 0x38
 80006b4:	e01b      	b.n	80006ee <raise_ramp+0xe6>
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b08      	cmp	r3, #8
 80006ba:	d104      	bne.n	80006c6 <raise_ramp+0xbe>
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <raise_ramp+0x108>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80006c4:	e013      	b.n	80006ee <raise_ramp+0xe6>
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	2b0c      	cmp	r3, #12
 80006ca:	d104      	bne.n	80006d6 <raise_ramp+0xce>
 80006cc:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <raise_ramp+0x108>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d4:	e00b      	b.n	80006ee <raise_ramp+0xe6>
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b10      	cmp	r3, #16
 80006da:	d104      	bne.n	80006e6 <raise_ramp+0xde>
 80006dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <raise_ramp+0x108>)
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	6493      	str	r3, [r2, #72]	@ 0x48
 80006e4:	e003      	b.n	80006ee <raise_ramp+0xe6>
 80006e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <raise_ramp+0x108>)
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
		osDelay(5);
 80006ee:	2005      	movs	r0, #5
 80006f0:	f007 ff19 	bl	8008526 <osDelay>
	for(x=250; x<750; x=x+1)
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	3301      	adds	r3, #1
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8000700:	4293      	cmp	r3, r2
 8000702:	ddc8      	ble.n	8000696 <raise_ramp+0x8e>
	}

}
 8000704:	bf00      	nop
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	2000023c 	.word	0x2000023c

08000714 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN(PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT(PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08e      	sub	sp, #56	@ 0x38
 8000718:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072a:	4b9c      	ldr	r3, [pc, #624]	@ (800099c <MX_GPIO_Init+0x288>)
 800072c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000730:	4a9a      	ldr	r2, [pc, #616]	@ (800099c <MX_GPIO_Init+0x288>)
 8000732:	f043 0310 	orr.w	r3, r3, #16
 8000736:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800073a:	4b98      	ldr	r3, [pc, #608]	@ (800099c <MX_GPIO_Init+0x288>)
 800073c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000740:	f003 0310 	and.w	r3, r3, #16
 8000744:	623b      	str	r3, [r7, #32]
 8000746:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000748:	4b94      	ldr	r3, [pc, #592]	@ (800099c <MX_GPIO_Init+0x288>)
 800074a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800074e:	4a93      	ldr	r2, [pc, #588]	@ (800099c <MX_GPIO_Init+0x288>)
 8000750:	f043 0320 	orr.w	r3, r3, #32
 8000754:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000758:	4b90      	ldr	r3, [pc, #576]	@ (800099c <MX_GPIO_Init+0x288>)
 800075a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800075e:	f003 0320 	and.w	r3, r3, #32
 8000762:	61fb      	str	r3, [r7, #28]
 8000764:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	4b8d      	ldr	r3, [pc, #564]	@ (800099c <MX_GPIO_Init+0x288>)
 8000768:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800076c:	4a8b      	ldr	r2, [pc, #556]	@ (800099c <MX_GPIO_Init+0x288>)
 800076e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000772:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000776:	4b89      	ldr	r3, [pc, #548]	@ (800099c <MX_GPIO_Init+0x288>)
 8000778:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800077c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000780:	61bb      	str	r3, [r7, #24]
 8000782:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000784:	4b85      	ldr	r3, [pc, #532]	@ (800099c <MX_GPIO_Init+0x288>)
 8000786:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800078a:	4a84      	ldr	r2, [pc, #528]	@ (800099c <MX_GPIO_Init+0x288>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000794:	4b81      	ldr	r3, [pc, #516]	@ (800099c <MX_GPIO_Init+0x288>)
 8000796:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	4b7e      	ldr	r3, [pc, #504]	@ (800099c <MX_GPIO_Init+0x288>)
 80007a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007a8:	4a7c      	ldr	r2, [pc, #496]	@ (800099c <MX_GPIO_Init+0x288>)
 80007aa:	f043 0302 	orr.w	r3, r3, #2
 80007ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007b2:	4b7a      	ldr	r3, [pc, #488]	@ (800099c <MX_GPIO_Init+0x288>)
 80007b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007b8:	f003 0302 	and.w	r3, r3, #2
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007c0:	4b76      	ldr	r3, [pc, #472]	@ (800099c <MX_GPIO_Init+0x288>)
 80007c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007c6:	4a75      	ldr	r2, [pc, #468]	@ (800099c <MX_GPIO_Init+0x288>)
 80007c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007d0:	4b72      	ldr	r3, [pc, #456]	@ (800099c <MX_GPIO_Init+0x288>)
 80007d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007de:	4b6f      	ldr	r3, [pc, #444]	@ (800099c <MX_GPIO_Init+0x288>)
 80007e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007e4:	4a6d      	ldr	r2, [pc, #436]	@ (800099c <MX_GPIO_Init+0x288>)
 80007e6:	f043 0308 	orr.w	r3, r3, #8
 80007ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007ee:	4b6b      	ldr	r3, [pc, #428]	@ (800099c <MX_GPIO_Init+0x288>)
 80007f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007f4:	f003 0308 	and.w	r3, r3, #8
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fc:	4b67      	ldr	r3, [pc, #412]	@ (800099c <MX_GPIO_Init+0x288>)
 80007fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000802:	4a66      	ldr	r2, [pc, #408]	@ (800099c <MX_GPIO_Init+0x288>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800080c:	4b63      	ldr	r3, [pc, #396]	@ (800099c <MX_GPIO_Init+0x288>)
 800080e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, P3_G_Pin|P4_R_Pin|P5_G_Pin|P9_R_Pin
 800081a:	2200      	movs	r2, #0
 800081c:	f24b 71c0 	movw	r1, #47040	@ 0xb7c0
 8000820:	485f      	ldr	r0, [pc, #380]	@ (80009a0 <MX_GPIO_Init+0x28c>)
 8000822:	f001 ffd7 	bl	80027d4 <HAL_GPIO_WritePin>
                          |P4_G_Pin|P3_R_Pin|P8_R_Pin|P2_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, P12_R_Pin|P12_G_Pin|P7_R_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 5194 	mov.w	r1, #4736	@ 0x1280
 800082c:	485d      	ldr	r0, [pc, #372]	@ (80009a4 <MX_GPIO_Init+0x290>)
 800082e:	f001 ffd1 	bl	80027d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, P2_R_Pin|P1_G_Pin|P6_G_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2129      	movs	r1, #41	@ 0x29
 8000836:	485c      	ldr	r0, [pc, #368]	@ (80009a8 <MX_GPIO_Init+0x294>)
 8000838:	f001 ffcc 	bl	80027d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, P11_R_Pin|P7_G_Pin|P9_G_Pin|P8_G_Pin, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	f245 0141 	movw	r1, #20545	@ 0x5041
 8000842:	485a      	ldr	r0, [pc, #360]	@ (80009ac <MX_GPIO_Init+0x298>)
 8000844:	f001 ffc6 	bl	80027d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P1_R_Pin|P6_R_Pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800084e:	4858      	ldr	r0, [pc, #352]	@ (80009b0 <MX_GPIO_Init+0x29c>)
 8000850:	f001 ffc0 	bl	80027d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, P5_R_Pin|P10_G_Pin|P10_R_Pin|P11_G_Pin, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	f24e 0102 	movw	r1, #57346	@ 0xe002
 800085a:	4856      	ldr	r0, [pc, #344]	@ (80009b4 <MX_GPIO_Init+0x2a0>)
 800085c:	f001 ffba 	bl	80027d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P3_G_Pin P4_R_Pin P5_G_Pin P9_R_Pin
                           P4_G_Pin P3_R_Pin P8_R_Pin P2_G_Pin */
  GPIO_InitStruct.Pin = P3_G_Pin|P4_R_Pin|P5_G_Pin|P9_R_Pin
 8000860:	f24b 73c0 	movw	r3, #47040	@ 0xb7c0
 8000864:	627b      	str	r3, [r7, #36]	@ 0x24
                          |P4_G_Pin|P3_R_Pin|P8_R_Pin|P2_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000876:	4619      	mov	r1, r3
 8000878:	4849      	ldr	r0, [pc, #292]	@ (80009a0 <MX_GPIO_Init+0x28c>)
 800087a:	f001 fe35 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P10_Pin P7_Pin */
  GPIO_InitStruct.Pin = P10_Pin|P7_Pin;
 800087e:	f242 0308 	movw	r3, #8200	@ 0x2008
 8000882:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000884:	2300      	movs	r3, #0
 8000886:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800088c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000890:	4619      	mov	r1, r3
 8000892:	4844      	ldr	r0, [pc, #272]	@ (80009a4 <MX_GPIO_Init+0x290>)
 8000894:	f001 fe28 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P12_R_Pin P12_G_Pin P7_R_Pin */
  GPIO_InitStruct.Pin = P12_R_Pin|P12_G_Pin|P7_R_Pin;
 8000898:	f44f 5394 	mov.w	r3, #4736	@ 0x1280
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ae:	4619      	mov	r1, r3
 80008b0:	483c      	ldr	r0, [pc, #240]	@ (80009a4 <MX_GPIO_Init+0x290>)
 80008b2:	f001 fe19 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P2_R_Pin P1_G_Pin P6_G_Pin */
  GPIO_InitStruct.Pin = P2_R_Pin|P1_G_Pin|P6_G_Pin;
 80008b6:	2329      	movs	r3, #41	@ 0x29
 80008b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ca:	4619      	mov	r1, r3
 80008cc:	4836      	ldr	r0, [pc, #216]	@ (80009a8 <MX_GPIO_Init+0x294>)
 80008ce:	f001 fe0b 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P2_Pin P5_Pin RAMP_EXIT_Pin P6_Pin */
  GPIO_InitStruct.Pin = P2_Pin|P5_Pin|RAMP_EXIT_Pin|P6_Pin;
 80008d2:	f241 1305 	movw	r3, #4357	@ 0x1105
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e4:	4619      	mov	r1, r3
 80008e6:	4832      	ldr	r0, [pc, #200]	@ (80009b0 <MX_GPIO_Init+0x29c>)
 80008e8:	f001 fdfe 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P11_R_Pin P7_G_Pin P9_G_Pin P8_G_Pin */
  GPIO_InitStruct.Pin = P11_R_Pin|P7_G_Pin|P9_G_Pin|P8_G_Pin;
 80008ec:	f245 0341 	movw	r3, #20545	@ 0x5041
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000902:	4619      	mov	r1, r3
 8000904:	4829      	ldr	r0, [pc, #164]	@ (80009ac <MX_GPIO_Init+0x298>)
 8000906:	f001 fdef 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P11_Pin RAMP_ENTER_Pin */
  GPIO_InitStruct.Pin = P11_Pin|RAMP_ENTER_Pin;
 800090a:	f240 4302 	movw	r3, #1026	@ 0x402
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000918:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800091c:	4619      	mov	r1, r3
 800091e:	4823      	ldr	r0, [pc, #140]	@ (80009ac <MX_GPIO_Init+0x298>)
 8000920:	f001 fde2 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P9_Pin P8_Pin P1_Pin */
  GPIO_InitStruct.Pin = P9_Pin|P8_Pin|P1_Pin;
 8000924:	f644 0301 	movw	r3, #18433	@ 0x4801
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000932:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000936:	4619      	mov	r1, r3
 8000938:	4819      	ldr	r0, [pc, #100]	@ (80009a0 <MX_GPIO_Init+0x28c>)
 800093a:	f001 fdd5 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P1_R_Pin P6_R_Pin */
  GPIO_InitStruct.Pin = P1_R_Pin|P6_R_Pin;
 800093e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000954:	4619      	mov	r1, r3
 8000956:	4816      	ldr	r0, [pc, #88]	@ (80009b0 <MX_GPIO_Init+0x29c>)
 8000958:	f001 fdc6 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P3_Pin P4_Pin P12_Pin */
  GPIO_InitStruct.Pin = P3_Pin|P4_Pin|P12_Pin;
 800095c:	f641 0301 	movw	r3, #6145	@ 0x1801
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800096e:	4619      	mov	r1, r3
 8000970:	4810      	ldr	r0, [pc, #64]	@ (80009b4 <MX_GPIO_Init+0x2a0>)
 8000972:	f001 fdb9 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : P5_R_Pin P10_G_Pin P10_R_Pin P11_G_Pin */
  GPIO_InitStruct.Pin = P5_R_Pin|P10_G_Pin|P10_R_Pin|P11_G_Pin;
 8000976:	f24e 0302 	movw	r3, #57346	@ 0xe002
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000988:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800098c:	4619      	mov	r1, r3
 800098e:	4809      	ldr	r0, [pc, #36]	@ (80009b4 <MX_GPIO_Init+0x2a0>)
 8000990:	f001 fdaa 	bl	80024e8 <HAL_GPIO_Init>

}
 8000994:	bf00      	nop
 8000996:	3738      	adds	r7, #56	@ 0x38
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	44020c00 	.word	0x44020c00
 80009a0:	42021000 	.word	0x42021000
 80009a4:	42021400 	.word	0x42021400
 80009a8:	42020000 	.word	0x42020000
 80009ac:	42021800 	.word	0x42021800
 80009b0:	42020400 	.word	0x42020400
 80009b4:	42020c00 	.word	0x42020c00

080009b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <MX_I2C1_Init+0x74>)
 80009be:	4a1c      	ldr	r2, [pc, #112]	@ (8000a30 <MX_I2C1_Init+0x78>)
 80009c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 80009c2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a2c <MX_I2C1_Init+0x74>)
 80009c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a34 <MX_I2C1_Init+0x7c>)
 80009c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009c8:	4b18      	ldr	r3, [pc, #96]	@ (8000a2c <MX_I2C1_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ce:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <MX_I2C1_Init+0x74>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009d4:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <MX_I2C1_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009da:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <MX_I2C1_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009e0:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <MX_I2C1_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009e6:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <MX_I2C1_Init+0x74>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <MX_I2C1_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009f2:	480e      	ldr	r0, [pc, #56]	@ (8000a2c <MX_I2C1_Init+0x74>)
 80009f4:	f001 ff20 	bl	8002838 <HAL_I2C_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009fe:	f000 fbdb 	bl	80011b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a02:	2100      	movs	r1, #0
 8000a04:	4809      	ldr	r0, [pc, #36]	@ (8000a2c <MX_I2C1_Init+0x74>)
 8000a06:	f002 fac1 	bl	8002f8c <HAL_I2CEx_ConfigAnalogFilter>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a10:	f000 fbd2 	bl	80011b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a14:	2100      	movs	r1, #0
 8000a16:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <MX_I2C1_Init+0x74>)
 8000a18:	f002 fb03 	bl	8003022 <HAL_I2CEx_ConfigDigitalFilter>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a22:	f000 fbc9 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000160 	.word	0x20000160
 8000a30:	40005400 	.word	0x40005400
 8000a34:	60808cd3 	.word	0x60808cd3

08000a38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b0cc      	sub	sp, #304	@ 0x130
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000a42:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000a46:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a58:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000a5c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000a60:	4618      	mov	r0, r3
 8000a62:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000a66:	461a      	mov	r2, r3
 8000a68:	2100      	movs	r1, #0
 8000a6a:	f009 fdfd 	bl	800a668 <memset>
  if(i2cHandle->Instance==I2C1)
 8000a6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000a72:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a33      	ldr	r2, [pc, #204]	@ (8000b48 <HAL_I2C_MspInit+0x110>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d15d      	bne.n	8000b3c <HAL_I2C_MspInit+0x104>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000a84:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000a88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a8c:	f04f 0300 	mov.w	r3, #0
 8000a90:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000a98:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa2:	f107 0310 	add.w	r3, r7, #16
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f003 fa8e 	bl	8003fc8 <HAL_RCCEx_PeriphCLKConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8000ab2:	f000 fb81 	bl	80011b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	4b25      	ldr	r3, [pc, #148]	@ (8000b4c <HAL_I2C_MspInit+0x114>)
 8000ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000abc:	4a23      	ldr	r2, [pc, #140]	@ (8000b4c <HAL_I2C_MspInit+0x114>)
 8000abe:	f043 0302 	orr.w	r3, r3, #2
 8000ac2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ac6:	4b21      	ldr	r3, [pc, #132]	@ (8000b4c <HAL_I2C_MspInit+0x114>)
 8000ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000acc:	f003 0202 	and.w	r2, r3, #2
 8000ad0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ad4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ade:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000ae2:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ae4:	23c0      	movs	r3, #192	@ 0xc0
 8000ae6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aea:	2312      	movs	r3, #18
 8000aec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000afc:	2304      	movs	r3, #4
 8000afe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000b06:	4619      	mov	r1, r3
 8000b08:	4811      	ldr	r0, [pc, #68]	@ (8000b50 <HAL_I2C_MspInit+0x118>)
 8000b0a:	f001 fced 	bl	80024e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <HAL_I2C_MspInit+0x114>)
 8000b10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b14:	4a0d      	ldr	r2, [pc, #52]	@ (8000b4c <HAL_I2C_MspInit+0x114>)
 8000b16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b1a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <HAL_I2C_MspInit+0x114>)
 8000b20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000b24:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8000b28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b2c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b36:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000b3a:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40005400 	.word	0x40005400
 8000b4c:	44020c00 	.word	0x44020c00
 8000b50:	42020400 	.word	0x42020400

08000b54 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END ICACHE_Init 1 */
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000b6e:	4a38      	ldr	r2, [pc, #224]	@ (8000c50 <HD44780_Init+0xec>)
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000b74:	4b37      	ldr	r3, [pc, #220]	@ (8000c54 <HD44780_Init+0xf0>)
 8000b76:	2208      	movs	r2, #8
 8000b78:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000b7a:	4b37      	ldr	r3, [pc, #220]	@ (8000c58 <HD44780_Init+0xf4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000b80:	4b33      	ldr	r3, [pc, #204]	@ (8000c50 <HD44780_Init+0xec>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d907      	bls.n	8000b98 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000b88:	4b33      	ldr	r3, [pc, #204]	@ (8000c58 <HD44780_Init+0xf4>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	f043 0308 	orr.w	r3, r3, #8
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4b31      	ldr	r3, [pc, #196]	@ (8000c58 <HD44780_Init+0xf4>)
 8000b94:	701a      	strb	r2, [r3, #0]
 8000b96:	e006      	b.n	8000ba6 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000b98:	4b2f      	ldr	r3, [pc, #188]	@ (8000c58 <HD44780_Init+0xf4>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c58 <HD44780_Init+0xf4>)
 8000ba4:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000ba6:	f000 f987 	bl	8000eb8 <DelayInit>
  HAL_Delay(50);
 8000baa:	2032      	movs	r0, #50	@ 0x32
 8000bac:	f001 fb40 	bl	8002230 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000bb0:	4b28      	ldr	r3, [pc, #160]	@ (8000c54 <HD44780_Init+0xf0>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 f945 	bl	8000e44 <ExpanderWrite>
  HAL_Delay(1000);
 8000bba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bbe:	f001 fb37 	bl	8002230 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000bc2:	2030      	movs	r0, #48	@ 0x30
 8000bc4:	f000 f92c 	bl	8000e20 <Write4Bits>
  DelayUS(4500);
 8000bc8:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000bcc:	f000 f99e 	bl	8000f0c <DelayUS>

  Write4Bits(0x03 << 4);
 8000bd0:	2030      	movs	r0, #48	@ 0x30
 8000bd2:	f000 f925 	bl	8000e20 <Write4Bits>
  DelayUS(4500);
 8000bd6:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000bda:	f000 f997 	bl	8000f0c <DelayUS>

  Write4Bits(0x03 << 4);
 8000bde:	2030      	movs	r0, #48	@ 0x30
 8000be0:	f000 f91e 	bl	8000e20 <Write4Bits>
  DelayUS(4500);
 8000be4:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000be8:	f000 f990 	bl	8000f0c <DelayUS>

  Write4Bits(0x02 << 4);
 8000bec:	2020      	movs	r0, #32
 8000bee:	f000 f917 	bl	8000e20 <Write4Bits>
  DelayUS(100);
 8000bf2:	2064      	movs	r0, #100	@ 0x64
 8000bf4:	f000 f98a 	bl	8000f0c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000bf8:	4b17      	ldr	r3, [pc, #92]	@ (8000c58 <HD44780_Init+0xf4>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	f043 0320 	orr.w	r3, r3, #32
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f8cf 	bl	8000da6 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000c08:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <HD44780_Init+0xf8>)
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000c0e:	f000 f875 	bl	8000cfc <HD44780_Display>
  HD44780_Clear();
 8000c12:	f000 f82b 	bl	8000c6c <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000c16:	4b12      	ldr	r3, [pc, #72]	@ (8000c60 <HD44780_Init+0xfc>)
 8000c18:	2202      	movs	r2, #2
 8000c1a:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000c1c:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <HD44780_Init+0xfc>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 f8bd 	bl	8000da6 <SendCommand>
  DelayUS(4500);
 8000c2c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000c30:	f000 f96c 	bl	8000f0c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000c34:	490b      	ldr	r1, [pc, #44]	@ (8000c64 <HD44780_Init+0x100>)
 8000c36:	2000      	movs	r0, #0
 8000c38:	f000 f876 	bl	8000d28 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000c3c:	490a      	ldr	r1, [pc, #40]	@ (8000c68 <HD44780_Init+0x104>)
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f000 f872 	bl	8000d28 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000c44:	f000 f81d 	bl	8000c82 <HD44780_Home>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200001b7 	.word	0x200001b7
 8000c54:	200001b8 	.word	0x200001b8
 8000c58:	200001b4 	.word	0x200001b4
 8000c5c:	200001b5 	.word	0x200001b5
 8000c60:	200001b6 	.word	0x200001b6
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000010 	.word	0x20000010

08000c6c <HD44780_Clear>:

void HD44780_Clear()
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000c70:	2001      	movs	r0, #1
 8000c72:	f000 f898 	bl	8000da6 <SendCommand>
  DelayUS(2000);
 8000c76:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c7a:	f000 f947 	bl	8000f0c <DelayUS>
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HD44780_Home>:

void HD44780_Home()
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000c86:	2002      	movs	r0, #2
 8000c88:	f000 f88d 	bl	8000da6 <SendCommand>
  DelayUS(2000);
 8000c8c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c90:	f000 f93c 	bl	8000f0c <DelayUS>
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b087      	sub	sp, #28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	460a      	mov	r2, r1
 8000ca2:	71fb      	strb	r3, [r7, #7]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000ca8:	4b12      	ldr	r3, [pc, #72]	@ (8000cf4 <HD44780_SetCursor+0x5c>)
 8000caa:	f107 0408 	add.w	r4, r7, #8
 8000cae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000cb4:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <HD44780_SetCursor+0x60>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	79ba      	ldrb	r2, [r7, #6]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d303      	bcc.n	8000cc6 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <HD44780_SetCursor+0x60>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000cc6:	79bb      	ldrb	r3, [r7, #6]
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	3318      	adds	r3, #24
 8000ccc:	443b      	add	r3, r7
 8000cce:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	b25b      	sxtb	r3, r3
 8000cdc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ce0:	b25b      	sxtb	r3, r3
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 f85e 	bl	8000da6 <SendCommand>
}
 8000cea:	bf00      	nop
 8000cec:	371c      	adds	r7, #28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd90      	pop	{r4, r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	0800b010 	.word	0x0800b010
 8000cf8:	200001b7 	.word	0x200001b7

08000cfc <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000d00:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <HD44780_Display+0x28>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	f043 0304 	orr.w	r3, r3, #4
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HD44780_Display+0x28>)
 8000d0c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000d0e:	4b05      	ldr	r3, [pc, #20]	@ (8000d24 <HD44780_Display+0x28>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	f043 0308 	orr.w	r3, r3, #8
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 f844 	bl	8000da6 <SendCommand>
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200001b5 	.word	0x200001b5

08000d28 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	b25b      	sxtb	r3, r3
 8000d44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d48:	b25b      	sxtb	r3, r3
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 f82a 	bl	8000da6 <SendCommand>
  for (int i=0; i<8; i++)
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	e009      	b.n	8000d6c <HD44780_CreateSpecialChar+0x44>
  {
    SendChar(charmap[i]);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	683a      	ldr	r2, [r7, #0]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 f82e 	bl	8000dc2 <SendChar>
  for (int i=0; i<8; i++)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2b07      	cmp	r3, #7
 8000d70:	ddf2      	ble.n	8000d58 <HD44780_CreateSpecialChar+0x30>
  }
}
 8000d72:	bf00      	nop
 8000d74:	bf00      	nop
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000d84:	e006      	b.n	8000d94 <HD44780_PrintStr+0x18>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	1c5a      	adds	r2, r3, #1
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f817 	bl	8000dc2 <SendChar>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d1f4      	bne.n	8000d86 <HD44780_PrintStr+0xa>
}
 8000d9c:	bf00      	nop
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 f812 	bl	8000dde <Send>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	2101      	movs	r1, #1
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 f804 	bl	8000dde <Send>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b084      	sub	sp, #16
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	460a      	mov	r2, r1
 8000de8:	71fb      	strb	r3, [r7, #7]
 8000dea:	4613      	mov	r3, r2
 8000dec:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	f023 030f 	bic.w	r3, r3, #15
 8000df4:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	011b      	lsls	r3, r3, #4
 8000dfa:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000dfc:	7bfa      	ldrb	r2, [r7, #15]
 8000dfe:	79bb      	ldrb	r3, [r7, #6]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 f80b 	bl	8000e20 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000e0a:	7bba      	ldrb	r2, [r7, #14]
 8000e0c:	79bb      	ldrb	r3, [r7, #6]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f804 	bl	8000e20 <Write4Bits>
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 f809 	bl	8000e44 <ExpanderWrite>
  PulseEnable(value);
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 f821 	bl	8000e7c <PulseEnable>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af02      	add	r7, sp, #8
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000e4e:	4b09      	ldr	r3, [pc, #36]	@ (8000e74 <ExpanderWrite+0x30>)
 8000e50:	781a      	ldrb	r2, [r3, #0]
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000e5a:	f107 020f 	add.w	r2, r7, #15
 8000e5e:	230a      	movs	r3, #10
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	2301      	movs	r3, #1
 8000e64:	214e      	movs	r1, #78	@ 0x4e
 8000e66:	4804      	ldr	r0, [pc, #16]	@ (8000e78 <ExpanderWrite+0x34>)
 8000e68:	f001 fd82 	bl	8002970 <HAL_I2C_Master_Transmit>
}
 8000e6c:	bf00      	nop
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	200001b8 	.word	0x200001b8
 8000e78:	20000160 	.word	0x20000160

08000e7c <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f043 0304 	orr.w	r3, r3, #4
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ffd8 	bl	8000e44 <ExpanderWrite>
  DelayUS(20);
 8000e94:	2014      	movs	r0, #20
 8000e96:	f000 f839 	bl	8000f0c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	f023 0304 	bic.w	r3, r3, #4
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ffce 	bl	8000e44 <ExpanderWrite>
  DelayUS(20);
 8000ea8:	2014      	movs	r0, #20
 8000eaa:	f000 f82f 	bl	8000f0c <DelayUS>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <DelayInit>:

static void DelayInit(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <DelayInit+0x4c>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	4a10      	ldr	r2, [pc, #64]	@ (8000f04 <DelayInit+0x4c>)
 8000ec2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000ec6:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f04 <DelayInit+0x4c>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f04 <DelayInit+0x4c>)
 8000ece:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ed2:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <DelayInit+0x50>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0b      	ldr	r2, [pc, #44]	@ (8000f08 <DelayInit+0x50>)
 8000eda:	f023 0301 	bic.w	r3, r3, #1
 8000ede:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000ee0:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <DelayInit+0x50>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a08      	ldr	r2, [pc, #32]	@ (8000f08 <DelayInit+0x50>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <DelayInit+0x50>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000ef2:	bf00      	nop
  __ASM volatile ("NOP");
 8000ef4:	bf00      	nop
  __ASM volatile ("NOP");
 8000ef6:	bf00      	nop
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000edf0 	.word	0xe000edf0
 8000f08:	e0001000 	.word	0xe0001000

08000f0c <DelayUS>:

static void DelayUS(uint32_t us) {
 8000f0c:	b480      	push	{r7}
 8000f0e:	b087      	sub	sp, #28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000f14:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <DelayUS+0x44>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0e      	ldr	r2, [pc, #56]	@ (8000f54 <DelayUS+0x48>)
 8000f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1e:	0c9a      	lsrs	r2, r3, #18
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	fb02 f303 	mul.w	r3, r2, r3
 8000f26:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000f28:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <DelayUS+0x4c>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <DelayUS+0x4c>)
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d8f6      	bhi.n	8000f2e <DelayUS+0x22>
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	371c      	adds	r7, #28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000018 	.word	0x20000018
 8000f54:	431bde83 	.word	0x431bde83
 8000f58:	e0001000 	.word	0xe0001000

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f60:	f001 f91e 	bl	80021a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f64:	f000 f824 	bl	8000fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f68:	f7ff fbd4 	bl	8000714 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f6c:	f7ff fd24 	bl	80009b8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000f70:	f000 ffb6 	bl	8001ee0 <MX_TIM3_Init>
  MX_ICACHE_Init();
 8000f74:	f7ff fdee 	bl	8000b54 <MX_ICACHE_Init>
  MX_RTC_Init();
 8000f78:	f000 fd6e 	bl	8001a58 <MX_RTC_Init>
  MX_TIM7_Init();
 8000f7c:	f001 f834 	bl	8001fe8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f80:	2100      	movs	r1, #0
 8000f82:	4809      	ldr	r0, [pc, #36]	@ (8000fa8 <main+0x4c>)
 8000f84:	f005 fda2 	bl	8006acc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f88:	2104      	movs	r1, #4
 8000f8a:	4807      	ldr	r0, [pc, #28]	@ (8000fa8 <main+0x4c>)
 8000f8c:	f005 fd9e 	bl	8006acc <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8000f90:	4806      	ldr	r0, [pc, #24]	@ (8000fac <main+0x50>)
 8000f92:	f005 fc8b 	bl	80068ac <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f96:	f007 f9e5 	bl	8008364 <osKernelInitialize>

  /* Call init function for freertos objects (in app_freertos.c) */
  MX_FREERTOS_Init();
 8000f9a:	f7ff f979 	bl	8000290 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f9e:	f007 fa07 	bl	80083b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fa2:	bf00      	nop
 8000fa4:	e7fd      	b.n	8000fa2 <main+0x46>
 8000fa6:	bf00      	nop
 8000fa8:	2000023c 	.word	0x2000023c
 8000fac:	20000288 	.word	0x20000288

08000fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b09c      	sub	sp, #112	@ 0x70
 8000fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	f107 0320 	add.w	r3, r7, #32
 8000fba:	2250      	movs	r2, #80	@ 0x50
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f009 fb52 	bl	800a668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
 8000fd4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000fd6:	4b2f      	ldr	r3, [pc, #188]	@ (8001094 <SystemClock_Config+0xe4>)
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	4a2e      	ldr	r2, [pc, #184]	@ (8001094 <SystemClock_Config+0xe4>)
 8000fdc:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000fe0:	6113      	str	r3, [r2, #16]
 8000fe2:	4b2c      	ldr	r3, [pc, #176]	@ (8001094 <SystemClock_Config+0xe4>)
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fee:	bf00      	nop
 8000ff0:	4b28      	ldr	r3, [pc, #160]	@ (8001094 <SystemClock_Config+0xe4>)
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	f003 0308 	and.w	r3, r3, #8
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d1f9      	bne.n	8000ff0 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_CSI;
 8000ffc:	2318      	movs	r3, #24
 8000ffe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001000:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001004:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8001006:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800100a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 800100c:	2320      	movs	r3, #32
 800100e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001010:	2302      	movs	r3, #2
 8001012:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8001014:	2302      	movs	r3, #2
 8001016:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001018:	2301      	movs	r3, #1
 800101a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 800101c:	237d      	movs	r3, #125	@ 0x7d
 800101e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001020:	2302      	movs	r3, #2
 8001022:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001024:	2302      	movs	r3, #2
 8001026:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001028:	2302      	movs	r3, #2
 800102a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 800102c:	2308      	movs	r3, #8
 800102e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8001030:	2300      	movs	r3, #0
 8001032:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001038:	f107 0320 	add.w	r3, r7, #32
 800103c:	4618      	mov	r0, r3
 800103e:	f002 f83d 	bl	80030bc <HAL_RCC_OscConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001048:	f000 f8b6 	bl	80011b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104c:	231f      	movs	r3, #31
 800104e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001050:	2303      	movs	r3, #3
 8001052:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001064:	f107 0308 	add.w	r3, r7, #8
 8001068:	2105      	movs	r1, #5
 800106a:	4618      	mov	r0, r3
 800106c:	f002 fc5e 	bl	800392c <HAL_RCC_ClockConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001076:	f000 f89f 	bl	80011b8 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 800107a:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <SystemClock_Config+0xe8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001082:	4a05      	ldr	r2, [pc, #20]	@ (8001098 <SystemClock_Config+0xe8>)
 8001084:	f043 0320 	orr.w	r3, r3, #32
 8001088:	6013      	str	r3, [r2, #0]
}
 800108a:	bf00      	nop
 800108c:	3770      	adds	r7, #112	@ 0x70
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	44020800 	.word	0x44020800
 8001098:	40022000 	.word	0x40022000

0800109c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM7)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a3a      	ldr	r2, [pc, #232]	@ (8001194 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d167      	bne.n	800117e <HAL_TIM_PeriodElapsedCallback+0xe2>
  {
	if(parking_timeout[0] == 1)
 80010ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d104      	bne.n	80010c0 <HAL_TIM_PeriodElapsedCallback+0x24>
		HAL_GPIO_TogglePin(GPIOB, P1_R_Pin);
 80010b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010ba:	4838      	ldr	r0, [pc, #224]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x100>)
 80010bc:	f001 fba2 	bl	8002804 <HAL_GPIO_TogglePin>

	if(parking_timeout[1] == 1)
 80010c0:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d103      	bne.n	80010d0 <HAL_TIM_PeriodElapsedCallback+0x34>
		HAL_GPIO_TogglePin(GPIOA, P2_R_Pin);
 80010c8:	2101      	movs	r1, #1
 80010ca:	4835      	ldr	r0, [pc, #212]	@ (80011a0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80010cc:	f001 fb9a 	bl	8002804 <HAL_GPIO_TogglePin>

	if(parking_timeout[2] == 1)
 80010d0:	4b31      	ldr	r3, [pc, #196]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d104      	bne.n	80010e2 <HAL_TIM_PeriodElapsedCallback+0x46>
		HAL_GPIO_TogglePin(GPIOE, P3_R_Pin);
 80010d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010dc:	4831      	ldr	r0, [pc, #196]	@ (80011a4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80010de:	f001 fb91 	bl	8002804 <HAL_GPIO_TogglePin>

	if(parking_timeout[3] == 1)
 80010e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d103      	bne.n	80010f2 <HAL_TIM_PeriodElapsedCallback+0x56>
		HAL_GPIO_TogglePin(GPIOE, P4_R_Pin);
 80010ea:	2180      	movs	r1, #128	@ 0x80
 80010ec:	482d      	ldr	r0, [pc, #180]	@ (80011a4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80010ee:	f001 fb89 	bl	8002804 <HAL_GPIO_TogglePin>

	if(parking_timeout[4] == 1)
 80010f2:	4b29      	ldr	r3, [pc, #164]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d104      	bne.n	8001104 <HAL_TIM_PeriodElapsedCallback+0x68>
		HAL_GPIO_TogglePin(GPIOD, P5_R_Pin);
 80010fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010fe:	482a      	ldr	r0, [pc, #168]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001100:	f001 fb80 	bl	8002804 <HAL_GPIO_TogglePin>

	if(parking_timeout[5] == 1)
 8001104:	4b24      	ldr	r3, [pc, #144]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d104      	bne.n	8001116 <HAL_TIM_PeriodElapsedCallback+0x7a>
		HAL_GPIO_TogglePin(GPIOB, P6_R_Pin);
 800110c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001110:	4822      	ldr	r0, [pc, #136]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001112:	f001 fb77 	bl	8002804 <HAL_GPIO_TogglePin>

	if(parking_timeout[6] == 1)
 8001116:	4b20      	ldr	r3, [pc, #128]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d104      	bne.n	8001128 <HAL_TIM_PeriodElapsedCallback+0x8c>
		HAL_GPIO_TogglePin(GPIOF, P7_R_Pin);
 800111e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001122:	4822      	ldr	r0, [pc, #136]	@ (80011ac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001124:	f001 fb6e 	bl	8002804 <HAL_GPIO_TogglePin>

	if(parking_timeout[7] == 1)
 8001128:	4b1b      	ldr	r3, [pc, #108]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d104      	bne.n	800113a <HAL_TIM_PeriodElapsedCallback+0x9e>
		HAL_GPIO_TogglePin(GPIOE, P8_R_Pin);
 8001130:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001134:	481b      	ldr	r0, [pc, #108]	@ (80011a4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001136:	f001 fb65 	bl	8002804 <HAL_GPIO_TogglePin>

	if(parking_timeout[8] == 1)
 800113a:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d104      	bne.n	800114c <HAL_TIM_PeriodElapsedCallback+0xb0>
		HAL_GPIO_TogglePin(GPIOE, P9_R_Pin);
 8001142:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001146:	4817      	ldr	r0, [pc, #92]	@ (80011a4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001148:	f001 fb5c 	bl	8002804 <HAL_GPIO_TogglePin>

	if(parking_timeout[9] == 1)
 800114c:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800114e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001150:	2b01      	cmp	r3, #1
 8001152:	d104      	bne.n	800115e <HAL_TIM_PeriodElapsedCallback+0xc2>
		HAL_GPIO_TogglePin(GPIOD, P10_R_Pin);
 8001154:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001158:	4813      	ldr	r0, [pc, #76]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800115a:	f001 fb53 	bl	8002804 <HAL_GPIO_TogglePin>

	if(parking_timeout[10] == 1)
 800115e:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001162:	2b01      	cmp	r3, #1
 8001164:	d103      	bne.n	800116e <HAL_TIM_PeriodElapsedCallback+0xd2>
		HAL_GPIO_TogglePin(GPIOG, P11_R_Pin);
 8001166:	2101      	movs	r1, #1
 8001168:	4811      	ldr	r0, [pc, #68]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800116a:	f001 fb4b 	bl	8002804 <HAL_GPIO_TogglePin>

	if(parking_timeout[11] == 1)
 800116e:	4b0a      	ldr	r3, [pc, #40]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001172:	2b01      	cmp	r3, #1
 8001174:	d103      	bne.n	800117e <HAL_TIM_PeriodElapsedCallback+0xe2>
		HAL_GPIO_TogglePin(GPIOF, P12_R_Pin);
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	480c      	ldr	r0, [pc, #48]	@ (80011ac <HAL_TIM_PeriodElapsedCallback+0x110>)
 800117a:	f001 fb43 	bl	8002804 <HAL_GPIO_TogglePin>
  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a0c      	ldr	r2, [pc, #48]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d101      	bne.n	800118c <HAL_TIM_PeriodElapsedCallback+0xf0>
  {
    HAL_IncTick();
 8001188:	f001 f832 	bl	80021f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40001400 	.word	0x40001400
 8001198:	20000108 	.word	0x20000108
 800119c:	42020400 	.word	0x42020400
 80011a0:	42020000 	.word	0x42020000
 80011a4:	42021000 	.word	0x42021000
 80011a8:	42020c00 	.word	0x42020c00
 80011ac:	42021400 	.word	0x42021400
 80011b0:	42021800 	.word	0x42021800
 80011b4:	40001000 	.word	0x40001000

080011b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011bc:	b672      	cpsid	i
}
 80011be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <Error_Handler+0x8>

080011c4 <check_parking1>:
extern int parking_started[12];
extern int parking_time[12];
extern int parking_timeout[12];

void check_parking1()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	int parking = HAL_GPIO_ReadPin(GPIOE, P1_Pin);
 80011ca:	2101      	movs	r1, #1
 80011cc:	4824      	ldr	r0, [pc, #144]	@ (8001260 <check_parking1+0x9c>)
 80011ce:	f001 fae9 	bl	80027a4 <HAL_GPIO_ReadPin>
 80011d2:	4603      	mov	r3, r0
 80011d4:	607b      	str	r3, [r7, #4]

	if(parking == 1)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d128      	bne.n	800122e <check_parking1+0x6a>
	{

		if(parking_started[0] == 0)
 80011dc:	4b21      	ldr	r3, [pc, #132]	@ (8001264 <check_parking1+0xa0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d106      	bne.n	80011f2 <check_parking1+0x2e>
		{
			parking_time[0] = current_seconds;
 80011e4:	4b20      	ldr	r3, [pc, #128]	@ (8001268 <check_parking1+0xa4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a20      	ldr	r2, [pc, #128]	@ (800126c <check_parking1+0xa8>)
 80011ea:	6013      	str	r3, [r2, #0]
			parking_started[0] = 1;
 80011ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001264 <check_parking1+0xa0>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	601a      	str	r2, [r3, #0]
		}

		int timespan = current_seconds - parking_time[7];
 80011f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001268 <check_parking1+0xa4>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4b1d      	ldr	r3, [pc, #116]	@ (800126c <check_parking1+0xa8>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	603b      	str	r3, [r7, #0]
		if(timespan >= TIME_LIMIT)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	2b1d      	cmp	r3, #29
 8001202:	dd08      	ble.n	8001216 <check_parking1+0x52>
		{
			parking_timeout[0] = 1;
 8001204:	4b1a      	ldr	r3, [pc, #104]	@ (8001270 <check_parking1+0xac>)
 8001206:	2201      	movs	r2, #1
 8001208:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, P1_G_Pin, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2108      	movs	r1, #8
 800120e:	4819      	ldr	r0, [pc, #100]	@ (8001274 <check_parking1+0xb0>)
 8001210:	f001 fae0 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, P1_G_Pin, 1);

		parking_started[0] = 0;
		parking_timeout[0] = 0;
	}
}
 8001214:	e01f      	b.n	8001256 <check_parking1+0x92>
			HAL_GPIO_WritePin(GPIOB, P1_R_Pin, 1);
 8001216:	2201      	movs	r2, #1
 8001218:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800121c:	4816      	ldr	r0, [pc, #88]	@ (8001278 <check_parking1+0xb4>)
 800121e:	f001 fad9 	bl	80027d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, P1_G_Pin, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2108      	movs	r1, #8
 8001226:	4813      	ldr	r0, [pc, #76]	@ (8001274 <check_parking1+0xb0>)
 8001228:	f001 fad4 	bl	80027d4 <HAL_GPIO_WritePin>
}
 800122c:	e013      	b.n	8001256 <check_parking1+0x92>
	else if(parking==0)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d110      	bne.n	8001256 <check_parking1+0x92>
		HAL_GPIO_WritePin(GPIOB, P1_R_Pin, 0);
 8001234:	2200      	movs	r2, #0
 8001236:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800123a:	480f      	ldr	r0, [pc, #60]	@ (8001278 <check_parking1+0xb4>)
 800123c:	f001 faca 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, P1_G_Pin, 1);
 8001240:	2201      	movs	r2, #1
 8001242:	2108      	movs	r1, #8
 8001244:	480b      	ldr	r0, [pc, #44]	@ (8001274 <check_parking1+0xb0>)
 8001246:	f001 fac5 	bl	80027d4 <HAL_GPIO_WritePin>
		parking_started[0] = 0;
 800124a:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <check_parking1+0xa0>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
		parking_timeout[0] = 0;
 8001250:	4b07      	ldr	r3, [pc, #28]	@ (8001270 <check_parking1+0xac>)
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	42021000 	.word	0x42021000
 8001264:	200000a8 	.word	0x200000a8
 8001268:	200000a4 	.word	0x200000a4
 800126c:	200000d8 	.word	0x200000d8
 8001270:	20000108 	.word	0x20000108
 8001274:	42020000 	.word	0x42020000
 8001278:	42020400 	.word	0x42020400

0800127c <check_parking2>:

void check_parking2()
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
	int parking = HAL_GPIO_ReadPin(GPIOB, P2_Pin);
 8001282:	2101      	movs	r1, #1
 8001284:	4824      	ldr	r0, [pc, #144]	@ (8001318 <check_parking2+0x9c>)
 8001286:	f001 fa8d 	bl	80027a4 <HAL_GPIO_ReadPin>
 800128a:	4603      	mov	r3, r0
 800128c:	607b      	str	r3, [r7, #4]

	if(parking == 1)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d129      	bne.n	80012e8 <check_parking2+0x6c>
	{

		if(parking_started[1] == 0)
 8001294:	4b21      	ldr	r3, [pc, #132]	@ (800131c <check_parking2+0xa0>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d106      	bne.n	80012aa <check_parking2+0x2e>
		{
			parking_time[1] = current_seconds;
 800129c:	4b20      	ldr	r3, [pc, #128]	@ (8001320 <check_parking2+0xa4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a20      	ldr	r2, [pc, #128]	@ (8001324 <check_parking2+0xa8>)
 80012a2:	6053      	str	r3, [r2, #4]
			parking_started[1] = 1;
 80012a4:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <check_parking2+0xa0>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	605a      	str	r2, [r3, #4]
		}

		int timespan = current_seconds - parking_time[8];
 80012aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001320 <check_parking2+0xa4>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <check_parking2+0xa8>)
 80012b0:	6a1b      	ldr	r3, [r3, #32]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	603b      	str	r3, [r7, #0]
		if(timespan >= TIME_LIMIT)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	2b1d      	cmp	r3, #29
 80012ba:	dd09      	ble.n	80012d0 <check_parking2+0x54>
		{
			parking_timeout[1] = 1;
 80012bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <check_parking2+0xac>)
 80012be:	2201      	movs	r2, #1
 80012c0:	605a      	str	r2, [r3, #4]
			HAL_GPIO_WritePin(GPIOE, P2_G_Pin, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012c8:	4818      	ldr	r0, [pc, #96]	@ (800132c <check_parking2+0xb0>)
 80012ca:	f001 fa83 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P2_G_Pin, 1);

		parking_started[1] = 0;
		parking_timeout[1] = 0;
	}
}
 80012ce:	e01f      	b.n	8001310 <check_parking2+0x94>
			HAL_GPIO_WritePin(GPIOA, P2_R_Pin, 1);
 80012d0:	2201      	movs	r2, #1
 80012d2:	2101      	movs	r1, #1
 80012d4:	4816      	ldr	r0, [pc, #88]	@ (8001330 <check_parking2+0xb4>)
 80012d6:	f001 fa7d 	bl	80027d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, P2_G_Pin, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012e0:	4812      	ldr	r0, [pc, #72]	@ (800132c <check_parking2+0xb0>)
 80012e2:	f001 fa77 	bl	80027d4 <HAL_GPIO_WritePin>
}
 80012e6:	e013      	b.n	8001310 <check_parking2+0x94>
	else if(parking==0)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d110      	bne.n	8001310 <check_parking2+0x94>
		HAL_GPIO_WritePin(GPIOA, P2_R_Pin, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2101      	movs	r1, #1
 80012f2:	480f      	ldr	r0, [pc, #60]	@ (8001330 <check_parking2+0xb4>)
 80012f4:	f001 fa6e 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P2_G_Pin, 1);
 80012f8:	2201      	movs	r2, #1
 80012fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012fe:	480b      	ldr	r0, [pc, #44]	@ (800132c <check_parking2+0xb0>)
 8001300:	f001 fa68 	bl	80027d4 <HAL_GPIO_WritePin>
		parking_started[1] = 0;
 8001304:	4b05      	ldr	r3, [pc, #20]	@ (800131c <check_parking2+0xa0>)
 8001306:	2200      	movs	r2, #0
 8001308:	605a      	str	r2, [r3, #4]
		parking_timeout[1] = 0;
 800130a:	4b07      	ldr	r3, [pc, #28]	@ (8001328 <check_parking2+0xac>)
 800130c:	2200      	movs	r2, #0
 800130e:	605a      	str	r2, [r3, #4]
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	42020400 	.word	0x42020400
 800131c:	200000a8 	.word	0x200000a8
 8001320:	200000a4 	.word	0x200000a4
 8001324:	200000d8 	.word	0x200000d8
 8001328:	20000108 	.word	0x20000108
 800132c:	42021000 	.word	0x42021000
 8001330:	42020000 	.word	0x42020000

08001334 <check_parking3>:

void check_parking3()
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
	int parking = HAL_GPIO_ReadPin(GPIOD, P3_Pin);
 800133a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800133e:	4824      	ldr	r0, [pc, #144]	@ (80013d0 <check_parking3+0x9c>)
 8001340:	f001 fa30 	bl	80027a4 <HAL_GPIO_ReadPin>
 8001344:	4603      	mov	r3, r0
 8001346:	607b      	str	r3, [r7, #4]

	if(parking == 1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d128      	bne.n	80013a0 <check_parking3+0x6c>
	{

		if(parking_started[2] == 0)
 800134e:	4b21      	ldr	r3, [pc, #132]	@ (80013d4 <check_parking3+0xa0>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d106      	bne.n	8001364 <check_parking3+0x30>
		{
			parking_time[2] = current_seconds;
 8001356:	4b20      	ldr	r3, [pc, #128]	@ (80013d8 <check_parking3+0xa4>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a20      	ldr	r2, [pc, #128]	@ (80013dc <check_parking3+0xa8>)
 800135c:	6093      	str	r3, [r2, #8]
			parking_started[2] = 1;
 800135e:	4b1d      	ldr	r3, [pc, #116]	@ (80013d4 <check_parking3+0xa0>)
 8001360:	2201      	movs	r2, #1
 8001362:	609a      	str	r2, [r3, #8]
		}

		int timespan = current_seconds - parking_time[2];
 8001364:	4b1c      	ldr	r3, [pc, #112]	@ (80013d8 <check_parking3+0xa4>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b1c      	ldr	r3, [pc, #112]	@ (80013dc <check_parking3+0xa8>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	603b      	str	r3, [r7, #0]
		if(timespan >= TIME_LIMIT)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	2b1d      	cmp	r3, #29
 8001374:	dd08      	ble.n	8001388 <check_parking3+0x54>
		{
			parking_timeout[2] = 1;
 8001376:	4b1a      	ldr	r3, [pc, #104]	@ (80013e0 <check_parking3+0xac>)
 8001378:	2201      	movs	r2, #1
 800137a:	609a      	str	r2, [r3, #8]
			HAL_GPIO_WritePin(GPIOE, P3_G_Pin, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2140      	movs	r1, #64	@ 0x40
 8001380:	4818      	ldr	r0, [pc, #96]	@ (80013e4 <check_parking3+0xb0>)
 8001382:	f001 fa27 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P3_G_Pin, 1);

		parking_started[2] = 0;
		parking_timeout[2] = 0;
	}
}
 8001386:	e01f      	b.n	80013c8 <check_parking3+0x94>
			HAL_GPIO_WritePin(GPIOE, P3_R_Pin, 1);
 8001388:	2201      	movs	r2, #1
 800138a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800138e:	4815      	ldr	r0, [pc, #84]	@ (80013e4 <check_parking3+0xb0>)
 8001390:	f001 fa20 	bl	80027d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, P3_G_Pin, 0);
 8001394:	2200      	movs	r2, #0
 8001396:	2140      	movs	r1, #64	@ 0x40
 8001398:	4812      	ldr	r0, [pc, #72]	@ (80013e4 <check_parking3+0xb0>)
 800139a:	f001 fa1b 	bl	80027d4 <HAL_GPIO_WritePin>
}
 800139e:	e013      	b.n	80013c8 <check_parking3+0x94>
	else if(parking==0)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d110      	bne.n	80013c8 <check_parking3+0x94>
		HAL_GPIO_WritePin(GPIOE, P3_R_Pin, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013ac:	480d      	ldr	r0, [pc, #52]	@ (80013e4 <check_parking3+0xb0>)
 80013ae:	f001 fa11 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P3_G_Pin, 1);
 80013b2:	2201      	movs	r2, #1
 80013b4:	2140      	movs	r1, #64	@ 0x40
 80013b6:	480b      	ldr	r0, [pc, #44]	@ (80013e4 <check_parking3+0xb0>)
 80013b8:	f001 fa0c 	bl	80027d4 <HAL_GPIO_WritePin>
		parking_started[2] = 0;
 80013bc:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <check_parking3+0xa0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
		parking_timeout[2] = 0;
 80013c2:	4b07      	ldr	r3, [pc, #28]	@ (80013e0 <check_parking3+0xac>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	42020c00 	.word	0x42020c00
 80013d4:	200000a8 	.word	0x200000a8
 80013d8:	200000a4 	.word	0x200000a4
 80013dc:	200000d8 	.word	0x200000d8
 80013e0:	20000108 	.word	0x20000108
 80013e4:	42021000 	.word	0x42021000

080013e8 <check_parking4>:

void check_parking4()
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
	int parking = HAL_GPIO_ReadPin(GPIOD, P4_Pin);
 80013ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013f2:	4825      	ldr	r0, [pc, #148]	@ (8001488 <check_parking4+0xa0>)
 80013f4:	f001 f9d6 	bl	80027a4 <HAL_GPIO_ReadPin>
 80013f8:	4603      	mov	r3, r0
 80013fa:	607b      	str	r3, [r7, #4]

	if(parking == 1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d129      	bne.n	8001456 <check_parking4+0x6e>
	{

		if(parking_started[3] == 0)
 8001402:	4b22      	ldr	r3, [pc, #136]	@ (800148c <check_parking4+0xa4>)
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d106      	bne.n	8001418 <check_parking4+0x30>
		{
			parking_time[3] = current_seconds;
 800140a:	4b21      	ldr	r3, [pc, #132]	@ (8001490 <check_parking4+0xa8>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a21      	ldr	r2, [pc, #132]	@ (8001494 <check_parking4+0xac>)
 8001410:	60d3      	str	r3, [r2, #12]
			parking_started[3] = 1;
 8001412:	4b1e      	ldr	r3, [pc, #120]	@ (800148c <check_parking4+0xa4>)
 8001414:	2201      	movs	r2, #1
 8001416:	60da      	str	r2, [r3, #12]
		}

		int timespan = current_seconds - parking_time[3];
 8001418:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <check_parking4+0xa8>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b1d      	ldr	r3, [pc, #116]	@ (8001494 <check_parking4+0xac>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	603b      	str	r3, [r7, #0]
		if(timespan >= TIME_LIMIT)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	2b1d      	cmp	r3, #29
 8001428:	dd09      	ble.n	800143e <check_parking4+0x56>
		{
			parking_timeout[3] = 1;
 800142a:	4b1b      	ldr	r3, [pc, #108]	@ (8001498 <check_parking4+0xb0>)
 800142c:	2201      	movs	r2, #1
 800142e:	60da      	str	r2, [r3, #12]
			HAL_GPIO_WritePin(GPIOE, P4_G_Pin, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001436:	4819      	ldr	r0, [pc, #100]	@ (800149c <check_parking4+0xb4>)
 8001438:	f001 f9cc 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P4_G_Pin, 1);

		parking_started[3] = 0;
		parking_timeout[3] = 0;
	}
}
 800143c:	e01f      	b.n	800147e <check_parking4+0x96>
			HAL_GPIO_WritePin(GPIOE, P4_R_Pin, 1);
 800143e:	2201      	movs	r2, #1
 8001440:	2180      	movs	r1, #128	@ 0x80
 8001442:	4816      	ldr	r0, [pc, #88]	@ (800149c <check_parking4+0xb4>)
 8001444:	f001 f9c6 	bl	80027d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, P4_G_Pin, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800144e:	4813      	ldr	r0, [pc, #76]	@ (800149c <check_parking4+0xb4>)
 8001450:	f001 f9c0 	bl	80027d4 <HAL_GPIO_WritePin>
}
 8001454:	e013      	b.n	800147e <check_parking4+0x96>
	else if(parking==0)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d110      	bne.n	800147e <check_parking4+0x96>
		HAL_GPIO_WritePin(GPIOE, P4_R_Pin, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2180      	movs	r1, #128	@ 0x80
 8001460:	480e      	ldr	r0, [pc, #56]	@ (800149c <check_parking4+0xb4>)
 8001462:	f001 f9b7 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P4_G_Pin, 1);
 8001466:	2201      	movs	r2, #1
 8001468:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800146c:	480b      	ldr	r0, [pc, #44]	@ (800149c <check_parking4+0xb4>)
 800146e:	f001 f9b1 	bl	80027d4 <HAL_GPIO_WritePin>
		parking_started[3] = 0;
 8001472:	4b06      	ldr	r3, [pc, #24]	@ (800148c <check_parking4+0xa4>)
 8001474:	2200      	movs	r2, #0
 8001476:	60da      	str	r2, [r3, #12]
		parking_timeout[3] = 0;
 8001478:	4b07      	ldr	r3, [pc, #28]	@ (8001498 <check_parking4+0xb0>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	42020c00 	.word	0x42020c00
 800148c:	200000a8 	.word	0x200000a8
 8001490:	200000a4 	.word	0x200000a4
 8001494:	200000d8 	.word	0x200000d8
 8001498:	20000108 	.word	0x20000108
 800149c:	42021000 	.word	0x42021000

080014a0 <check_parking5>:

void check_parking5()
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
	int parking = HAL_GPIO_ReadPin(GPIOB, P5_Pin);
 80014a6:	2104      	movs	r1, #4
 80014a8:	4825      	ldr	r0, [pc, #148]	@ (8001540 <check_parking5+0xa0>)
 80014aa:	f001 f97b 	bl	80027a4 <HAL_GPIO_ReadPin>
 80014ae:	4603      	mov	r3, r0
 80014b0:	607b      	str	r3, [r7, #4]

	if(parking == 1)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d12a      	bne.n	800150e <check_parking5+0x6e>
	{

		if(parking_started[4] == 0)
 80014b8:	4b22      	ldr	r3, [pc, #136]	@ (8001544 <check_parking5+0xa4>)
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d106      	bne.n	80014ce <check_parking5+0x2e>
		{
			parking_time[4] = current_seconds;
 80014c0:	4b21      	ldr	r3, [pc, #132]	@ (8001548 <check_parking5+0xa8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a21      	ldr	r2, [pc, #132]	@ (800154c <check_parking5+0xac>)
 80014c6:	6113      	str	r3, [r2, #16]
			parking_started[4] = 1;
 80014c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001544 <check_parking5+0xa4>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	611a      	str	r2, [r3, #16]
		}

		int timespan = current_seconds - parking_time[4];
 80014ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001548 <check_parking5+0xa8>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4b1e      	ldr	r3, [pc, #120]	@ (800154c <check_parking5+0xac>)
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	603b      	str	r3, [r7, #0]
		if(timespan >= TIME_LIMIT)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	2b1d      	cmp	r3, #29
 80014de:	dd09      	ble.n	80014f4 <check_parking5+0x54>
		{
			parking_timeout[4] = 1;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001550 <check_parking5+0xb0>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	611a      	str	r2, [r3, #16]
			HAL_GPIO_WritePin(GPIOE, P5_G_Pin, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014ec:	4819      	ldr	r0, [pc, #100]	@ (8001554 <check_parking5+0xb4>)
 80014ee:	f001 f971 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P5_G_Pin, 1);

		parking_started[4] = 0;
		parking_timeout[4] = 0;
	}
}
 80014f2:	e021      	b.n	8001538 <check_parking5+0x98>
			HAL_GPIO_WritePin(GPIOD, P5_R_Pin, 1);
 80014f4:	2201      	movs	r2, #1
 80014f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014fa:	4817      	ldr	r0, [pc, #92]	@ (8001558 <check_parking5+0xb8>)
 80014fc:	f001 f96a 	bl	80027d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, P5_G_Pin, 0);
 8001500:	2200      	movs	r2, #0
 8001502:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001506:	4813      	ldr	r0, [pc, #76]	@ (8001554 <check_parking5+0xb4>)
 8001508:	f001 f964 	bl	80027d4 <HAL_GPIO_WritePin>
}
 800150c:	e014      	b.n	8001538 <check_parking5+0x98>
	else if(parking==0)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d111      	bne.n	8001538 <check_parking5+0x98>
		HAL_GPIO_WritePin(GPIOD, P5_R_Pin, 0);
 8001514:	2200      	movs	r2, #0
 8001516:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800151a:	480f      	ldr	r0, [pc, #60]	@ (8001558 <check_parking5+0xb8>)
 800151c:	f001 f95a 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, P5_G_Pin, 1);
 8001520:	2201      	movs	r2, #1
 8001522:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001526:	480b      	ldr	r0, [pc, #44]	@ (8001554 <check_parking5+0xb4>)
 8001528:	f001 f954 	bl	80027d4 <HAL_GPIO_WritePin>
		parking_started[4] = 0;
 800152c:	4b05      	ldr	r3, [pc, #20]	@ (8001544 <check_parking5+0xa4>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
		parking_timeout[4] = 0;
 8001532:	4b07      	ldr	r3, [pc, #28]	@ (8001550 <check_parking5+0xb0>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	42020400 	.word	0x42020400
 8001544:	200000a8 	.word	0x200000a8
 8001548:	200000a4 	.word	0x200000a4
 800154c:	200000d8 	.word	0x200000d8
 8001550:	20000108 	.word	0x20000108
 8001554:	42021000 	.word	0x42021000
 8001558:	42020c00 	.word	0x42020c00

0800155c <check_parking6>:

void check_parking6()
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
	int parking = HAL_GPIO_ReadPin(GPIOB, P6_Pin);
 8001562:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001566:	4824      	ldr	r0, [pc, #144]	@ (80015f8 <check_parking6+0x9c>)
 8001568:	f001 f91c 	bl	80027a4 <HAL_GPIO_ReadPin>
 800156c:	4603      	mov	r3, r0
 800156e:	607b      	str	r3, [r7, #4]

	if(parking == 1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d128      	bne.n	80015c8 <check_parking6+0x6c>
	{

		if(parking_started[5] == 0)
 8001576:	4b21      	ldr	r3, [pc, #132]	@ (80015fc <check_parking6+0xa0>)
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d106      	bne.n	800158c <check_parking6+0x30>
		{
			parking_time[5] = current_seconds;
 800157e:	4b20      	ldr	r3, [pc, #128]	@ (8001600 <check_parking6+0xa4>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a20      	ldr	r2, [pc, #128]	@ (8001604 <check_parking6+0xa8>)
 8001584:	6153      	str	r3, [r2, #20]
			parking_started[5] = 1;
 8001586:	4b1d      	ldr	r3, [pc, #116]	@ (80015fc <check_parking6+0xa0>)
 8001588:	2201      	movs	r2, #1
 800158a:	615a      	str	r2, [r3, #20]
		}

		int timespan = current_seconds - parking_time[5];
 800158c:	4b1c      	ldr	r3, [pc, #112]	@ (8001600 <check_parking6+0xa4>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b1c      	ldr	r3, [pc, #112]	@ (8001604 <check_parking6+0xa8>)
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	603b      	str	r3, [r7, #0]
		if(timespan >= TIME_LIMIT)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	2b1d      	cmp	r3, #29
 800159c:	dd08      	ble.n	80015b0 <check_parking6+0x54>
		{
			parking_timeout[5] = 1;
 800159e:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <check_parking6+0xac>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	615a      	str	r2, [r3, #20]
			HAL_GPIO_WritePin(GPIOA, P6_G_Pin, 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2120      	movs	r1, #32
 80015a8:	4818      	ldr	r0, [pc, #96]	@ (800160c <check_parking6+0xb0>)
 80015aa:	f001 f913 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, P6_G_Pin, 1);

		parking_started[5] = 0;
		parking_timeout[5] = 0;
	}
}
 80015ae:	e01f      	b.n	80015f0 <check_parking6+0x94>
			HAL_GPIO_WritePin(GPIOB, P6_R_Pin, 1);
 80015b0:	2201      	movs	r2, #1
 80015b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015b6:	4810      	ldr	r0, [pc, #64]	@ (80015f8 <check_parking6+0x9c>)
 80015b8:	f001 f90c 	bl	80027d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, P6_G_Pin, 0);
 80015bc:	2200      	movs	r2, #0
 80015be:	2120      	movs	r1, #32
 80015c0:	4812      	ldr	r0, [pc, #72]	@ (800160c <check_parking6+0xb0>)
 80015c2:	f001 f907 	bl	80027d4 <HAL_GPIO_WritePin>
}
 80015c6:	e013      	b.n	80015f0 <check_parking6+0x94>
	else if(parking==0)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d110      	bne.n	80015f0 <check_parking6+0x94>
		HAL_GPIO_WritePin(GPIOB, P6_R_Pin, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015d4:	4808      	ldr	r0, [pc, #32]	@ (80015f8 <check_parking6+0x9c>)
 80015d6:	f001 f8fd 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, P6_G_Pin, 1);
 80015da:	2201      	movs	r2, #1
 80015dc:	2120      	movs	r1, #32
 80015de:	480b      	ldr	r0, [pc, #44]	@ (800160c <check_parking6+0xb0>)
 80015e0:	f001 f8f8 	bl	80027d4 <HAL_GPIO_WritePin>
		parking_started[5] = 0;
 80015e4:	4b05      	ldr	r3, [pc, #20]	@ (80015fc <check_parking6+0xa0>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	615a      	str	r2, [r3, #20]
		parking_timeout[5] = 0;
 80015ea:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <check_parking6+0xac>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	615a      	str	r2, [r3, #20]
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	42020400 	.word	0x42020400
 80015fc:	200000a8 	.word	0x200000a8
 8001600:	200000a4 	.word	0x200000a4
 8001604:	200000d8 	.word	0x200000d8
 8001608:	20000108 	.word	0x20000108
 800160c:	42020000 	.word	0x42020000

08001610 <check_parking7>:

void check_parking7()
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
	int parking = HAL_GPIO_ReadPin(GPIOF, P7_Pin);
 8001616:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800161a:	4824      	ldr	r0, [pc, #144]	@ (80016ac <check_parking7+0x9c>)
 800161c:	f001 f8c2 	bl	80027a4 <HAL_GPIO_ReadPin>
 8001620:	4603      	mov	r3, r0
 8001622:	607b      	str	r3, [r7, #4]

	if(parking == 1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d128      	bne.n	800167c <check_parking7+0x6c>
	{

		if(parking_started[6] == 0)
 800162a:	4b21      	ldr	r3, [pc, #132]	@ (80016b0 <check_parking7+0xa0>)
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d106      	bne.n	8001640 <check_parking7+0x30>
		{
			parking_time[6] = current_seconds;
 8001632:	4b20      	ldr	r3, [pc, #128]	@ (80016b4 <check_parking7+0xa4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a20      	ldr	r2, [pc, #128]	@ (80016b8 <check_parking7+0xa8>)
 8001638:	6193      	str	r3, [r2, #24]
			parking_started[6] = 1;
 800163a:	4b1d      	ldr	r3, [pc, #116]	@ (80016b0 <check_parking7+0xa0>)
 800163c:	2201      	movs	r2, #1
 800163e:	619a      	str	r2, [r3, #24]
		}

		int timespan = current_seconds - parking_time[6];
 8001640:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <check_parking7+0xa4>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b1c      	ldr	r3, [pc, #112]	@ (80016b8 <check_parking7+0xa8>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	603b      	str	r3, [r7, #0]
		if(timespan >= TIME_LIMIT)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	2b1d      	cmp	r3, #29
 8001650:	dd08      	ble.n	8001664 <check_parking7+0x54>
		{
			parking_timeout[6] = 1;
 8001652:	4b1a      	ldr	r3, [pc, #104]	@ (80016bc <check_parking7+0xac>)
 8001654:	2201      	movs	r2, #1
 8001656:	619a      	str	r2, [r3, #24]
			HAL_GPIO_WritePin(GPIOG, P7_G_Pin, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2140      	movs	r1, #64	@ 0x40
 800165c:	4818      	ldr	r0, [pc, #96]	@ (80016c0 <check_parking7+0xb0>)
 800165e:	f001 f8b9 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, P7_G_Pin, 1);

		parking_started[6] = 0;
		parking_timeout[6] = 0;
	}
}
 8001662:	e01f      	b.n	80016a4 <check_parking7+0x94>
			HAL_GPIO_WritePin(GPIOF, P7_R_Pin, 1);
 8001664:	2201      	movs	r2, #1
 8001666:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800166a:	4810      	ldr	r0, [pc, #64]	@ (80016ac <check_parking7+0x9c>)
 800166c:	f001 f8b2 	bl	80027d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, P7_G_Pin, 0);
 8001670:	2200      	movs	r2, #0
 8001672:	2140      	movs	r1, #64	@ 0x40
 8001674:	4812      	ldr	r0, [pc, #72]	@ (80016c0 <check_parking7+0xb0>)
 8001676:	f001 f8ad 	bl	80027d4 <HAL_GPIO_WritePin>
}
 800167a:	e013      	b.n	80016a4 <check_parking7+0x94>
	else if(parking==0)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d110      	bne.n	80016a4 <check_parking7+0x94>
		HAL_GPIO_WritePin(GPIOF, P7_R_Pin, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001688:	4808      	ldr	r0, [pc, #32]	@ (80016ac <check_parking7+0x9c>)
 800168a:	f001 f8a3 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, P7_G_Pin, 1);
 800168e:	2201      	movs	r2, #1
 8001690:	2140      	movs	r1, #64	@ 0x40
 8001692:	480b      	ldr	r0, [pc, #44]	@ (80016c0 <check_parking7+0xb0>)
 8001694:	f001 f89e 	bl	80027d4 <HAL_GPIO_WritePin>
		parking_started[6] = 0;
 8001698:	4b05      	ldr	r3, [pc, #20]	@ (80016b0 <check_parking7+0xa0>)
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]
		parking_timeout[6] = 0;
 800169e:	4b07      	ldr	r3, [pc, #28]	@ (80016bc <check_parking7+0xac>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	42021400 	.word	0x42021400
 80016b0:	200000a8 	.word	0x200000a8
 80016b4:	200000a4 	.word	0x200000a4
 80016b8:	200000d8 	.word	0x200000d8
 80016bc:	20000108 	.word	0x20000108
 80016c0:	42021800 	.word	0x42021800

080016c4 <check_parking8>:

void check_parking8()
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
	int parking = HAL_GPIO_ReadPin(GPIOE, P8_Pin);
 80016ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016ce:	4826      	ldr	r0, [pc, #152]	@ (8001768 <check_parking8+0xa4>)
 80016d0:	f001 f868 	bl	80027a4 <HAL_GPIO_ReadPin>
 80016d4:	4603      	mov	r3, r0
 80016d6:	607b      	str	r3, [r7, #4]

	if(parking == 1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d12a      	bne.n	8001734 <check_parking8+0x70>
	{

		if(parking_started[7] == 0)
 80016de:	4b23      	ldr	r3, [pc, #140]	@ (800176c <check_parking8+0xa8>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d106      	bne.n	80016f4 <check_parking8+0x30>
		{
			parking_time[7] = current_seconds;
 80016e6:	4b22      	ldr	r3, [pc, #136]	@ (8001770 <check_parking8+0xac>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a22      	ldr	r2, [pc, #136]	@ (8001774 <check_parking8+0xb0>)
 80016ec:	61d3      	str	r3, [r2, #28]
			parking_started[7] = 1;
 80016ee:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <check_parking8+0xa8>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	61da      	str	r2, [r3, #28]
		}

		int timespan = current_seconds - parking_time[7];
 80016f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001770 <check_parking8+0xac>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001774 <check_parking8+0xb0>)
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	603b      	str	r3, [r7, #0]
		if(timespan >= TIME_LIMIT)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	2b1d      	cmp	r3, #29
 8001704:	dd09      	ble.n	800171a <check_parking8+0x56>
		{
			parking_timeout[7] = 1;
 8001706:	4b1c      	ldr	r3, [pc, #112]	@ (8001778 <check_parking8+0xb4>)
 8001708:	2201      	movs	r2, #1
 800170a:	61da      	str	r2, [r3, #28]
			HAL_GPIO_WritePin(GPIOG, P8_G_Pin, 0);
 800170c:	2200      	movs	r2, #0
 800170e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001712:	481a      	ldr	r0, [pc, #104]	@ (800177c <check_parking8+0xb8>)
 8001714:	f001 f85e 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, P8_G_Pin, 1);

		parking_started[7] = 0;
		parking_timeout[7] = 0;
	}
}
 8001718:	e021      	b.n	800175e <check_parking8+0x9a>
			HAL_GPIO_WritePin(GPIOE, P8_R_Pin, 1);
 800171a:	2201      	movs	r2, #1
 800171c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001720:	4811      	ldr	r0, [pc, #68]	@ (8001768 <check_parking8+0xa4>)
 8001722:	f001 f857 	bl	80027d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, P8_G_Pin, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800172c:	4813      	ldr	r0, [pc, #76]	@ (800177c <check_parking8+0xb8>)
 800172e:	f001 f851 	bl	80027d4 <HAL_GPIO_WritePin>
}
 8001732:	e014      	b.n	800175e <check_parking8+0x9a>
	else if(parking==0)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d111      	bne.n	800175e <check_parking8+0x9a>
		HAL_GPIO_WritePin(GPIOE, P8_R_Pin, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001740:	4809      	ldr	r0, [pc, #36]	@ (8001768 <check_parking8+0xa4>)
 8001742:	f001 f847 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, P8_G_Pin, 1);
 8001746:	2201      	movs	r2, #1
 8001748:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800174c:	480b      	ldr	r0, [pc, #44]	@ (800177c <check_parking8+0xb8>)
 800174e:	f001 f841 	bl	80027d4 <HAL_GPIO_WritePin>
		parking_started[7] = 0;
 8001752:	4b06      	ldr	r3, [pc, #24]	@ (800176c <check_parking8+0xa8>)
 8001754:	2200      	movs	r2, #0
 8001756:	61da      	str	r2, [r3, #28]
		parking_timeout[7] = 0;
 8001758:	4b07      	ldr	r3, [pc, #28]	@ (8001778 <check_parking8+0xb4>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	42021000 	.word	0x42021000
 800176c:	200000a8 	.word	0x200000a8
 8001770:	200000a4 	.word	0x200000a4
 8001774:	200000d8 	.word	0x200000d8
 8001778:	20000108 	.word	0x20000108
 800177c:	42021800 	.word	0x42021800

08001780 <check_parking9>:

void check_parking9()
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
	int parking = HAL_GPIO_ReadPin(GPIOE, P9_Pin);
 8001786:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800178a:	4826      	ldr	r0, [pc, #152]	@ (8001824 <check_parking9+0xa4>)
 800178c:	f001 f80a 	bl	80027a4 <HAL_GPIO_ReadPin>
 8001790:	4603      	mov	r3, r0
 8001792:	607b      	str	r3, [r7, #4]

	if(parking == 1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d12a      	bne.n	80017f0 <check_parking9+0x70>
	{

		if(parking_started[8] == 0)
 800179a:	4b23      	ldr	r3, [pc, #140]	@ (8001828 <check_parking9+0xa8>)
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d106      	bne.n	80017b0 <check_parking9+0x30>
		{
			parking_time[8] = current_seconds;
 80017a2:	4b22      	ldr	r3, [pc, #136]	@ (800182c <check_parking9+0xac>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a22      	ldr	r2, [pc, #136]	@ (8001830 <check_parking9+0xb0>)
 80017a8:	6213      	str	r3, [r2, #32]
			parking_started[8] = 1;
 80017aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001828 <check_parking9+0xa8>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	621a      	str	r2, [r3, #32]
		}

		int timespan = current_seconds - parking_time[8];
 80017b0:	4b1e      	ldr	r3, [pc, #120]	@ (800182c <check_parking9+0xac>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001830 <check_parking9+0xb0>)
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	603b      	str	r3, [r7, #0]
		if(timespan >= TIME_LIMIT)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	2b1d      	cmp	r3, #29
 80017c0:	dd09      	ble.n	80017d6 <check_parking9+0x56>
		{
			parking_timeout[8] = 1;
 80017c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001834 <check_parking9+0xb4>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	621a      	str	r2, [r3, #32]
			HAL_GPIO_WritePin(GPIOG, P9_G_Pin, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017ce:	481a      	ldr	r0, [pc, #104]	@ (8001838 <check_parking9+0xb8>)
 80017d0:	f001 f800 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, P9_G_Pin, 1);

		parking_started[8] = 0;
		parking_timeout[8] = 0;
	}
}
 80017d4:	e021      	b.n	800181a <check_parking9+0x9a>
			HAL_GPIO_WritePin(GPIOE, P9_R_Pin, 1);
 80017d6:	2201      	movs	r2, #1
 80017d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017dc:	4811      	ldr	r0, [pc, #68]	@ (8001824 <check_parking9+0xa4>)
 80017de:	f000 fff9 	bl	80027d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, P9_G_Pin, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017e8:	4813      	ldr	r0, [pc, #76]	@ (8001838 <check_parking9+0xb8>)
 80017ea:	f000 fff3 	bl	80027d4 <HAL_GPIO_WritePin>
}
 80017ee:	e014      	b.n	800181a <check_parking9+0x9a>
	else if(parking==0)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d111      	bne.n	800181a <check_parking9+0x9a>
		HAL_GPIO_WritePin(GPIOE, P9_R_Pin, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017fc:	4809      	ldr	r0, [pc, #36]	@ (8001824 <check_parking9+0xa4>)
 80017fe:	f000 ffe9 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, P9_G_Pin, 1);
 8001802:	2201      	movs	r2, #1
 8001804:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001808:	480b      	ldr	r0, [pc, #44]	@ (8001838 <check_parking9+0xb8>)
 800180a:	f000 ffe3 	bl	80027d4 <HAL_GPIO_WritePin>
		parking_started[8] = 0;
 800180e:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <check_parking9+0xa8>)
 8001810:	2200      	movs	r2, #0
 8001812:	621a      	str	r2, [r3, #32]
		parking_timeout[8] = 0;
 8001814:	4b07      	ldr	r3, [pc, #28]	@ (8001834 <check_parking9+0xb4>)
 8001816:	2200      	movs	r2, #0
 8001818:	621a      	str	r2, [r3, #32]
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	42021000 	.word	0x42021000
 8001828:	200000a8 	.word	0x200000a8
 800182c:	200000a4 	.word	0x200000a4
 8001830:	200000d8 	.word	0x200000d8
 8001834:	20000108 	.word	0x20000108
 8001838:	42021800 	.word	0x42021800

0800183c <check_parking10>:


void check_parking10()
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
	int parking = HAL_GPIO_ReadPin(GPIOF, P10_Pin);
 8001842:	2108      	movs	r1, #8
 8001844:	4825      	ldr	r0, [pc, #148]	@ (80018dc <check_parking10+0xa0>)
 8001846:	f000 ffad 	bl	80027a4 <HAL_GPIO_ReadPin>
 800184a:	4603      	mov	r3, r0
 800184c:	607b      	str	r3, [r7, #4]

	if(parking == 1)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d12a      	bne.n	80018aa <check_parking10+0x6e>
	{

		if(parking_started[9] == 0)
 8001854:	4b22      	ldr	r3, [pc, #136]	@ (80018e0 <check_parking10+0xa4>)
 8001856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001858:	2b00      	cmp	r3, #0
 800185a:	d106      	bne.n	800186a <check_parking10+0x2e>
		{
			parking_time[9] = current_seconds;
 800185c:	4b21      	ldr	r3, [pc, #132]	@ (80018e4 <check_parking10+0xa8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a21      	ldr	r2, [pc, #132]	@ (80018e8 <check_parking10+0xac>)
 8001862:	6253      	str	r3, [r2, #36]	@ 0x24
			parking_started[9] = 1;
 8001864:	4b1e      	ldr	r3, [pc, #120]	@ (80018e0 <check_parking10+0xa4>)
 8001866:	2201      	movs	r2, #1
 8001868:	625a      	str	r2, [r3, #36]	@ 0x24
		}

		int timespan = current_seconds - parking_time[9];
 800186a:	4b1e      	ldr	r3, [pc, #120]	@ (80018e4 <check_parking10+0xa8>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4b1e      	ldr	r3, [pc, #120]	@ (80018e8 <check_parking10+0xac>)
 8001870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	603b      	str	r3, [r7, #0]
		if(timespan >= TIME_LIMIT)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	2b1d      	cmp	r3, #29
 800187a:	dd09      	ble.n	8001890 <check_parking10+0x54>
		{
			parking_timeout[9] = 1;
 800187c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <check_parking10+0xb0>)
 800187e:	2201      	movs	r2, #1
 8001880:	625a      	str	r2, [r3, #36]	@ 0x24
			HAL_GPIO_WritePin(GPIOD, P10_G_Pin, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001888:	4819      	ldr	r0, [pc, #100]	@ (80018f0 <check_parking10+0xb4>)
 800188a:	f000 ffa3 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, P10_G_Pin, 1);

		parking_started[9] = 0;
		parking_timeout[9] = 0;
	}
}
 800188e:	e021      	b.n	80018d4 <check_parking10+0x98>
			HAL_GPIO_WritePin(GPIOD, P10_R_Pin, 1);
 8001890:	2201      	movs	r2, #1
 8001892:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001896:	4816      	ldr	r0, [pc, #88]	@ (80018f0 <check_parking10+0xb4>)
 8001898:	f000 ff9c 	bl	80027d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, P10_G_Pin, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018a2:	4813      	ldr	r0, [pc, #76]	@ (80018f0 <check_parking10+0xb4>)
 80018a4:	f000 ff96 	bl	80027d4 <HAL_GPIO_WritePin>
}
 80018a8:	e014      	b.n	80018d4 <check_parking10+0x98>
	else if(parking==0)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d111      	bne.n	80018d4 <check_parking10+0x98>
		HAL_GPIO_WritePin(GPIOD, P10_R_Pin, 0);
 80018b0:	2200      	movs	r2, #0
 80018b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018b6:	480e      	ldr	r0, [pc, #56]	@ (80018f0 <check_parking10+0xb4>)
 80018b8:	f000 ff8c 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, P10_G_Pin, 1);
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018c2:	480b      	ldr	r0, [pc, #44]	@ (80018f0 <check_parking10+0xb4>)
 80018c4:	f000 ff86 	bl	80027d4 <HAL_GPIO_WritePin>
		parking_started[9] = 0;
 80018c8:	4b05      	ldr	r3, [pc, #20]	@ (80018e0 <check_parking10+0xa4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	625a      	str	r2, [r3, #36]	@ 0x24
		parking_timeout[9] = 0;
 80018ce:	4b07      	ldr	r3, [pc, #28]	@ (80018ec <check_parking10+0xb0>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	42021400 	.word	0x42021400
 80018e0:	200000a8 	.word	0x200000a8
 80018e4:	200000a4 	.word	0x200000a4
 80018e8:	200000d8 	.word	0x200000d8
 80018ec:	20000108 	.word	0x20000108
 80018f0:	42020c00 	.word	0x42020c00

080018f4 <check_parking11>:

void check_parking11()
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
	int parking = HAL_GPIO_ReadPin(GPIOG, P11_Pin);
 80018fa:	2102      	movs	r1, #2
 80018fc:	4823      	ldr	r0, [pc, #140]	@ (800198c <check_parking11+0x98>)
 80018fe:	f000 ff51 	bl	80027a4 <HAL_GPIO_ReadPin>
 8001902:	4603      	mov	r3, r0
 8001904:	607b      	str	r3, [r7, #4]

	if(parking == 1)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d127      	bne.n	800195c <check_parking11+0x68>
	{

		if(parking_started[10] == 0)
 800190c:	4b20      	ldr	r3, [pc, #128]	@ (8001990 <check_parking11+0x9c>)
 800190e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001910:	2b00      	cmp	r3, #0
 8001912:	d106      	bne.n	8001922 <check_parking11+0x2e>
		{
			parking_time[10] = current_seconds;
 8001914:	4b1f      	ldr	r3, [pc, #124]	@ (8001994 <check_parking11+0xa0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a1f      	ldr	r2, [pc, #124]	@ (8001998 <check_parking11+0xa4>)
 800191a:	6293      	str	r3, [r2, #40]	@ 0x28
			parking_started[10] = 1;
 800191c:	4b1c      	ldr	r3, [pc, #112]	@ (8001990 <check_parking11+0x9c>)
 800191e:	2201      	movs	r2, #1
 8001920:	629a      	str	r2, [r3, #40]	@ 0x28
		}

		int timespan = current_seconds - parking_time[10];
 8001922:	4b1c      	ldr	r3, [pc, #112]	@ (8001994 <check_parking11+0xa0>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	4b1c      	ldr	r3, [pc, #112]	@ (8001998 <check_parking11+0xa4>)
 8001928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	603b      	str	r3, [r7, #0]
		if(timespan >= TIME_LIMIT)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	2b1d      	cmp	r3, #29
 8001932:	dd08      	ble.n	8001946 <check_parking11+0x52>
		{
			parking_timeout[10] = 1;
 8001934:	4b19      	ldr	r3, [pc, #100]	@ (800199c <check_parking11+0xa8>)
 8001936:	2201      	movs	r2, #1
 8001938:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_GPIO_WritePin(GPIOD, P11_G_Pin, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2102      	movs	r1, #2
 800193e:	4818      	ldr	r0, [pc, #96]	@ (80019a0 <check_parking11+0xac>)
 8001940:	f000 ff48 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, P11_G_Pin, 1);

		parking_started[10] = 0;
		parking_timeout[10] = 0;
	}
}
 8001944:	e01d      	b.n	8001982 <check_parking11+0x8e>
			HAL_GPIO_WritePin(GPIOG, P11_R_Pin, 1);
 8001946:	2201      	movs	r2, #1
 8001948:	2101      	movs	r1, #1
 800194a:	4810      	ldr	r0, [pc, #64]	@ (800198c <check_parking11+0x98>)
 800194c:	f000 ff42 	bl	80027d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, P11_G_Pin, 0);
 8001950:	2200      	movs	r2, #0
 8001952:	2102      	movs	r1, #2
 8001954:	4812      	ldr	r0, [pc, #72]	@ (80019a0 <check_parking11+0xac>)
 8001956:	f000 ff3d 	bl	80027d4 <HAL_GPIO_WritePin>
}
 800195a:	e012      	b.n	8001982 <check_parking11+0x8e>
	else if(parking==0)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10f      	bne.n	8001982 <check_parking11+0x8e>
		HAL_GPIO_WritePin(GPIOG, P11_R_Pin, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	2101      	movs	r1, #1
 8001966:	4809      	ldr	r0, [pc, #36]	@ (800198c <check_parking11+0x98>)
 8001968:	f000 ff34 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, P11_G_Pin, 1);
 800196c:	2201      	movs	r2, #1
 800196e:	2102      	movs	r1, #2
 8001970:	480b      	ldr	r0, [pc, #44]	@ (80019a0 <check_parking11+0xac>)
 8001972:	f000 ff2f 	bl	80027d4 <HAL_GPIO_WritePin>
		parking_started[10] = 0;
 8001976:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <check_parking11+0x9c>)
 8001978:	2200      	movs	r2, #0
 800197a:	629a      	str	r2, [r3, #40]	@ 0x28
		parking_timeout[10] = 0;
 800197c:	4b07      	ldr	r3, [pc, #28]	@ (800199c <check_parking11+0xa8>)
 800197e:	2200      	movs	r2, #0
 8001980:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	42021800 	.word	0x42021800
 8001990:	200000a8 	.word	0x200000a8
 8001994:	200000a4 	.word	0x200000a4
 8001998:	200000d8 	.word	0x200000d8
 800199c:	20000108 	.word	0x20000108
 80019a0:	42020c00 	.word	0x42020c00

080019a4 <check_parking12>:

void check_parking12()
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
	int parking = HAL_GPIO_ReadPin(GPIOD, P12_Pin);
 80019aa:	2101      	movs	r1, #1
 80019ac:	4824      	ldr	r0, [pc, #144]	@ (8001a40 <check_parking12+0x9c>)
 80019ae:	f000 fef9 	bl	80027a4 <HAL_GPIO_ReadPin>
 80019b2:	4603      	mov	r3, r0
 80019b4:	607b      	str	r3, [r7, #4]

	if(parking == 1)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d129      	bne.n	8001a10 <check_parking12+0x6c>
	{

		if(parking_started[11] == 0)
 80019bc:	4b21      	ldr	r3, [pc, #132]	@ (8001a44 <check_parking12+0xa0>)
 80019be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d106      	bne.n	80019d2 <check_parking12+0x2e>
		{
			parking_time[11] = current_seconds;
 80019c4:	4b20      	ldr	r3, [pc, #128]	@ (8001a48 <check_parking12+0xa4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a20      	ldr	r2, [pc, #128]	@ (8001a4c <check_parking12+0xa8>)
 80019ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
			parking_started[11] = 1;
 80019cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a44 <check_parking12+0xa0>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	62da      	str	r2, [r3, #44]	@ 0x2c
		}

		int timespan = current_seconds - parking_time[11];
 80019d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a48 <check_parking12+0xa4>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a4c <check_parking12+0xa8>)
 80019d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	603b      	str	r3, [r7, #0]
		if(timespan >= TIME_LIMIT)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	2b1d      	cmp	r3, #29
 80019e2:	dd09      	ble.n	80019f8 <check_parking12+0x54>
		{
			parking_timeout[11] = 1;
 80019e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a50 <check_parking12+0xac>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	62da      	str	r2, [r3, #44]	@ 0x2c
			HAL_GPIO_WritePin(GPIOF, P12_G_Pin, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019f0:	4818      	ldr	r0, [pc, #96]	@ (8001a54 <check_parking12+0xb0>)
 80019f2:	f000 feef 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, P12_G_Pin, 1);

		parking_started[11] = 0;
		parking_timeout[11] = 0;
	}
}
 80019f6:	e01f      	b.n	8001a38 <check_parking12+0x94>
			HAL_GPIO_WritePin(GPIOF, P12_R_Pin, 1);
 80019f8:	2201      	movs	r2, #1
 80019fa:	2180      	movs	r1, #128	@ 0x80
 80019fc:	4815      	ldr	r0, [pc, #84]	@ (8001a54 <check_parking12+0xb0>)
 80019fe:	f000 fee9 	bl	80027d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, P12_G_Pin, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a08:	4812      	ldr	r0, [pc, #72]	@ (8001a54 <check_parking12+0xb0>)
 8001a0a:	f000 fee3 	bl	80027d4 <HAL_GPIO_WritePin>
}
 8001a0e:	e013      	b.n	8001a38 <check_parking12+0x94>
	else if(parking==0)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d110      	bne.n	8001a38 <check_parking12+0x94>
		HAL_GPIO_WritePin(GPIOF, P12_R_Pin, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2180      	movs	r1, #128	@ 0x80
 8001a1a:	480e      	ldr	r0, [pc, #56]	@ (8001a54 <check_parking12+0xb0>)
 8001a1c:	f000 feda 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, P12_G_Pin, 1);
 8001a20:	2201      	movs	r2, #1
 8001a22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a26:	480b      	ldr	r0, [pc, #44]	@ (8001a54 <check_parking12+0xb0>)
 8001a28:	f000 fed4 	bl	80027d4 <HAL_GPIO_WritePin>
		parking_started[11] = 0;
 8001a2c:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <check_parking12+0xa0>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	62da      	str	r2, [r3, #44]	@ 0x2c
		parking_timeout[11] = 0;
 8001a32:	4b07      	ldr	r3, [pc, #28]	@ (8001a50 <check_parking12+0xac>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	42020c00 	.word	0x42020c00
 8001a44:	200000a8 	.word	0x200000a8
 8001a48:	200000a4 	.word	0x200000a4
 8001a4c:	200000d8 	.word	0x200000d8
 8001a50:	20000108 	.word	0x20000108
 8001a54:	42021400 	.word	0x42021400

08001a58 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08e      	sub	sp, #56	@ 0x38
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001a5e:	f107 031c 	add.w	r3, r7, #28
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
 8001a6c:	611a      	str	r2, [r3, #16]
 8001a6e:	615a      	str	r2, [r3, #20]
 8001a70:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8001a72:	f107 0308 	add.w	r3, r7, #8
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a86:	4b33      	ldr	r3, [pc, #204]	@ (8001b54 <MX_RTC_Init+0xfc>)
 8001a88:	4a33      	ldr	r2, [pc, #204]	@ (8001b58 <MX_RTC_Init+0x100>)
 8001a8a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a8c:	4b31      	ldr	r3, [pc, #196]	@ (8001b54 <MX_RTC_Init+0xfc>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a92:	4b30      	ldr	r3, [pc, #192]	@ (8001b54 <MX_RTC_Init+0xfc>)
 8001a94:	227f      	movs	r2, #127	@ 0x7f
 8001a96:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a98:	4b2e      	ldr	r3, [pc, #184]	@ (8001b54 <MX_RTC_Init+0xfc>)
 8001a9a:	22ff      	movs	r2, #255	@ 0xff
 8001a9c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a9e:	4b2d      	ldr	r3, [pc, #180]	@ (8001b54 <MX_RTC_Init+0xfc>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b54 <MX_RTC_Init+0xfc>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8001b54 <MX_RTC_Init+0xfc>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ab0:	4b28      	ldr	r3, [pc, #160]	@ (8001b54 <MX_RTC_Init+0xfc>)
 8001ab2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ab6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001ab8:	4b26      	ldr	r3, [pc, #152]	@ (8001b54 <MX_RTC_Init+0xfc>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001abe:	4b25      	ldr	r3, [pc, #148]	@ (8001b54 <MX_RTC_Init+0xfc>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ac4:	4823      	ldr	r0, [pc, #140]	@ (8001b54 <MX_RTC_Init+0xfc>)
 8001ac6:	f004 fb39 	bl	800613c <HAL_RTC_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001ad0:	f7ff fb72 	bl	80011b8 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	4619      	mov	r1, r3
 8001aea:	481a      	ldr	r0, [pc, #104]	@ (8001b54 <MX_RTC_Init+0xfc>)
 8001aec:	f004 fe58 	bl	80067a0 <HAL_RTCEx_PrivilegeModeSet>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001af6:	f7ff fb5f 	bl	80011b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 17;
 8001afa:	2311      	movs	r3, #17
 8001afc:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 25;
 8001afe:	2319      	movs	r3, #25
 8001b00:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001b0e:	f107 0308 	add.w	r3, r7, #8
 8001b12:	2200      	movs	r2, #0
 8001b14:	4619      	mov	r1, r3
 8001b16:	480f      	ldr	r0, [pc, #60]	@ (8001b54 <MX_RTC_Init+0xfc>)
 8001b18:	f004 fb92 	bl	8006240 <HAL_RTC_SetTime>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8001b22:	f7ff fb49 	bl	80011b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8001b26:	2303      	movs	r3, #3
 8001b28:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_APRIL;
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	717b      	strb	r3, [r7, #5]
  sDate.Date = 16;
 8001b2e:	2310      	movs	r3, #16
 8001b30:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 25;
 8001b32:	2319      	movs	r3, #25
 8001b34:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	2200      	movs	r2, #0
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4805      	ldr	r0, [pc, #20]	@ (8001b54 <MX_RTC_Init+0xfc>)
 8001b3e:	f004 fc73 	bl	8006428 <HAL_RTC_SetDate>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8001b48:	f7ff fb36 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	3738      	adds	r7, #56	@ 0x38
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	200001bc 	.word	0x200001bc
 8001b58:	44007800 	.word	0x44007800

08001b5c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b0c6      	sub	sp, #280	@ 0x118
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b66:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b6a:	6018      	str	r0, [r3, #0]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b6c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001b74:	4618      	mov	r0, r3
 8001b76:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	f008 fd73 	bl	800a668 <memset>
  if(rtcHandle->Instance==RTC)
 8001b82:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b86:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a21      	ldr	r2, [pc, #132]	@ (8001c14 <HAL_RTC_MspInit+0xb8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d13a      	bne.n	8001c0a <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b94:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b98:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001b9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ba8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001bac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001bb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bb4:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bb8:	f107 0310 	add.w	r3, r7, #16
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f002 fa03 	bl	8003fc8 <HAL_RCCEx_PeriphCLKConfig>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 8001bc8:	f7ff faf6 	bl	80011b8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bcc:	4b12      	ldr	r3, [pc, #72]	@ (8001c18 <HAL_RTC_MspInit+0xbc>)
 8001bce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bd2:	4a11      	ldr	r2, [pc, #68]	@ (8001c18 <HAL_RTC_MspInit+0xbc>)
 8001bd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bd8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8001c18 <HAL_RTC_MspInit+0xbc>)
 8001bde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001be2:	4a0d      	ldr	r2, [pc, #52]	@ (8001c18 <HAL_RTC_MspInit+0xbc>)
 8001be4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001be8:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001bec:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <HAL_RTC_MspInit+0xbc>)
 8001bee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001bf2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001bf6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001bfa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c04:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c08:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	44007800 	.word	0x44007800
 8001c18:	44020c00 	.word	0x44020c00

08001c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c20:	2200      	movs	r2, #0
 8001c22:	210f      	movs	r1, #15
 8001c24:	f06f 0001 	mvn.w	r0, #1
 8001c28:	f000 fbde 	bl	80023e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08e      	sub	sp, #56	@ 0x38
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c38:	4b33      	ldr	r3, [pc, #204]	@ (8001d08 <HAL_InitTick+0xd8>)
 8001c3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c3e:	4a32      	ldr	r2, [pc, #200]	@ (8001d08 <HAL_InitTick+0xd8>)
 8001c40:	f043 0310 	orr.w	r3, r3, #16
 8001c44:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001c48:	4b2f      	ldr	r3, [pc, #188]	@ (8001d08 <HAL_InitTick+0xd8>)
 8001c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c56:	f107 020c 	add.w	r2, r7, #12
 8001c5a:	f107 0310 	add.w	r3, r7, #16
 8001c5e:	4611      	mov	r1, r2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f002 f979 	bl	8003f58 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d103      	bne.n	8001c78 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c70:	f002 f95c 	bl	8003f2c <HAL_RCC_GetPCLK1Freq>
 8001c74:	6378      	str	r0, [r7, #52]	@ 0x34
 8001c76:	e004      	b.n	8001c82 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c78:	f002 f958 	bl	8003f2c <HAL_RCC_GetPCLK1Freq>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8001c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c84:	095b      	lsrs	r3, r3, #5
 8001c86:	4a21      	ldr	r2, [pc, #132]	@ (8001d0c <HAL_InitTick+0xdc>)
 8001c88:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8c:	09db      	lsrs	r3, r3, #7
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c92:	4b1f      	ldr	r3, [pc, #124]	@ (8001d10 <HAL_InitTick+0xe0>)
 8001c94:	4a1f      	ldr	r2, [pc, #124]	@ (8001d14 <HAL_InitTick+0xe4>)
 8001c96:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 8001c98:	4b1d      	ldr	r3, [pc, #116]	@ (8001d10 <HAL_InitTick+0xe0>)
 8001c9a:	2263      	movs	r2, #99	@ 0x63
 8001c9c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8001d10 <HAL_InitTick+0xe0>)
 8001ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d10 <HAL_InitTick+0xe0>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001caa:	4b19      	ldr	r3, [pc, #100]	@ (8001d10 <HAL_InitTick+0xe0>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001cb0:	4817      	ldr	r0, [pc, #92]	@ (8001d10 <HAL_InitTick+0xe0>)
 8001cb2:	f004 fda3 	bl	80067fc <HAL_TIM_Base_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001cbc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d118      	bne.n	8001cf6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001cc4:	4812      	ldr	r0, [pc, #72]	@ (8001d10 <HAL_InitTick+0xe0>)
 8001cc6:	f004 fdf1 	bl	80068ac <HAL_TIM_Base_Start_IT>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001cd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10e      	bne.n	8001cf6 <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b0f      	cmp	r3, #15
 8001cdc:	d808      	bhi.n	8001cf0 <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	2031      	movs	r0, #49	@ 0x31
 8001ce4:	f000 fb80 	bl	80023e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ce8:	4a0b      	ldr	r2, [pc, #44]	@ (8001d18 <HAL_InitTick+0xe8>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	e002      	b.n	8001cf6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001cf6:	2031      	movs	r0, #49	@ 0x31
 8001cf8:	f000 fb90 	bl	800241c <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8001cfc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3738      	adds	r7, #56	@ 0x38
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	44020c00 	.word	0x44020c00
 8001d0c:	0a7c5ac5 	.word	0x0a7c5ac5
 8001d10:	200001ec 	.word	0x200001ec
 8001d14:	40001000 	.word	0x40001000
 8001d18:	2000001c 	.word	0x2000001c

08001d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <NMI_Handler+0x4>

08001d24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d28:	bf00      	nop
 8001d2a:	e7fd      	b.n	8001d28 <HardFault_Handler+0x4>

08001d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d30:	bf00      	nop
 8001d32:	e7fd      	b.n	8001d30 <MemManage_Handler+0x4>

08001d34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d38:	bf00      	nop
 8001d3a:	e7fd      	b.n	8001d38 <BusFault_Handler+0x4>

08001d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <UsageFault_Handler+0x4>

08001d44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d58:	4802      	ldr	r0, [pc, #8]	@ (8001d64 <TIM6_IRQHandler+0x10>)
 8001d5a:	f005 f817 	bl	8006d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200001ec 	.word	0x200001ec

08001d68 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d6c:	4802      	ldr	r0, [pc, #8]	@ (8001d78 <TIM7_IRQHandler+0x10>)
 8001d6e:	f005 f80d 	bl	8006d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000288 	.word	0x20000288

08001d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d84:	4a14      	ldr	r2, [pc, #80]	@ (8001dd8 <_sbrk+0x5c>)
 8001d86:	4b15      	ldr	r3, [pc, #84]	@ (8001ddc <_sbrk+0x60>)
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d90:	4b13      	ldr	r3, [pc, #76]	@ (8001de0 <_sbrk+0x64>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d102      	bne.n	8001d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d98:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <_sbrk+0x64>)
 8001d9a:	4a12      	ldr	r2, [pc, #72]	@ (8001de4 <_sbrk+0x68>)
 8001d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d9e:	4b10      	ldr	r3, [pc, #64]	@ (8001de0 <_sbrk+0x64>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d207      	bcs.n	8001dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dac:	f008 fc64 	bl	800a678 <__errno>
 8001db0:	4603      	mov	r3, r0
 8001db2:	220c      	movs	r2, #12
 8001db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dba:	e009      	b.n	8001dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dbc:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <_sbrk+0x64>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dc2:	4b07      	ldr	r3, [pc, #28]	@ (8001de0 <_sbrk+0x64>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	4a05      	ldr	r2, [pc, #20]	@ (8001de0 <_sbrk+0x64>)
 8001dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dce:	68fb      	ldr	r3, [r7, #12]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	200a0000 	.word	0x200a0000
 8001ddc:	00000400 	.word	0x00000400
 8001de0:	20000238 	.word	0x20000238
 8001de4:	20002f58 	.word	0x20002f58

08001de8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001dee:	4b35      	ldr	r3, [pc, #212]	@ (8001ec4 <SystemInit+0xdc>)
 8001df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001df4:	4a33      	ldr	r2, [pc, #204]	@ (8001ec4 <SystemInit+0xdc>)
 8001df6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dfa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001dfe:	4b32      	ldr	r3, [pc, #200]	@ (8001ec8 <SystemInit+0xe0>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001e04:	4b30      	ldr	r3, [pc, #192]	@ (8001ec8 <SystemInit+0xe0>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ec8 <SystemInit+0xe0>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001e10:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec8 <SystemInit+0xe0>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	492c      	ldr	r1, [pc, #176]	@ (8001ec8 <SystemInit+0xe0>)
 8001e16:	4b2d      	ldr	r3, [pc, #180]	@ (8001ecc <SystemInit+0xe4>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec8 <SystemInit+0xe0>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001e22:	4b29      	ldr	r3, [pc, #164]	@ (8001ec8 <SystemInit+0xe0>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001e28:	4b27      	ldr	r3, [pc, #156]	@ (8001ec8 <SystemInit+0xe0>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001e2e:	4b26      	ldr	r3, [pc, #152]	@ (8001ec8 <SystemInit+0xe0>)
 8001e30:	4a27      	ldr	r2, [pc, #156]	@ (8001ed0 <SystemInit+0xe8>)
 8001e32:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001e34:	4b24      	ldr	r3, [pc, #144]	@ (8001ec8 <SystemInit+0xe0>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001e3a:	4b23      	ldr	r3, [pc, #140]	@ (8001ec8 <SystemInit+0xe0>)
 8001e3c:	4a24      	ldr	r2, [pc, #144]	@ (8001ed0 <SystemInit+0xe8>)
 8001e3e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001e40:	4b21      	ldr	r3, [pc, #132]	@ (8001ec8 <SystemInit+0xe0>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001e46:	4b20      	ldr	r3, [pc, #128]	@ (8001ec8 <SystemInit+0xe0>)
 8001e48:	4a21      	ldr	r2, [pc, #132]	@ (8001ed0 <SystemInit+0xe8>)
 8001e4a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec8 <SystemInit+0xe0>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001e52:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec8 <SystemInit+0xe0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec8 <SystemInit+0xe0>)
 8001e58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e5c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec8 <SystemInit+0xe0>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e64:	4b17      	ldr	r3, [pc, #92]	@ (8001ec4 <SystemInit+0xdc>)
 8001e66:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e6a:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001e6c:	4b19      	ldr	r3, [pc, #100]	@ (8001ed4 <SystemInit+0xec>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001e74:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001e7c:	d003      	beq.n	8001e86 <SystemInit+0x9e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001e84:	d117      	bne.n	8001eb6 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001e86:	4b13      	ldr	r3, [pc, #76]	@ (8001ed4 <SystemInit+0xec>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d005      	beq.n	8001e9e <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001e92:	4b10      	ldr	r3, [pc, #64]	@ (8001ed4 <SystemInit+0xec>)
 8001e94:	4a10      	ldr	r2, [pc, #64]	@ (8001ed8 <SystemInit+0xf0>)
 8001e96:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001e98:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed4 <SystemInit+0xec>)
 8001e9a:	4a10      	ldr	r2, [pc, #64]	@ (8001edc <SystemInit+0xf4>)
 8001e9c:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed4 <SystemInit+0xec>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	4a0c      	ldr	r2, [pc, #48]	@ (8001ed4 <SystemInit+0xec>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed4 <SystemInit+0xec>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	4a09      	ldr	r2, [pc, #36]	@ (8001ed4 <SystemInit+0xec>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	61d3      	str	r3, [r2, #28]
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00
 8001ec8:	44020c00 	.word	0x44020c00
 8001ecc:	eae2eae3 	.word	0xeae2eae3
 8001ed0:	01010280 	.word	0x01010280
 8001ed4:	40022000 	.word	0x40022000
 8001ed8:	08192a3b 	.word	0x08192a3b
 8001edc:	4c5d6e7f 	.word	0x4c5d6e7f

08001ee0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08e      	sub	sp, #56	@ 0x38
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ee6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	609a      	str	r2, [r3, #8]
 8001ef2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef4:	f107 031c 	add.w	r3, r7, #28
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f00:	463b      	mov	r3, r7
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	60da      	str	r2, [r3, #12]
 8001f0c:	611a      	str	r2, [r3, #16]
 8001f0e:	615a      	str	r2, [r3, #20]
 8001f10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f12:	4b33      	ldr	r3, [pc, #204]	@ (8001fe0 <MX_TIM3_Init+0x100>)
 8001f14:	4a33      	ldr	r2, [pc, #204]	@ (8001fe4 <MX_TIM3_Init+0x104>)
 8001f16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 8001f18:	4b31      	ldr	r3, [pc, #196]	@ (8001fe0 <MX_TIM3_Init+0x100>)
 8001f1a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001f1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f20:	4b2f      	ldr	r3, [pc, #188]	@ (8001fe0 <MX_TIM3_Init+0x100>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001f26:	4b2e      	ldr	r3, [pc, #184]	@ (8001fe0 <MX_TIM3_Init+0x100>)
 8001f28:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001f2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001fe0 <MX_TIM3_Init+0x100>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f34:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe0 <MX_TIM3_Init+0x100>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f3a:	4829      	ldr	r0, [pc, #164]	@ (8001fe0 <MX_TIM3_Init+0x100>)
 8001f3c:	f004 fc5e 	bl	80067fc <HAL_TIM_Base_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001f46:	f7ff f937 	bl	80011b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f50:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f54:	4619      	mov	r1, r3
 8001f56:	4822      	ldr	r0, [pc, #136]	@ (8001fe0 <MX_TIM3_Init+0x100>)
 8001f58:	f005 f97c 	bl	8007254 <HAL_TIM_ConfigClockSource>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001f62:	f7ff f929 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f66:	481e      	ldr	r0, [pc, #120]	@ (8001fe0 <MX_TIM3_Init+0x100>)
 8001f68:	f004 fd4e 	bl	8006a08 <HAL_TIM_PWM_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001f72:	f7ff f921 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f7e:	f107 031c 	add.w	r3, r7, #28
 8001f82:	4619      	mov	r1, r3
 8001f84:	4816      	ldr	r0, [pc, #88]	@ (8001fe0 <MX_TIM3_Init+0x100>)
 8001f86:	f006 f86d 	bl	8008064 <HAL_TIMEx_MasterConfigSynchronization>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001f90:	f7ff f912 	bl	80011b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f94:	2360      	movs	r3, #96	@ 0x60
 8001f96:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fa4:	463b      	mov	r3, r7
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	4619      	mov	r1, r3
 8001faa:	480d      	ldr	r0, [pc, #52]	@ (8001fe0 <MX_TIM3_Init+0x100>)
 8001fac:	f005 f83e 	bl	800702c <HAL_TIM_PWM_ConfigChannel>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001fb6:	f7ff f8ff 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fba:	463b      	mov	r3, r7
 8001fbc:	2204      	movs	r2, #4
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4807      	ldr	r0, [pc, #28]	@ (8001fe0 <MX_TIM3_Init+0x100>)
 8001fc2:	f005 f833 	bl	800702c <HAL_TIM_PWM_ConfigChannel>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001fcc:	f7ff f8f4 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001fd0:	4803      	ldr	r0, [pc, #12]	@ (8001fe0 <MX_TIM3_Init+0x100>)
 8001fd2:	f000 f881 	bl	80020d8 <HAL_TIM_MspPostInit>

}
 8001fd6:	bf00      	nop
 8001fd8:	3738      	adds	r7, #56	@ 0x38
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	2000023c 	.word	0x2000023c
 8001fe4:	40000400 	.word	0x40000400

08001fe8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001ff8:	4b15      	ldr	r3, [pc, #84]	@ (8002050 <MX_TIM7_Init+0x68>)
 8001ffa:	4a16      	ldr	r2, [pc, #88]	@ (8002054 <MX_TIM7_Init+0x6c>)
 8001ffc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2000;
 8001ffe:	4b14      	ldr	r3, [pc, #80]	@ (8002050 <MX_TIM7_Init+0x68>)
 8002000:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002004:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002006:	4b12      	ldr	r3, [pc, #72]	@ (8002050 <MX_TIM7_Init+0x68>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 62500;
 800200c:	4b10      	ldr	r3, [pc, #64]	@ (8002050 <MX_TIM7_Init+0x68>)
 800200e:	f24f 4224 	movw	r2, #62500	@ 0xf424
 8002012:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002014:	4b0e      	ldr	r3, [pc, #56]	@ (8002050 <MX_TIM7_Init+0x68>)
 8002016:	2280      	movs	r2, #128	@ 0x80
 8002018:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800201a:	480d      	ldr	r0, [pc, #52]	@ (8002050 <MX_TIM7_Init+0x68>)
 800201c:	f004 fbee 	bl	80067fc <HAL_TIM_Base_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002026:	f7ff f8c7 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	4619      	mov	r1, r3
 8002036:	4806      	ldr	r0, [pc, #24]	@ (8002050 <MX_TIM7_Init+0x68>)
 8002038:	f006 f814 	bl	8008064 <HAL_TIMEx_MasterConfigSynchronization>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002042:	f7ff f8b9 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000288 	.word	0x20000288
 8002054:	40001400 	.word	0x40001400

08002058 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a19      	ldr	r2, [pc, #100]	@ (80020cc <HAL_TIM_Base_MspInit+0x74>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d10f      	bne.n	800208a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800206a:	4b19      	ldr	r3, [pc, #100]	@ (80020d0 <HAL_TIM_Base_MspInit+0x78>)
 800206c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002070:	4a17      	ldr	r2, [pc, #92]	@ (80020d0 <HAL_TIM_Base_MspInit+0x78>)
 8002072:	f043 0302 	orr.w	r3, r3, #2
 8002076:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800207a:	4b15      	ldr	r3, [pc, #84]	@ (80020d0 <HAL_TIM_Base_MspInit+0x78>)
 800207c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002088:	e01b      	b.n	80020c2 <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM7)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a11      	ldr	r2, [pc, #68]	@ (80020d4 <HAL_TIM_Base_MspInit+0x7c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d116      	bne.n	80020c2 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002094:	4b0e      	ldr	r3, [pc, #56]	@ (80020d0 <HAL_TIM_Base_MspInit+0x78>)
 8002096:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800209a:	4a0d      	ldr	r2, [pc, #52]	@ (80020d0 <HAL_TIM_Base_MspInit+0x78>)
 800209c:	f043 0320 	orr.w	r3, r3, #32
 80020a0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80020a4:	4b0a      	ldr	r3, [pc, #40]	@ (80020d0 <HAL_TIM_Base_MspInit+0x78>)
 80020a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020aa:	f003 0320 	and.w	r3, r3, #32
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2105      	movs	r1, #5
 80020b6:	2032      	movs	r0, #50	@ 0x32
 80020b8:	f000 f996 	bl	80023e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80020bc:	2032      	movs	r0, #50	@ 0x32
 80020be:	f000 f9ad 	bl	800241c <HAL_NVIC_EnableIRQ>
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40000400 	.word	0x40000400
 80020d0:	44020c00 	.word	0x44020c00
 80020d4:	40001400 	.word	0x40001400

080020d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	f107 030c 	add.w	r3, r7, #12
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a12      	ldr	r2, [pc, #72]	@ (8002140 <HAL_TIM_MspPostInit+0x68>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d11e      	bne.n	8002138 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020fa:	4b12      	ldr	r3, [pc, #72]	@ (8002144 <HAL_TIM_MspPostInit+0x6c>)
 80020fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002100:	4a10      	ldr	r2, [pc, #64]	@ (8002144 <HAL_TIM_MspPostInit+0x6c>)
 8002102:	f043 0304 	orr.w	r3, r3, #4
 8002106:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800210a:	4b0e      	ldr	r3, [pc, #56]	@ (8002144 <HAL_TIM_MspPostInit+0x6c>)
 800210c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = SG_ENTER_Pin|SG_EXIT_Pin;
 8002118:	23c0      	movs	r3, #192	@ 0xc0
 800211a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	2300      	movs	r3, #0
 8002126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002128:	2302      	movs	r3, #2
 800212a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800212c:	f107 030c 	add.w	r3, r7, #12
 8002130:	4619      	mov	r1, r3
 8002132:	4805      	ldr	r0, [pc, #20]	@ (8002148 <HAL_TIM_MspPostInit+0x70>)
 8002134:	f000 f9d8 	bl	80024e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002138:	bf00      	nop
 800213a:	3720      	adds	r7, #32
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40000400 	.word	0x40000400
 8002144:	44020c00 	.word	0x44020c00
 8002148:	42020800 	.word	0x42020800

0800214c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800214c:	480d      	ldr	r0, [pc, #52]	@ (8002184 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800214e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002150:	f7ff fe4a 	bl	8001de8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002154:	480c      	ldr	r0, [pc, #48]	@ (8002188 <LoopForever+0x6>)
  ldr r1, =_edata
 8002156:	490d      	ldr	r1, [pc, #52]	@ (800218c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002158:	4a0d      	ldr	r2, [pc, #52]	@ (8002190 <LoopForever+0xe>)
  movs r3, #0
 800215a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800215c:	e002      	b.n	8002164 <LoopCopyDataInit>

0800215e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800215e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002162:	3304      	adds	r3, #4

08002164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002168:	d3f9      	bcc.n	800215e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800216a:	4a0a      	ldr	r2, [pc, #40]	@ (8002194 <LoopForever+0x12>)
  ldr r4, =_ebss
 800216c:	4c0a      	ldr	r4, [pc, #40]	@ (8002198 <LoopForever+0x16>)
  movs r3, #0
 800216e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002170:	e001      	b.n	8002176 <LoopFillZerobss>

08002172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002174:	3204      	adds	r2, #4

08002176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002178:	d3fb      	bcc.n	8002172 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800217a:	f008 fa83 	bl	800a684 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800217e:	f7fe feed 	bl	8000f5c <main>

08002182 <LoopForever>:

LoopForever:
    b LoopForever
 8002182:	e7fe      	b.n	8002182 <LoopForever>
  ldr   r0, =_estack
 8002184:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800218c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002190:	0800b0d8 	.word	0x0800b0d8
  ldr r2, =_sbss
 8002194:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002198:	20002f58 	.word	0x20002f58

0800219c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800219c:	e7fe      	b.n	800219c <ADC1_IRQHandler>
	...

080021a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a4:	2003      	movs	r0, #3
 80021a6:	f000 f914 	bl	80023d2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80021aa:	f001 fd77 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 80021ae:	4602      	mov	r2, r0
 80021b0:	4b0c      	ldr	r3, [pc, #48]	@ (80021e4 <HAL_Init+0x44>)
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	490b      	ldr	r1, [pc, #44]	@ (80021e8 <HAL_Init+0x48>)
 80021ba:	5ccb      	ldrb	r3, [r1, r3]
 80021bc:	fa22 f303 	lsr.w	r3, r2, r3
 80021c0:	4a0a      	ldr	r2, [pc, #40]	@ (80021ec <HAL_Init+0x4c>)
 80021c2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80021c4:	2004      	movs	r0, #4
 80021c6:	f000 f937 	bl	8002438 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021ca:	200f      	movs	r0, #15
 80021cc:	f7ff fd30 	bl	8001c30 <HAL_InitTick>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e002      	b.n	80021e0 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80021da:	f7ff fd1f 	bl	8001c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	44020c00 	.word	0x44020c00
 80021e8:	0800b080 	.word	0x0800b080
 80021ec:	20000018 	.word	0x20000018

080021f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021f4:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <HAL_IncTick+0x20>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <HAL_IncTick+0x24>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4413      	add	r3, r2
 8002200:	4a04      	ldr	r2, [pc, #16]	@ (8002214 <HAL_IncTick+0x24>)
 8002202:	6013      	str	r3, [r2, #0]
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000020 	.word	0x20000020
 8002214:	200002d4 	.word	0x200002d4

08002218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return uwTick;
 800221c:	4b03      	ldr	r3, [pc, #12]	@ (800222c <HAL_GetTick+0x14>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	200002d4 	.word	0x200002d4

08002230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002238:	f7ff ffee 	bl	8002218 <HAL_GetTick>
 800223c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d005      	beq.n	8002256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224a:	4b0a      	ldr	r3, [pc, #40]	@ (8002274 <HAL_Delay+0x44>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4413      	add	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002256:	bf00      	nop
 8002258:	f7ff ffde 	bl	8002218 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	429a      	cmp	r2, r3
 8002266:	d8f7      	bhi.n	8002258 <HAL_Delay+0x28>
  {
  }
}
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000020 	.word	0x20000020

08002278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002288:	4b0c      	ldr	r3, [pc, #48]	@ (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002294:	4013      	ands	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022aa:	4a04      	ldr	r2, [pc, #16]	@ (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	60d3      	str	r3, [r2, #12]
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c4:	4b04      	ldr	r3, [pc, #16]	@ (80022d8 <__NVIC_GetPriorityGrouping+0x18>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	f003 0307 	and.w	r3, r3, #7
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	db0b      	blt.n	8002306 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ee:	88fb      	ldrh	r3, [r7, #6]
 80022f0:	f003 021f 	and.w	r2, r3, #31
 80022f4:	4907      	ldr	r1, [pc, #28]	@ (8002314 <__NVIC_EnableIRQ+0x38>)
 80022f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	2001      	movs	r0, #1
 80022fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000e100 	.word	0xe000e100

08002318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	6039      	str	r1, [r7, #0]
 8002322:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002324:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002328:	2b00      	cmp	r3, #0
 800232a:	db0a      	blt.n	8002342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	b2da      	uxtb	r2, r3
 8002330:	490c      	ldr	r1, [pc, #48]	@ (8002364 <__NVIC_SetPriority+0x4c>)
 8002332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002336:	0112      	lsls	r2, r2, #4
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	440b      	add	r3, r1
 800233c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002340:	e00a      	b.n	8002358 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4908      	ldr	r1, [pc, #32]	@ (8002368 <__NVIC_SetPriority+0x50>)
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	3b04      	subs	r3, #4
 8002350:	0112      	lsls	r2, r2, #4
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	440b      	add	r3, r1
 8002356:	761a      	strb	r2, [r3, #24]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000e100 	.word	0xe000e100
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800236c:	b480      	push	{r7}
 800236e:	b089      	sub	sp, #36	@ 0x24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f1c3 0307 	rsb	r3, r3, #7
 8002386:	2b04      	cmp	r3, #4
 8002388:	bf28      	it	cs
 800238a:	2304      	movcs	r3, #4
 800238c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3304      	adds	r3, #4
 8002392:	2b06      	cmp	r3, #6
 8002394:	d902      	bls.n	800239c <NVIC_EncodePriority+0x30>
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3b03      	subs	r3, #3
 800239a:	e000      	b.n	800239e <NVIC_EncodePriority+0x32>
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	f04f 32ff 	mov.w	r2, #4294967295
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43da      	mvns	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	401a      	ands	r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b4:	f04f 31ff 	mov.w	r1, #4294967295
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	fa01 f303 	lsl.w	r3, r1, r3
 80023be:	43d9      	mvns	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	4313      	orrs	r3, r2
         );
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3724      	adds	r7, #36	@ 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ff4c 	bl	8002278 <__NVIC_SetPriorityGrouping>
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023f6:	f7ff ff63 	bl	80022c0 <__NVIC_GetPriorityGrouping>
 80023fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	68b9      	ldr	r1, [r7, #8]
 8002400:	6978      	ldr	r0, [r7, #20]
 8002402:	f7ff ffb3 	bl	800236c <NVIC_EncodePriority>
 8002406:	4602      	mov	r2, r0
 8002408:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800240c:	4611      	mov	r1, r2
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff ff82 	bl	8002318 <__NVIC_SetPriority>
}
 8002414:	bf00      	nop
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002426:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff ff56 	bl	80022dc <__NVIC_EnableIRQ>
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b04      	cmp	r3, #4
 8002444:	d844      	bhi.n	80024d0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002446:	a201      	add	r2, pc, #4	@ (adr r2, 800244c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244c:	0800246f 	.word	0x0800246f
 8002450:	0800248d 	.word	0x0800248d
 8002454:	080024af 	.word	0x080024af
 8002458:	080024d1 	.word	0x080024d1
 800245c:	08002461 	.word	0x08002461
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002460:	4b1f      	ldr	r3, [pc, #124]	@ (80024e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a1e      	ldr	r2, [pc, #120]	@ (80024e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002466:	f043 0304 	orr.w	r3, r3, #4
 800246a:	6013      	str	r3, [r2, #0]
      break;
 800246c:	e031      	b.n	80024d2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800246e:	4b1c      	ldr	r3, [pc, #112]	@ (80024e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a1b      	ldr	r2, [pc, #108]	@ (80024e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002474:	f023 0304 	bic.w	r3, r3, #4
 8002478:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800247a:	4b1a      	ldr	r3, [pc, #104]	@ (80024e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800247c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002480:	4a18      	ldr	r2, [pc, #96]	@ (80024e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002482:	f023 030c 	bic.w	r3, r3, #12
 8002486:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800248a:	e022      	b.n	80024d2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800248c:	4b14      	ldr	r3, [pc, #80]	@ (80024e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a13      	ldr	r2, [pc, #76]	@ (80024e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002492:	f023 0304 	bic.w	r3, r3, #4
 8002496:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002498:	4b12      	ldr	r3, [pc, #72]	@ (80024e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800249a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800249e:	f023 030c 	bic.w	r3, r3, #12
 80024a2:	4a10      	ldr	r2, [pc, #64]	@ (80024e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80024a4:	f043 0304 	orr.w	r3, r3, #4
 80024a8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80024ac:	e011      	b.n	80024d2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80024ae:	4b0c      	ldr	r3, [pc, #48]	@ (80024e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a0b      	ldr	r2, [pc, #44]	@ (80024e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80024b4:	f023 0304 	bic.w	r3, r3, #4
 80024b8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80024ba:	4b0a      	ldr	r3, [pc, #40]	@ (80024e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80024bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80024c0:	f023 030c 	bic.w	r3, r3, #12
 80024c4:	4a07      	ldr	r2, [pc, #28]	@ (80024e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80024c6:	f043 0308 	orr.w	r3, r3, #8
 80024ca:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80024ce:	e000      	b.n	80024d2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80024d0:	bf00      	nop
  }
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	e000e010 	.word	0xe000e010
 80024e4:	44020c00 	.word	0x44020c00

080024e8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b087      	sub	sp, #28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80024f6:	e142      	b.n	800277e <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	2101      	movs	r1, #1
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	fa01 f303 	lsl.w	r3, r1, r3
 8002504:	4013      	ands	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 8134 	beq.w	8002778 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_Init+0x38>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b12      	cmp	r3, #18
 800251e:	d125      	bne.n	800256c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	08da      	lsrs	r2, r3, #3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3208      	adds	r2, #8
 8002528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800252c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	220f      	movs	r2, #15
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4013      	ands	r3, r2
 8002542:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	f003 020f 	and.w	r2, r3, #15
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	4313      	orrs	r3, r2
 800255c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	08da      	lsrs	r2, r3, #3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3208      	adds	r2, #8
 8002566:	6979      	ldr	r1, [r7, #20]
 8002568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	2203      	movs	r2, #3
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4013      	ands	r3, r2
 8002582:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0203 	and.w	r2, r3, #3
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	4313      	orrs	r3, r2
 8002598:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d00b      	beq.n	80025c0 <HAL_GPIO_Init+0xd8>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d007      	beq.n	80025c0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025b4:	2b11      	cmp	r3, #17
 80025b6:	d003      	beq.n	80025c0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b12      	cmp	r3, #18
 80025be:	d130      	bne.n	8002622 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	2203      	movs	r2, #3
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4013      	ands	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025f6:	2201      	movs	r2, #1
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	4013      	ands	r3, r2
 8002604:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	091b      	lsrs	r3, r3, #4
 800260c:	f003 0201 	and.w	r2, r3, #1
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	4313      	orrs	r3, r2
 800261a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	2b03      	cmp	r3, #3
 800262c:	d109      	bne.n	8002642 <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8002636:	2b03      	cmp	r3, #3
 8002638:	d11b      	bne.n	8002672 <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d017      	beq.n	8002672 <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	2203      	movs	r2, #3
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	4013      	ands	r3, r2
 8002658:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d07c      	beq.n	8002778 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800267e:	4a47      	ldr	r2, [pc, #284]	@ (800279c <HAL_GPIO_Init+0x2b4>)
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	3318      	adds	r3, #24
 8002686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	220f      	movs	r2, #15
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	4013      	ands	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	0a9a      	lsrs	r2, r3, #10
 80026a6:	4b3e      	ldr	r3, [pc, #248]	@ (80027a0 <HAL_GPIO_Init+0x2b8>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	f002 0203 	and.w	r2, r2, #3
 80026b0:	00d2      	lsls	r2, r2, #3
 80026b2:	4093      	lsls	r3, r2
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80026ba:	4938      	ldr	r1, [pc, #224]	@ (800279c <HAL_GPIO_Init+0x2b4>)
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	3318      	adds	r3, #24
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80026c8:	4b34      	ldr	r3, [pc, #208]	@ (800279c <HAL_GPIO_Init+0x2b4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4013      	ands	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80026ec:	4a2b      	ldr	r2, [pc, #172]	@ (800279c <HAL_GPIO_Init+0x2b4>)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80026f2:	4b2a      	ldr	r3, [pc, #168]	@ (800279c <HAL_GPIO_Init+0x2b4>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	43db      	mvns	r3, r3
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	4013      	ands	r3, r2
 8002700:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002716:	4a21      	ldr	r2, [pc, #132]	@ (800279c <HAL_GPIO_Init+0x2b4>)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800271c:	4b1f      	ldr	r3, [pc, #124]	@ (800279c <HAL_GPIO_Init+0x2b4>)
 800271e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002722:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	43db      	mvns	r3, r3
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	4013      	ands	r3, r2
 800272c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4313      	orrs	r3, r2
 8002740:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002742:	4a16      	ldr	r2, [pc, #88]	@ (800279c <HAL_GPIO_Init+0x2b4>)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800274a:	4b14      	ldr	r3, [pc, #80]	@ (800279c <HAL_GPIO_Init+0x2b4>)
 800274c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002750:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	43db      	mvns	r3, r3
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	4013      	ands	r3, r2
 800275a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4313      	orrs	r3, r2
 800276e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002770:	4a0a      	ldr	r2, [pc, #40]	@ (800279c <HAL_GPIO_Init+0x2b4>)
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	3301      	adds	r3, #1
 800277c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	f47f aeb5 	bne.w	80024f8 <HAL_GPIO_Init+0x10>
  }
}
 800278e:	bf00      	nop
 8002790:	bf00      	nop
 8002792:	371c      	adds	r7, #28
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	44022000 	.word	0x44022000
 80027a0:	002f7f7f 	.word	0x002f7f7f

080027a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	887b      	ldrh	r3, [r7, #2]
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d002      	beq.n	80027c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
 80027c0:	e001      	b.n	80027c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027c2:	2300      	movs	r3, #0
 80027c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	807b      	strh	r3, [r7, #2]
 80027e0:	4613      	mov	r3, r2
 80027e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027e4:	787b      	ldrb	r3, [r7, #1]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027ea:	887a      	ldrh	r2, [r7, #2]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027f0:	e002      	b.n	80027f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027f2:	887a      	ldrh	r2, [r7, #2]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002816:	887a      	ldrh	r2, [r7, #2]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4013      	ands	r3, r2
 800281c:	041a      	lsls	r2, r3, #16
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	43d9      	mvns	r1, r3
 8002822:	887b      	ldrh	r3, [r7, #2]
 8002824:	400b      	ands	r3, r1
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	619a      	str	r2, [r3, #24]
}
 800282c:	bf00      	nop
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e08d      	b.n	8002966 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d106      	bne.n	8002864 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7fe f8ea 	bl	8000a38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2224      	movs	r2, #36	@ 0x24
 8002868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0201 	bic.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002888:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002898:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d107      	bne.n	80028b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	e006      	b.n	80028c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80028be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d108      	bne.n	80028da <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028d6:	605a      	str	r2, [r3, #4]
 80028d8:	e007      	b.n	80028ea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800290c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69d9      	ldr	r1, [r3, #28]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1a      	ldr	r2, [r3, #32]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0201 	orr.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2220      	movs	r2, #32
 8002952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af02      	add	r7, sp, #8
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	461a      	mov	r2, r3
 800297c:	460b      	mov	r3, r1
 800297e:	817b      	strh	r3, [r7, #10]
 8002980:	4613      	mov	r3, r2
 8002982:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b20      	cmp	r3, #32
 800298e:	f040 80da 	bne.w	8002b46 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_I2C_Master_Transmit+0x30>
 800299c:	2302      	movs	r3, #2
 800299e:	e0d3      	b.n	8002b48 <HAL_I2C_Master_Transmit+0x1d8>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029a8:	f7ff fc36 	bl	8002218 <HAL_GetTick>
 80029ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	2319      	movs	r3, #25
 80029b4:	2201      	movs	r2, #1
 80029b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f8f0 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e0be      	b.n	8002b48 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2221      	movs	r2, #33	@ 0x21
 80029ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2210      	movs	r2, #16
 80029d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	893a      	ldrh	r2, [r7, #8]
 80029ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	2bff      	cmp	r3, #255	@ 0xff
 80029fa:	d90e      	bls.n	8002a1a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	22ff      	movs	r2, #255	@ 0xff
 8002a00:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	8979      	ldrh	r1, [r7, #10]
 8002a0a:	4b51      	ldr	r3, [pc, #324]	@ (8002b50 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 fa88 	bl	8002f28 <I2C_TransferConfig>
 8002a18:	e06c      	b.n	8002af4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	8979      	ldrh	r1, [r7, #10]
 8002a2c:	4b48      	ldr	r3, [pc, #288]	@ (8002b50 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fa77 	bl	8002f28 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002a3a:	e05b      	b.n	8002af4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	6a39      	ldr	r1, [r7, #32]
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 f906 	bl	8002c52 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e07b      	b.n	8002b48 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a54:	781a      	ldrb	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d034      	beq.n	8002af4 <HAL_I2C_Master_Transmit+0x184>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d130      	bne.n	8002af4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2180      	movs	r1, #128	@ 0x80
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 f87f 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e04d      	b.n	8002b48 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2bff      	cmp	r3, #255	@ 0xff
 8002ab4:	d90e      	bls.n	8002ad4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	22ff      	movs	r2, #255	@ 0xff
 8002aba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	8979      	ldrh	r1, [r7, #10]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 fa2b 	bl	8002f28 <I2C_TransferConfig>
 8002ad2:	e00f      	b.n	8002af4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	8979      	ldrh	r1, [r7, #10]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 fa1a 	bl	8002f28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d19e      	bne.n	8002a3c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	6a39      	ldr	r1, [r7, #32]
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f8ec 	bl	8002ce0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e01a      	b.n	8002b48 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2220      	movs	r2, #32
 8002b18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6859      	ldr	r1, [r3, #4]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4b0b      	ldr	r3, [pc, #44]	@ (8002b54 <HAL_I2C_Master_Transmit+0x1e4>)
 8002b26:	400b      	ands	r3, r1
 8002b28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	e000      	b.n	8002b48 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002b46:	2302      	movs	r3, #2
  }
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	80002000 	.word	0x80002000
 8002b54:	fe00e800 	.word	0xfe00e800

08002b58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d103      	bne.n	8002b76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2200      	movs	r2, #0
 8002b74:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d007      	beq.n	8002b94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699a      	ldr	r2, [r3, #24]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	619a      	str	r2, [r3, #24]
  }
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	4613      	mov	r3, r2
 8002bae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bb0:	e03b      	b.n	8002c2a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	6839      	ldr	r1, [r7, #0]
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f8d6 	bl	8002d68 <I2C_IsErrorOccurred>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e041      	b.n	8002c4a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bcc:	d02d      	beq.n	8002c2a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bce:	f7ff fb23 	bl	8002218 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d302      	bcc.n	8002be4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d122      	bne.n	8002c2a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	699a      	ldr	r2, [r3, #24]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	4013      	ands	r3, r2
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	bf0c      	ite	eq
 8002bf4:	2301      	moveq	r3, #1
 8002bf6:	2300      	movne	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	79fb      	ldrb	r3, [r7, #7]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d113      	bne.n	8002c2a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c06:	f043 0220 	orr.w	r2, r3, #32
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e00f      	b.n	8002c4a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	699a      	ldr	r2, [r3, #24]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4013      	ands	r3, r2
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	bf0c      	ite	eq
 8002c3a:	2301      	moveq	r3, #1
 8002c3c:	2300      	movne	r3, #0
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d0b4      	beq.n	8002bb2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b084      	sub	sp, #16
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c5e:	e033      	b.n	8002cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	68b9      	ldr	r1, [r7, #8]
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 f87f 	bl	8002d68 <I2C_IsErrorOccurred>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e031      	b.n	8002cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7a:	d025      	beq.n	8002cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7c:	f7ff facc 	bl	8002218 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d302      	bcc.n	8002c92 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d11a      	bne.n	8002cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d013      	beq.n	8002cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca4:	f043 0220 	orr.w	r2, r3, #32
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e007      	b.n	8002cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d1c4      	bne.n	8002c60 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cec:	e02f      	b.n	8002d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f838 	bl	8002d68 <I2C_IsErrorOccurred>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e02d      	b.n	8002d5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d02:	f7ff fa89 	bl	8002218 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d302      	bcc.n	8002d18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d11a      	bne.n	8002d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	f003 0320 	and.w	r3, r3, #32
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	d013      	beq.n	8002d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2a:	f043 0220 	orr.w	r2, r3, #32
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2220      	movs	r2, #32
 8002d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e007      	b.n	8002d5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	f003 0320 	and.w	r3, r3, #32
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	d1c8      	bne.n	8002cee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08a      	sub	sp, #40	@ 0x28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d74:	2300      	movs	r3, #0
 8002d76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d82:	2300      	movs	r3, #0
 8002d84:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d068      	beq.n	8002e66 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2210      	movs	r2, #16
 8002d9a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d9c:	e049      	b.n	8002e32 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da4:	d045      	beq.n	8002e32 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002da6:	f7ff fa37 	bl	8002218 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d302      	bcc.n	8002dbc <I2C_IsErrorOccurred+0x54>
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d13a      	bne.n	8002e32 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dc6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002dce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dde:	d121      	bne.n	8002e24 <I2C_IsErrorOccurred+0xbc>
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002de6:	d01d      	beq.n	8002e24 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002de8:	7cfb      	ldrb	r3, [r7, #19]
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	d01a      	beq.n	8002e24 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002dfc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002dfe:	f7ff fa0b 	bl	8002218 <HAL_GetTick>
 8002e02:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e04:	e00e      	b.n	8002e24 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e06:	f7ff fa07 	bl	8002218 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b19      	cmp	r3, #25
 8002e12:	d907      	bls.n	8002e24 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	f043 0320 	orr.w	r3, r3, #32
 8002e1a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002e22:	e006      	b.n	8002e32 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	f003 0320 	and.w	r3, r3, #32
 8002e2e:	2b20      	cmp	r3, #32
 8002e30:	d1e9      	bne.n	8002e06 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f003 0320 	and.w	r3, r3, #32
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d003      	beq.n	8002e48 <I2C_IsErrorOccurred+0xe0>
 8002e40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0aa      	beq.n	8002d9e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d103      	bne.n	8002e58 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2220      	movs	r2, #32
 8002e56:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	f043 0304 	orr.w	r3, r3, #4
 8002e5e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00b      	beq.n	8002e90 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00b      	beq.n	8002eb2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	f043 0308 	orr.w	r3, r3, #8
 8002ea0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002eaa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00b      	beq.n	8002ed4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	f043 0302 	orr.w	r3, r3, #2
 8002ec2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ecc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d01c      	beq.n	8002f16 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f7ff fe3b 	bl	8002b58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b0d      	ldr	r3, [pc, #52]	@ (8002f24 <I2C_IsErrorOccurred+0x1bc>)
 8002eee:	400b      	ands	r3, r1
 8002ef0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002f16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3728      	adds	r7, #40	@ 0x28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	fe00e800 	.word	0xfe00e800

08002f28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	607b      	str	r3, [r7, #4]
 8002f32:	460b      	mov	r3, r1
 8002f34:	817b      	strh	r3, [r7, #10]
 8002f36:	4613      	mov	r3, r2
 8002f38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f3a:	897b      	ldrh	r3, [r7, #10]
 8002f3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f40:	7a7b      	ldrb	r3, [r7, #9]
 8002f42:	041b      	lsls	r3, r3, #16
 8002f44:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f48:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f56:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	0d5b      	lsrs	r3, r3, #21
 8002f62:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002f66:	4b08      	ldr	r3, [pc, #32]	@ (8002f88 <I2C_TransferConfig+0x60>)
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	ea02 0103 	and.w	r1, r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f7a:	bf00      	nop
 8002f7c:	371c      	adds	r7, #28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	03ff63ff 	.word	0x03ff63ff

08002f8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b20      	cmp	r3, #32
 8002fa0:	d138      	bne.n	8003014 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e032      	b.n	8003016 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2224      	movs	r2, #36	@ 0x24
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002fde:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6819      	ldr	r1, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	e000      	b.n	8003016 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003014:	2302      	movs	r3, #2
  }
}
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003022:	b480      	push	{r7}
 8003024:	b085      	sub	sp, #20
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b20      	cmp	r3, #32
 8003036:	d139      	bne.n	80030ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003042:	2302      	movs	r3, #2
 8003044:	e033      	b.n	80030ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2224      	movs	r2, #36	@ 0x24
 8003052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0201 	bic.w	r2, r2, #1
 8003064:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003074:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4313      	orrs	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0201 	orr.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	e000      	b.n	80030ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030ac:	2302      	movs	r3, #2
  }
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
	...

080030bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d102      	bne.n	80030d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	f000 bc28 	b.w	8003920 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030d0:	4b94      	ldr	r3, [pc, #592]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	f003 0318 	and.w	r3, r3, #24
 80030d8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80030da:	4b92      	ldr	r3, [pc, #584]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 80030dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d05b      	beq.n	80031a8 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	d005      	beq.n	8003102 <HAL_RCC_OscConfig+0x46>
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	2b18      	cmp	r3, #24
 80030fa:	d114      	bne.n	8003126 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d111      	bne.n	8003126 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d102      	bne.n	8003110 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	f000 bc08 	b.w	8003920 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003110:	4b84      	ldr	r3, [pc, #528]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	041b      	lsls	r3, r3, #16
 800311e:	4981      	ldr	r1, [pc, #516]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 8003120:	4313      	orrs	r3, r2
 8003122:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003124:	e040      	b.n	80031a8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d023      	beq.n	8003176 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800312e:	4b7d      	ldr	r3, [pc, #500]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a7c      	ldr	r2, [pc, #496]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 8003134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313a:	f7ff f86d 	bl	8002218 <HAL_GetTick>
 800313e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003142:	f7ff f869 	bl	8002218 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e3e5      	b.n	8003920 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003154:	4b73      	ldr	r3, [pc, #460]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0f0      	beq.n	8003142 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003160:	4b70      	ldr	r3, [pc, #448]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	041b      	lsls	r3, r3, #16
 800316e:	496d      	ldr	r1, [pc, #436]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 8003170:	4313      	orrs	r3, r2
 8003172:	618b      	str	r3, [r1, #24]
 8003174:	e018      	b.n	80031a8 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003176:	4b6b      	ldr	r3, [pc, #428]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a6a      	ldr	r2, [pc, #424]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 800317c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003182:	f7ff f849 	bl	8002218 <HAL_GetTick>
 8003186:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800318a:	f7ff f845 	bl	8002218 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e3c1      	b.n	8003920 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800319c:	4b61      	ldr	r3, [pc, #388]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1f0      	bne.n	800318a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 80a0 	beq.w	80032f6 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	2b10      	cmp	r3, #16
 80031ba:	d005      	beq.n	80031c8 <HAL_RCC_OscConfig+0x10c>
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	2b18      	cmp	r3, #24
 80031c0:	d109      	bne.n	80031d6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d106      	bne.n	80031d6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f040 8092 	bne.w	80032f6 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e3a4      	b.n	8003920 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031de:	d106      	bne.n	80031ee <HAL_RCC_OscConfig+0x132>
 80031e0:	4b50      	ldr	r3, [pc, #320]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a4f      	ldr	r2, [pc, #316]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 80031e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	e058      	b.n	80032a0 <HAL_RCC_OscConfig+0x1e4>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d112      	bne.n	800321c <HAL_RCC_OscConfig+0x160>
 80031f6:	4b4b      	ldr	r3, [pc, #300]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a4a      	ldr	r2, [pc, #296]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 80031fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	4b48      	ldr	r3, [pc, #288]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a47      	ldr	r2, [pc, #284]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 8003208:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	4b45      	ldr	r3, [pc, #276]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a44      	ldr	r2, [pc, #272]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 8003214:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	e041      	b.n	80032a0 <HAL_RCC_OscConfig+0x1e4>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003224:	d112      	bne.n	800324c <HAL_RCC_OscConfig+0x190>
 8003226:	4b3f      	ldr	r3, [pc, #252]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a3e      	ldr	r2, [pc, #248]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 800322c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	4b3c      	ldr	r3, [pc, #240]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a3b      	ldr	r2, [pc, #236]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 8003238:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	4b39      	ldr	r3, [pc, #228]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a38      	ldr	r2, [pc, #224]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 8003244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	e029      	b.n	80032a0 <HAL_RCC_OscConfig+0x1e4>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003254:	d112      	bne.n	800327c <HAL_RCC_OscConfig+0x1c0>
 8003256:	4b33      	ldr	r3, [pc, #204]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a32      	ldr	r2, [pc, #200]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 800325c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	4b30      	ldr	r3, [pc, #192]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a2f      	ldr	r2, [pc, #188]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 8003268:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	4b2d      	ldr	r3, [pc, #180]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a2c      	ldr	r2, [pc, #176]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 8003274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	e011      	b.n	80032a0 <HAL_RCC_OscConfig+0x1e4>
 800327c:	4b29      	ldr	r3, [pc, #164]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a28      	ldr	r2, [pc, #160]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 8003282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	4b26      	ldr	r3, [pc, #152]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a25      	ldr	r2, [pc, #148]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 800328e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	4b23      	ldr	r3, [pc, #140]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a22      	ldr	r2, [pc, #136]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 800329a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800329e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d013      	beq.n	80032d0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a8:	f7fe ffb6 	bl	8002218 <HAL_GetTick>
 80032ac:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80032b0:	f7fe ffb2 	bl	8002218 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	@ 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e32e      	b.n	8003920 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032c2:	4b18      	ldr	r3, [pc, #96]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCC_OscConfig+0x1f4>
 80032ce:	e012      	b.n	80032f6 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7fe ffa2 	bl	8002218 <HAL_GetTick>
 80032d4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80032d8:	f7fe ff9e 	bl	8002218 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	@ 0x64
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e31a      	b.n	8003920 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003324 <HAL_RCC_OscConfig+0x268>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 809a 	beq.w	8003438 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d005      	beq.n	8003316 <HAL_RCC_OscConfig+0x25a>
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	2b18      	cmp	r3, #24
 800330e:	d149      	bne.n	80033a4 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d146      	bne.n	80033a4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d104      	bne.n	8003328 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e2fe      	b.n	8003920 <HAL_RCC_OscConfig+0x864>
 8003322:	bf00      	nop
 8003324:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d11c      	bne.n	8003368 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800332e:	4b9a      	ldr	r3, [pc, #616]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0218 	and.w	r2, r3, #24
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	429a      	cmp	r2, r3
 800333c:	d014      	beq.n	8003368 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800333e:	4b96      	ldr	r3, [pc, #600]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 0218 	bic.w	r2, r3, #24
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	4993      	ldr	r1, [pc, #588]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 800334c:	4313      	orrs	r3, r2
 800334e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003350:	f000 fdd0 	bl	8003ef4 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003354:	4b91      	ldr	r3, [pc, #580]	@ (800359c <HAL_RCC_OscConfig+0x4e0>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f7fe fc69 	bl	8001c30 <HAL_InitTick>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e2db      	b.n	8003920 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fe ff56 	bl	8002218 <HAL_GetTick>
 800336c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003370:	f7fe ff52 	bl	8002218 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e2ce      	b.n	8003920 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003382:	4b85      	ldr	r3, [pc, #532]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0f0      	beq.n	8003370 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800338e:	4b82      	ldr	r3, [pc, #520]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	041b      	lsls	r3, r3, #16
 800339c:	497e      	ldr	r1, [pc, #504]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80033a2:	e049      	b.n	8003438 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d02c      	beq.n	8003406 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80033ac:	4b7a      	ldr	r3, [pc, #488]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f023 0218 	bic.w	r2, r3, #24
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	4977      	ldr	r1, [pc, #476]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80033be:	4b76      	ldr	r3, [pc, #472]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a75      	ldr	r2, [pc, #468]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ca:	f7fe ff25 	bl	8002218 <HAL_GetTick>
 80033ce:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80033d2:	f7fe ff21 	bl	8002218 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e29d      	b.n	8003920 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033e4:	4b6c      	ldr	r3, [pc, #432]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0f0      	beq.n	80033d2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80033f0:	4b69      	ldr	r3, [pc, #420]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	041b      	lsls	r3, r3, #16
 80033fe:	4966      	ldr	r1, [pc, #408]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 8003400:	4313      	orrs	r3, r2
 8003402:	610b      	str	r3, [r1, #16]
 8003404:	e018      	b.n	8003438 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003406:	4b64      	ldr	r3, [pc, #400]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a63      	ldr	r2, [pc, #396]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 800340c:	f023 0301 	bic.w	r3, r3, #1
 8003410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003412:	f7fe ff01 	bl	8002218 <HAL_GetTick>
 8003416:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800341a:	f7fe fefd 	bl	8002218 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e279      	b.n	8003920 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800342c:	4b5a      	ldr	r3, [pc, #360]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f0      	bne.n	800341a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b00      	cmp	r3, #0
 8003442:	d03c      	beq.n	80034be <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d01c      	beq.n	8003486 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800344c:	4b52      	ldr	r3, [pc, #328]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 800344e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003452:	4a51      	ldr	r2, [pc, #324]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 8003454:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003458:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345c:	f7fe fedc 	bl	8002218 <HAL_GetTick>
 8003460:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003464:	f7fe fed8 	bl	8002218 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e254      	b.n	8003920 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003476:	4b48      	ldr	r3, [pc, #288]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 8003478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800347c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0ef      	beq.n	8003464 <HAL_RCC_OscConfig+0x3a8>
 8003484:	e01b      	b.n	80034be <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003486:	4b44      	ldr	r3, [pc, #272]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 8003488:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800348c:	4a42      	ldr	r2, [pc, #264]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 800348e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003492:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003496:	f7fe febf 	bl	8002218 <HAL_GetTick>
 800349a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800349e:	f7fe febb 	bl	8002218 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e237      	b.n	8003920 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80034b0:	4b39      	ldr	r3, [pc, #228]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 80034b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1ef      	bne.n	800349e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 80d2 	beq.w	8003670 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80034cc:	4b34      	ldr	r3, [pc, #208]	@ (80035a0 <HAL_RCC_OscConfig+0x4e4>)
 80034ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d118      	bne.n	800350a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80034d8:	4b31      	ldr	r3, [pc, #196]	@ (80035a0 <HAL_RCC_OscConfig+0x4e4>)
 80034da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034dc:	4a30      	ldr	r2, [pc, #192]	@ (80035a0 <HAL_RCC_OscConfig+0x4e4>)
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e4:	f7fe fe98 	bl	8002218 <HAL_GetTick>
 80034e8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ec:	f7fe fe94 	bl	8002218 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e210      	b.n	8003920 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80034fe:	4b28      	ldr	r3, [pc, #160]	@ (80035a0 <HAL_RCC_OscConfig+0x4e4>)
 8003500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d108      	bne.n	8003524 <HAL_RCC_OscConfig+0x468>
 8003512:	4b21      	ldr	r3, [pc, #132]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 8003514:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003518:	4a1f      	ldr	r2, [pc, #124]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003522:	e074      	b.n	800360e <HAL_RCC_OscConfig+0x552>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d118      	bne.n	800355e <HAL_RCC_OscConfig+0x4a2>
 800352c:	4b1a      	ldr	r3, [pc, #104]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 800352e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003532:	4a19      	ldr	r2, [pc, #100]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 8003534:	f023 0301 	bic.w	r3, r3, #1
 8003538:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800353c:	4b16      	ldr	r3, [pc, #88]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 800353e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003542:	4a15      	ldr	r2, [pc, #84]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 8003544:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003548:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800354c:	4b12      	ldr	r3, [pc, #72]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 800354e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003552:	4a11      	ldr	r2, [pc, #68]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 8003554:	f023 0304 	bic.w	r3, r3, #4
 8003558:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800355c:	e057      	b.n	800360e <HAL_RCC_OscConfig+0x552>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	2b05      	cmp	r3, #5
 8003564:	d11e      	bne.n	80035a4 <HAL_RCC_OscConfig+0x4e8>
 8003566:	4b0c      	ldr	r3, [pc, #48]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 8003568:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800356c:	4a0a      	ldr	r2, [pc, #40]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 800356e:	f043 0304 	orr.w	r3, r3, #4
 8003572:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003576:	4b08      	ldr	r3, [pc, #32]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 8003578:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800357c:	4a06      	ldr	r2, [pc, #24]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 800357e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003582:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003586:	4b04      	ldr	r3, [pc, #16]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 8003588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800358c:	4a02      	ldr	r2, [pc, #8]	@ (8003598 <HAL_RCC_OscConfig+0x4dc>)
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003596:	e03a      	b.n	800360e <HAL_RCC_OscConfig+0x552>
 8003598:	44020c00 	.word	0x44020c00
 800359c:	2000001c 	.word	0x2000001c
 80035a0:	44020800 	.word	0x44020800
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b85      	cmp	r3, #133	@ 0x85
 80035aa:	d118      	bne.n	80035de <HAL_RCC_OscConfig+0x522>
 80035ac:	4ba2      	ldr	r3, [pc, #648]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 80035ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035b2:	4aa1      	ldr	r2, [pc, #644]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 80035b4:	f043 0304 	orr.w	r3, r3, #4
 80035b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80035bc:	4b9e      	ldr	r3, [pc, #632]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 80035be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035c2:	4a9d      	ldr	r2, [pc, #628]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 80035c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80035cc:	4b9a      	ldr	r3, [pc, #616]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 80035ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035d2:	4a99      	ldr	r2, [pc, #612]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80035dc:	e017      	b.n	800360e <HAL_RCC_OscConfig+0x552>
 80035de:	4b96      	ldr	r3, [pc, #600]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 80035e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035e4:	4a94      	ldr	r2, [pc, #592]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 80035e6:	f023 0301 	bic.w	r3, r3, #1
 80035ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80035ee:	4b92      	ldr	r3, [pc, #584]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 80035f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035f4:	4a90      	ldr	r2, [pc, #576]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 80035f6:	f023 0304 	bic.w	r3, r3, #4
 80035fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80035fe:	4b8e      	ldr	r3, [pc, #568]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 8003600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003604:	4a8c      	ldr	r2, [pc, #560]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 8003606:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800360a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d016      	beq.n	8003644 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003616:	f7fe fdff 	bl	8002218 <HAL_GetTick>
 800361a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800361c:	e00a      	b.n	8003634 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361e:	f7fe fdfb 	bl	8002218 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800362c:	4293      	cmp	r3, r2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e175      	b.n	8003920 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003634:	4b80      	ldr	r3, [pc, #512]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 8003636:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0ed      	beq.n	800361e <HAL_RCC_OscConfig+0x562>
 8003642:	e015      	b.n	8003670 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003644:	f7fe fde8 	bl	8002218 <HAL_GetTick>
 8003648:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800364a:	e00a      	b.n	8003662 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364c:	f7fe fde4 	bl	8002218 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800365a:	4293      	cmp	r3, r2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e15e      	b.n	8003920 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003662:	4b75      	ldr	r3, [pc, #468]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 8003664:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1ed      	bne.n	800364c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	d036      	beq.n	80036ea <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003680:	2b00      	cmp	r3, #0
 8003682:	d019      	beq.n	80036b8 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003684:	4b6c      	ldr	r3, [pc, #432]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a6b      	ldr	r2, [pc, #428]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 800368a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800368e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003690:	f7fe fdc2 	bl	8002218 <HAL_GetTick>
 8003694:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003698:	f7fe fdbe 	bl	8002218 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e13a      	b.n	8003920 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80036aa:	4b63      	ldr	r3, [pc, #396]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0x5dc>
 80036b6:	e018      	b.n	80036ea <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036b8:	4b5f      	ldr	r3, [pc, #380]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a5e      	ldr	r2, [pc, #376]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 80036be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80036c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c4:	f7fe fda8 	bl	8002218 <HAL_GetTick>
 80036c8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80036cc:	f7fe fda4 	bl	8002218 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e120      	b.n	8003920 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80036de:	4b56      	ldr	r3, [pc, #344]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 8115 	beq.w	800391e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	2b18      	cmp	r3, #24
 80036f8:	f000 80af 	beq.w	800385a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003700:	2b02      	cmp	r3, #2
 8003702:	f040 8086 	bne.w	8003812 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003706:	4b4c      	ldr	r3, [pc, #304]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a4b      	ldr	r2, [pc, #300]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 800370c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003712:	f7fe fd81 	bl	8002218 <HAL_GetTick>
 8003716:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800371a:	f7fe fd7d 	bl	8002218 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e0f9      	b.n	8003920 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800372c:	4b42      	ldr	r3, [pc, #264]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1f0      	bne.n	800371a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003738:	4b3f      	ldr	r3, [pc, #252]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 800373a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003740:	f023 0303 	bic.w	r3, r3, #3
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800374c:	0212      	lsls	r2, r2, #8
 800374e:	430a      	orrs	r2, r1
 8003750:	4939      	ldr	r1, [pc, #228]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 8003752:	4313      	orrs	r3, r2
 8003754:	628b      	str	r3, [r1, #40]	@ 0x28
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800375a:	3b01      	subs	r3, #1
 800375c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003764:	3b01      	subs	r3, #1
 8003766:	025b      	lsls	r3, r3, #9
 8003768:	b29b      	uxth	r3, r3
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003770:	3b01      	subs	r3, #1
 8003772:	041b      	lsls	r3, r3, #16
 8003774:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003778:	431a      	orrs	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377e:	3b01      	subs	r3, #1
 8003780:	061b      	lsls	r3, r3, #24
 8003782:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003786:	492c      	ldr	r1, [pc, #176]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 8003788:	4313      	orrs	r3, r2
 800378a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800378c:	4b2a      	ldr	r3, [pc, #168]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 800378e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003790:	4a29      	ldr	r2, [pc, #164]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 8003792:	f023 0310 	bic.w	r3, r3, #16
 8003796:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800379c:	4a26      	ldr	r2, [pc, #152]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80037a2:	4b25      	ldr	r3, [pc, #148]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 80037a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a6:	4a24      	ldr	r2, [pc, #144]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 80037a8:	f043 0310 	orr.w	r3, r3, #16
 80037ac:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80037ae:	4b22      	ldr	r3, [pc, #136]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 80037b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b2:	f023 020c 	bic.w	r2, r3, #12
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ba:	491f      	ldr	r1, [pc, #124]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80037c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 80037c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c4:	f023 0220 	bic.w	r2, r3, #32
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037cc:	491a      	ldr	r1, [pc, #104]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80037d2:	4b19      	ldr	r3, [pc, #100]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 80037d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d6:	4a18      	ldr	r2, [pc, #96]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 80037d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037dc:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80037de:	4b16      	ldr	r3, [pc, #88]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a15      	ldr	r2, [pc, #84]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 80037e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ea:	f7fe fd15 	bl	8002218 <HAL_GetTick>
 80037ee:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80037f2:	f7fe fd11 	bl	8002218 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e08d      	b.n	8003920 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003804:	4b0c      	ldr	r3, [pc, #48]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0f0      	beq.n	80037f2 <HAL_RCC_OscConfig+0x736>
 8003810:	e085      	b.n	800391e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003812:	4b09      	ldr	r3, [pc, #36]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a08      	ldr	r2, [pc, #32]	@ (8003838 <HAL_RCC_OscConfig+0x77c>)
 8003818:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800381c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381e:	f7fe fcfb 	bl	8002218 <HAL_GetTick>
 8003822:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003824:	e00a      	b.n	800383c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003826:	f7fe fcf7 	bl	8002218 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d903      	bls.n	800383c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e073      	b.n	8003920 <HAL_RCC_OscConfig+0x864>
 8003838:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800383c:	4b3a      	ldr	r3, [pc, #232]	@ (8003928 <HAL_RCC_OscConfig+0x86c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1ee      	bne.n	8003826 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003848:	4b37      	ldr	r3, [pc, #220]	@ (8003928 <HAL_RCC_OscConfig+0x86c>)
 800384a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384c:	4a36      	ldr	r2, [pc, #216]	@ (8003928 <HAL_RCC_OscConfig+0x86c>)
 800384e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003852:	f023 0303 	bic.w	r3, r3, #3
 8003856:	6293      	str	r3, [r2, #40]	@ 0x28
 8003858:	e061      	b.n	800391e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800385a:	4b33      	ldr	r3, [pc, #204]	@ (8003928 <HAL_RCC_OscConfig+0x86c>)
 800385c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003860:	4b31      	ldr	r3, [pc, #196]	@ (8003928 <HAL_RCC_OscConfig+0x86c>)
 8003862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003864:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386a:	2b01      	cmp	r3, #1
 800386c:	d031      	beq.n	80038d2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f003 0203 	and.w	r2, r3, #3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003878:	429a      	cmp	r2, r3
 800387a:	d12a      	bne.n	80038d2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	0a1b      	lsrs	r3, r3, #8
 8003880:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003888:	429a      	cmp	r2, r3
 800388a:	d122      	bne.n	80038d2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003896:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003898:	429a      	cmp	r2, r3
 800389a:	d11a      	bne.n	80038d2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	0a5b      	lsrs	r3, r3, #9
 80038a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d111      	bne.n	80038d2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	0c1b      	lsrs	r3, r3, #16
 80038b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ba:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80038bc:	429a      	cmp	r2, r3
 80038be:	d108      	bne.n	80038d2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	0e1b      	lsrs	r3, r3, #24
 80038c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038cc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d001      	beq.n	80038d6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e024      	b.n	8003920 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80038d6:	4b14      	ldr	r3, [pc, #80]	@ (8003928 <HAL_RCC_OscConfig+0x86c>)
 80038d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038da:	08db      	lsrs	r3, r3, #3
 80038dc:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d01a      	beq.n	800391e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80038e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003928 <HAL_RCC_OscConfig+0x86c>)
 80038ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ec:	4a0e      	ldr	r2, [pc, #56]	@ (8003928 <HAL_RCC_OscConfig+0x86c>)
 80038ee:	f023 0310 	bic.w	r3, r3, #16
 80038f2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f4:	f7fe fc90 	bl	8002218 <HAL_GetTick>
 80038f8:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80038fa:	bf00      	nop
 80038fc:	f7fe fc8c 	bl	8002218 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	4293      	cmp	r3, r2
 8003906:	d0f9      	beq.n	80038fc <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800390c:	4a06      	ldr	r2, [pc, #24]	@ (8003928 <HAL_RCC_OscConfig+0x86c>)
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003912:	4b05      	ldr	r3, [pc, #20]	@ (8003928 <HAL_RCC_OscConfig+0x86c>)
 8003914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003916:	4a04      	ldr	r2, [pc, #16]	@ (8003928 <HAL_RCC_OscConfig+0x86c>)
 8003918:	f043 0310 	orr.w	r3, r3, #16
 800391c:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3720      	adds	r7, #32
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	44020c00 	.word	0x44020c00

0800392c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e19e      	b.n	8003c7e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003940:	4b83      	ldr	r3, [pc, #524]	@ (8003b50 <HAL_RCC_ClockConfig+0x224>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 030f 	and.w	r3, r3, #15
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d910      	bls.n	8003970 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394e:	4b80      	ldr	r3, [pc, #512]	@ (8003b50 <HAL_RCC_ClockConfig+0x224>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 020f 	bic.w	r2, r3, #15
 8003956:	497e      	ldr	r1, [pc, #504]	@ (8003b50 <HAL_RCC_ClockConfig+0x224>)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	4313      	orrs	r3, r2
 800395c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800395e:	4b7c      	ldr	r3, [pc, #496]	@ (8003b50 <HAL_RCC_ClockConfig+0x224>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d001      	beq.n	8003970 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e186      	b.n	8003c7e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	2b00      	cmp	r3, #0
 800397a:	d012      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	4b74      	ldr	r3, [pc, #464]	@ (8003b54 <HAL_RCC_ClockConfig+0x228>)
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	0a1b      	lsrs	r3, r3, #8
 8003986:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800398a:	429a      	cmp	r2, r3
 800398c:	d909      	bls.n	80039a2 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800398e:	4b71      	ldr	r3, [pc, #452]	@ (8003b54 <HAL_RCC_ClockConfig+0x228>)
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	021b      	lsls	r3, r3, #8
 800399c:	496d      	ldr	r1, [pc, #436]	@ (8003b54 <HAL_RCC_ClockConfig+0x228>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d012      	beq.n	80039d4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	4b68      	ldr	r3, [pc, #416]	@ (8003b54 <HAL_RCC_ClockConfig+0x228>)
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	091b      	lsrs	r3, r3, #4
 80039b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039bc:	429a      	cmp	r2, r3
 80039be:	d909      	bls.n	80039d4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80039c0:	4b64      	ldr	r3, [pc, #400]	@ (8003b54 <HAL_RCC_ClockConfig+0x228>)
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	4961      	ldr	r1, [pc, #388]	@ (8003b54 <HAL_RCC_ClockConfig+0x228>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d010      	beq.n	8003a02 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	4b5b      	ldr	r3, [pc, #364]	@ (8003b54 <HAL_RCC_ClockConfig+0x228>)
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d908      	bls.n	8003a02 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80039f0:	4b58      	ldr	r3, [pc, #352]	@ (8003b54 <HAL_RCC_ClockConfig+0x228>)
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	4955      	ldr	r1, [pc, #340]	@ (8003b54 <HAL_RCC_ClockConfig+0x228>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d010      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	4b50      	ldr	r3, [pc, #320]	@ (8003b54 <HAL_RCC_ClockConfig+0x228>)
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d908      	bls.n	8003a30 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003a1e:	4b4d      	ldr	r3, [pc, #308]	@ (8003b54 <HAL_RCC_ClockConfig+0x228>)
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	f023 020f 	bic.w	r2, r3, #15
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	494a      	ldr	r1, [pc, #296]	@ (8003b54 <HAL_RCC_ClockConfig+0x228>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 8093 	beq.w	8003b64 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d107      	bne.n	8003a56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003a46:	4b43      	ldr	r3, [pc, #268]	@ (8003b54 <HAL_RCC_ClockConfig+0x228>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d121      	bne.n	8003a96 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e113      	b.n	8003c7e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d107      	bne.n	8003a6e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a5e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b54 <HAL_RCC_ClockConfig+0x228>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d115      	bne.n	8003a96 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e107      	b.n	8003c7e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d107      	bne.n	8003a86 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003a76:	4b37      	ldr	r3, [pc, #220]	@ (8003b54 <HAL_RCC_ClockConfig+0x228>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e0fb      	b.n	8003c7e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a86:	4b33      	ldr	r3, [pc, #204]	@ (8003b54 <HAL_RCC_ClockConfig+0x228>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e0f3      	b.n	8003c7e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003a96:	4b2f      	ldr	r3, [pc, #188]	@ (8003b54 <HAL_RCC_ClockConfig+0x228>)
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	f023 0203 	bic.w	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	492c      	ldr	r1, [pc, #176]	@ (8003b54 <HAL_RCC_ClockConfig+0x228>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aa8:	f7fe fbb6 	bl	8002218 <HAL_GetTick>
 8003aac:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d112      	bne.n	8003adc <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ab6:	e00a      	b.n	8003ace <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab8:	f7fe fbae 	bl	8002218 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e0d7      	b.n	8003c7e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ace:	4b21      	ldr	r3, [pc, #132]	@ (8003b54 <HAL_RCC_ClockConfig+0x228>)
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	f003 0318 	and.w	r3, r3, #24
 8003ad6:	2b18      	cmp	r3, #24
 8003ad8:	d1ee      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0x18c>
 8003ada:	e043      	b.n	8003b64 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d112      	bne.n	8003b0a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ae4:	e00a      	b.n	8003afc <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae6:	f7fe fb97 	bl	8002218 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e0c0      	b.n	8003c7e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003afc:	4b15      	ldr	r3, [pc, #84]	@ (8003b54 <HAL_RCC_ClockConfig+0x228>)
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	f003 0318 	and.w	r3, r3, #24
 8003b04:	2b10      	cmp	r3, #16
 8003b06:	d1ee      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0x1ba>
 8003b08:	e02c      	b.n	8003b64 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d122      	bne.n	8003b58 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003b12:	e00a      	b.n	8003b2a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003b14:	f7fe fb80 	bl	8002218 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e0a9      	b.n	8003c7e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b54 <HAL_RCC_ClockConfig+0x228>)
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	f003 0318 	and.w	r3, r3, #24
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d1ee      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x1e8>
 8003b36:	e015      	b.n	8003b64 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003b38:	f7fe fb6e 	bl	8002218 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d906      	bls.n	8003b58 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e097      	b.n	8003c7e <HAL_RCC_ClockConfig+0x352>
 8003b4e:	bf00      	nop
 8003b50:	40022000 	.word	0x40022000
 8003b54:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b58:	4b4b      	ldr	r3, [pc, #300]	@ (8003c88 <HAL_RCC_ClockConfig+0x35c>)
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	f003 0318 	and.w	r3, r3, #24
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1e9      	bne.n	8003b38 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d010      	beq.n	8003b92 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	4b44      	ldr	r3, [pc, #272]	@ (8003c88 <HAL_RCC_ClockConfig+0x35c>)
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	f003 030f 	and.w	r3, r3, #15
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d208      	bcs.n	8003b92 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003b80:	4b41      	ldr	r3, [pc, #260]	@ (8003c88 <HAL_RCC_ClockConfig+0x35c>)
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	f023 020f 	bic.w	r2, r3, #15
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	493e      	ldr	r1, [pc, #248]	@ (8003c88 <HAL_RCC_ClockConfig+0x35c>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b92:	4b3e      	ldr	r3, [pc, #248]	@ (8003c8c <HAL_RCC_ClockConfig+0x360>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d210      	bcs.n	8003bc2 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba0:	4b3a      	ldr	r3, [pc, #232]	@ (8003c8c <HAL_RCC_ClockConfig+0x360>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f023 020f 	bic.w	r2, r3, #15
 8003ba8:	4938      	ldr	r1, [pc, #224]	@ (8003c8c <HAL_RCC_ClockConfig+0x360>)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb0:	4b36      	ldr	r3, [pc, #216]	@ (8003c8c <HAL_RCC_ClockConfig+0x360>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 030f 	and.w	r3, r3, #15
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d001      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e05d      	b.n	8003c7e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d010      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	4b2d      	ldr	r3, [pc, #180]	@ (8003c88 <HAL_RCC_ClockConfig+0x35c>)
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d208      	bcs.n	8003bf0 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003bde:	4b2a      	ldr	r3, [pc, #168]	@ (8003c88 <HAL_RCC_ClockConfig+0x35c>)
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	4927      	ldr	r1, [pc, #156]	@ (8003c88 <HAL_RCC_ClockConfig+0x35c>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0308 	and.w	r3, r3, #8
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d012      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	4b21      	ldr	r3, [pc, #132]	@ (8003c88 <HAL_RCC_ClockConfig+0x35c>)
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	091b      	lsrs	r3, r3, #4
 8003c06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d209      	bcs.n	8003c22 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8003c88 <HAL_RCC_ClockConfig+0x35c>)
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	491a      	ldr	r1, [pc, #104]	@ (8003c88 <HAL_RCC_ClockConfig+0x35c>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0310 	and.w	r3, r3, #16
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d012      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695a      	ldr	r2, [r3, #20]
 8003c32:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <HAL_RCC_ClockConfig+0x35c>)
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	0a1b      	lsrs	r3, r3, #8
 8003c38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d209      	bcs.n	8003c54 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003c40:	4b11      	ldr	r3, [pc, #68]	@ (8003c88 <HAL_RCC_ClockConfig+0x35c>)
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	021b      	lsls	r3, r3, #8
 8003c4e:	490e      	ldr	r1, [pc, #56]	@ (8003c88 <HAL_RCC_ClockConfig+0x35c>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003c54:	f000 f822 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c88 <HAL_RCC_ClockConfig+0x35c>)
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	490b      	ldr	r1, [pc, #44]	@ (8003c90 <HAL_RCC_ClockConfig+0x364>)
 8003c64:	5ccb      	ldrb	r3, [r1, r3]
 8003c66:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c94 <HAL_RCC_ClockConfig+0x368>)
 8003c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c98 <HAL_RCC_ClockConfig+0x36c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fd ffdc 	bl	8001c30 <HAL_InitTick>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003c7c:	7afb      	ldrb	r3, [r7, #11]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	44020c00 	.word	0x44020c00
 8003c8c:	40022000 	.word	0x40022000
 8003c90:	0800b080 	.word	0x0800b080
 8003c94:	20000018 	.word	0x20000018
 8003c98:	2000001c 	.word	0x2000001c

08003c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b089      	sub	sp, #36	@ 0x24
 8003ca0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003ca2:	4b8c      	ldr	r3, [pc, #560]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	f003 0318 	and.w	r3, r3, #24
 8003caa:	2b08      	cmp	r3, #8
 8003cac:	d102      	bne.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003cae:	4b8a      	ldr	r3, [pc, #552]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x23c>)
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	e107      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cb4:	4b87      	ldr	r3, [pc, #540]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	f003 0318 	and.w	r3, r3, #24
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d112      	bne.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003cc0:	4b84      	ldr	r3, [pc, #528]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0320 	and.w	r3, r3, #32
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d009      	beq.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003ccc:	4b81      	ldr	r3, [pc, #516]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	08db      	lsrs	r3, r3, #3
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	4a81      	ldr	r2, [pc, #516]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x240>)
 8003cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cdc:	61fb      	str	r3, [r7, #28]
 8003cde:	e0f1      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003ce0:	4b7e      	ldr	r3, [pc, #504]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x240>)
 8003ce2:	61fb      	str	r3, [r7, #28]
 8003ce4:	e0ee      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ce6:	4b7b      	ldr	r3, [pc, #492]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f003 0318 	and.w	r3, r3, #24
 8003cee:	2b10      	cmp	r3, #16
 8003cf0:	d102      	bne.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cf2:	4b7b      	ldr	r3, [pc, #492]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0x244>)
 8003cf4:	61fb      	str	r3, [r7, #28]
 8003cf6:	e0e5      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cf8:	4b76      	ldr	r3, [pc, #472]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	f003 0318 	and.w	r3, r3, #24
 8003d00:	2b18      	cmp	r3, #24
 8003d02:	f040 80dd 	bne.w	8003ec0 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003d06:	4b73      	ldr	r3, [pc, #460]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003d10:	4b70      	ldr	r3, [pc, #448]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d14:	0a1b      	lsrs	r3, r3, #8
 8003d16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d1a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003d1c:	4b6d      	ldr	r3, [pc, #436]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d20:	091b      	lsrs	r3, r3, #4
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003d28:	4b6a      	ldr	r3, [pc, #424]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003d2c:	08db      	lsrs	r3, r3, #3
 8003d2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	fb02 f303 	mul.w	r3, r2, r3
 8003d38:	ee07 3a90 	vmov	s15, r3
 8003d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d40:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 80b7 	beq.w	8003eba <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d003      	beq.n	8003d5a <HAL_RCC_GetSysClockFreq+0xbe>
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d056      	beq.n	8003e06 <HAL_RCC_GetSysClockFreq+0x16a>
 8003d58:	e077      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003d5a:	4b5e      	ldr	r3, [pc, #376]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d02d      	beq.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d66:	4b5b      	ldr	r3, [pc, #364]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	08db      	lsrs	r3, r3, #3
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	4a5a      	ldr	r2, [pc, #360]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x240>)
 8003d72:	fa22 f303 	lsr.w	r3, r2, r3
 8003d76:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	ee07 3a90 	vmov	s15, r3
 8003d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	ee07 3a90 	vmov	s15, r3
 8003d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d90:	4b50      	ldr	r3, [pc, #320]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d98:	ee07 3a90 	vmov	s15, r3
 8003d9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003da0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003da4:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8003ee4 <HAL_RCC_GetSysClockFreq+0x248>
 8003da8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003dac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003db0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003db4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dbc:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003dc0:	e065      	b.n	8003e8e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	ee07 3a90 	vmov	s15, r3
 8003dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dcc:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003ee8 <HAL_RCC_GetSysClockFreq+0x24c>
 8003dd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dd4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ddc:	ee07 3a90 	vmov	s15, r3
 8003de0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003de4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003de8:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003ee4 <HAL_RCC_GetSysClockFreq+0x248>
 8003dec:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003df0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003df4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003df8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e00:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003e04:	e043      	b.n	8003e8e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	ee07 3a90 	vmov	s15, r3
 8003e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e10:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8003eec <HAL_RCC_GetSysClockFreq+0x250>
 8003e14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e18:	4b2e      	ldr	r3, [pc, #184]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e20:	ee07 3a90 	vmov	s15, r3
 8003e24:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e28:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e2c:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8003ee4 <HAL_RCC_GetSysClockFreq+0x248>
 8003e30:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e34:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e44:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003e48:	e021      	b.n	8003e8e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	ee07 3a90 	vmov	s15, r3
 8003e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e54:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003ef0 <HAL_RCC_GetSysClockFreq+0x254>
 8003e58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e64:	ee07 3a90 	vmov	s15, r3
 8003e68:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e6c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e70:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8003ee4 <HAL_RCC_GetSysClockFreq+0x248>
 8003e74:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e78:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e80:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e88:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003e8c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003e8e:	4b11      	ldr	r3, [pc, #68]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e92:	0a5b      	lsrs	r3, r3, #9
 8003e94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e98:	3301      	adds	r3, #1
 8003e9a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	ee07 3a90 	vmov	s15, r3
 8003ea2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ea6:	edd7 6a06 	vldr	s13, [r7, #24]
 8003eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eb2:	ee17 3a90 	vmov	r3, s15
 8003eb6:	61fb      	str	r3, [r7, #28]
 8003eb8:	e004      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61fb      	str	r3, [r7, #28]
 8003ebe:	e001      	b.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003ec0:	4b06      	ldr	r3, [pc, #24]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x240>)
 8003ec2:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003ec4:	69fb      	ldr	r3, [r7, #28]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3724      	adds	r7, #36	@ 0x24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	44020c00 	.word	0x44020c00
 8003ed8:	003d0900 	.word	0x003d0900
 8003edc:	03d09000 	.word	0x03d09000
 8003ee0:	007a1200 	.word	0x007a1200
 8003ee4:	46000000 	.word	0x46000000
 8003ee8:	4c742400 	.word	0x4c742400
 8003eec:	4af42400 	.word	0x4af42400
 8003ef0:	4a742400 	.word	0x4a742400

08003ef4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003ef8:	f7ff fed0 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 8003efc:	4602      	mov	r2, r0
 8003efe:	4b08      	ldr	r3, [pc, #32]	@ (8003f20 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003f00:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003f02:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003f06:	4907      	ldr	r1, [pc, #28]	@ (8003f24 <HAL_RCC_GetHCLKFreq+0x30>)
 8003f08:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003f0a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f12:	4a05      	ldr	r2, [pc, #20]	@ (8003f28 <HAL_RCC_GetHCLKFreq+0x34>)
 8003f14:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8003f16:	4b04      	ldr	r3, [pc, #16]	@ (8003f28 <HAL_RCC_GetHCLKFreq+0x34>)
 8003f18:	681b      	ldr	r3, [r3, #0]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	44020c00 	.word	0x44020c00
 8003f24:	0800b080 	.word	0x0800b080
 8003f28:	20000018 	.word	0x20000018

08003f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003f30:	f7ff ffe0 	bl	8003ef4 <HAL_RCC_GetHCLKFreq>
 8003f34:	4602      	mov	r2, r0
 8003f36:	4b06      	ldr	r3, [pc, #24]	@ (8003f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	091b      	lsrs	r3, r3, #4
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	4904      	ldr	r1, [pc, #16]	@ (8003f54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f42:	5ccb      	ldrb	r3, [r1, r3]
 8003f44:	f003 031f 	and.w	r3, r3, #31
 8003f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	44020c00 	.word	0x44020c00
 8003f54:	0800b090 	.word	0x0800b090

08003f58 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	221f      	movs	r2, #31
 8003f66:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8003f68:	4b15      	ldr	r3, [pc, #84]	@ (8003fc0 <HAL_RCC_GetClockConfig+0x68>)
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	f003 0203 	and.w	r2, r3, #3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8003f74:	4b12      	ldr	r3, [pc, #72]	@ (8003fc0 <HAL_RCC_GetClockConfig+0x68>)
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f003 020f 	and.w	r2, r3, #15
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	091b      	lsrs	r3, r3, #4
 8003f92:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	0a1b      	lsrs	r3, r3, #8
 8003f9e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003fa6:	4b07      	ldr	r3, [pc, #28]	@ (8003fc4 <HAL_RCC_GetClockConfig+0x6c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 020f 	and.w	r2, r3, #15
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	601a      	str	r2, [r3, #0]
}
 8003fb2:	bf00      	nop
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	44020c00 	.word	0x44020c00
 8003fc4:	40022000 	.word	0x40022000

08003fc8 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fcc:	b0d8      	sub	sp, #352	@ 0x160
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003fe0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe8:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8003fec:	2500      	movs	r5, #0
 8003fee:	ea54 0305 	orrs.w	r3, r4, r5
 8003ff2:	d00b      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003ff4:	4bcd      	ldr	r3, [pc, #820]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003ff6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ffa:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8003ffe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004004:	4ac9      	ldr	r2, [pc, #804]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004006:	430b      	orrs	r3, r1
 8004008:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800400c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004014:	f002 0801 	and.w	r8, r2, #1
 8004018:	f04f 0900 	mov.w	r9, #0
 800401c:	ea58 0309 	orrs.w	r3, r8, r9
 8004020:	d042      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004022:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004028:	2b05      	cmp	r3, #5
 800402a:	d823      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800402c:	a201      	add	r2, pc, #4	@ (adr r2, 8004034 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800402e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004032:	bf00      	nop
 8004034:	0800407d 	.word	0x0800407d
 8004038:	0800404d 	.word	0x0800404d
 800403c:	08004061 	.word	0x08004061
 8004040:	0800407d 	.word	0x0800407d
 8004044:	0800407d 	.word	0x0800407d
 8004048:	0800407d 	.word	0x0800407d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800404c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004050:	3308      	adds	r3, #8
 8004052:	4618      	mov	r0, r3
 8004054:	f001 ff42 	bl	8005edc <RCCEx_PLL2_Config>
 8004058:	4603      	mov	r3, r0
 800405a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800405e:	e00e      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004060:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004064:	3330      	adds	r3, #48	@ 0x30
 8004066:	4618      	mov	r0, r3
 8004068:	f001 ffd0 	bl	800600c <RCCEx_PLL3_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004072:	e004      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800407a:	e000      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800407c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800407e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10c      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004086:	4ba9      	ldr	r3, [pc, #676]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004088:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800408c:	f023 0107 	bic.w	r1, r3, #7
 8004090:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004094:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004096:	4aa5      	ldr	r2, [pc, #660]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004098:	430b      	orrs	r3, r1
 800409a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800409e:	e003      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80040a4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b0:	f002 0a02 	and.w	sl, r2, #2
 80040b4:	f04f 0b00 	mov.w	fp, #0
 80040b8:	ea5a 030b 	orrs.w	r3, sl, fp
 80040bc:	f000 8088 	beq.w	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80040c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c6:	2b28      	cmp	r3, #40	@ 0x28
 80040c8:	d868      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80040ca:	a201      	add	r2, pc, #4	@ (adr r2, 80040d0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80040cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d0:	080041a5 	.word	0x080041a5
 80040d4:	0800419d 	.word	0x0800419d
 80040d8:	0800419d 	.word	0x0800419d
 80040dc:	0800419d 	.word	0x0800419d
 80040e0:	0800419d 	.word	0x0800419d
 80040e4:	0800419d 	.word	0x0800419d
 80040e8:	0800419d 	.word	0x0800419d
 80040ec:	0800419d 	.word	0x0800419d
 80040f0:	08004175 	.word	0x08004175
 80040f4:	0800419d 	.word	0x0800419d
 80040f8:	0800419d 	.word	0x0800419d
 80040fc:	0800419d 	.word	0x0800419d
 8004100:	0800419d 	.word	0x0800419d
 8004104:	0800419d 	.word	0x0800419d
 8004108:	0800419d 	.word	0x0800419d
 800410c:	0800419d 	.word	0x0800419d
 8004110:	08004189 	.word	0x08004189
 8004114:	0800419d 	.word	0x0800419d
 8004118:	0800419d 	.word	0x0800419d
 800411c:	0800419d 	.word	0x0800419d
 8004120:	0800419d 	.word	0x0800419d
 8004124:	0800419d 	.word	0x0800419d
 8004128:	0800419d 	.word	0x0800419d
 800412c:	0800419d 	.word	0x0800419d
 8004130:	080041a5 	.word	0x080041a5
 8004134:	0800419d 	.word	0x0800419d
 8004138:	0800419d 	.word	0x0800419d
 800413c:	0800419d 	.word	0x0800419d
 8004140:	0800419d 	.word	0x0800419d
 8004144:	0800419d 	.word	0x0800419d
 8004148:	0800419d 	.word	0x0800419d
 800414c:	0800419d 	.word	0x0800419d
 8004150:	080041a5 	.word	0x080041a5
 8004154:	0800419d 	.word	0x0800419d
 8004158:	0800419d 	.word	0x0800419d
 800415c:	0800419d 	.word	0x0800419d
 8004160:	0800419d 	.word	0x0800419d
 8004164:	0800419d 	.word	0x0800419d
 8004168:	0800419d 	.word	0x0800419d
 800416c:	0800419d 	.word	0x0800419d
 8004170:	080041a5 	.word	0x080041a5
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004174:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004178:	3308      	adds	r3, #8
 800417a:	4618      	mov	r0, r3
 800417c:	f001 feae 	bl	8005edc <RCCEx_PLL2_Config>
 8004180:	4603      	mov	r3, r0
 8004182:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8004186:	e00e      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004188:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800418c:	3330      	adds	r3, #48	@ 0x30
 800418e:	4618      	mov	r0, r3
 8004190:	f001 ff3c 	bl	800600c <RCCEx_PLL3_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800419a:	e004      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80041a2:	e000      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80041a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10c      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80041ae:	4b5f      	ldr	r3, [pc, #380]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80041b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80041b4:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80041b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041be:	4a5b      	ldr	r2, [pc, #364]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80041c0:	430b      	orrs	r3, r1
 80041c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80041c6:	e003      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80041cc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d8:	f002 0304 	and.w	r3, r2, #4
 80041dc:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80041e0:	2300      	movs	r3, #0
 80041e2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80041e6:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 80041ea:	460b      	mov	r3, r1
 80041ec:	4313      	orrs	r3, r2
 80041ee:	d04e      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80041f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041f6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80041fa:	d02c      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80041fc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004200:	d825      	bhi.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004206:	d028      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004208:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800420c:	d81f      	bhi.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800420e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004210:	d025      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004212:	2bc0      	cmp	r3, #192	@ 0xc0
 8004214:	d81b      	bhi.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004216:	2b80      	cmp	r3, #128	@ 0x80
 8004218:	d00f      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x272>
 800421a:	2b80      	cmp	r3, #128	@ 0x80
 800421c:	d817      	bhi.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800421e:	2b00      	cmp	r3, #0
 8004220:	d01f      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004222:	2b40      	cmp	r3, #64	@ 0x40
 8004224:	d113      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004226:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800422a:	3308      	adds	r3, #8
 800422c:	4618      	mov	r0, r3
 800422e:	f001 fe55 	bl	8005edc <RCCEx_PLL2_Config>
 8004232:	4603      	mov	r3, r0
 8004234:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004238:	e014      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800423a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800423e:	3330      	adds	r3, #48	@ 0x30
 8004240:	4618      	mov	r0, r3
 8004242:	f001 fee3 	bl	800600c <RCCEx_PLL3_Config>
 8004246:	4603      	mov	r3, r0
 8004248:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800424c:	e00a      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004254:	e006      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004256:	bf00      	nop
 8004258:	e004      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800425a:	bf00      	nop
 800425c:	e002      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800425e:	bf00      	nop
 8004260:	e000      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004262:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004264:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10c      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800426c:	4b2f      	ldr	r3, [pc, #188]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800426e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004272:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004276:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800427a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800427c:	4a2b      	ldr	r2, [pc, #172]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800427e:	430b      	orrs	r3, r1
 8004280:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004284:	e003      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004286:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800428a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800428e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004296:	f002 0308 	and.w	r3, r2, #8
 800429a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800429e:	2300      	movs	r3, #0
 80042a0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80042a4:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 80042a8:	460b      	mov	r3, r1
 80042aa:	4313      	orrs	r3, r2
 80042ac:	d056      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80042ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042b4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80042b8:	d031      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x356>
 80042ba:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80042be:	d82a      	bhi.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80042c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042c4:	d02d      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80042c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042ca:	d824      	bhi.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80042cc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80042d0:	d029      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80042d2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80042d6:	d81e      	bhi.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80042d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042dc:	d011      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80042de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042e2:	d818      	bhi.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d023      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80042e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042ec:	d113      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042f2:	3308      	adds	r3, #8
 80042f4:	4618      	mov	r0, r3
 80042f6:	f001 fdf1 	bl	8005edc <RCCEx_PLL2_Config>
 80042fa:	4603      	mov	r3, r0
 80042fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8004300:	e017      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004302:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004306:	3330      	adds	r3, #48	@ 0x30
 8004308:	4618      	mov	r0, r3
 800430a:	f001 fe7f 	bl	800600c <RCCEx_PLL3_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8004314:	e00d      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800431c:	e009      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800431e:	bf00      	nop
 8004320:	e007      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004322:	bf00      	nop
 8004324:	e005      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004326:	bf00      	nop
 8004328:	e003      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800432a:	bf00      	nop
 800432c:	44020c00 	.word	0x44020c00
        break;
 8004330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004332:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10c      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800433a:	4bbb      	ldr	r3, [pc, #748]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800433c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004340:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004344:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004348:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800434a:	4ab7      	ldr	r2, [pc, #732]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800434c:	430b      	orrs	r3, r1
 800434e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004352:	e003      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004354:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004358:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800435c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004364:	f002 0310 	and.w	r3, r2, #16
 8004368:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800436c:	2300      	movs	r3, #0
 800436e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8004372:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8004376:	460b      	mov	r3, r1
 8004378:	4313      	orrs	r3, r2
 800437a:	d053      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800437c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004380:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004382:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004386:	d031      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004388:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800438c:	d82a      	bhi.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800438e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004392:	d02d      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004394:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004398:	d824      	bhi.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800439a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800439e:	d029      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80043a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80043a4:	d81e      	bhi.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80043a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043aa:	d011      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80043ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043b0:	d818      	bhi.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d020      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80043b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ba:	d113      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043c0:	3308      	adds	r3, #8
 80043c2:	4618      	mov	r0, r3
 80043c4:	f001 fd8a 	bl	8005edc <RCCEx_PLL2_Config>
 80043c8:	4603      	mov	r3, r0
 80043ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80043ce:	e014      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043d4:	3330      	adds	r3, #48	@ 0x30
 80043d6:	4618      	mov	r0, r3
 80043d8:	f001 fe18 	bl	800600c <RCCEx_PLL3_Config>
 80043dc:	4603      	mov	r3, r0
 80043de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80043e2:	e00a      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80043ea:	e006      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80043ec:	bf00      	nop
 80043ee:	e004      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80043f0:	bf00      	nop
 80043f2:	e002      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80043f4:	bf00      	nop
 80043f6:	e000      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80043f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10c      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004402:	4b89      	ldr	r3, [pc, #548]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004404:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004408:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800440c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004410:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004412:	4a85      	ldr	r2, [pc, #532]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004414:	430b      	orrs	r3, r1
 8004416:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800441a:	e003      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004420:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004424:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442c:	f002 0320 	and.w	r3, r2, #32
 8004430:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004434:	2300      	movs	r3, #0
 8004436:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800443a:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 800443e:	460b      	mov	r3, r1
 8004440:	4313      	orrs	r3, r2
 8004442:	d053      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004444:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800444e:	d031      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004450:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004454:	d82a      	bhi.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004456:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800445a:	d02d      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800445c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004460:	d824      	bhi.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004462:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004466:	d029      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004468:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800446c:	d81e      	bhi.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800446e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004472:	d011      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004478:	d818      	bhi.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800447a:	2b00      	cmp	r3, #0
 800447c:	d020      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800447e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004482:	d113      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004484:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004488:	3308      	adds	r3, #8
 800448a:	4618      	mov	r0, r3
 800448c:	f001 fd26 	bl	8005edc <RCCEx_PLL2_Config>
 8004490:	4603      	mov	r3, r0
 8004492:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8004496:	e014      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004498:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800449c:	3330      	adds	r3, #48	@ 0x30
 800449e:	4618      	mov	r0, r3
 80044a0:	f001 fdb4 	bl	800600c <RCCEx_PLL3_Config>
 80044a4:	4603      	mov	r3, r0
 80044a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80044aa:	e00a      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80044b2:	e006      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80044b4:	bf00      	nop
 80044b6:	e004      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80044b8:	bf00      	nop
 80044ba:	e002      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80044bc:	bf00      	nop
 80044be:	e000      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80044c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10c      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80044ca:	4b57      	ldr	r3, [pc, #348]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80044cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80044d0:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 80044d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044da:	4a53      	ldr	r2, [pc, #332]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80044dc:	430b      	orrs	r3, r1
 80044de:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80044e2:	e003      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80044e8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80044ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80044f8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80044fc:	2300      	movs	r3, #0
 80044fe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004502:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8004506:	460b      	mov	r3, r1
 8004508:	4313      	orrs	r3, r2
 800450a:	d053      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 800450c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004512:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004516:	d031      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004518:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800451c:	d82a      	bhi.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800451e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004522:	d02d      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8004524:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004528:	d824      	bhi.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800452a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800452e:	d029      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004530:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004534:	d81e      	bhi.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004536:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800453a:	d011      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800453c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004540:	d818      	bhi.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004542:	2b00      	cmp	r3, #0
 8004544:	d020      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004546:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800454a:	d113      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800454c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004550:	3308      	adds	r3, #8
 8004552:	4618      	mov	r0, r3
 8004554:	f001 fcc2 	bl	8005edc <RCCEx_PLL2_Config>
 8004558:	4603      	mov	r3, r0
 800455a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800455e:	e014      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004560:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004564:	3330      	adds	r3, #48	@ 0x30
 8004566:	4618      	mov	r0, r3
 8004568:	f001 fd50 	bl	800600c <RCCEx_PLL3_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8004572:	e00a      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800457a:	e006      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800457c:	bf00      	nop
 800457e:	e004      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004580:	bf00      	nop
 8004582:	e002      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004584:	bf00      	nop
 8004586:	e000      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800458a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10c      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8004592:	4b25      	ldr	r3, [pc, #148]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004594:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004598:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 800459c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045a2:	4a21      	ldr	r2, [pc, #132]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80045a4:	430b      	orrs	r3, r1
 80045a6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80045aa:	e003      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80045b0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80045b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045bc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80045c0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80045c4:	2300      	movs	r3, #0
 80045c6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80045ca:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 80045ce:	460b      	mov	r3, r1
 80045d0:	4313      	orrs	r3, r2
 80045d2:	d055      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 80045d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045da:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80045de:	d033      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x680>
 80045e0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80045e4:	d82c      	bhi.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80045e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80045ea:	d02f      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x684>
 80045ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80045f0:	d826      	bhi.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80045f2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80045f6:	d02b      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80045f8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80045fc:	d820      	bhi.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80045fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004602:	d013      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004604:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004608:	d81a      	bhi.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800460a:	2b00      	cmp	r3, #0
 800460c:	d022      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800460e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004612:	d115      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004614:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004618:	3308      	adds	r3, #8
 800461a:	4618      	mov	r0, r3
 800461c:	f001 fc5e 	bl	8005edc <RCCEx_PLL2_Config>
 8004620:	4603      	mov	r3, r0
 8004622:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8004626:	e016      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8004628:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800462c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004630:	3330      	adds	r3, #48	@ 0x30
 8004632:	4618      	mov	r0, r3
 8004634:	f001 fcea 	bl	800600c <RCCEx_PLL3_Config>
 8004638:	4603      	mov	r3, r0
 800463a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800463e:	e00a      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004646:	e006      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004648:	bf00      	nop
 800464a:	e004      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800464c:	bf00      	nop
 800464e:	e002      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004650:	bf00      	nop
 8004652:	e000      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004656:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10c      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800465e:	4bbb      	ldr	r3, [pc, #748]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004660:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004664:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004668:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800466c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800466e:	4ab7      	ldr	r2, [pc, #732]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004670:	430b      	orrs	r3, r1
 8004672:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004676:	e003      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004678:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800467c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8004680:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004688:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800468c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8004690:	2300      	movs	r3, #0
 8004692:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8004696:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800469a:	460b      	mov	r3, r1
 800469c:	4313      	orrs	r3, r2
 800469e:	d053      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80046a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046a6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80046aa:	d031      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80046ac:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80046b0:	d82a      	bhi.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80046b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046b6:	d02d      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80046b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046bc:	d824      	bhi.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80046be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046c2:	d029      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x750>
 80046c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046c8:	d81e      	bhi.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80046ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046ce:	d011      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80046d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046d4:	d818      	bhi.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d020      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x754>
 80046da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046de:	d113      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046e4:	3308      	adds	r3, #8
 80046e6:	4618      	mov	r0, r3
 80046e8:	f001 fbf8 	bl	8005edc <RCCEx_PLL2_Config>
 80046ec:	4603      	mov	r3, r0
 80046ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80046f2:	e014      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80046f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046f8:	3330      	adds	r3, #48	@ 0x30
 80046fa:	4618      	mov	r0, r3
 80046fc:	f001 fc86 	bl	800600c <RCCEx_PLL3_Config>
 8004700:	4603      	mov	r3, r0
 8004702:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8004706:	e00a      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800470e:	e006      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004710:	bf00      	nop
 8004712:	e004      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004714:	bf00      	nop
 8004716:	e002      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004718:	bf00      	nop
 800471a:	e000      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800471c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800471e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10c      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8004726:	4b89      	ldr	r3, [pc, #548]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004728:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800472c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004730:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004734:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004736:	4a85      	ldr	r2, [pc, #532]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004738:	430b      	orrs	r3, r1
 800473a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800473e:	e003      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004740:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004744:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8004748:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800474c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004750:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004754:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004758:	2300      	movs	r3, #0
 800475a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800475e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004762:	460b      	mov	r3, r1
 8004764:	4313      	orrs	r3, r2
 8004766:	d055      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8004768:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800476c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004770:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8004774:	d031      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x812>
 8004776:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800477a:	d82a      	bhi.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800477c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004780:	d02d      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x816>
 8004782:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004786:	d824      	bhi.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004788:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800478c:	d029      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800478e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004792:	d81e      	bhi.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004794:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004798:	d011      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800479a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800479e:	d818      	bhi.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d020      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80047a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047a8:	d113      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047ae:	3308      	adds	r3, #8
 80047b0:	4618      	mov	r0, r3
 80047b2:	f001 fb93 	bl	8005edc <RCCEx_PLL2_Config>
 80047b6:	4603      	mov	r3, r0
 80047b8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80047bc:	e014      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047c2:	3330      	adds	r3, #48	@ 0x30
 80047c4:	4618      	mov	r0, r3
 80047c6:	f001 fc21 	bl	800600c <RCCEx_PLL3_Config>
 80047ca:	4603      	mov	r3, r0
 80047cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80047d0:	e00a      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80047d8:	e006      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80047da:	bf00      	nop
 80047dc:	e004      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80047de:	bf00      	nop
 80047e0:	e002      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80047e2:	bf00      	nop
 80047e4:	e000      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80047e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10d      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80047f0:	4b56      	ldr	r3, [pc, #344]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80047f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80047f6:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 80047fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004802:	4a52      	ldr	r2, [pc, #328]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004804:	430b      	orrs	r3, r1
 8004806:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800480a:	e003      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800480c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004810:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8004814:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004820:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004824:	2300      	movs	r3, #0
 8004826:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800482a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800482e:	460b      	mov	r3, r1
 8004830:	4313      	orrs	r3, r2
 8004832:	d044      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8004834:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004838:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800483c:	2b05      	cmp	r3, #5
 800483e:	d823      	bhi.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8004840:	a201      	add	r2, pc, #4	@ (adr r2, 8004848 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004846:	bf00      	nop
 8004848:	08004891 	.word	0x08004891
 800484c:	08004861 	.word	0x08004861
 8004850:	08004875 	.word	0x08004875
 8004854:	08004891 	.word	0x08004891
 8004858:	08004891 	.word	0x08004891
 800485c:	08004891 	.word	0x08004891
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004860:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004864:	3308      	adds	r3, #8
 8004866:	4618      	mov	r0, r3
 8004868:	f001 fb38 	bl	8005edc <RCCEx_PLL2_Config>
 800486c:	4603      	mov	r3, r0
 800486e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8004872:	e00e      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004874:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004878:	3330      	adds	r3, #48	@ 0x30
 800487a:	4618      	mov	r0, r3
 800487c:	f001 fbc6 	bl	800600c <RCCEx_PLL3_Config>
 8004880:	4603      	mov	r3, r0
 8004882:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8004886:	e004      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800488e:	e000      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8004890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004892:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10d      	bne.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800489a:	4b2c      	ldr	r3, [pc, #176]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800489c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80048a0:	f023 0107 	bic.w	r1, r3, #7
 80048a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048ac:	4a27      	ldr	r2, [pc, #156]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80048ae:	430b      	orrs	r3, r1
 80048b0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80048b4:	e003      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80048ba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80048be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80048ca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80048ce:	2300      	movs	r3, #0
 80048d0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80048d4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80048d8:	460b      	mov	r3, r1
 80048da:	4313      	orrs	r3, r2
 80048dc:	d04f      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80048de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e6:	2b50      	cmp	r3, #80	@ 0x50
 80048e8:	d029      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x976>
 80048ea:	2b50      	cmp	r3, #80	@ 0x50
 80048ec:	d823      	bhi.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80048ee:	2b40      	cmp	r3, #64	@ 0x40
 80048f0:	d027      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80048f2:	2b40      	cmp	r3, #64	@ 0x40
 80048f4:	d81f      	bhi.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80048f6:	2b30      	cmp	r3, #48	@ 0x30
 80048f8:	d025      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80048fa:	2b30      	cmp	r3, #48	@ 0x30
 80048fc:	d81b      	bhi.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80048fe:	2b20      	cmp	r3, #32
 8004900:	d00f      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004902:	2b20      	cmp	r3, #32
 8004904:	d817      	bhi.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004906:	2b00      	cmp	r3, #0
 8004908:	d022      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800490a:	2b10      	cmp	r3, #16
 800490c:	d113      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800490e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004912:	3308      	adds	r3, #8
 8004914:	4618      	mov	r0, r3
 8004916:	f001 fae1 	bl	8005edc <RCCEx_PLL2_Config>
 800491a:	4603      	mov	r3, r0
 800491c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8004920:	e017      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004922:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004926:	3330      	adds	r3, #48	@ 0x30
 8004928:	4618      	mov	r0, r3
 800492a:	f001 fb6f 	bl	800600c <RCCEx_PLL3_Config>
 800492e:	4603      	mov	r3, r0
 8004930:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8004934:	e00d      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800493c:	e009      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800493e:	bf00      	nop
 8004940:	e007      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004942:	bf00      	nop
 8004944:	e005      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004946:	bf00      	nop
 8004948:	e003      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800494a:	bf00      	nop
 800494c:	44020c00 	.word	0x44020c00
        break;
 8004950:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004952:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10d      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800495a:	4baf      	ldr	r3, [pc, #700]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800495c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004960:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004964:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800496c:	4aaa      	ldr	r2, [pc, #680]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800496e:	430b      	orrs	r3, r1
 8004970:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004974:	e003      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004976:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800497a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800497e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004986:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800498a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800498e:	2300      	movs	r3, #0
 8004990:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004994:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004998:	460b      	mov	r3, r1
 800499a:	4313      	orrs	r3, r2
 800499c:	d055      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800499e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049a6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80049aa:	d031      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 80049ac:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80049b0:	d82a      	bhi.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80049b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049b6:	d02d      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80049b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049bc:	d824      	bhi.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80049be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80049c2:	d029      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80049c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80049c8:	d81e      	bhi.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80049ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049ce:	d011      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 80049d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049d4:	d818      	bhi.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d020      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80049da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049de:	d113      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049e4:	3308      	adds	r3, #8
 80049e6:	4618      	mov	r0, r3
 80049e8:	f001 fa78 	bl	8005edc <RCCEx_PLL2_Config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80049f2:	e014      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049f8:	3330      	adds	r3, #48	@ 0x30
 80049fa:	4618      	mov	r0, r3
 80049fc:	f001 fb06 	bl	800600c <RCCEx_PLL3_Config>
 8004a00:	4603      	mov	r3, r0
 8004a02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004a06:	e00a      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004a0e:	e006      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004a10:	bf00      	nop
 8004a12:	e004      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004a14:	bf00      	nop
 8004a16:	e002      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004a18:	bf00      	nop
 8004a1a:	e000      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004a1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10d      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004a26:	4b7c      	ldr	r3, [pc, #496]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a2c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004a30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a38:	4a77      	ldr	r2, [pc, #476]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004a3a:	430b      	orrs	r3, r1
 8004a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a40:	e003      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a42:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a46:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a52:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004a56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004a60:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004a64:	460b      	mov	r3, r1
 8004a66:	4313      	orrs	r3, r2
 8004a68:	d03d      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004a6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a72:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a76:	d01b      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8004a78:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a7c:	d814      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004a7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a82:	d017      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8004a84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a88:	d80e      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d014      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8004a8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a92:	d109      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a98:	3330      	adds	r3, #48	@ 0x30
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f001 fab6 	bl	800600c <RCCEx_PLL3_Config>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004aa6:	e008      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004aae:	e004      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004ab0:	bf00      	nop
 8004ab2:	e002      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004ab4:	bf00      	nop
 8004ab6:	e000      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10d      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004ac2:	4b55      	ldr	r3, [pc, #340]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004ac4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ac8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004acc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad4:	4a50      	ldr	r2, [pc, #320]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004ad6:	430b      	orrs	r3, r1
 8004ad8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004adc:	e003      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ade:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ae2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ae6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aee:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004af2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004af6:	2300      	movs	r3, #0
 8004af8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004afc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004b00:	460b      	mov	r3, r1
 8004b02:	4313      	orrs	r3, r2
 8004b04:	d03d      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004b06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b0e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004b12:	d01b      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8004b14:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004b18:	d814      	bhi.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004b1a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004b1e:	d017      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004b20:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004b24:	d80e      	bhi.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d014      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8004b2a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b2e:	d109      	bne.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b34:	3330      	adds	r3, #48	@ 0x30
 8004b36:	4618      	mov	r0, r3
 8004b38:	f001 fa68 	bl	800600c <RCCEx_PLL3_Config>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004b42:	e008      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004b4a:	e004      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004b4c:	bf00      	nop
 8004b4e:	e002      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004b50:	bf00      	nop
 8004b52:	e000      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b56:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10d      	bne.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004b5e:	4b2e      	ldr	r3, [pc, #184]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004b60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b64:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004b68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b70:	4a29      	ldr	r2, [pc, #164]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004b72:	430b      	orrs	r3, r1
 8004b74:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004b78:	e003      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b7a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b7e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004b8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004b92:	2300      	movs	r3, #0
 8004b94:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004b98:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	d040      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8004ba2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ba6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004baa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004bae:	d01b      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8004bb0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004bb4:	d814      	bhi.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8004bb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004bba:	d017      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004bbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004bc0:	d80e      	bhi.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d014      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004bc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bca:	d109      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bd0:	3330      	adds	r3, #48	@ 0x30
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f001 fa1a 	bl	800600c <RCCEx_PLL3_Config>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8004bde:	e008      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004be6:	e004      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004be8:	bf00      	nop
 8004bea:	e002      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004bec:	bf00      	nop
 8004bee:	e000      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bf2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d110      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004bfa:	4b07      	ldr	r3, [pc, #28]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004bfc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c00:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004c04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c0c:	4a02      	ldr	r2, [pc, #8]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004c0e:	430b      	orrs	r3, r1
 8004c10:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004c14:	e006      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8004c16:	bf00      	nop
 8004c18:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c20:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8004c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004c3a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4313      	orrs	r3, r2
 8004c42:	d03d      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8004c44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c4c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004c50:	d01b      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8004c52:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004c56:	d814      	bhi.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8004c58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c5c:	d017      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8004c5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c62:	d80e      	bhi.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d014      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8004c68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c6c:	d109      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c72:	3330      	adds	r3, #48	@ 0x30
 8004c74:	4618      	mov	r0, r3
 8004c76:	f001 f9c9 	bl	800600c <RCCEx_PLL3_Config>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8004c80:	e008      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004c88:	e004      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004c8a:	bf00      	nop
 8004c8c:	e002      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004c8e:	bf00      	nop
 8004c90:	e000      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c94:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10d      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004c9c:	4bbe      	ldr	r3, [pc, #760]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004c9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ca2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004ca6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004caa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cae:	4aba      	ldr	r2, [pc, #744]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004cb6:	e003      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004cbc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004cc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004ccc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004cd6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	d035      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8004ce0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ce4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004ce8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004cec:	d015      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8004cee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004cf2:	d80e      	bhi.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d012      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8004cf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cfc:	d109      	bne.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004cfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d02:	3330      	adds	r3, #48	@ 0x30
 8004d04:	4618      	mov	r0, r3
 8004d06:	f001 f981 	bl	800600c <RCCEx_PLL3_Config>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004d10:	e006      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004d18:	e002      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8004d1a:	bf00      	nop
 8004d1c:	e000      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8004d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d20:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10d      	bne.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004d28:	4b9b      	ldr	r3, [pc, #620]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004d2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d2e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8004d32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004d3a:	4a97      	ldr	r2, [pc, #604]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004d3c:	430b      	orrs	r3, r1
 8004d3e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004d42:	e003      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d44:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d48:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d54:	2100      	movs	r1, #0
 8004d56:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8004d5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d62:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	d00e      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004d6c:	4b8a      	ldr	r3, [pc, #552]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	4a89      	ldr	r2, [pc, #548]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004d72:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004d76:	61d3      	str	r3, [r2, #28]
 8004d78:	4b87      	ldr	r3, [pc, #540]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004d7a:	69d9      	ldr	r1, [r3, #28]
 8004d7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d80:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8004d84:	4a84      	ldr	r2, [pc, #528]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004d86:	430b      	orrs	r3, r1
 8004d88:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d92:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004d96:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004da0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004da4:	460b      	mov	r3, r1
 8004da6:	4313      	orrs	r3, r2
 8004da8:	d055      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004daa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004db2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004db6:	d031      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8004db8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004dbc:	d82a      	bhi.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004dbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dc2:	d02d      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004dc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dc8:	d824      	bhi.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004dca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dce:	d029      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004dd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dd4:	d81e      	bhi.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004dd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dda:	d011      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8004ddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004de0:	d818      	bhi.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d020      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004de6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dea:	d113      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004dec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004df0:	3308      	adds	r3, #8
 8004df2:	4618      	mov	r0, r3
 8004df4:	f001 f872 	bl	8005edc <RCCEx_PLL2_Config>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004dfe:	e014      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e04:	3330      	adds	r3, #48	@ 0x30
 8004e06:	4618      	mov	r0, r3
 8004e08:	f001 f900 	bl	800600c <RCCEx_PLL3_Config>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004e12:	e00a      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004e1a:	e006      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004e1c:	bf00      	nop
 8004e1e:	e004      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004e20:	bf00      	nop
 8004e22:	e002      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004e24:	bf00      	nop
 8004e26:	e000      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e2a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10d      	bne.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004e32:	4b59      	ldr	r3, [pc, #356]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004e34:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004e38:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004e3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004e44:	4a54      	ldr	r2, [pc, #336]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004e46:	430b      	orrs	r3, r1
 8004e48:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004e4c:	e003      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e4e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e52:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004e56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004e62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e66:	2300      	movs	r3, #0
 8004e68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e6c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4313      	orrs	r3, r2
 8004e74:	d055      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004e76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004e7e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004e82:	d031      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8004e84:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004e88:	d82a      	bhi.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004e8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e8e:	d02d      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8004e90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e94:	d824      	bhi.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004e96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e9a:	d029      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8004e9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ea0:	d81e      	bhi.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004ea2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ea6:	d011      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8004ea8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004eac:	d818      	bhi.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d020      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eb6:	d113      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004eb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ebc:	3308      	adds	r3, #8
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f001 f80c 	bl	8005edc <RCCEx_PLL2_Config>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004eca:	e014      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ecc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ed0:	3330      	adds	r3, #48	@ 0x30
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f001 f89a 	bl	800600c <RCCEx_PLL3_Config>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004ede:	e00a      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004ee6:	e006      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004ee8:	bf00      	nop
 8004eea:	e004      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004eec:	bf00      	nop
 8004eee:	e002      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004ef0:	bf00      	nop
 8004ef2:	e000      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ef6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10d      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004efe:	4b26      	ldr	r3, [pc, #152]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004f00:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004f04:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004f08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f0c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004f10:	4a21      	ldr	r2, [pc, #132]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004f12:	430b      	orrs	r3, r1
 8004f14:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004f18:	e003      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f1e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8004f22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8004f30:	f003 0320 	and.w	r3, r3, #32
 8004f34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	d057      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8004f42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004f4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f4e:	d033      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8004f50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f54:	d82c      	bhi.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004f56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f5a:	d02f      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8004f5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f60:	d826      	bhi.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004f62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f66:	d02b      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8004f68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f6c:	d820      	bhi.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004f6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f72:	d013      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004f74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f78:	d81a      	bhi.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d022      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8004f7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f82:	d115      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f88:	3308      	adds	r3, #8
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 ffa6 	bl	8005edc <RCCEx_PLL2_Config>
 8004f90:	4603      	mov	r3, r0
 8004f92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004f96:	e016      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8004f98:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fa0:	3330      	adds	r3, #48	@ 0x30
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f001 f832 	bl	800600c <RCCEx_PLL3_Config>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004fae:	e00a      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004fb6:	e006      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004fb8:	bf00      	nop
 8004fba:	e004      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004fbc:	bf00      	nop
 8004fbe:	e002      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004fc0:	bf00      	nop
 8004fc2:	e000      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fc6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10d      	bne.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8004fce:	4bbb      	ldr	r3, [pc, #748]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004fd0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004fd4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004fd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fdc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004fe0:	4ab6      	ldr	r2, [pc, #728]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004fe2:	430b      	orrs	r3, r1
 8004fe4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004fe8:	e003      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004fee:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8004ff2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8005000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005004:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005008:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800500c:	460b      	mov	r3, r1
 800500e:	4313      	orrs	r3, r2
 8005010:	d055      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8005012:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005016:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800501a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800501e:	d031      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005020:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8005024:	d82a      	bhi.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005026:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800502a:	d02d      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800502c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005030:	d824      	bhi.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005032:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005036:	d029      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8005038:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800503c:	d81e      	bhi.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800503e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005042:	d011      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8005044:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005048:	d818      	bhi.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800504a:	2b00      	cmp	r3, #0
 800504c:	d020      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800504e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005052:	d113      	bne.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005054:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005058:	3308      	adds	r3, #8
 800505a:	4618      	mov	r0, r3
 800505c:	f000 ff3e 	bl	8005edc <RCCEx_PLL2_Config>
 8005060:	4603      	mov	r3, r0
 8005062:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005066:	e014      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005068:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800506c:	3330      	adds	r3, #48	@ 0x30
 800506e:	4618      	mov	r0, r3
 8005070:	f000 ffcc 	bl	800600c <RCCEx_PLL3_Config>
 8005074:	4603      	mov	r3, r0
 8005076:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800507a:	e00a      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005082:	e006      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005084:	bf00      	nop
 8005086:	e004      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005088:	bf00      	nop
 800508a:	e002      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800508c:	bf00      	nop
 800508e:	e000      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005090:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005092:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10d      	bne.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800509a:	4b88      	ldr	r3, [pc, #544]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800509c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80050a0:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 80050a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80050ac:	4a83      	ldr	r2, [pc, #524]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80050ae:	430b      	orrs	r3, r1
 80050b0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80050b4:	e003      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80050ba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80050be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c6:	2100      	movs	r1, #0
 80050c8:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80050cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050d4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80050d8:	460b      	mov	r3, r1
 80050da:	4313      	orrs	r3, r2
 80050dc:	d055      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80050de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050e6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80050ea:	d031      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80050ec:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80050f0:	d82a      	bhi.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80050f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050f6:	d02d      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80050f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050fc:	d824      	bhi.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80050fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005102:	d029      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8005104:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005108:	d81e      	bhi.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800510a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800510e:	d011      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8005110:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005114:	d818      	bhi.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005116:	2b00      	cmp	r3, #0
 8005118:	d020      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800511a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800511e:	d113      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005120:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005124:	3308      	adds	r3, #8
 8005126:	4618      	mov	r0, r3
 8005128:	f000 fed8 	bl	8005edc <RCCEx_PLL2_Config>
 800512c:	4603      	mov	r3, r0
 800512e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005132:	e014      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005134:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005138:	3330      	adds	r3, #48	@ 0x30
 800513a:	4618      	mov	r0, r3
 800513c:	f000 ff66 	bl	800600c <RCCEx_PLL3_Config>
 8005140:	4603      	mov	r3, r0
 8005142:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005146:	e00a      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800514e:	e006      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005150:	bf00      	nop
 8005152:	e004      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005154:	bf00      	nop
 8005156:	e002      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005158:	bf00      	nop
 800515a:	e000      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800515c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800515e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10d      	bne.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8005166:	4b55      	ldr	r3, [pc, #340]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005168:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800516c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005170:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005174:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005178:	4a50      	ldr	r2, [pc, #320]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800517a:	430b      	orrs	r3, r1
 800517c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005180:	e003      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005182:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005186:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800518a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800518e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005192:	2100      	movs	r1, #0
 8005194:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8005198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800519c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80051a0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80051a4:	460b      	mov	r3, r1
 80051a6:	4313      	orrs	r3, r2
 80051a8:	d055      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80051aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80051b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051b6:	d031      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80051b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051bc:	d82a      	bhi.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80051be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051c2:	d02d      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80051c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051c8:	d824      	bhi.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80051ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051ce:	d029      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80051d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051d4:	d81e      	bhi.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80051d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051da:	d011      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80051dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051e0:	d818      	bhi.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d020      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80051e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051ea:	d113      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051f0:	3308      	adds	r3, #8
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fe72 	bl	8005edc <RCCEx_PLL2_Config>
 80051f8:	4603      	mov	r3, r0
 80051fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80051fe:	e014      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005200:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005204:	3330      	adds	r3, #48	@ 0x30
 8005206:	4618      	mov	r0, r3
 8005208:	f000 ff00 	bl	800600c <RCCEx_PLL3_Config>
 800520c:	4603      	mov	r3, r0
 800520e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8005212:	e00a      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800521a:	e006      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800521c:	bf00      	nop
 800521e:	e004      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005220:	bf00      	nop
 8005222:	e002      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005224:	bf00      	nop
 8005226:	e000      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800522a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10d      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8005232:	4b22      	ldr	r3, [pc, #136]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005234:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005238:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800523c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005240:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005244:	4a1d      	ldr	r2, [pc, #116]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005246:	430b      	orrs	r3, r1
 8005248:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800524c:	e003      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800524e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005252:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005256:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800525a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005262:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005266:	2300      	movs	r3, #0
 8005268:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800526c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005270:	460b      	mov	r3, r1
 8005272:	4313      	orrs	r3, r2
 8005274:	d055      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005276:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800527a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800527e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005282:	d035      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8005284:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005288:	d82e      	bhi.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800528a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800528e:	d031      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8005290:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005294:	d828      	bhi.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005296:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800529a:	d01b      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 800529c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052a0:	d822      	bhi.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80052a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052aa:	d009      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80052ac:	e01c      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052ae:	4b03      	ldr	r3, [pc, #12]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80052b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b2:	4a02      	ldr	r2, [pc, #8]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80052b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052b8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80052ba:	e01c      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 80052bc:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052c4:	3308      	adds	r3, #8
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 fe08 	bl	8005edc <RCCEx_PLL2_Config>
 80052cc:	4603      	mov	r3, r0
 80052ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80052d2:	e010      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052d8:	3330      	adds	r3, #48	@ 0x30
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fe96 	bl	800600c <RCCEx_PLL3_Config>
 80052e0:	4603      	mov	r3, r0
 80052e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80052e6:	e006      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80052ee:	e002      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80052f0:	bf00      	nop
 80052f2:	e000      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80052f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10d      	bne.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80052fe:	4bc3      	ldr	r3, [pc, #780]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005300:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005304:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005308:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800530c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005310:	4abe      	ldr	r2, [pc, #760]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005312:	430b      	orrs	r3, r1
 8005314:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005318:	e003      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800531e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8005322:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800532e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005332:	2300      	movs	r3, #0
 8005334:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005338:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800533c:	460b      	mov	r3, r1
 800533e:	4313      	orrs	r3, r2
 8005340:	d051      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005342:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005346:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800534a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800534e:	d033      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005350:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005354:	d82c      	bhi.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005356:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800535a:	d02d      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800535c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005360:	d826      	bhi.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005362:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005366:	d019      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8005368:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800536c:	d820      	bhi.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8005372:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005376:	d007      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8005378:	e01a      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800537a:	4ba4      	ldr	r3, [pc, #656]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800537c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800537e:	4aa3      	ldr	r2, [pc, #652]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005384:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005386:	e018      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005388:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800538c:	3308      	adds	r3, #8
 800538e:	4618      	mov	r0, r3
 8005390:	f000 fda4 	bl	8005edc <RCCEx_PLL2_Config>
 8005394:	4603      	mov	r3, r0
 8005396:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800539a:	e00e      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800539c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053a0:	3330      	adds	r3, #48	@ 0x30
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 fe32 	bl	800600c <RCCEx_PLL3_Config>
 80053a8:	4603      	mov	r3, r0
 80053aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80053ae:	e004      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80053b6:	e000      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 80053b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10d      	bne.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80053c2:	4b92      	ldr	r3, [pc, #584]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80053c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053c8:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 80053cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053d0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80053d4:	4a8d      	ldr	r2, [pc, #564]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80053d6:	430b      	orrs	r3, r1
 80053d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80053dc:	e003      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80053e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80053e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ee:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80053f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053f4:	2300      	movs	r3, #0
 80053f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80053f8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80053fc:	460b      	mov	r3, r1
 80053fe:	4313      	orrs	r3, r2
 8005400:	d032      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005402:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005406:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800540a:	2b05      	cmp	r3, #5
 800540c:	d80f      	bhi.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800540e:	2b03      	cmp	r3, #3
 8005410:	d211      	bcs.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8005412:	2b01      	cmp	r3, #1
 8005414:	d911      	bls.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8005416:	2b02      	cmp	r3, #2
 8005418:	d109      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800541a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800541e:	3308      	adds	r3, #8
 8005420:	4618      	mov	r0, r3
 8005422:	f000 fd5b 	bl	8005edc <RCCEx_PLL2_Config>
 8005426:	4603      	mov	r3, r0
 8005428:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800542c:	e006      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005434:	e002      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8005436:	bf00      	nop
 8005438:	e000      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800543a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800543c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10d      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005444:	4b71      	ldr	r3, [pc, #452]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005446:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800544a:	f023 0107 	bic.w	r1, r3, #7
 800544e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005452:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005456:	4a6d      	ldr	r2, [pc, #436]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005458:	430b      	orrs	r3, r1
 800545a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800545e:	e003      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005460:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005464:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005468:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005470:	2100      	movs	r1, #0
 8005472:	6739      	str	r1, [r7, #112]	@ 0x70
 8005474:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005478:	677b      	str	r3, [r7, #116]	@ 0x74
 800547a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800547e:	460b      	mov	r3, r1
 8005480:	4313      	orrs	r3, r2
 8005482:	d024      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005484:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005488:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800548c:	2b00      	cmp	r3, #0
 800548e:	d005      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8005490:	2b08      	cmp	r3, #8
 8005492:	d005      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800549a:	e002      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800549c:	bf00      	nop
 800549e:	e000      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80054a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10d      	bne.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80054aa:	4b58      	ldr	r3, [pc, #352]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80054ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054b0:	f023 0108 	bic.w	r1, r3, #8
 80054b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80054bc:	4a53      	ldr	r2, [pc, #332]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80054be:	430b      	orrs	r3, r1
 80054c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80054c4:	e003      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80054ca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d6:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80054da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054dc:	2300      	movs	r3, #0
 80054de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80054e0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80054e4:	460b      	mov	r3, r1
 80054e6:	4313      	orrs	r3, r2
 80054e8:	f000 80b9 	beq.w	800565e <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80054ec:	4b48      	ldr	r3, [pc, #288]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80054ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f0:	4a47      	ldr	r2, [pc, #284]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80054f2:	f043 0301 	orr.w	r3, r3, #1
 80054f6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054f8:	f7fc fe8e 	bl	8002218 <HAL_GetTick>
 80054fc:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005500:	e00b      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005502:	f7fc fe89 	bl	8002218 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d903      	bls.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005518:	e005      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800551a:	4b3d      	ldr	r3, [pc, #244]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800551c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0ed      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8005526:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800552a:	2b00      	cmp	r3, #0
 800552c:	f040 8093 	bne.w	8005656 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005530:	4b36      	ldr	r3, [pc, #216]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005532:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005536:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800553a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800553e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8005542:	2b00      	cmp	r3, #0
 8005544:	d023      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8005546:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800554a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800554e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8005552:	4293      	cmp	r3, r2
 8005554:	d01b      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005556:	4b2d      	ldr	r3, [pc, #180]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005558:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800555c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005560:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005564:	4b29      	ldr	r3, [pc, #164]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005566:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800556a:	4a28      	ldr	r2, [pc, #160]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800556c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005570:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005574:	4b25      	ldr	r3, [pc, #148]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800557a:	4a24      	ldr	r2, [pc, #144]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800557c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005580:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005584:	4a21      	ldr	r2, [pc, #132]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005586:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800558a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800558e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d019      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559a:	f7fc fe3d 	bl	8002218 <HAL_GetTick>
 800559e:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055a2:	e00d      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055a4:	f7fc fe38 	bl	8002218 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80055ae:	1ad2      	subs	r2, r2, r3
 80055b0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d903      	bls.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 80055be:	e006      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055c0:	4b12      	ldr	r3, [pc, #72]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80055c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0ea      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 80055ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d13a      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80055d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055da:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80055de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055e6:	d115      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 80055e8:	4b08      	ldr	r3, [pc, #32]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80055f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055f4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80055f8:	091b      	lsrs	r3, r3, #4
 80055fa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80055fe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005602:	4a02      	ldr	r2, [pc, #8]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005604:	430b      	orrs	r3, r1
 8005606:	61d3      	str	r3, [r2, #28]
 8005608:	e00a      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800560a:	bf00      	nop
 800560c:	44020c00 	.word	0x44020c00
 8005610:	44020800 	.word	0x44020800
 8005614:	4b9f      	ldr	r3, [pc, #636]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	4a9e      	ldr	r2, [pc, #632]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800561a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800561e:	61d3      	str	r3, [r2, #28]
 8005620:	4b9c      	ldr	r3, [pc, #624]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005622:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005626:	4a9b      	ldr	r2, [pc, #620]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005628:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800562c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005630:	4b98      	ldr	r3, [pc, #608]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005632:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8005636:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800563a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800563e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005642:	4a94      	ldr	r2, [pc, #592]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005644:	430b      	orrs	r3, r1
 8005646:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800564a:	e008      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800564c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005650:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8005654:	e003      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005656:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800565a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800565e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005666:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800566a:	663b      	str	r3, [r7, #96]	@ 0x60
 800566c:	2300      	movs	r3, #0
 800566e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005670:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005674:	460b      	mov	r3, r1
 8005676:	4313      	orrs	r3, r2
 8005678:	d035      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800567a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800567e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005682:	2b30      	cmp	r3, #48	@ 0x30
 8005684:	d014      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8005686:	2b30      	cmp	r3, #48	@ 0x30
 8005688:	d80e      	bhi.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800568a:	2b20      	cmp	r3, #32
 800568c:	d012      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800568e:	2b20      	cmp	r3, #32
 8005690:	d80a      	bhi.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8005692:	2b00      	cmp	r3, #0
 8005694:	d010      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8005696:	2b10      	cmp	r3, #16
 8005698:	d106      	bne.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800569a:	4b7e      	ldr	r3, [pc, #504]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800569c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800569e:	4a7d      	ldr	r2, [pc, #500]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80056a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056a4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80056a6:	e008      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80056ae:	e004      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80056b0:	bf00      	nop
 80056b2:	e002      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80056b4:	bf00      	nop
 80056b6:	e000      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80056b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10d      	bne.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80056c2:	4b74      	ldr	r3, [pc, #464]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80056c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80056c8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80056cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056d0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80056d4:	4a6f      	ldr	r2, [pc, #444]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80056d6:	430b      	orrs	r3, r1
 80056d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80056dc:	e003      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80056e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80056e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ee:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80056f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056f4:	2300      	movs	r3, #0
 80056f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056f8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80056fc:	460b      	mov	r3, r1
 80056fe:	4313      	orrs	r3, r2
 8005700:	d033      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8005702:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005706:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800570e:	2b40      	cmp	r3, #64	@ 0x40
 8005710:	d007      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8005712:	e010      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005714:	4b5f      	ldr	r3, [pc, #380]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005718:	4a5e      	ldr	r2, [pc, #376]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800571a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800571e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005720:	e00d      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005722:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005726:	3308      	adds	r3, #8
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fbd7 	bl	8005edc <RCCEx_PLL2_Config>
 800572e:	4603      	mov	r3, r0
 8005730:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005734:	e003      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800573c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800573e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10d      	bne.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8005746:	4b53      	ldr	r3, [pc, #332]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005748:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800574c:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8005750:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005754:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005758:	4a4e      	ldr	r2, [pc, #312]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800575a:	430b      	orrs	r3, r1
 800575c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005760:	e003      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005762:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005766:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800576a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800576e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005772:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005776:	653b      	str	r3, [r7, #80]	@ 0x50
 8005778:	2300      	movs	r3, #0
 800577a:	657b      	str	r3, [r7, #84]	@ 0x54
 800577c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005780:	460b      	mov	r3, r1
 8005782:	4313      	orrs	r3, r2
 8005784:	d033      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8005786:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800578a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8005792:	2b80      	cmp	r3, #128	@ 0x80
 8005794:	d007      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8005796:	e010      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005798:	4b3e      	ldr	r3, [pc, #248]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800579a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800579c:	4a3d      	ldr	r2, [pc, #244]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800579e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057a2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80057a4:	e00d      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057aa:	3308      	adds	r3, #8
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 fb95 	bl	8005edc <RCCEx_PLL2_Config>
 80057b2:	4603      	mov	r3, r0
 80057b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80057b8:	e003      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80057c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10d      	bne.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80057ca:	4b32      	ldr	r3, [pc, #200]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80057cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80057d0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80057d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057d8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80057dc:	4a2d      	ldr	r2, [pc, #180]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80057de:	430b      	orrs	r3, r1
 80057e0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80057e4:	e003      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80057ea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80057ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f6:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80057fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057fc:	2300      	movs	r3, #0
 80057fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005800:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005804:	460b      	mov	r3, r1
 8005806:	4313      	orrs	r3, r2
 8005808:	d04a      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800580a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800580e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005812:	2b04      	cmp	r3, #4
 8005814:	d827      	bhi.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8005816:	a201      	add	r2, pc, #4	@ (adr r2, 800581c <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8005818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581c:	08005831 	.word	0x08005831
 8005820:	0800583f 	.word	0x0800583f
 8005824:	08005853 	.word	0x08005853
 8005828:	0800586f 	.word	0x0800586f
 800582c:	0800586f 	.word	0x0800586f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005830:	4b18      	ldr	r3, [pc, #96]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005834:	4a17      	ldr	r2, [pc, #92]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005836:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800583a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800583c:	e018      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800583e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005842:	3308      	adds	r3, #8
 8005844:	4618      	mov	r0, r3
 8005846:	f000 fb49 	bl	8005edc <RCCEx_PLL2_Config>
 800584a:	4603      	mov	r3, r0
 800584c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005850:	e00e      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005852:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005856:	3330      	adds	r3, #48	@ 0x30
 8005858:	4618      	mov	r0, r3
 800585a:	f000 fbd7 	bl	800600c <RCCEx_PLL3_Config>
 800585e:	4603      	mov	r3, r0
 8005860:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005864:	e004      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800586c:	e000      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800586e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005870:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10f      	bne.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005878:	4b06      	ldr	r3, [pc, #24]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800587a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800587e:	f023 0107 	bic.w	r1, r3, #7
 8005882:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800588a:	4a02      	ldr	r2, [pc, #8]	@ (8005894 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800588c:	430b      	orrs	r3, r1
 800588e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005892:	e005      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8005894:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005898:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800589c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80058a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80058ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80058ae:	2300      	movs	r3, #0
 80058b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80058b2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80058b6:	460b      	mov	r3, r1
 80058b8:	4313      	orrs	r3, r2
 80058ba:	f000 8081 	beq.w	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80058be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058c6:	2b20      	cmp	r3, #32
 80058c8:	d85f      	bhi.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 80058ca:	a201      	add	r2, pc, #4	@ (adr r2, 80058d0 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 80058cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d0:	08005955 	.word	0x08005955
 80058d4:	0800598b 	.word	0x0800598b
 80058d8:	0800598b 	.word	0x0800598b
 80058dc:	0800598b 	.word	0x0800598b
 80058e0:	0800598b 	.word	0x0800598b
 80058e4:	0800598b 	.word	0x0800598b
 80058e8:	0800598b 	.word	0x0800598b
 80058ec:	0800598b 	.word	0x0800598b
 80058f0:	08005963 	.word	0x08005963
 80058f4:	0800598b 	.word	0x0800598b
 80058f8:	0800598b 	.word	0x0800598b
 80058fc:	0800598b 	.word	0x0800598b
 8005900:	0800598b 	.word	0x0800598b
 8005904:	0800598b 	.word	0x0800598b
 8005908:	0800598b 	.word	0x0800598b
 800590c:	0800598b 	.word	0x0800598b
 8005910:	08005977 	.word	0x08005977
 8005914:	0800598b 	.word	0x0800598b
 8005918:	0800598b 	.word	0x0800598b
 800591c:	0800598b 	.word	0x0800598b
 8005920:	0800598b 	.word	0x0800598b
 8005924:	0800598b 	.word	0x0800598b
 8005928:	0800598b 	.word	0x0800598b
 800592c:	0800598b 	.word	0x0800598b
 8005930:	08005993 	.word	0x08005993
 8005934:	0800598b 	.word	0x0800598b
 8005938:	0800598b 	.word	0x0800598b
 800593c:	0800598b 	.word	0x0800598b
 8005940:	0800598b 	.word	0x0800598b
 8005944:	0800598b 	.word	0x0800598b
 8005948:	0800598b 	.word	0x0800598b
 800594c:	0800598b 	.word	0x0800598b
 8005950:	08005993 	.word	0x08005993
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005954:	4bab      	ldr	r3, [pc, #684]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005958:	4aaa      	ldr	r2, [pc, #680]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800595a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800595e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005960:	e018      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005962:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005966:	3308      	adds	r3, #8
 8005968:	4618      	mov	r0, r3
 800596a:	f000 fab7 	bl	8005edc <RCCEx_PLL2_Config>
 800596e:	4603      	mov	r3, r0
 8005970:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005974:	e00e      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005976:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800597a:	3330      	adds	r3, #48	@ 0x30
 800597c:	4618      	mov	r0, r3
 800597e:	f000 fb45 	bl	800600c <RCCEx_PLL3_Config>
 8005982:	4603      	mov	r3, r0
 8005984:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005988:	e004      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005990:	e000      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8005992:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005994:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10d      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800599c:	4b99      	ldr	r3, [pc, #612]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800599e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059a2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80059a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80059ae:	4a95      	ldr	r2, [pc, #596]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80059b0:	430b      	orrs	r3, r1
 80059b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80059b6:	e003      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80059bc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80059c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80059cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059ce:	2300      	movs	r3, #0
 80059d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80059d6:	460b      	mov	r3, r1
 80059d8:	4313      	orrs	r3, r2
 80059da:	d04e      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80059dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80059e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059e8:	d02e      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 80059ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059ee:	d827      	bhi.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80059f0:	2bc0      	cmp	r3, #192	@ 0xc0
 80059f2:	d02b      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 80059f4:	2bc0      	cmp	r3, #192	@ 0xc0
 80059f6:	d823      	bhi.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80059f8:	2b80      	cmp	r3, #128	@ 0x80
 80059fa:	d017      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 80059fc:	2b80      	cmp	r3, #128	@ 0x80
 80059fe:	d81f      	bhi.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8005a04:	2b40      	cmp	r3, #64	@ 0x40
 8005a06:	d007      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8005a08:	e01a      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a0a:	4b7e      	ldr	r3, [pc, #504]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0e:	4a7d      	ldr	r2, [pc, #500]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a14:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005a16:	e01a      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a1c:	3308      	adds	r3, #8
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 fa5c 	bl	8005edc <RCCEx_PLL2_Config>
 8005a24:	4603      	mov	r3, r0
 8005a26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005a2a:	e010      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a30:	3330      	adds	r3, #48	@ 0x30
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 faea 	bl	800600c <RCCEx_PLL3_Config>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005a3e:	e006      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005a46:	e002      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8005a48:	bf00      	nop
 8005a4a:	e000      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8005a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a4e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10d      	bne.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005a56:	4b6b      	ldr	r3, [pc, #428]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a5c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005a60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a68:	4a66      	ldr	r2, [pc, #408]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005a6a:	430b      	orrs	r3, r1
 8005a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005a70:	e003      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a72:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a76:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8005a7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a82:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005a86:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a88:	2300      	movs	r3, #0
 8005a8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a8c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005a90:	460b      	mov	r3, r1
 8005a92:	4313      	orrs	r3, r2
 8005a94:	d055      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8005a96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a9a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8005a9e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005aa2:	d031      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8005aa4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005aa8:	d82a      	bhi.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005aaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005aae:	d02d      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8005ab0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ab4:	d824      	bhi.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005ab6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005aba:	d029      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8005abc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005ac0:	d81e      	bhi.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ac6:	d011      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8005ac8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005acc:	d818      	bhi.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d020      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8005ad2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ad6:	d113      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ad8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005adc:	3308      	adds	r3, #8
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 f9fc 	bl	8005edc <RCCEx_PLL2_Config>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005aea:	e014      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005aec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005af0:	3330      	adds	r3, #48	@ 0x30
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 fa8a 	bl	800600c <RCCEx_PLL3_Config>
 8005af8:	4603      	mov	r3, r0
 8005afa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005afe:	e00a      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005b06:	e006      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005b08:	bf00      	nop
 8005b0a:	e004      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005b0c:	bf00      	nop
 8005b0e:	e002      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005b10:	bf00      	nop
 8005b12:	e000      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b16:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10d      	bne.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8005b1e:	4b39      	ldr	r3, [pc, #228]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b24:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8005b28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b2c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8005b30:	4a34      	ldr	r2, [pc, #208]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005b32:	430b      	orrs	r3, r1
 8005b34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005b38:	e003      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b3a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b3e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8005b42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b50:	2300      	movs	r3, #0
 8005b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b54:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005b58:	460b      	mov	r3, r1
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	d058      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8005b5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b66:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005b6a:	d031      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8005b6c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005b70:	d82a      	bhi.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005b72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b76:	d02d      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8005b78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b7c:	d824      	bhi.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005b7e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b82:	d029      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8005b84:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b88:	d81e      	bhi.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005b8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b8e:	d011      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8005b90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b94:	d818      	bhi.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d020      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8005b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b9e:	d113      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ba0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ba4:	3308      	adds	r3, #8
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 f998 	bl	8005edc <RCCEx_PLL2_Config>
 8005bac:	4603      	mov	r3, r0
 8005bae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8005bb2:	e014      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005bb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bb8:	3330      	adds	r3, #48	@ 0x30
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 fa26 	bl	800600c <RCCEx_PLL3_Config>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8005bc6:	e00a      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005bce:	e006      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005bd0:	bf00      	nop
 8005bd2:	e004      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005bd4:	bf00      	nop
 8005bd6:	e002      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005bd8:	bf00      	nop
 8005bda:	e000      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bde:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d110      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8005be6:	4b07      	ldr	r3, [pc, #28]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005bec:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005bf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005bf8:	4902      	ldr	r1, [pc, #8]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005c00:	e006      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8005c02:	bf00      	nop
 8005c04:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c08:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c0c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005c10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c18:	2100      	movs	r1, #0
 8005c1a:	6239      	str	r1, [r7, #32]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c22:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005c26:	460b      	mov	r3, r1
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	d055      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8005c2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c34:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005c38:	d031      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8005c3a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005c3e:	d82a      	bhi.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005c40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c44:	d02d      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8005c46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c4a:	d824      	bhi.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005c4c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005c50:	d029      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8005c52:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005c56:	d81e      	bhi.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c5c:	d011      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8005c5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c62:	d818      	bhi.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d020      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8005c68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c6c:	d113      	bne.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c72:	3308      	adds	r3, #8
 8005c74:	4618      	mov	r0, r3
 8005c76:	f000 f931 	bl	8005edc <RCCEx_PLL2_Config>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c80:	e014      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c86:	3330      	adds	r3, #48	@ 0x30
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 f9bf 	bl	800600c <RCCEx_PLL3_Config>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c94:	e00a      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005c9c:	e006      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005c9e:	bf00      	nop
 8005ca0:	e004      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005ca2:	bf00      	nop
 8005ca4:	e002      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005ca6:	bf00      	nop
 8005ca8:	e000      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005caa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10d      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8005cb4:	4b88      	ldr	r3, [pc, #544]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005cba:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8005cbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005cc6:	4984      	ldr	r1, [pc, #528]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005cce:	e003      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005cd4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005cd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	61b9      	str	r1, [r7, #24]
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	61fb      	str	r3, [r7, #28]
 8005cea:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	d03d      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8005cf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cf8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005cfc:	2b03      	cmp	r3, #3
 8005cfe:	d81c      	bhi.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8005d00:	a201      	add	r2, pc, #4	@ (adr r2, 8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8005d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d06:	bf00      	nop
 8005d08:	08005d43 	.word	0x08005d43
 8005d0c:	08005d19 	.word	0x08005d19
 8005d10:	08005d27 	.word	0x08005d27
 8005d14:	08005d43 	.word	0x08005d43
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d18:	4b6f      	ldr	r3, [pc, #444]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d1c:	4a6e      	ldr	r2, [pc, #440]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005d1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d22:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005d24:	e00e      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d2a:	3308      	adds	r3, #8
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 f8d5 	bl	8005edc <RCCEx_PLL2_Config>
 8005d32:	4603      	mov	r3, r0
 8005d34:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8005d38:	e004      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005d40:	e000      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8005d42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d44:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10d      	bne.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005d4c:	4b62      	ldr	r3, [pc, #392]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005d4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d52:	f023 0203 	bic.w	r2, r3, #3
 8005d56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d5a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005d5e:	495e      	ldr	r1, [pc, #376]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005d66:	e003      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d68:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d6c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	2100      	movs	r1, #0
 8005d7a:	6139      	str	r1, [r7, #16]
 8005d7c:	f003 0304 	and.w	r3, r3, #4
 8005d80:	617b      	str	r3, [r7, #20]
 8005d82:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005d86:	460b      	mov	r3, r1
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	d03a      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005d8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d90:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005d94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d98:	d00e      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8005d9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d9e:	d815      	bhi.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d017      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8005da4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005da8:	d110      	bne.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005daa:	4b4b      	ldr	r3, [pc, #300]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dae:	4a4a      	ldr	r2, [pc, #296]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005db4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005db6:	e00e      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005db8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dbc:	3308      	adds	r3, #8
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 f88c 	bl	8005edc <RCCEx_PLL2_Config>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005dca:	e004      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005dd2:	e000      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8005dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10d      	bne.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005dde:	4b3e      	ldr	r3, [pc, #248]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005de0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005de4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005de8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005df0:	4939      	ldr	r1, [pc, #228]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8005df8:	e003      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dfa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005dfe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	f003 0310 	and.w	r3, r3, #16
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	d038      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005e1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e22:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005e26:	2b30      	cmp	r3, #48	@ 0x30
 8005e28:	d01b      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8005e2a:	2b30      	cmp	r3, #48	@ 0x30
 8005e2c:	d815      	bhi.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8005e2e:	2b10      	cmp	r3, #16
 8005e30:	d002      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8005e32:	2b20      	cmp	r3, #32
 8005e34:	d007      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8005e36:	e010      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e38:	4b27      	ldr	r3, [pc, #156]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3c:	4a26      	ldr	r2, [pc, #152]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005e3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e42:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005e44:	e00e      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e4a:	3330      	adds	r3, #48	@ 0x30
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 f8dd 	bl	800600c <RCCEx_PLL3_Config>
 8005e52:	4603      	mov	r3, r0
 8005e54:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005e58:	e004      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005e60:	e000      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8005e62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e64:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10d      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005e6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e72:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005e76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e7a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005e7e:	4916      	ldr	r1, [pc, #88]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005e86:	e003      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e88:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e8c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	2100      	movs	r1, #0
 8005e9a:	6039      	str	r1, [r7, #0]
 8005e9c:	f003 0308 	and.w	r3, r3, #8
 8005ea0:	607b      	str	r3, [r7, #4]
 8005ea2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	d00c      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005eac:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005eae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005eb2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005eb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005eba:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8005ebe:	4906      	ldr	r1, [pc, #24]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8005ec6:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ed6:	bf00      	nop
 8005ed8:	44020c00 	.word	0x44020c00

08005edc <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005ee4:	4b48      	ldr	r3, [pc, #288]	@ (8006008 <RCCEx_PLL2_Config+0x12c>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a47      	ldr	r2, [pc, #284]	@ (8006008 <RCCEx_PLL2_Config+0x12c>)
 8005eea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005eee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ef0:	f7fc f992 	bl	8002218 <HAL_GetTick>
 8005ef4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ef6:	e008      	b.n	8005f0a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ef8:	f7fc f98e 	bl	8002218 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d901      	bls.n	8005f0a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e07a      	b.n	8006000 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f0a:	4b3f      	ldr	r3, [pc, #252]	@ (8006008 <RCCEx_PLL2_Config+0x12c>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1f0      	bne.n	8005ef8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005f16:	4b3c      	ldr	r3, [pc, #240]	@ (8006008 <RCCEx_PLL2_Config+0x12c>)
 8005f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005f1e:	f023 0303 	bic.w	r3, r3, #3
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	6811      	ldr	r1, [r2, #0]
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	6852      	ldr	r2, [r2, #4]
 8005f2a:	0212      	lsls	r2, r2, #8
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	4936      	ldr	r1, [pc, #216]	@ (8006008 <RCCEx_PLL2_Config+0x12c>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	025b      	lsls	r3, r3, #9
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	041b      	lsls	r3, r3, #16
 8005f52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005f56:	431a      	orrs	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	061b      	lsls	r3, r3, #24
 8005f60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005f64:	4928      	ldr	r1, [pc, #160]	@ (8006008 <RCCEx_PLL2_Config+0x12c>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005f6a:	4b27      	ldr	r3, [pc, #156]	@ (8006008 <RCCEx_PLL2_Config+0x12c>)
 8005f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6e:	f023 020c 	bic.w	r2, r3, #12
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	4924      	ldr	r1, [pc, #144]	@ (8006008 <RCCEx_PLL2_Config+0x12c>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005f7c:	4b22      	ldr	r3, [pc, #136]	@ (8006008 <RCCEx_PLL2_Config+0x12c>)
 8005f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f80:	f023 0220 	bic.w	r2, r3, #32
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	69db      	ldr	r3, [r3, #28]
 8005f88:	491f      	ldr	r1, [pc, #124]	@ (8006008 <RCCEx_PLL2_Config+0x12c>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8006008 <RCCEx_PLL2_Config+0x12c>)
 8005f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f96:	491c      	ldr	r1, [pc, #112]	@ (8006008 <RCCEx_PLL2_Config+0x12c>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8006008 <RCCEx_PLL2_Config+0x12c>)
 8005f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa0:	4a19      	ldr	r2, [pc, #100]	@ (8006008 <RCCEx_PLL2_Config+0x12c>)
 8005fa2:	f023 0310 	bic.w	r3, r3, #16
 8005fa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005fa8:	4b17      	ldr	r3, [pc, #92]	@ (8006008 <RCCEx_PLL2_Config+0x12c>)
 8005faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fb0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6a12      	ldr	r2, [r2, #32]
 8005fb8:	00d2      	lsls	r2, r2, #3
 8005fba:	4913      	ldr	r1, [pc, #76]	@ (8006008 <RCCEx_PLL2_Config+0x12c>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005fc0:	4b11      	ldr	r3, [pc, #68]	@ (8006008 <RCCEx_PLL2_Config+0x12c>)
 8005fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc4:	4a10      	ldr	r2, [pc, #64]	@ (8006008 <RCCEx_PLL2_Config+0x12c>)
 8005fc6:	f043 0310 	orr.w	r3, r3, #16
 8005fca:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8006008 <RCCEx_PLL2_Config+0x12c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8006008 <RCCEx_PLL2_Config+0x12c>)
 8005fd2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005fd6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005fd8:	f7fc f91e 	bl	8002218 <HAL_GetTick>
 8005fdc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005fde:	e008      	b.n	8005ff2 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005fe0:	f7fc f91a 	bl	8002218 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d901      	bls.n	8005ff2 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e006      	b.n	8006000 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ff2:	4b05      	ldr	r3, [pc, #20]	@ (8006008 <RCCEx_PLL2_Config+0x12c>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0f0      	beq.n	8005fe0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0

}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	44020c00 	.word	0x44020c00

0800600c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8006014:	4b48      	ldr	r3, [pc, #288]	@ (8006138 <RCCEx_PLL3_Config+0x12c>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a47      	ldr	r2, [pc, #284]	@ (8006138 <RCCEx_PLL3_Config+0x12c>)
 800601a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800601e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006020:	f7fc f8fa 	bl	8002218 <HAL_GetTick>
 8006024:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006026:	e008      	b.n	800603a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006028:	f7fc f8f6 	bl	8002218 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b02      	cmp	r3, #2
 8006034:	d901      	bls.n	800603a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e07a      	b.n	8006130 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800603a:	4b3f      	ldr	r3, [pc, #252]	@ (8006138 <RCCEx_PLL3_Config+0x12c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1f0      	bne.n	8006028 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8006046:	4b3c      	ldr	r3, [pc, #240]	@ (8006138 <RCCEx_PLL3_Config+0x12c>)
 8006048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800604a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800604e:	f023 0303 	bic.w	r3, r3, #3
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	6811      	ldr	r1, [r2, #0]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	6852      	ldr	r2, [r2, #4]
 800605a:	0212      	lsls	r2, r2, #8
 800605c:	430a      	orrs	r2, r1
 800605e:	4936      	ldr	r1, [pc, #216]	@ (8006138 <RCCEx_PLL3_Config+0x12c>)
 8006060:	4313      	orrs	r3, r2
 8006062:	630b      	str	r3, [r1, #48]	@ 0x30
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	3b01      	subs	r3, #1
 800606a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	3b01      	subs	r3, #1
 8006074:	025b      	lsls	r3, r3, #9
 8006076:	b29b      	uxth	r3, r3
 8006078:	431a      	orrs	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	3b01      	subs	r3, #1
 8006080:	041b      	lsls	r3, r3, #16
 8006082:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006086:	431a      	orrs	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	3b01      	subs	r3, #1
 800608e:	061b      	lsls	r3, r3, #24
 8006090:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006094:	4928      	ldr	r1, [pc, #160]	@ (8006138 <RCCEx_PLL3_Config+0x12c>)
 8006096:	4313      	orrs	r3, r2
 8006098:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800609a:	4b27      	ldr	r3, [pc, #156]	@ (8006138 <RCCEx_PLL3_Config+0x12c>)
 800609c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800609e:	f023 020c 	bic.w	r2, r3, #12
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	4924      	ldr	r1, [pc, #144]	@ (8006138 <RCCEx_PLL3_Config+0x12c>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80060ac:	4b22      	ldr	r3, [pc, #136]	@ (8006138 <RCCEx_PLL3_Config+0x12c>)
 80060ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b0:	f023 0220 	bic.w	r2, r3, #32
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	491f      	ldr	r1, [pc, #124]	@ (8006138 <RCCEx_PLL3_Config+0x12c>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80060be:	4b1e      	ldr	r3, [pc, #120]	@ (8006138 <RCCEx_PLL3_Config+0x12c>)
 80060c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c6:	491c      	ldr	r1, [pc, #112]	@ (8006138 <RCCEx_PLL3_Config+0x12c>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80060cc:	4b1a      	ldr	r3, [pc, #104]	@ (8006138 <RCCEx_PLL3_Config+0x12c>)
 80060ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d0:	4a19      	ldr	r2, [pc, #100]	@ (8006138 <RCCEx_PLL3_Config+0x12c>)
 80060d2:	f023 0310 	bic.w	r3, r3, #16
 80060d6:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80060d8:	4b17      	ldr	r3, [pc, #92]	@ (8006138 <RCCEx_PLL3_Config+0x12c>)
 80060da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060dc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060e0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6a12      	ldr	r2, [r2, #32]
 80060e8:	00d2      	lsls	r2, r2, #3
 80060ea:	4913      	ldr	r1, [pc, #76]	@ (8006138 <RCCEx_PLL3_Config+0x12c>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80060f0:	4b11      	ldr	r3, [pc, #68]	@ (8006138 <RCCEx_PLL3_Config+0x12c>)
 80060f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f4:	4a10      	ldr	r2, [pc, #64]	@ (8006138 <RCCEx_PLL3_Config+0x12c>)
 80060f6:	f043 0310 	orr.w	r3, r3, #16
 80060fa:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80060fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006138 <RCCEx_PLL3_Config+0x12c>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a0d      	ldr	r2, [pc, #52]	@ (8006138 <RCCEx_PLL3_Config+0x12c>)
 8006102:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006106:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006108:	f7fc f886 	bl	8002218 <HAL_GetTick>
 800610c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800610e:	e008      	b.n	8006122 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006110:	f7fc f882 	bl	8002218 <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b02      	cmp	r3, #2
 800611c:	d901      	bls.n	8006122 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e006      	b.n	8006130 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006122:	4b05      	ldr	r3, [pc, #20]	@ (8006138 <RCCEx_PLL3_Config+0x12c>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d0f0      	beq.n	8006110 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	44020c00 	.word	0x44020c00

0800613c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d071      	beq.n	8006232 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d106      	bne.n	8006168 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7fb fcfa 	bl	8001b5c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2202      	movs	r2, #2
 800616c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006170:	4b32      	ldr	r3, [pc, #200]	@ (800623c <HAL_RTC_Init+0x100>)
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f003 0310 	and.w	r3, r3, #16
 8006178:	2b10      	cmp	r3, #16
 800617a:	d051      	beq.n	8006220 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800617c:	4b2f      	ldr	r3, [pc, #188]	@ (800623c <HAL_RTC_Init+0x100>)
 800617e:	22ca      	movs	r2, #202	@ 0xca
 8006180:	625a      	str	r2, [r3, #36]	@ 0x24
 8006182:	4b2e      	ldr	r3, [pc, #184]	@ (800623c <HAL_RTC_Init+0x100>)
 8006184:	2253      	movs	r2, #83	@ 0x53
 8006186:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fa53 	bl	8006634 <RTC_EnterInitMode>
 800618e:	4603      	mov	r3, r0
 8006190:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006192:	7bfb      	ldrb	r3, [r7, #15]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d13f      	bne.n	8006218 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006198:	4b28      	ldr	r3, [pc, #160]	@ (800623c <HAL_RTC_Init+0x100>)
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	4a27      	ldr	r2, [pc, #156]	@ (800623c <HAL_RTC_Init+0x100>)
 800619e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 80061a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061a6:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80061a8:	4b24      	ldr	r3, [pc, #144]	@ (800623c <HAL_RTC_Init+0x100>)
 80061aa:	699a      	ldr	r2, [r3, #24]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6859      	ldr	r1, [r3, #4]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	4319      	orrs	r1, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	430b      	orrs	r3, r1
 80061bc:	491f      	ldr	r1, [pc, #124]	@ (800623c <HAL_RTC_Init+0x100>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	041b      	lsls	r3, r3, #16
 80061cc:	491b      	ldr	r1, [pc, #108]	@ (800623c <HAL_RTC_Init+0x100>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80061d2:	4b1a      	ldr	r3, [pc, #104]	@ (800623c <HAL_RTC_Init+0x100>)
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e2:	430b      	orrs	r3, r1
 80061e4:	4915      	ldr	r1, [pc, #84]	@ (800623c <HAL_RTC_Init+0x100>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fa5e 	bl	80066ac <RTC_ExitInitMode>
 80061f0:	4603      	mov	r3, r0
 80061f2:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10e      	bne.n	8006218 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 80061fa:	4b10      	ldr	r3, [pc, #64]	@ (800623c <HAL_RTC_Init+0x100>)
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a19      	ldr	r1, [r3, #32]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	4319      	orrs	r1, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	430b      	orrs	r3, r1
 8006212:	490a      	ldr	r1, [pc, #40]	@ (800623c <HAL_RTC_Init+0x100>)
 8006214:	4313      	orrs	r3, r2
 8006216:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006218:	4b08      	ldr	r3, [pc, #32]	@ (800623c <HAL_RTC_Init+0x100>)
 800621a:	22ff      	movs	r2, #255	@ 0xff
 800621c:	625a      	str	r2, [r3, #36]	@ 0x24
 800621e:	e001      	b.n	8006224 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006224:	7bfb      	ldrb	r3, [r7, #15]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d103      	bne.n	8006232 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8006232:	7bfb      	ldrb	r3, [r7, #15]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	44007800 	.word	0x44007800

08006240 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006240:	b590      	push	{r4, r7, lr}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006252:	2b01      	cmp	r3, #1
 8006254:	d101      	bne.n	800625a <HAL_RTC_SetTime+0x1a>
 8006256:	2302      	movs	r3, #2
 8006258:	e07e      	b.n	8006358 <HAL_RTC_SetTime+0x118>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2202      	movs	r2, #2
 8006266:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800626a:	4b3d      	ldr	r3, [pc, #244]	@ (8006360 <HAL_RTC_SetTime+0x120>)
 800626c:	22ca      	movs	r2, #202	@ 0xca
 800626e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006270:	4b3b      	ldr	r3, [pc, #236]	@ (8006360 <HAL_RTC_SetTime+0x120>)
 8006272:	2253      	movs	r2, #83	@ 0x53
 8006274:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 f9dc 	bl	8006634 <RTC_EnterInitMode>
 800627c:	4603      	mov	r3, r0
 800627e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006280:	7cfb      	ldrb	r3, [r7, #19]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d159      	bne.n	800633a <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8006286:	4b36      	ldr	r3, [pc, #216]	@ (8006360 <HAL_RTC_SetTime+0x120>)
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800628e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006292:	d04d      	beq.n	8006330 <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d125      	bne.n	80062e6 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800629a:	4b31      	ldr	r3, [pc, #196]	@ (8006360 <HAL_RTC_SetTime+0x120>)
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d102      	bne.n	80062ac <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2200      	movs	r2, #0
 80062aa:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f000 fa39 	bl	8006728 <RTC_ByteToBcd2>
 80062b6:	4603      	mov	r3, r0
 80062b8:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	785b      	ldrb	r3, [r3, #1]
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 fa32 	bl	8006728 <RTC_ByteToBcd2>
 80062c4:	4603      	mov	r3, r0
 80062c6:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80062c8:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	789b      	ldrb	r3, [r3, #2]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 fa2a 	bl	8006728 <RTC_ByteToBcd2>
 80062d4:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80062d6:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	78db      	ldrb	r3, [r3, #3]
 80062de:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	e017      	b.n	8006316 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80062e6:	4b1e      	ldr	r3, [pc, #120]	@ (8006360 <HAL_RTC_SetTime+0x120>)
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d102      	bne.n	80062f8 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2200      	movs	r2, #0
 80062f6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	785b      	ldrb	r3, [r3, #1]
 8006302:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006304:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800630a:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	78db      	ldrb	r3, [r3, #3]
 8006310:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006312:	4313      	orrs	r3, r2
 8006314:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8006316:	4a12      	ldr	r2, [pc, #72]	@ (8006360 <HAL_RTC_SetTime+0x120>)
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800631e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006322:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8006324:	4b0e      	ldr	r3, [pc, #56]	@ (8006360 <HAL_RTC_SetTime+0x120>)
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	4a0d      	ldr	r2, [pc, #52]	@ (8006360 <HAL_RTC_SetTime+0x120>)
 800632a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800632e:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 f9bb 	bl	80066ac <RTC_ExitInitMode>
 8006336:	4603      	mov	r3, r0
 8006338:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800633a:	4b09      	ldr	r3, [pc, #36]	@ (8006360 <HAL_RTC_SetTime+0x120>)
 800633c:	22ff      	movs	r2, #255	@ 0xff
 800633e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8006340:	7cfb      	ldrb	r3, [r7, #19]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d103      	bne.n	800634e <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8006356:	7cfb      	ldrb	r3, [r7, #19]
}
 8006358:	4618      	mov	r0, r3
 800635a:	371c      	adds	r7, #28
 800635c:	46bd      	mov	sp, r7
 800635e:	bd90      	pop	{r4, r7, pc}
 8006360:	44007800 	.word	0x44007800

08006364 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8006370:	4b2c      	ldr	r3, [pc, #176]	@ (8006424 <HAL_RTC_GetTime+0xc0>)
 8006372:	689a      	ldr	r2, [r3, #8]
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8006378:	4b2a      	ldr	r3, [pc, #168]	@ (8006424 <HAL_RTC_GetTime+0xc0>)
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006380:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006384:	d049      	beq.n	800641a <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8006386:	4b27      	ldr	r3, [pc, #156]	@ (8006424 <HAL_RTC_GetTime+0xc0>)
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8006392:	4b24      	ldr	r3, [pc, #144]	@ (8006424 <HAL_RTC_GetTime+0xc0>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800639a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800639e:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	0c1b      	lsrs	r3, r3, #16
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	0a1b      	lsrs	r3, r3, #8
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	0d9b      	lsrs	r3, r3, #22
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d11a      	bne.n	800641a <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f000 f9bd 	bl	8006768 <RTC_Bcd2ToByte>
 80063ee:	4603      	mov	r3, r0
 80063f0:	461a      	mov	r2, r3
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	785b      	ldrb	r3, [r3, #1]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 f9b4 	bl	8006768 <RTC_Bcd2ToByte>
 8006400:	4603      	mov	r3, r0
 8006402:	461a      	mov	r2, r3
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	789b      	ldrb	r3, [r3, #2]
 800640c:	4618      	mov	r0, r3
 800640e:	f000 f9ab 	bl	8006768 <RTC_Bcd2ToByte>
 8006412:	4603      	mov	r3, r0
 8006414:	461a      	mov	r2, r3
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	44007800 	.word	0x44007800

08006428 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006428:	b590      	push	{r4, r7, lr}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800643a:	2b01      	cmp	r3, #1
 800643c:	d101      	bne.n	8006442 <HAL_RTC_SetDate+0x1a>
 800643e:	2302      	movs	r3, #2
 8006440:	e071      	b.n	8006526 <HAL_RTC_SetDate+0xfe>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2202      	movs	r2, #2
 800644e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10e      	bne.n	8006476 <HAL_RTC_SetDate+0x4e>
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	785b      	ldrb	r3, [r3, #1]
 800645c:	f003 0310 	and.w	r3, r3, #16
 8006460:	2b00      	cmp	r3, #0
 8006462:	d008      	beq.n	8006476 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	785b      	ldrb	r3, [r3, #1]
 8006468:	f023 0310 	bic.w	r3, r3, #16
 800646c:	b2db      	uxtb	r3, r3
 800646e:	330a      	adds	r3, #10
 8006470:	b2da      	uxtb	r2, r3
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d11c      	bne.n	80064b6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	78db      	ldrb	r3, [r3, #3]
 8006480:	4618      	mov	r0, r3
 8006482:	f000 f951 	bl	8006728 <RTC_ByteToBcd2>
 8006486:	4603      	mov	r3, r0
 8006488:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	785b      	ldrb	r3, [r3, #1]
 800648e:	4618      	mov	r0, r3
 8006490:	f000 f94a 	bl	8006728 <RTC_ByteToBcd2>
 8006494:	4603      	mov	r3, r0
 8006496:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006498:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	789b      	ldrb	r3, [r3, #2]
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 f942 	bl	8006728 <RTC_ByteToBcd2>
 80064a4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80064a6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80064b0:	4313      	orrs	r3, r2
 80064b2:	617b      	str	r3, [r7, #20]
 80064b4:	e00e      	b.n	80064d4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	78db      	ldrb	r3, [r3, #3]
 80064ba:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	785b      	ldrb	r3, [r3, #1]
 80064c0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80064c2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80064c8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80064d0:	4313      	orrs	r3, r2
 80064d2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064d4:	4b16      	ldr	r3, [pc, #88]	@ (8006530 <HAL_RTC_SetDate+0x108>)
 80064d6:	22ca      	movs	r2, #202	@ 0xca
 80064d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80064da:	4b15      	ldr	r3, [pc, #84]	@ (8006530 <HAL_RTC_SetDate+0x108>)
 80064dc:	2253      	movs	r2, #83	@ 0x53
 80064de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 f8a7 	bl	8006634 <RTC_EnterInitMode>
 80064e6:	4603      	mov	r3, r0
 80064e8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80064ea:	7cfb      	ldrb	r3, [r7, #19]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10b      	bne.n	8006508 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80064f0:	4a0f      	ldr	r2, [pc, #60]	@ (8006530 <HAL_RTC_SetDate+0x108>)
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80064f8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80064fc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f000 f8d4 	bl	80066ac <RTC_ExitInitMode>
 8006504:	4603      	mov	r3, r0
 8006506:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006508:	4b09      	ldr	r3, [pc, #36]	@ (8006530 <HAL_RTC_SetDate+0x108>)
 800650a:	22ff      	movs	r2, #255	@ 0xff
 800650c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800650e:	7cfb      	ldrb	r3, [r7, #19]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d103      	bne.n	800651c <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8006524:	7cfb      	ldrb	r3, [r7, #19]
}
 8006526:	4618      	mov	r0, r3
 8006528:	371c      	adds	r7, #28
 800652a:	46bd      	mov	sp, r7
 800652c:	bd90      	pop	{r4, r7, pc}
 800652e:	bf00      	nop
 8006530:	44007800 	.word	0x44007800

08006534 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8006540:	4b22      	ldr	r3, [pc, #136]	@ (80065cc <HAL_RTC_GetDate+0x98>)
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006548:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800654c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	0c1b      	lsrs	r3, r3, #16
 8006552:	b2da      	uxtb	r2, r3
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	0a1b      	lsrs	r3, r3, #8
 800655c:	b2db      	uxtb	r3, r3
 800655e:	f003 031f 	and.w	r3, r3, #31
 8006562:	b2da      	uxtb	r2, r3
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	b2db      	uxtb	r3, r3
 800656c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006570:	b2da      	uxtb	r2, r3
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	0b5b      	lsrs	r3, r3, #13
 800657a:	b2db      	uxtb	r3, r3
 800657c:	f003 0307 	and.w	r3, r3, #7
 8006580:	b2da      	uxtb	r2, r3
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d11a      	bne.n	80065c2 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	78db      	ldrb	r3, [r3, #3]
 8006590:	4618      	mov	r0, r3
 8006592:	f000 f8e9 	bl	8006768 <RTC_Bcd2ToByte>
 8006596:	4603      	mov	r3, r0
 8006598:	461a      	mov	r2, r3
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	785b      	ldrb	r3, [r3, #1]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 f8e0 	bl	8006768 <RTC_Bcd2ToByte>
 80065a8:	4603      	mov	r3, r0
 80065aa:	461a      	mov	r2, r3
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	789b      	ldrb	r3, [r3, #2]
 80065b4:	4618      	mov	r0, r3
 80065b6:	f000 f8d7 	bl	8006768 <RTC_Bcd2ToByte>
 80065ba:	4603      	mov	r3, r0
 80065bc:	461a      	mov	r2, r3
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	44007800 	.word	0x44007800

080065d0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80065d8:	4b15      	ldr	r3, [pc, #84]	@ (8006630 <HAL_RTC_WaitForSynchro+0x60>)
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	4a14      	ldr	r2, [pc, #80]	@ (8006630 <HAL_RTC_WaitForSynchro+0x60>)
 80065de:	f023 0320 	bic.w	r3, r3, #32
 80065e2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80065e4:	f7fb fe18 	bl	8002218 <HAL_GetTick>
 80065e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80065ea:	e013      	b.n	8006614 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80065ec:	f7fb fe14 	bl	8002218 <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80065fa:	d90b      	bls.n	8006614 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80065fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006630 <HAL_RTC_WaitForSynchro+0x60>)
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	f003 0320 	and.w	r3, r3, #32
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10c      	bne.n	8006622 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2203      	movs	r2, #3
 800660c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e008      	b.n	8006626 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006614:	4b06      	ldr	r3, [pc, #24]	@ (8006630 <HAL_RTC_WaitForSynchro+0x60>)
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f003 0320 	and.w	r3, r3, #32
 800661c:	2b00      	cmp	r3, #0
 800661e:	d0e5      	beq.n	80065ec <HAL_RTC_WaitForSynchro+0x1c>
 8006620:	e000      	b.n	8006624 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 8006622:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	44007800 	.word	0x44007800

08006634 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006640:	4b19      	ldr	r3, [pc, #100]	@ (80066a8 <RTC_EnterInitMode+0x74>)
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006648:	2b00      	cmp	r3, #0
 800664a:	d128      	bne.n	800669e <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800664c:	4b16      	ldr	r3, [pc, #88]	@ (80066a8 <RTC_EnterInitMode+0x74>)
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	4a15      	ldr	r2, [pc, #84]	@ (80066a8 <RTC_EnterInitMode+0x74>)
 8006652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006656:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006658:	f7fb fdde 	bl	8002218 <HAL_GetTick>
 800665c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800665e:	e013      	b.n	8006688 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006660:	f7fb fdda 	bl	8002218 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800666e:	d90b      	bls.n	8006688 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006670:	4b0d      	ldr	r3, [pc, #52]	@ (80066a8 <RTC_EnterInitMode+0x74>)
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10f      	bne.n	800669c <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2203      	movs	r2, #3
 8006684:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006688:	4b07      	ldr	r3, [pc, #28]	@ (80066a8 <RTC_EnterInitMode+0x74>)
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006690:	2b00      	cmp	r3, #0
 8006692:	d104      	bne.n	800669e <RTC_EnterInitMode+0x6a>
 8006694:	7bfb      	ldrb	r3, [r7, #15]
 8006696:	2b03      	cmp	r3, #3
 8006698:	d1e2      	bne.n	8006660 <RTC_EnterInitMode+0x2c>
 800669a:	e000      	b.n	800669e <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800669c:	bf00      	nop
        }
      }
    }
  }

  return status;
 800669e:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	44007800 	.word	0x44007800

080066ac <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80066b8:	4b1a      	ldr	r3, [pc, #104]	@ (8006724 <RTC_ExitInitMode+0x78>)
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	4a19      	ldr	r2, [pc, #100]	@ (8006724 <RTC_ExitInitMode+0x78>)
 80066be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066c2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80066c4:	4b17      	ldr	r3, [pc, #92]	@ (8006724 <RTC_ExitInitMode+0x78>)
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	f003 0320 	and.w	r3, r3, #32
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10c      	bne.n	80066ea <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f7ff ff7d 	bl	80065d0 <HAL_RTC_WaitForSynchro>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d01e      	beq.n	800671a <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2203      	movs	r2, #3
 80066e0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	73fb      	strb	r3, [r7, #15]
 80066e8:	e017      	b.n	800671a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80066ea:	4b0e      	ldr	r3, [pc, #56]	@ (8006724 <RTC_ExitInitMode+0x78>)
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	4a0d      	ldr	r2, [pc, #52]	@ (8006724 <RTC_ExitInitMode+0x78>)
 80066f0:	f023 0320 	bic.w	r3, r3, #32
 80066f4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7ff ff6a 	bl	80065d0 <HAL_RTC_WaitForSynchro>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d005      	beq.n	800670e <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2203      	movs	r2, #3
 8006706:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800670e:	4b05      	ldr	r3, [pc, #20]	@ (8006724 <RTC_ExitInitMode+0x78>)
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	4a04      	ldr	r2, [pc, #16]	@ (8006724 <RTC_ExitInitMode+0x78>)
 8006714:	f043 0320 	orr.w	r3, r3, #32
 8006718:	6193      	str	r3, [r2, #24]
  }
  return status;
 800671a:	7bfb      	ldrb	r3, [r7, #15]
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	44007800 	.word	0x44007800

08006728 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	4603      	mov	r3, r0
 8006730:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 8006732:	2300      	movs	r3, #0
 8006734:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 8006736:	79fb      	ldrb	r3, [r7, #7]
 8006738:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 800673a:	e005      	b.n	8006748 <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	3301      	adds	r3, #1
 8006740:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 8006742:	7afb      	ldrb	r3, [r7, #11]
 8006744:	3b0a      	subs	r3, #10
 8006746:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 8006748:	7afb      	ldrb	r3, [r7, #11]
 800674a:	2b09      	cmp	r3, #9
 800674c:	d8f6      	bhi.n	800673c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	b2db      	uxtb	r3, r3
 8006752:	011b      	lsls	r3, r3, #4
 8006754:	b2da      	uxtb	r2, r3
 8006756:	7afb      	ldrb	r3, [r7, #11]
 8006758:	4313      	orrs	r3, r2
 800675a:	b2db      	uxtb	r3, r3
}
 800675c:	4618      	mov	r0, r3
 800675e:	3714      	adds	r7, #20
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	4603      	mov	r3, r0
 8006770:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;

  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8006772:	79fb      	ldrb	r3, [r7, #7]
 8006774:	091b      	lsrs	r3, r3, #4
 8006776:	b2db      	uxtb	r3, r3
 8006778:	461a      	mov	r2, r3
 800677a:	4613      	mov	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	005b      	lsls	r3, r3, #1
 8006782:	60fb      	str	r3, [r7, #12]

  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	b2da      	uxtb	r2, r3
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	f003 030f 	and.w	r3, r3, #15
 800678e:	b2db      	uxtb	r3, r3
 8006790:	4413      	add	r3, r2
 8006792:	b2db      	uxtb	r3, r3
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	4910      	ldr	r1, [pc, #64]	@ (80067f4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	431a      	orrs	r2, r3
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	490c      	ldr	r1, [pc, #48]	@ (80067f8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 80067cc:	4b0a      	ldr	r3, [pc, #40]	@ (80067f8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80067ce:	6a1b      	ldr	r3, [r3, #32]
 80067d0:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	6919      	ldr	r1, [r3, #16]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	041b      	lsls	r3, r3, #16
 80067de:	430b      	orrs	r3, r1
 80067e0:	4905      	ldr	r1, [pc, #20]	@ (80067f8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	44007800 	.word	0x44007800
 80067f8:	44007c00 	.word	0x44007c00

080067fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e049      	b.n	80068a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d106      	bne.n	8006828 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7fb fc18 	bl	8002058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2202      	movs	r2, #2
 800682c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	3304      	adds	r3, #4
 8006838:	4619      	mov	r1, r3
 800683a:	4610      	mov	r0, r2
 800683c:	f000 fe50 	bl	80074e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
	...

080068ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d001      	beq.n	80068c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e07c      	b.n	80069be <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68da      	ldr	r2, [r3, #12]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f042 0201 	orr.w	r2, r2, #1
 80068da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a3a      	ldr	r2, [pc, #232]	@ (80069cc <HAL_TIM_Base_Start_IT+0x120>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d04a      	beq.n	800697c <HAL_TIM_Base_Start_IT+0xd0>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a39      	ldr	r2, [pc, #228]	@ (80069d0 <HAL_TIM_Base_Start_IT+0x124>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d045      	beq.n	800697c <HAL_TIM_Base_Start_IT+0xd0>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068f8:	d040      	beq.n	800697c <HAL_TIM_Base_Start_IT+0xd0>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006902:	d03b      	beq.n	800697c <HAL_TIM_Base_Start_IT+0xd0>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a32      	ldr	r2, [pc, #200]	@ (80069d4 <HAL_TIM_Base_Start_IT+0x128>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d036      	beq.n	800697c <HAL_TIM_Base_Start_IT+0xd0>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a31      	ldr	r2, [pc, #196]	@ (80069d8 <HAL_TIM_Base_Start_IT+0x12c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d031      	beq.n	800697c <HAL_TIM_Base_Start_IT+0xd0>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a2f      	ldr	r2, [pc, #188]	@ (80069dc <HAL_TIM_Base_Start_IT+0x130>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d02c      	beq.n	800697c <HAL_TIM_Base_Start_IT+0xd0>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a2e      	ldr	r2, [pc, #184]	@ (80069e0 <HAL_TIM_Base_Start_IT+0x134>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d027      	beq.n	800697c <HAL_TIM_Base_Start_IT+0xd0>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a2c      	ldr	r2, [pc, #176]	@ (80069e4 <HAL_TIM_Base_Start_IT+0x138>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d022      	beq.n	800697c <HAL_TIM_Base_Start_IT+0xd0>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a2b      	ldr	r2, [pc, #172]	@ (80069e8 <HAL_TIM_Base_Start_IT+0x13c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d01d      	beq.n	800697c <HAL_TIM_Base_Start_IT+0xd0>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a29      	ldr	r2, [pc, #164]	@ (80069ec <HAL_TIM_Base_Start_IT+0x140>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d018      	beq.n	800697c <HAL_TIM_Base_Start_IT+0xd0>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a28      	ldr	r2, [pc, #160]	@ (80069f0 <HAL_TIM_Base_Start_IT+0x144>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d013      	beq.n	800697c <HAL_TIM_Base_Start_IT+0xd0>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a26      	ldr	r2, [pc, #152]	@ (80069f4 <HAL_TIM_Base_Start_IT+0x148>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d00e      	beq.n	800697c <HAL_TIM_Base_Start_IT+0xd0>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a25      	ldr	r2, [pc, #148]	@ (80069f8 <HAL_TIM_Base_Start_IT+0x14c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d009      	beq.n	800697c <HAL_TIM_Base_Start_IT+0xd0>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a23      	ldr	r2, [pc, #140]	@ (80069fc <HAL_TIM_Base_Start_IT+0x150>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d004      	beq.n	800697c <HAL_TIM_Base_Start_IT+0xd0>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a22      	ldr	r2, [pc, #136]	@ (8006a00 <HAL_TIM_Base_Start_IT+0x154>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d115      	bne.n	80069a8 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689a      	ldr	r2, [r3, #8]
 8006982:	4b20      	ldr	r3, [pc, #128]	@ (8006a04 <HAL_TIM_Base_Start_IT+0x158>)
 8006984:	4013      	ands	r3, r2
 8006986:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2b06      	cmp	r3, #6
 800698c:	d015      	beq.n	80069ba <HAL_TIM_Base_Start_IT+0x10e>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006994:	d011      	beq.n	80069ba <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f042 0201 	orr.w	r2, r2, #1
 80069a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a6:	e008      	b.n	80069ba <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f042 0201 	orr.w	r2, r2, #1
 80069b6:	601a      	str	r2, [r3, #0]
 80069b8:	e000      	b.n	80069bc <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	40012c00 	.word	0x40012c00
 80069d0:	50012c00 	.word	0x50012c00
 80069d4:	40000400 	.word	0x40000400
 80069d8:	50000400 	.word	0x50000400
 80069dc:	40000800 	.word	0x40000800
 80069e0:	50000800 	.word	0x50000800
 80069e4:	40000c00 	.word	0x40000c00
 80069e8:	50000c00 	.word	0x50000c00
 80069ec:	40013400 	.word	0x40013400
 80069f0:	50013400 	.word	0x50013400
 80069f4:	40001800 	.word	0x40001800
 80069f8:	50001800 	.word	0x50001800
 80069fc:	40014000 	.word	0x40014000
 8006a00:	50014000 	.word	0x50014000
 8006a04:	00010007 	.word	0x00010007

08006a08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e049      	b.n	8006aae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d106      	bne.n	8006a34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f841 	bl	8006ab6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2202      	movs	r2, #2
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	3304      	adds	r3, #4
 8006a44:	4619      	mov	r1, r3
 8006a46:	4610      	mov	r0, r2
 8006a48:	f000 fd4a 	bl	80074e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b083      	sub	sp, #12
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006abe:	bf00      	nop
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
	...

08006acc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d109      	bne.n	8006af0 <HAL_TIM_PWM_Start+0x24>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	bf14      	ite	ne
 8006ae8:	2301      	movne	r3, #1
 8006aea:	2300      	moveq	r3, #0
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	e03c      	b.n	8006b6a <HAL_TIM_PWM_Start+0x9e>
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d109      	bne.n	8006b0a <HAL_TIM_PWM_Start+0x3e>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	bf14      	ite	ne
 8006b02:	2301      	movne	r3, #1
 8006b04:	2300      	moveq	r3, #0
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	e02f      	b.n	8006b6a <HAL_TIM_PWM_Start+0x9e>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d109      	bne.n	8006b24 <HAL_TIM_PWM_Start+0x58>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	bf14      	ite	ne
 8006b1c:	2301      	movne	r3, #1
 8006b1e:	2300      	moveq	r3, #0
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	e022      	b.n	8006b6a <HAL_TIM_PWM_Start+0x9e>
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2b0c      	cmp	r3, #12
 8006b28:	d109      	bne.n	8006b3e <HAL_TIM_PWM_Start+0x72>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	bf14      	ite	ne
 8006b36:	2301      	movne	r3, #1
 8006b38:	2300      	moveq	r3, #0
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	e015      	b.n	8006b6a <HAL_TIM_PWM_Start+0x9e>
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b10      	cmp	r3, #16
 8006b42:	d109      	bne.n	8006b58 <HAL_TIM_PWM_Start+0x8c>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	bf14      	ite	ne
 8006b50:	2301      	movne	r3, #1
 8006b52:	2300      	moveq	r3, #0
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	e008      	b.n	8006b6a <HAL_TIM_PWM_Start+0x9e>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	bf14      	ite	ne
 8006b64:	2301      	movne	r3, #1
 8006b66:	2300      	moveq	r3, #0
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e0e2      	b.n	8006d38 <HAL_TIM_PWM_Start+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d104      	bne.n	8006b82 <HAL_TIM_PWM_Start+0xb6>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b80:	e023      	b.n	8006bca <HAL_TIM_PWM_Start+0xfe>
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	2b04      	cmp	r3, #4
 8006b86:	d104      	bne.n	8006b92 <HAL_TIM_PWM_Start+0xc6>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b90:	e01b      	b.n	8006bca <HAL_TIM_PWM_Start+0xfe>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b08      	cmp	r3, #8
 8006b96:	d104      	bne.n	8006ba2 <HAL_TIM_PWM_Start+0xd6>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ba0:	e013      	b.n	8006bca <HAL_TIM_PWM_Start+0xfe>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b0c      	cmp	r3, #12
 8006ba6:	d104      	bne.n	8006bb2 <HAL_TIM_PWM_Start+0xe6>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2202      	movs	r2, #2
 8006bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006bb0:	e00b      	b.n	8006bca <HAL_TIM_PWM_Start+0xfe>
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b10      	cmp	r3, #16
 8006bb6:	d104      	bne.n	8006bc2 <HAL_TIM_PWM_Start+0xf6>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bc0:	e003      	b.n	8006bca <HAL_TIM_PWM_Start+0xfe>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f001 fa20 	bl	8008018 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a58      	ldr	r2, [pc, #352]	@ (8006d40 <HAL_TIM_PWM_Start+0x274>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d02c      	beq.n	8006c3c <HAL_TIM_PWM_Start+0x170>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a57      	ldr	r2, [pc, #348]	@ (8006d44 <HAL_TIM_PWM_Start+0x278>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d027      	beq.n	8006c3c <HAL_TIM_PWM_Start+0x170>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a55      	ldr	r2, [pc, #340]	@ (8006d48 <HAL_TIM_PWM_Start+0x27c>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d022      	beq.n	8006c3c <HAL_TIM_PWM_Start+0x170>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a54      	ldr	r2, [pc, #336]	@ (8006d4c <HAL_TIM_PWM_Start+0x280>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d01d      	beq.n	8006c3c <HAL_TIM_PWM_Start+0x170>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a52      	ldr	r2, [pc, #328]	@ (8006d50 <HAL_TIM_PWM_Start+0x284>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d018      	beq.n	8006c3c <HAL_TIM_PWM_Start+0x170>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a51      	ldr	r2, [pc, #324]	@ (8006d54 <HAL_TIM_PWM_Start+0x288>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d013      	beq.n	8006c3c <HAL_TIM_PWM_Start+0x170>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a4f      	ldr	r2, [pc, #316]	@ (8006d58 <HAL_TIM_PWM_Start+0x28c>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d00e      	beq.n	8006c3c <HAL_TIM_PWM_Start+0x170>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a4e      	ldr	r2, [pc, #312]	@ (8006d5c <HAL_TIM_PWM_Start+0x290>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d009      	beq.n	8006c3c <HAL_TIM_PWM_Start+0x170>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a4c      	ldr	r2, [pc, #304]	@ (8006d60 <HAL_TIM_PWM_Start+0x294>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d004      	beq.n	8006c3c <HAL_TIM_PWM_Start+0x170>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a4b      	ldr	r2, [pc, #300]	@ (8006d64 <HAL_TIM_PWM_Start+0x298>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d101      	bne.n	8006c40 <HAL_TIM_PWM_Start+0x174>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e000      	b.n	8006c42 <HAL_TIM_PWM_Start+0x176>
 8006c40:	2300      	movs	r3, #0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d007      	beq.n	8006c56 <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c54:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a39      	ldr	r2, [pc, #228]	@ (8006d40 <HAL_TIM_PWM_Start+0x274>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d04a      	beq.n	8006cf6 <HAL_TIM_PWM_Start+0x22a>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a37      	ldr	r2, [pc, #220]	@ (8006d44 <HAL_TIM_PWM_Start+0x278>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d045      	beq.n	8006cf6 <HAL_TIM_PWM_Start+0x22a>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c72:	d040      	beq.n	8006cf6 <HAL_TIM_PWM_Start+0x22a>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c7c:	d03b      	beq.n	8006cf6 <HAL_TIM_PWM_Start+0x22a>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a39      	ldr	r2, [pc, #228]	@ (8006d68 <HAL_TIM_PWM_Start+0x29c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d036      	beq.n	8006cf6 <HAL_TIM_PWM_Start+0x22a>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a37      	ldr	r2, [pc, #220]	@ (8006d6c <HAL_TIM_PWM_Start+0x2a0>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d031      	beq.n	8006cf6 <HAL_TIM_PWM_Start+0x22a>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a36      	ldr	r2, [pc, #216]	@ (8006d70 <HAL_TIM_PWM_Start+0x2a4>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d02c      	beq.n	8006cf6 <HAL_TIM_PWM_Start+0x22a>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a34      	ldr	r2, [pc, #208]	@ (8006d74 <HAL_TIM_PWM_Start+0x2a8>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d027      	beq.n	8006cf6 <HAL_TIM_PWM_Start+0x22a>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a33      	ldr	r2, [pc, #204]	@ (8006d78 <HAL_TIM_PWM_Start+0x2ac>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d022      	beq.n	8006cf6 <HAL_TIM_PWM_Start+0x22a>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a31      	ldr	r2, [pc, #196]	@ (8006d7c <HAL_TIM_PWM_Start+0x2b0>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d01d      	beq.n	8006cf6 <HAL_TIM_PWM_Start+0x22a>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a22      	ldr	r2, [pc, #136]	@ (8006d48 <HAL_TIM_PWM_Start+0x27c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d018      	beq.n	8006cf6 <HAL_TIM_PWM_Start+0x22a>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a20      	ldr	r2, [pc, #128]	@ (8006d4c <HAL_TIM_PWM_Start+0x280>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d013      	beq.n	8006cf6 <HAL_TIM_PWM_Start+0x22a>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a2b      	ldr	r2, [pc, #172]	@ (8006d80 <HAL_TIM_PWM_Start+0x2b4>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d00e      	beq.n	8006cf6 <HAL_TIM_PWM_Start+0x22a>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a29      	ldr	r2, [pc, #164]	@ (8006d84 <HAL_TIM_PWM_Start+0x2b8>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d009      	beq.n	8006cf6 <HAL_TIM_PWM_Start+0x22a>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a1a      	ldr	r2, [pc, #104]	@ (8006d50 <HAL_TIM_PWM_Start+0x284>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d004      	beq.n	8006cf6 <HAL_TIM_PWM_Start+0x22a>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a18      	ldr	r2, [pc, #96]	@ (8006d54 <HAL_TIM_PWM_Start+0x288>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d115      	bne.n	8006d22 <HAL_TIM_PWM_Start+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689a      	ldr	r2, [r3, #8]
 8006cfc:	4b22      	ldr	r3, [pc, #136]	@ (8006d88 <HAL_TIM_PWM_Start+0x2bc>)
 8006cfe:	4013      	ands	r3, r2
 8006d00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2b06      	cmp	r3, #6
 8006d06:	d015      	beq.n	8006d34 <HAL_TIM_PWM_Start+0x268>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d0e:	d011      	beq.n	8006d34 <HAL_TIM_PWM_Start+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f042 0201 	orr.w	r2, r2, #1
 8006d1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d20:	e008      	b.n	8006d34 <HAL_TIM_PWM_Start+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f042 0201 	orr.w	r2, r2, #1
 8006d30:	601a      	str	r2, [r3, #0]
 8006d32:	e000      	b.n	8006d36 <HAL_TIM_PWM_Start+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	40012c00 	.word	0x40012c00
 8006d44:	50012c00 	.word	0x50012c00
 8006d48:	40013400 	.word	0x40013400
 8006d4c:	50013400 	.word	0x50013400
 8006d50:	40014000 	.word	0x40014000
 8006d54:	50014000 	.word	0x50014000
 8006d58:	40014400 	.word	0x40014400
 8006d5c:	50014400 	.word	0x50014400
 8006d60:	40014800 	.word	0x40014800
 8006d64:	50014800 	.word	0x50014800
 8006d68:	40000400 	.word	0x40000400
 8006d6c:	50000400 	.word	0x50000400
 8006d70:	40000800 	.word	0x40000800
 8006d74:	50000800 	.word	0x50000800
 8006d78:	40000c00 	.word	0x40000c00
 8006d7c:	50000c00 	.word	0x50000c00
 8006d80:	40001800 	.word	0x40001800
 8006d84:	50001800 	.word	0x50001800
 8006d88:	00010007 	.word	0x00010007

08006d8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d020      	beq.n	8006df0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f003 0302 	and.w	r3, r3, #2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d01b      	beq.n	8006df0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f06f 0202 	mvn.w	r2, #2
 8006dc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	f003 0303 	and.w	r3, r3, #3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d003      	beq.n	8006dde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fb64 	bl	80074a4 <HAL_TIM_IC_CaptureCallback>
 8006ddc:	e005      	b.n	8006dea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fb56 	bl	8007490 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fb67 	bl	80074b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	f003 0304 	and.w	r3, r3, #4
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d020      	beq.n	8006e3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f003 0304 	and.w	r3, r3, #4
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d01b      	beq.n	8006e3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f06f 0204 	mvn.w	r2, #4
 8006e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2202      	movs	r2, #2
 8006e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fb3e 	bl	80074a4 <HAL_TIM_IC_CaptureCallback>
 8006e28:	e005      	b.n	8006e36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fb30 	bl	8007490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fb41 	bl	80074b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f003 0308 	and.w	r3, r3, #8
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d020      	beq.n	8006e88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f003 0308 	and.w	r3, r3, #8
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d01b      	beq.n	8006e88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f06f 0208 	mvn.w	r2, #8
 8006e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2204      	movs	r2, #4
 8006e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	69db      	ldr	r3, [r3, #28]
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fb18 	bl	80074a4 <HAL_TIM_IC_CaptureCallback>
 8006e74:	e005      	b.n	8006e82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fb0a 	bl	8007490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fb1b 	bl	80074b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f003 0310 	and.w	r3, r3, #16
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d020      	beq.n	8006ed4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f003 0310 	and.w	r3, r3, #16
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d01b      	beq.n	8006ed4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f06f 0210 	mvn.w	r2, #16
 8006ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2208      	movs	r2, #8
 8006eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d003      	beq.n	8006ec2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 faf2 	bl	80074a4 <HAL_TIM_IC_CaptureCallback>
 8006ec0:	e005      	b.n	8006ece <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fae4 	bl	8007490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 faf5 	bl	80074b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00c      	beq.n	8006ef8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d007      	beq.n	8006ef8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f06f 0201 	mvn.w	r2, #1
 8006ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fa f8d2 	bl	800109c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d104      	bne.n	8006f0c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00c      	beq.n	8006f26 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d007      	beq.n	8006f26 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f001 f979 	bl	8008218 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00c      	beq.n	8006f4a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d007      	beq.n	8006f4a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f001 f971 	bl	800822c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00c      	beq.n	8006f6e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d007      	beq.n	8006f6e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 faaf 	bl	80074cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	f003 0320 	and.w	r3, r3, #32
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00c      	beq.n	8006f92 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f003 0320 	and.w	r3, r3, #32
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d007      	beq.n	8006f92 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f06f 0220 	mvn.w	r2, #32
 8006f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f001 f939 	bl	8008204 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00c      	beq.n	8006fb6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d007      	beq.n	8006fb6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f001 f945 	bl	8008240 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00c      	beq.n	8006fda <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d007      	beq.n	8006fda <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f001 f93d 	bl	8008254 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00c      	beq.n	8006ffe <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d007      	beq.n	8006ffe <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f001 f935 	bl	8008268 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00c      	beq.n	8007022 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d007      	beq.n	8007022 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800701a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f001 f92d 	bl	800827c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007022:	bf00      	nop
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
	...

0800702c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007038:	2300      	movs	r3, #0
 800703a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007042:	2b01      	cmp	r3, #1
 8007044:	d101      	bne.n	800704a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007046:	2302      	movs	r3, #2
 8007048:	e0ff      	b.n	800724a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2b14      	cmp	r3, #20
 8007056:	f200 80f0 	bhi.w	800723a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800705a:	a201      	add	r2, pc, #4	@ (adr r2, 8007060 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800705c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007060:	080070b5 	.word	0x080070b5
 8007064:	0800723b 	.word	0x0800723b
 8007068:	0800723b 	.word	0x0800723b
 800706c:	0800723b 	.word	0x0800723b
 8007070:	080070f5 	.word	0x080070f5
 8007074:	0800723b 	.word	0x0800723b
 8007078:	0800723b 	.word	0x0800723b
 800707c:	0800723b 	.word	0x0800723b
 8007080:	08007137 	.word	0x08007137
 8007084:	0800723b 	.word	0x0800723b
 8007088:	0800723b 	.word	0x0800723b
 800708c:	0800723b 	.word	0x0800723b
 8007090:	08007177 	.word	0x08007177
 8007094:	0800723b 	.word	0x0800723b
 8007098:	0800723b 	.word	0x0800723b
 800709c:	0800723b 	.word	0x0800723b
 80070a0:	080071b9 	.word	0x080071b9
 80070a4:	0800723b 	.word	0x0800723b
 80070a8:	0800723b 	.word	0x0800723b
 80070ac:	0800723b 	.word	0x0800723b
 80070b0:	080071f9 	.word	0x080071f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68b9      	ldr	r1, [r7, #8]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f000 fb3a 	bl	8007734 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	699a      	ldr	r2, [r3, #24]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f042 0208 	orr.w	r2, r2, #8
 80070ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	699a      	ldr	r2, [r3, #24]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f022 0204 	bic.w	r2, r2, #4
 80070de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6999      	ldr	r1, [r3, #24]
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	691a      	ldr	r2, [r3, #16]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	430a      	orrs	r2, r1
 80070f0:	619a      	str	r2, [r3, #24]
      break;
 80070f2:	e0a5      	b.n	8007240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68b9      	ldr	r1, [r7, #8]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 fbdc 	bl	80078b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	699a      	ldr	r2, [r3, #24]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800710e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	699a      	ldr	r2, [r3, #24]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800711e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6999      	ldr	r1, [r3, #24]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	021a      	lsls	r2, r3, #8
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	430a      	orrs	r2, r1
 8007132:	619a      	str	r2, [r3, #24]
      break;
 8007134:	e084      	b.n	8007240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68b9      	ldr	r1, [r7, #8]
 800713c:	4618      	mov	r0, r3
 800713e:	f000 fc6b 	bl	8007a18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	69da      	ldr	r2, [r3, #28]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f042 0208 	orr.w	r2, r2, #8
 8007150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	69da      	ldr	r2, [r3, #28]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0204 	bic.w	r2, r2, #4
 8007160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	69d9      	ldr	r1, [r3, #28]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	691a      	ldr	r2, [r3, #16]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	430a      	orrs	r2, r1
 8007172:	61da      	str	r2, [r3, #28]
      break;
 8007174:	e064      	b.n	8007240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68b9      	ldr	r1, [r7, #8]
 800717c:	4618      	mov	r0, r3
 800717e:	f000 fcf9 	bl	8007b74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	69da      	ldr	r2, [r3, #28]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	69da      	ldr	r2, [r3, #28]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	69d9      	ldr	r1, [r3, #28]
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	021a      	lsls	r2, r3, #8
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	430a      	orrs	r2, r1
 80071b4:	61da      	str	r2, [r3, #28]
      break;
 80071b6:	e043      	b.n	8007240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68b9      	ldr	r1, [r7, #8]
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 fd88 	bl	8007cd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f042 0208 	orr.w	r2, r2, #8
 80071d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 0204 	bic.w	r2, r2, #4
 80071e2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	691a      	ldr	r2, [r3, #16]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	430a      	orrs	r2, r1
 80071f4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80071f6:	e023      	b.n	8007240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68b9      	ldr	r1, [r7, #8]
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 fdea 	bl	8007dd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007212:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007222:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	021a      	lsls	r2, r3, #8
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	430a      	orrs	r2, r1
 8007236:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007238:	e002      	b.n	8007240 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	75fb      	strb	r3, [r7, #23]
      break;
 800723e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007248:	7dfb      	ldrb	r3, [r7, #23]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop

08007254 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800725e:	2300      	movs	r3, #0
 8007260:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007268:	2b01      	cmp	r3, #1
 800726a:	d101      	bne.n	8007270 <HAL_TIM_ConfigClockSource+0x1c>
 800726c:	2302      	movs	r3, #2
 800726e:	e0fe      	b.n	800746e <HAL_TIM_ConfigClockSource+0x21a>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2202      	movs	r2, #2
 800727c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800728e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800729a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80072ac:	f000 80c9 	beq.w	8007442 <HAL_TIM_ConfigClockSource+0x1ee>
 80072b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80072b4:	f200 80ce 	bhi.w	8007454 <HAL_TIM_ConfigClockSource+0x200>
 80072b8:	4a6f      	ldr	r2, [pc, #444]	@ (8007478 <HAL_TIM_ConfigClockSource+0x224>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	f000 80c1 	beq.w	8007442 <HAL_TIM_ConfigClockSource+0x1ee>
 80072c0:	4a6d      	ldr	r2, [pc, #436]	@ (8007478 <HAL_TIM_ConfigClockSource+0x224>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	f200 80c6 	bhi.w	8007454 <HAL_TIM_ConfigClockSource+0x200>
 80072c8:	4a6c      	ldr	r2, [pc, #432]	@ (800747c <HAL_TIM_ConfigClockSource+0x228>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	f000 80b9 	beq.w	8007442 <HAL_TIM_ConfigClockSource+0x1ee>
 80072d0:	4a6a      	ldr	r2, [pc, #424]	@ (800747c <HAL_TIM_ConfigClockSource+0x228>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	f200 80be 	bhi.w	8007454 <HAL_TIM_ConfigClockSource+0x200>
 80072d8:	4a69      	ldr	r2, [pc, #420]	@ (8007480 <HAL_TIM_ConfigClockSource+0x22c>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	f000 80b1 	beq.w	8007442 <HAL_TIM_ConfigClockSource+0x1ee>
 80072e0:	4a67      	ldr	r2, [pc, #412]	@ (8007480 <HAL_TIM_ConfigClockSource+0x22c>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	f200 80b6 	bhi.w	8007454 <HAL_TIM_ConfigClockSource+0x200>
 80072e8:	4a66      	ldr	r2, [pc, #408]	@ (8007484 <HAL_TIM_ConfigClockSource+0x230>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	f000 80a9 	beq.w	8007442 <HAL_TIM_ConfigClockSource+0x1ee>
 80072f0:	4a64      	ldr	r2, [pc, #400]	@ (8007484 <HAL_TIM_ConfigClockSource+0x230>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	f200 80ae 	bhi.w	8007454 <HAL_TIM_ConfigClockSource+0x200>
 80072f8:	4a63      	ldr	r2, [pc, #396]	@ (8007488 <HAL_TIM_ConfigClockSource+0x234>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	f000 80a1 	beq.w	8007442 <HAL_TIM_ConfigClockSource+0x1ee>
 8007300:	4a61      	ldr	r2, [pc, #388]	@ (8007488 <HAL_TIM_ConfigClockSource+0x234>)
 8007302:	4293      	cmp	r3, r2
 8007304:	f200 80a6 	bhi.w	8007454 <HAL_TIM_ConfigClockSource+0x200>
 8007308:	4a60      	ldr	r2, [pc, #384]	@ (800748c <HAL_TIM_ConfigClockSource+0x238>)
 800730a:	4293      	cmp	r3, r2
 800730c:	f000 8099 	beq.w	8007442 <HAL_TIM_ConfigClockSource+0x1ee>
 8007310:	4a5e      	ldr	r2, [pc, #376]	@ (800748c <HAL_TIM_ConfigClockSource+0x238>)
 8007312:	4293      	cmp	r3, r2
 8007314:	f200 809e 	bhi.w	8007454 <HAL_TIM_ConfigClockSource+0x200>
 8007318:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800731c:	f000 8091 	beq.w	8007442 <HAL_TIM_ConfigClockSource+0x1ee>
 8007320:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007324:	f200 8096 	bhi.w	8007454 <HAL_TIM_ConfigClockSource+0x200>
 8007328:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800732c:	f000 8089 	beq.w	8007442 <HAL_TIM_ConfigClockSource+0x1ee>
 8007330:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007334:	f200 808e 	bhi.w	8007454 <HAL_TIM_ConfigClockSource+0x200>
 8007338:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800733c:	d03e      	beq.n	80073bc <HAL_TIM_ConfigClockSource+0x168>
 800733e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007342:	f200 8087 	bhi.w	8007454 <HAL_TIM_ConfigClockSource+0x200>
 8007346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800734a:	f000 8086 	beq.w	800745a <HAL_TIM_ConfigClockSource+0x206>
 800734e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007352:	d87f      	bhi.n	8007454 <HAL_TIM_ConfigClockSource+0x200>
 8007354:	2b70      	cmp	r3, #112	@ 0x70
 8007356:	d01a      	beq.n	800738e <HAL_TIM_ConfigClockSource+0x13a>
 8007358:	2b70      	cmp	r3, #112	@ 0x70
 800735a:	d87b      	bhi.n	8007454 <HAL_TIM_ConfigClockSource+0x200>
 800735c:	2b60      	cmp	r3, #96	@ 0x60
 800735e:	d050      	beq.n	8007402 <HAL_TIM_ConfigClockSource+0x1ae>
 8007360:	2b60      	cmp	r3, #96	@ 0x60
 8007362:	d877      	bhi.n	8007454 <HAL_TIM_ConfigClockSource+0x200>
 8007364:	2b50      	cmp	r3, #80	@ 0x50
 8007366:	d03c      	beq.n	80073e2 <HAL_TIM_ConfigClockSource+0x18e>
 8007368:	2b50      	cmp	r3, #80	@ 0x50
 800736a:	d873      	bhi.n	8007454 <HAL_TIM_ConfigClockSource+0x200>
 800736c:	2b40      	cmp	r3, #64	@ 0x40
 800736e:	d058      	beq.n	8007422 <HAL_TIM_ConfigClockSource+0x1ce>
 8007370:	2b40      	cmp	r3, #64	@ 0x40
 8007372:	d86f      	bhi.n	8007454 <HAL_TIM_ConfigClockSource+0x200>
 8007374:	2b30      	cmp	r3, #48	@ 0x30
 8007376:	d064      	beq.n	8007442 <HAL_TIM_ConfigClockSource+0x1ee>
 8007378:	2b30      	cmp	r3, #48	@ 0x30
 800737a:	d86b      	bhi.n	8007454 <HAL_TIM_ConfigClockSource+0x200>
 800737c:	2b20      	cmp	r3, #32
 800737e:	d060      	beq.n	8007442 <HAL_TIM_ConfigClockSource+0x1ee>
 8007380:	2b20      	cmp	r3, #32
 8007382:	d867      	bhi.n	8007454 <HAL_TIM_ConfigClockSource+0x200>
 8007384:	2b00      	cmp	r3, #0
 8007386:	d05c      	beq.n	8007442 <HAL_TIM_ConfigClockSource+0x1ee>
 8007388:	2b10      	cmp	r3, #16
 800738a:	d05a      	beq.n	8007442 <HAL_TIM_ConfigClockSource+0x1ee>
 800738c:	e062      	b.n	8007454 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800739e:	f000 fe1b 	bl	8007fd8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80073b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	609a      	str	r2, [r3, #8]
      break;
 80073ba:	e04f      	b.n	800745c <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073cc:	f000 fe04 	bl	8007fd8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	689a      	ldr	r2, [r3, #8]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80073de:	609a      	str	r2, [r3, #8]
      break;
 80073e0:	e03c      	b.n	800745c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ee:	461a      	mov	r2, r3
 80073f0:	f000 fd76 	bl	8007ee0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2150      	movs	r1, #80	@ 0x50
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 fdcf 	bl	8007f9e <TIM_ITRx_SetConfig>
      break;
 8007400:	e02c      	b.n	800745c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800740e:	461a      	mov	r2, r3
 8007410:	f000 fd95 	bl	8007f3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2160      	movs	r1, #96	@ 0x60
 800741a:	4618      	mov	r0, r3
 800741c:	f000 fdbf 	bl	8007f9e <TIM_ITRx_SetConfig>
      break;
 8007420:	e01c      	b.n	800745c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800742e:	461a      	mov	r2, r3
 8007430:	f000 fd56 	bl	8007ee0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2140      	movs	r1, #64	@ 0x40
 800743a:	4618      	mov	r0, r3
 800743c:	f000 fdaf 	bl	8007f9e <TIM_ITRx_SetConfig>
      break;
 8007440:	e00c      	b.n	800745c <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4619      	mov	r1, r3
 800744c:	4610      	mov	r0, r2
 800744e:	f000 fda6 	bl	8007f9e <TIM_ITRx_SetConfig>
      break;
 8007452:	e003      	b.n	800745c <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	73fb      	strb	r3, [r7, #15]
      break;
 8007458:	e000      	b.n	800745c <HAL_TIM_ConfigClockSource+0x208>
      break;
 800745a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800746c:	7bfb      	ldrb	r3, [r7, #15]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	00100070 	.word	0x00100070
 800747c:	00100060 	.word	0x00100060
 8007480:	00100050 	.word	0x00100050
 8007484:	00100040 	.word	0x00100040
 8007488:	00100030 	.word	0x00100030
 800748c:	00100020 	.word	0x00100020

08007490 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a7a      	ldr	r2, [pc, #488]	@ (80076dc <TIM_Base_SetConfig+0x1fc>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d02b      	beq.n	8007550 <TIM_Base_SetConfig+0x70>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a79      	ldr	r2, [pc, #484]	@ (80076e0 <TIM_Base_SetConfig+0x200>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d027      	beq.n	8007550 <TIM_Base_SetConfig+0x70>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007506:	d023      	beq.n	8007550 <TIM_Base_SetConfig+0x70>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800750e:	d01f      	beq.n	8007550 <TIM_Base_SetConfig+0x70>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a74      	ldr	r2, [pc, #464]	@ (80076e4 <TIM_Base_SetConfig+0x204>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d01b      	beq.n	8007550 <TIM_Base_SetConfig+0x70>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a73      	ldr	r2, [pc, #460]	@ (80076e8 <TIM_Base_SetConfig+0x208>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d017      	beq.n	8007550 <TIM_Base_SetConfig+0x70>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a72      	ldr	r2, [pc, #456]	@ (80076ec <TIM_Base_SetConfig+0x20c>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d013      	beq.n	8007550 <TIM_Base_SetConfig+0x70>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a71      	ldr	r2, [pc, #452]	@ (80076f0 <TIM_Base_SetConfig+0x210>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d00f      	beq.n	8007550 <TIM_Base_SetConfig+0x70>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a70      	ldr	r2, [pc, #448]	@ (80076f4 <TIM_Base_SetConfig+0x214>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d00b      	beq.n	8007550 <TIM_Base_SetConfig+0x70>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a6f      	ldr	r2, [pc, #444]	@ (80076f8 <TIM_Base_SetConfig+0x218>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d007      	beq.n	8007550 <TIM_Base_SetConfig+0x70>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a6e      	ldr	r2, [pc, #440]	@ (80076fc <TIM_Base_SetConfig+0x21c>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d003      	beq.n	8007550 <TIM_Base_SetConfig+0x70>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a6d      	ldr	r2, [pc, #436]	@ (8007700 <TIM_Base_SetConfig+0x220>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d108      	bne.n	8007562 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	4313      	orrs	r3, r2
 8007560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a5d      	ldr	r2, [pc, #372]	@ (80076dc <TIM_Base_SetConfig+0x1fc>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d05b      	beq.n	8007622 <TIM_Base_SetConfig+0x142>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a5c      	ldr	r2, [pc, #368]	@ (80076e0 <TIM_Base_SetConfig+0x200>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d057      	beq.n	8007622 <TIM_Base_SetConfig+0x142>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007578:	d053      	beq.n	8007622 <TIM_Base_SetConfig+0x142>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007580:	d04f      	beq.n	8007622 <TIM_Base_SetConfig+0x142>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a57      	ldr	r2, [pc, #348]	@ (80076e4 <TIM_Base_SetConfig+0x204>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d04b      	beq.n	8007622 <TIM_Base_SetConfig+0x142>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a56      	ldr	r2, [pc, #344]	@ (80076e8 <TIM_Base_SetConfig+0x208>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d047      	beq.n	8007622 <TIM_Base_SetConfig+0x142>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a55      	ldr	r2, [pc, #340]	@ (80076ec <TIM_Base_SetConfig+0x20c>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d043      	beq.n	8007622 <TIM_Base_SetConfig+0x142>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a54      	ldr	r2, [pc, #336]	@ (80076f0 <TIM_Base_SetConfig+0x210>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d03f      	beq.n	8007622 <TIM_Base_SetConfig+0x142>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a53      	ldr	r2, [pc, #332]	@ (80076f4 <TIM_Base_SetConfig+0x214>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d03b      	beq.n	8007622 <TIM_Base_SetConfig+0x142>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a52      	ldr	r2, [pc, #328]	@ (80076f8 <TIM_Base_SetConfig+0x218>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d037      	beq.n	8007622 <TIM_Base_SetConfig+0x142>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a51      	ldr	r2, [pc, #324]	@ (80076fc <TIM_Base_SetConfig+0x21c>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d033      	beq.n	8007622 <TIM_Base_SetConfig+0x142>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a50      	ldr	r2, [pc, #320]	@ (8007700 <TIM_Base_SetConfig+0x220>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d02f      	beq.n	8007622 <TIM_Base_SetConfig+0x142>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a4f      	ldr	r2, [pc, #316]	@ (8007704 <TIM_Base_SetConfig+0x224>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d02b      	beq.n	8007622 <TIM_Base_SetConfig+0x142>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a4e      	ldr	r2, [pc, #312]	@ (8007708 <TIM_Base_SetConfig+0x228>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d027      	beq.n	8007622 <TIM_Base_SetConfig+0x142>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a4d      	ldr	r2, [pc, #308]	@ (800770c <TIM_Base_SetConfig+0x22c>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d023      	beq.n	8007622 <TIM_Base_SetConfig+0x142>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a4c      	ldr	r2, [pc, #304]	@ (8007710 <TIM_Base_SetConfig+0x230>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d01f      	beq.n	8007622 <TIM_Base_SetConfig+0x142>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a4b      	ldr	r2, [pc, #300]	@ (8007714 <TIM_Base_SetConfig+0x234>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d01b      	beq.n	8007622 <TIM_Base_SetConfig+0x142>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a4a      	ldr	r2, [pc, #296]	@ (8007718 <TIM_Base_SetConfig+0x238>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d017      	beq.n	8007622 <TIM_Base_SetConfig+0x142>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a49      	ldr	r2, [pc, #292]	@ (800771c <TIM_Base_SetConfig+0x23c>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d013      	beq.n	8007622 <TIM_Base_SetConfig+0x142>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a48      	ldr	r2, [pc, #288]	@ (8007720 <TIM_Base_SetConfig+0x240>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d00f      	beq.n	8007622 <TIM_Base_SetConfig+0x142>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a47      	ldr	r2, [pc, #284]	@ (8007724 <TIM_Base_SetConfig+0x244>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d00b      	beq.n	8007622 <TIM_Base_SetConfig+0x142>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a46      	ldr	r2, [pc, #280]	@ (8007728 <TIM_Base_SetConfig+0x248>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d007      	beq.n	8007622 <TIM_Base_SetConfig+0x142>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a45      	ldr	r2, [pc, #276]	@ (800772c <TIM_Base_SetConfig+0x24c>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d003      	beq.n	8007622 <TIM_Base_SetConfig+0x142>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a44      	ldr	r2, [pc, #272]	@ (8007730 <TIM_Base_SetConfig+0x250>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d108      	bne.n	8007634 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	4313      	orrs	r3, r2
 8007632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a20      	ldr	r2, [pc, #128]	@ (80076dc <TIM_Base_SetConfig+0x1fc>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d023      	beq.n	80076a8 <TIM_Base_SetConfig+0x1c8>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a1f      	ldr	r2, [pc, #124]	@ (80076e0 <TIM_Base_SetConfig+0x200>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d01f      	beq.n	80076a8 <TIM_Base_SetConfig+0x1c8>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a24      	ldr	r2, [pc, #144]	@ (80076fc <TIM_Base_SetConfig+0x21c>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d01b      	beq.n	80076a8 <TIM_Base_SetConfig+0x1c8>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a23      	ldr	r2, [pc, #140]	@ (8007700 <TIM_Base_SetConfig+0x220>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d017      	beq.n	80076a8 <TIM_Base_SetConfig+0x1c8>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a28      	ldr	r2, [pc, #160]	@ (800771c <TIM_Base_SetConfig+0x23c>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d013      	beq.n	80076a8 <TIM_Base_SetConfig+0x1c8>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a27      	ldr	r2, [pc, #156]	@ (8007720 <TIM_Base_SetConfig+0x240>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d00f      	beq.n	80076a8 <TIM_Base_SetConfig+0x1c8>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a26      	ldr	r2, [pc, #152]	@ (8007724 <TIM_Base_SetConfig+0x244>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d00b      	beq.n	80076a8 <TIM_Base_SetConfig+0x1c8>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a25      	ldr	r2, [pc, #148]	@ (8007728 <TIM_Base_SetConfig+0x248>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d007      	beq.n	80076a8 <TIM_Base_SetConfig+0x1c8>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a24      	ldr	r2, [pc, #144]	@ (800772c <TIM_Base_SetConfig+0x24c>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d003      	beq.n	80076a8 <TIM_Base_SetConfig+0x1c8>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a23      	ldr	r2, [pc, #140]	@ (8007730 <TIM_Base_SetConfig+0x250>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d103      	bne.n	80076b0 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	691a      	ldr	r2, [r3, #16]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d105      	bne.n	80076ce <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	f023 0201 	bic.w	r2, r3, #1
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	611a      	str	r2, [r3, #16]
  }
}
 80076ce:	bf00      	nop
 80076d0:	3714      	adds	r7, #20
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	40012c00 	.word	0x40012c00
 80076e0:	50012c00 	.word	0x50012c00
 80076e4:	40000400 	.word	0x40000400
 80076e8:	50000400 	.word	0x50000400
 80076ec:	40000800 	.word	0x40000800
 80076f0:	50000800 	.word	0x50000800
 80076f4:	40000c00 	.word	0x40000c00
 80076f8:	50000c00 	.word	0x50000c00
 80076fc:	40013400 	.word	0x40013400
 8007700:	50013400 	.word	0x50013400
 8007704:	40001800 	.word	0x40001800
 8007708:	50001800 	.word	0x50001800
 800770c:	40001c00 	.word	0x40001c00
 8007710:	50001c00 	.word	0x50001c00
 8007714:	40002000 	.word	0x40002000
 8007718:	50002000 	.word	0x50002000
 800771c:	40014000 	.word	0x40014000
 8007720:	50014000 	.word	0x50014000
 8007724:	40014400 	.word	0x40014400
 8007728:	50014400 	.word	0x50014400
 800772c:	40014800 	.word	0x40014800
 8007730:	50014800 	.word	0x50014800

08007734 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007734:	b480      	push	{r7}
 8007736:	b087      	sub	sp, #28
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a1b      	ldr	r3, [r3, #32]
 8007748:	f023 0201 	bic.w	r2, r3, #1
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f023 0303 	bic.w	r3, r3, #3
 800776e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	4313      	orrs	r3, r2
 8007778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	f023 0302 	bic.w	r3, r3, #2
 8007780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	4313      	orrs	r3, r2
 800778a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4a40      	ldr	r2, [pc, #256]	@ (8007890 <TIM_OC1_SetConfig+0x15c>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d023      	beq.n	80077dc <TIM_OC1_SetConfig+0xa8>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a3f      	ldr	r2, [pc, #252]	@ (8007894 <TIM_OC1_SetConfig+0x160>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d01f      	beq.n	80077dc <TIM_OC1_SetConfig+0xa8>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a3e      	ldr	r2, [pc, #248]	@ (8007898 <TIM_OC1_SetConfig+0x164>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d01b      	beq.n	80077dc <TIM_OC1_SetConfig+0xa8>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a3d      	ldr	r2, [pc, #244]	@ (800789c <TIM_OC1_SetConfig+0x168>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d017      	beq.n	80077dc <TIM_OC1_SetConfig+0xa8>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a3c      	ldr	r2, [pc, #240]	@ (80078a0 <TIM_OC1_SetConfig+0x16c>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d013      	beq.n	80077dc <TIM_OC1_SetConfig+0xa8>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a3b      	ldr	r2, [pc, #236]	@ (80078a4 <TIM_OC1_SetConfig+0x170>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d00f      	beq.n	80077dc <TIM_OC1_SetConfig+0xa8>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a3a      	ldr	r2, [pc, #232]	@ (80078a8 <TIM_OC1_SetConfig+0x174>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d00b      	beq.n	80077dc <TIM_OC1_SetConfig+0xa8>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a39      	ldr	r2, [pc, #228]	@ (80078ac <TIM_OC1_SetConfig+0x178>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d007      	beq.n	80077dc <TIM_OC1_SetConfig+0xa8>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a38      	ldr	r2, [pc, #224]	@ (80078b0 <TIM_OC1_SetConfig+0x17c>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d003      	beq.n	80077dc <TIM_OC1_SetConfig+0xa8>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a37      	ldr	r2, [pc, #220]	@ (80078b4 <TIM_OC1_SetConfig+0x180>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d10c      	bne.n	80077f6 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	f023 0308 	bic.w	r3, r3, #8
 80077e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	697a      	ldr	r2, [r7, #20]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f023 0304 	bic.w	r3, r3, #4
 80077f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a25      	ldr	r2, [pc, #148]	@ (8007890 <TIM_OC1_SetConfig+0x15c>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d023      	beq.n	8007846 <TIM_OC1_SetConfig+0x112>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a24      	ldr	r2, [pc, #144]	@ (8007894 <TIM_OC1_SetConfig+0x160>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d01f      	beq.n	8007846 <TIM_OC1_SetConfig+0x112>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a23      	ldr	r2, [pc, #140]	@ (8007898 <TIM_OC1_SetConfig+0x164>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d01b      	beq.n	8007846 <TIM_OC1_SetConfig+0x112>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a22      	ldr	r2, [pc, #136]	@ (800789c <TIM_OC1_SetConfig+0x168>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d017      	beq.n	8007846 <TIM_OC1_SetConfig+0x112>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a21      	ldr	r2, [pc, #132]	@ (80078a0 <TIM_OC1_SetConfig+0x16c>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d013      	beq.n	8007846 <TIM_OC1_SetConfig+0x112>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a20      	ldr	r2, [pc, #128]	@ (80078a4 <TIM_OC1_SetConfig+0x170>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d00f      	beq.n	8007846 <TIM_OC1_SetConfig+0x112>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a1f      	ldr	r2, [pc, #124]	@ (80078a8 <TIM_OC1_SetConfig+0x174>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d00b      	beq.n	8007846 <TIM_OC1_SetConfig+0x112>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a1e      	ldr	r2, [pc, #120]	@ (80078ac <TIM_OC1_SetConfig+0x178>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d007      	beq.n	8007846 <TIM_OC1_SetConfig+0x112>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a1d      	ldr	r2, [pc, #116]	@ (80078b0 <TIM_OC1_SetConfig+0x17c>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d003      	beq.n	8007846 <TIM_OC1_SetConfig+0x112>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a1c      	ldr	r2, [pc, #112]	@ (80078b4 <TIM_OC1_SetConfig+0x180>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d111      	bne.n	800786a <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800784c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	4313      	orrs	r3, r2
 800785e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	4313      	orrs	r3, r2
 8007868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	685a      	ldr	r2, [r3, #4]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	697a      	ldr	r2, [r7, #20]
 8007882:	621a      	str	r2, [r3, #32]
}
 8007884:	bf00      	nop
 8007886:	371c      	adds	r7, #28
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	40012c00 	.word	0x40012c00
 8007894:	50012c00 	.word	0x50012c00
 8007898:	40013400 	.word	0x40013400
 800789c:	50013400 	.word	0x50013400
 80078a0:	40014000 	.word	0x40014000
 80078a4:	50014000 	.word	0x50014000
 80078a8:	40014400 	.word	0x40014400
 80078ac:	50014400 	.word	0x50014400
 80078b0:	40014800 	.word	0x40014800
 80078b4:	50014800 	.word	0x50014800

080078b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b087      	sub	sp, #28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a1b      	ldr	r3, [r3, #32]
 80078cc:	f023 0210 	bic.w	r2, r3, #16
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	021b      	lsls	r3, r3, #8
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	f023 0320 	bic.w	r3, r3, #32
 8007906:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	011b      	lsls	r3, r3, #4
 800790e:	697a      	ldr	r2, [r7, #20]
 8007910:	4313      	orrs	r3, r2
 8007912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a36      	ldr	r2, [pc, #216]	@ (80079f0 <TIM_OC2_SetConfig+0x138>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d00b      	beq.n	8007934 <TIM_OC2_SetConfig+0x7c>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a35      	ldr	r2, [pc, #212]	@ (80079f4 <TIM_OC2_SetConfig+0x13c>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d007      	beq.n	8007934 <TIM_OC2_SetConfig+0x7c>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a34      	ldr	r2, [pc, #208]	@ (80079f8 <TIM_OC2_SetConfig+0x140>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d003      	beq.n	8007934 <TIM_OC2_SetConfig+0x7c>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a33      	ldr	r2, [pc, #204]	@ (80079fc <TIM_OC2_SetConfig+0x144>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d10d      	bne.n	8007950 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800793a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	011b      	lsls	r3, r3, #4
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	4313      	orrs	r3, r2
 8007946:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800794e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a27      	ldr	r2, [pc, #156]	@ (80079f0 <TIM_OC2_SetConfig+0x138>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d023      	beq.n	80079a0 <TIM_OC2_SetConfig+0xe8>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a26      	ldr	r2, [pc, #152]	@ (80079f4 <TIM_OC2_SetConfig+0x13c>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d01f      	beq.n	80079a0 <TIM_OC2_SetConfig+0xe8>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a25      	ldr	r2, [pc, #148]	@ (80079f8 <TIM_OC2_SetConfig+0x140>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d01b      	beq.n	80079a0 <TIM_OC2_SetConfig+0xe8>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a24      	ldr	r2, [pc, #144]	@ (80079fc <TIM_OC2_SetConfig+0x144>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d017      	beq.n	80079a0 <TIM_OC2_SetConfig+0xe8>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a23      	ldr	r2, [pc, #140]	@ (8007a00 <TIM_OC2_SetConfig+0x148>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d013      	beq.n	80079a0 <TIM_OC2_SetConfig+0xe8>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a22      	ldr	r2, [pc, #136]	@ (8007a04 <TIM_OC2_SetConfig+0x14c>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d00f      	beq.n	80079a0 <TIM_OC2_SetConfig+0xe8>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a21      	ldr	r2, [pc, #132]	@ (8007a08 <TIM_OC2_SetConfig+0x150>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d00b      	beq.n	80079a0 <TIM_OC2_SetConfig+0xe8>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a20      	ldr	r2, [pc, #128]	@ (8007a0c <TIM_OC2_SetConfig+0x154>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d007      	beq.n	80079a0 <TIM_OC2_SetConfig+0xe8>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a1f      	ldr	r2, [pc, #124]	@ (8007a10 <TIM_OC2_SetConfig+0x158>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d003      	beq.n	80079a0 <TIM_OC2_SetConfig+0xe8>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a1e      	ldr	r2, [pc, #120]	@ (8007a14 <TIM_OC2_SetConfig+0x15c>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d113      	bne.n	80079c8 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80079a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80079ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	695b      	ldr	r3, [r3, #20]
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	621a      	str	r2, [r3, #32]
}
 80079e2:	bf00      	nop
 80079e4:	371c      	adds	r7, #28
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	40012c00 	.word	0x40012c00
 80079f4:	50012c00 	.word	0x50012c00
 80079f8:	40013400 	.word	0x40013400
 80079fc:	50013400 	.word	0x50013400
 8007a00:	40014000 	.word	0x40014000
 8007a04:	50014000 	.word	0x50014000
 8007a08:	40014400 	.word	0x40014400
 8007a0c:	50014400 	.word	0x50014400
 8007a10:	40014800 	.word	0x40014800
 8007a14:	50014800 	.word	0x50014800

08007a18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a1b      	ldr	r3, [r3, #32]
 8007a2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	69db      	ldr	r3, [r3, #28]
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f023 0303 	bic.w	r3, r3, #3
 8007a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	021b      	lsls	r3, r3, #8
 8007a6c:	697a      	ldr	r2, [r7, #20]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a35      	ldr	r2, [pc, #212]	@ (8007b4c <TIM_OC3_SetConfig+0x134>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d00b      	beq.n	8007a92 <TIM_OC3_SetConfig+0x7a>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a34      	ldr	r2, [pc, #208]	@ (8007b50 <TIM_OC3_SetConfig+0x138>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d007      	beq.n	8007a92 <TIM_OC3_SetConfig+0x7a>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a33      	ldr	r2, [pc, #204]	@ (8007b54 <TIM_OC3_SetConfig+0x13c>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d003      	beq.n	8007a92 <TIM_OC3_SetConfig+0x7a>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a32      	ldr	r2, [pc, #200]	@ (8007b58 <TIM_OC3_SetConfig+0x140>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d10d      	bne.n	8007aae <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007a98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	021b      	lsls	r3, r3, #8
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a26      	ldr	r2, [pc, #152]	@ (8007b4c <TIM_OC3_SetConfig+0x134>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d023      	beq.n	8007afe <TIM_OC3_SetConfig+0xe6>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a25      	ldr	r2, [pc, #148]	@ (8007b50 <TIM_OC3_SetConfig+0x138>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d01f      	beq.n	8007afe <TIM_OC3_SetConfig+0xe6>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a24      	ldr	r2, [pc, #144]	@ (8007b54 <TIM_OC3_SetConfig+0x13c>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d01b      	beq.n	8007afe <TIM_OC3_SetConfig+0xe6>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a23      	ldr	r2, [pc, #140]	@ (8007b58 <TIM_OC3_SetConfig+0x140>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d017      	beq.n	8007afe <TIM_OC3_SetConfig+0xe6>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a22      	ldr	r2, [pc, #136]	@ (8007b5c <TIM_OC3_SetConfig+0x144>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d013      	beq.n	8007afe <TIM_OC3_SetConfig+0xe6>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a21      	ldr	r2, [pc, #132]	@ (8007b60 <TIM_OC3_SetConfig+0x148>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d00f      	beq.n	8007afe <TIM_OC3_SetConfig+0xe6>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a20      	ldr	r2, [pc, #128]	@ (8007b64 <TIM_OC3_SetConfig+0x14c>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d00b      	beq.n	8007afe <TIM_OC3_SetConfig+0xe6>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8007b68 <TIM_OC3_SetConfig+0x150>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d007      	beq.n	8007afe <TIM_OC3_SetConfig+0xe6>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a1e      	ldr	r2, [pc, #120]	@ (8007b6c <TIM_OC3_SetConfig+0x154>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d003      	beq.n	8007afe <TIM_OC3_SetConfig+0xe6>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b70 <TIM_OC3_SetConfig+0x158>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d113      	bne.n	8007b26 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	011b      	lsls	r3, r3, #4
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	011b      	lsls	r3, r3, #4
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	685a      	ldr	r2, [r3, #4]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	621a      	str	r2, [r3, #32]
}
 8007b40:	bf00      	nop
 8007b42:	371c      	adds	r7, #28
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	40012c00 	.word	0x40012c00
 8007b50:	50012c00 	.word	0x50012c00
 8007b54:	40013400 	.word	0x40013400
 8007b58:	50013400 	.word	0x50013400
 8007b5c:	40014000 	.word	0x40014000
 8007b60:	50014000 	.word	0x50014000
 8007b64:	40014400 	.word	0x40014400
 8007b68:	50014400 	.word	0x50014400
 8007b6c:	40014800 	.word	0x40014800
 8007b70:	50014800 	.word	0x50014800

08007b74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b087      	sub	sp, #28
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a1b      	ldr	r3, [r3, #32]
 8007b88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	69db      	ldr	r3, [r3, #28]
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ba2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	021b      	lsls	r3, r3, #8
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007bc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	031b      	lsls	r3, r3, #12
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a36      	ldr	r2, [pc, #216]	@ (8007cac <TIM_OC4_SetConfig+0x138>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d00b      	beq.n	8007bf0 <TIM_OC4_SetConfig+0x7c>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a35      	ldr	r2, [pc, #212]	@ (8007cb0 <TIM_OC4_SetConfig+0x13c>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d007      	beq.n	8007bf0 <TIM_OC4_SetConfig+0x7c>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a34      	ldr	r2, [pc, #208]	@ (8007cb4 <TIM_OC4_SetConfig+0x140>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d003      	beq.n	8007bf0 <TIM_OC4_SetConfig+0x7c>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a33      	ldr	r2, [pc, #204]	@ (8007cb8 <TIM_OC4_SetConfig+0x144>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d10d      	bne.n	8007c0c <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	031b      	lsls	r3, r3, #12
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a27      	ldr	r2, [pc, #156]	@ (8007cac <TIM_OC4_SetConfig+0x138>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d023      	beq.n	8007c5c <TIM_OC4_SetConfig+0xe8>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a26      	ldr	r2, [pc, #152]	@ (8007cb0 <TIM_OC4_SetConfig+0x13c>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d01f      	beq.n	8007c5c <TIM_OC4_SetConfig+0xe8>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a25      	ldr	r2, [pc, #148]	@ (8007cb4 <TIM_OC4_SetConfig+0x140>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d01b      	beq.n	8007c5c <TIM_OC4_SetConfig+0xe8>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a24      	ldr	r2, [pc, #144]	@ (8007cb8 <TIM_OC4_SetConfig+0x144>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d017      	beq.n	8007c5c <TIM_OC4_SetConfig+0xe8>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a23      	ldr	r2, [pc, #140]	@ (8007cbc <TIM_OC4_SetConfig+0x148>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d013      	beq.n	8007c5c <TIM_OC4_SetConfig+0xe8>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a22      	ldr	r2, [pc, #136]	@ (8007cc0 <TIM_OC4_SetConfig+0x14c>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d00f      	beq.n	8007c5c <TIM_OC4_SetConfig+0xe8>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a21      	ldr	r2, [pc, #132]	@ (8007cc4 <TIM_OC4_SetConfig+0x150>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d00b      	beq.n	8007c5c <TIM_OC4_SetConfig+0xe8>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4a20      	ldr	r2, [pc, #128]	@ (8007cc8 <TIM_OC4_SetConfig+0x154>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d007      	beq.n	8007c5c <TIM_OC4_SetConfig+0xe8>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8007ccc <TIM_OC4_SetConfig+0x158>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d003      	beq.n	8007c5c <TIM_OC4_SetConfig+0xe8>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a1e      	ldr	r2, [pc, #120]	@ (8007cd0 <TIM_OC4_SetConfig+0x15c>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d113      	bne.n	8007c84 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c62:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007c6a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	019b      	lsls	r3, r3, #6
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	019b      	lsls	r3, r3, #6
 8007c7e:	693a      	ldr	r2, [r7, #16]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	693a      	ldr	r2, [r7, #16]
 8007c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	621a      	str	r2, [r3, #32]
}
 8007c9e:	bf00      	nop
 8007ca0:	371c      	adds	r7, #28
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	40012c00 	.word	0x40012c00
 8007cb0:	50012c00 	.word	0x50012c00
 8007cb4:	40013400 	.word	0x40013400
 8007cb8:	50013400 	.word	0x50013400
 8007cbc:	40014000 	.word	0x40014000
 8007cc0:	50014000 	.word	0x50014000
 8007cc4:	40014400 	.word	0x40014400
 8007cc8:	50014400 	.word	0x50014400
 8007ccc:	40014800 	.word	0x40014800
 8007cd0:	50014800 	.word	0x50014800

08007cd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b087      	sub	sp, #28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a1b      	ldr	r3, [r3, #32]
 8007ce8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007d18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	041b      	lsls	r3, r3, #16
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a21      	ldr	r2, [pc, #132]	@ (8007db0 <TIM_OC5_SetConfig+0xdc>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d023      	beq.n	8007d76 <TIM_OC5_SetConfig+0xa2>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a20      	ldr	r2, [pc, #128]	@ (8007db4 <TIM_OC5_SetConfig+0xe0>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d01f      	beq.n	8007d76 <TIM_OC5_SetConfig+0xa2>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a1f      	ldr	r2, [pc, #124]	@ (8007db8 <TIM_OC5_SetConfig+0xe4>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d01b      	beq.n	8007d76 <TIM_OC5_SetConfig+0xa2>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a1e      	ldr	r2, [pc, #120]	@ (8007dbc <TIM_OC5_SetConfig+0xe8>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d017      	beq.n	8007d76 <TIM_OC5_SetConfig+0xa2>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a1d      	ldr	r2, [pc, #116]	@ (8007dc0 <TIM_OC5_SetConfig+0xec>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d013      	beq.n	8007d76 <TIM_OC5_SetConfig+0xa2>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a1c      	ldr	r2, [pc, #112]	@ (8007dc4 <TIM_OC5_SetConfig+0xf0>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d00f      	beq.n	8007d76 <TIM_OC5_SetConfig+0xa2>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a1b      	ldr	r2, [pc, #108]	@ (8007dc8 <TIM_OC5_SetConfig+0xf4>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d00b      	beq.n	8007d76 <TIM_OC5_SetConfig+0xa2>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a1a      	ldr	r2, [pc, #104]	@ (8007dcc <TIM_OC5_SetConfig+0xf8>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d007      	beq.n	8007d76 <TIM_OC5_SetConfig+0xa2>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a19      	ldr	r2, [pc, #100]	@ (8007dd0 <TIM_OC5_SetConfig+0xfc>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d003      	beq.n	8007d76 <TIM_OC5_SetConfig+0xa2>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a18      	ldr	r2, [pc, #96]	@ (8007dd4 <TIM_OC5_SetConfig+0x100>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d109      	bne.n	8007d8a <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	695b      	ldr	r3, [r3, #20]
 8007d82:	021b      	lsls	r3, r3, #8
 8007d84:	697a      	ldr	r2, [r7, #20]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	685a      	ldr	r2, [r3, #4]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	621a      	str	r2, [r3, #32]
}
 8007da4:	bf00      	nop
 8007da6:	371c      	adds	r7, #28
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr
 8007db0:	40012c00 	.word	0x40012c00
 8007db4:	50012c00 	.word	0x50012c00
 8007db8:	40013400 	.word	0x40013400
 8007dbc:	50013400 	.word	0x50013400
 8007dc0:	40014000 	.word	0x40014000
 8007dc4:	50014000 	.word	0x50014000
 8007dc8:	40014400 	.word	0x40014400
 8007dcc:	50014400 	.word	0x50014400
 8007dd0:	40014800 	.word	0x40014800
 8007dd4:	50014800 	.word	0x50014800

08007dd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b087      	sub	sp, #28
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a1b      	ldr	r3, [r3, #32]
 8007dec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	021b      	lsls	r3, r3, #8
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007e1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	051b      	lsls	r3, r3, #20
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a22      	ldr	r2, [pc, #136]	@ (8007eb8 <TIM_OC6_SetConfig+0xe0>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d023      	beq.n	8007e7c <TIM_OC6_SetConfig+0xa4>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a21      	ldr	r2, [pc, #132]	@ (8007ebc <TIM_OC6_SetConfig+0xe4>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d01f      	beq.n	8007e7c <TIM_OC6_SetConfig+0xa4>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a20      	ldr	r2, [pc, #128]	@ (8007ec0 <TIM_OC6_SetConfig+0xe8>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d01b      	beq.n	8007e7c <TIM_OC6_SetConfig+0xa4>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a1f      	ldr	r2, [pc, #124]	@ (8007ec4 <TIM_OC6_SetConfig+0xec>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d017      	beq.n	8007e7c <TIM_OC6_SetConfig+0xa4>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a1e      	ldr	r2, [pc, #120]	@ (8007ec8 <TIM_OC6_SetConfig+0xf0>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d013      	beq.n	8007e7c <TIM_OC6_SetConfig+0xa4>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a1d      	ldr	r2, [pc, #116]	@ (8007ecc <TIM_OC6_SetConfig+0xf4>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d00f      	beq.n	8007e7c <TIM_OC6_SetConfig+0xa4>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8007ed0 <TIM_OC6_SetConfig+0xf8>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d00b      	beq.n	8007e7c <TIM_OC6_SetConfig+0xa4>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a1b      	ldr	r2, [pc, #108]	@ (8007ed4 <TIM_OC6_SetConfig+0xfc>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d007      	beq.n	8007e7c <TIM_OC6_SetConfig+0xa4>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a1a      	ldr	r2, [pc, #104]	@ (8007ed8 <TIM_OC6_SetConfig+0x100>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d003      	beq.n	8007e7c <TIM_OC6_SetConfig+0xa4>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a19      	ldr	r2, [pc, #100]	@ (8007edc <TIM_OC6_SetConfig+0x104>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d109      	bne.n	8007e90 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	029b      	lsls	r3, r3, #10
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	697a      	ldr	r2, [r7, #20]
 8007e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	685a      	ldr	r2, [r3, #4]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	693a      	ldr	r2, [r7, #16]
 8007ea8:	621a      	str	r2, [r3, #32]
}
 8007eaa:	bf00      	nop
 8007eac:	371c      	adds	r7, #28
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	40012c00 	.word	0x40012c00
 8007ebc:	50012c00 	.word	0x50012c00
 8007ec0:	40013400 	.word	0x40013400
 8007ec4:	50013400 	.word	0x50013400
 8007ec8:	40014000 	.word	0x40014000
 8007ecc:	50014000 	.word	0x50014000
 8007ed0:	40014400 	.word	0x40014400
 8007ed4:	50014400 	.word	0x50014400
 8007ed8:	40014800 	.word	0x40014800
 8007edc:	50014800 	.word	0x50014800

08007ee0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b087      	sub	sp, #28
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6a1b      	ldr	r3, [r3, #32]
 8007ef0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6a1b      	ldr	r3, [r3, #32]
 8007ef6:	f023 0201 	bic.w	r2, r3, #1
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	011b      	lsls	r3, r3, #4
 8007f10:	693a      	ldr	r2, [r7, #16]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	f023 030a 	bic.w	r3, r3, #10
 8007f1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	697a      	ldr	r2, [r7, #20]
 8007f30:	621a      	str	r2, [r3, #32]
}
 8007f32:	bf00      	nop
 8007f34:	371c      	adds	r7, #28
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b087      	sub	sp, #28
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	60f8      	str	r0, [r7, #12]
 8007f46:	60b9      	str	r1, [r7, #8]
 8007f48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6a1b      	ldr	r3, [r3, #32]
 8007f4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6a1b      	ldr	r3, [r3, #32]
 8007f54:	f023 0210 	bic.w	r2, r3, #16
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	699b      	ldr	r3, [r3, #24]
 8007f60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007f68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	031b      	lsls	r3, r3, #12
 8007f6e:	693a      	ldr	r2, [r7, #16]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007f7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	011b      	lsls	r3, r3, #4
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	693a      	ldr	r2, [r7, #16]
 8007f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	621a      	str	r2, [r3, #32]
}
 8007f92:	bf00      	nop
 8007f94:	371c      	adds	r7, #28
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b085      	sub	sp, #20
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fba:	683a      	ldr	r2, [r7, #0]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	f043 0307 	orr.w	r3, r3, #7
 8007fc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	609a      	str	r2, [r3, #8]
}
 8007fcc:	bf00      	nop
 8007fce:	3714      	adds	r7, #20
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b087      	sub	sp, #28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
 8007fe4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ff2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	021a      	lsls	r2, r3, #8
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	431a      	orrs	r2, r3
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	4313      	orrs	r3, r2
 8008004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	697a      	ldr	r2, [r7, #20]
 800800a:	609a      	str	r2, [r3, #8]
}
 800800c:	bf00      	nop
 800800e:	371c      	adds	r7, #28
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008018:	b480      	push	{r7}
 800801a:	b087      	sub	sp, #28
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	f003 031f 	and.w	r3, r3, #31
 800802a:	2201      	movs	r2, #1
 800802c:	fa02 f303 	lsl.w	r3, r2, r3
 8008030:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6a1a      	ldr	r2, [r3, #32]
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	43db      	mvns	r3, r3
 800803a:	401a      	ands	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6a1a      	ldr	r2, [r3, #32]
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	f003 031f 	and.w	r3, r3, #31
 800804a:	6879      	ldr	r1, [r7, #4]
 800804c:	fa01 f303 	lsl.w	r3, r1, r3
 8008050:	431a      	orrs	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	621a      	str	r2, [r3, #32]
}
 8008056:	bf00      	nop
 8008058:	371c      	adds	r7, #28
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
	...

08008064 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008074:	2b01      	cmp	r3, #1
 8008076:	d101      	bne.n	800807c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008078:	2302      	movs	r3, #2
 800807a:	e0a1      	b.n	80081c0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2202      	movs	r2, #2
 8008088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a4a      	ldr	r2, [pc, #296]	@ (80081cc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d00e      	beq.n	80080c4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a49      	ldr	r2, [pc, #292]	@ (80081d0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d009      	beq.n	80080c4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a47      	ldr	r2, [pc, #284]	@ (80081d4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d004      	beq.n	80080c4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a46      	ldr	r2, [pc, #280]	@ (80081d8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d108      	bne.n	80080d6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80080ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80080dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a34      	ldr	r2, [pc, #208]	@ (80081cc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d04a      	beq.n	8008194 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a33      	ldr	r2, [pc, #204]	@ (80081d0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d045      	beq.n	8008194 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008110:	d040      	beq.n	8008194 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800811a:	d03b      	beq.n	8008194 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a2e      	ldr	r2, [pc, #184]	@ (80081dc <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d036      	beq.n	8008194 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a2d      	ldr	r2, [pc, #180]	@ (80081e0 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d031      	beq.n	8008194 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a2b      	ldr	r2, [pc, #172]	@ (80081e4 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d02c      	beq.n	8008194 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a2a      	ldr	r2, [pc, #168]	@ (80081e8 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d027      	beq.n	8008194 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a28      	ldr	r2, [pc, #160]	@ (80081ec <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d022      	beq.n	8008194 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a27      	ldr	r2, [pc, #156]	@ (80081f0 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d01d      	beq.n	8008194 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a1d      	ldr	r2, [pc, #116]	@ (80081d4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d018      	beq.n	8008194 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a1c      	ldr	r2, [pc, #112]	@ (80081d8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d013      	beq.n	8008194 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a20      	ldr	r2, [pc, #128]	@ (80081f4 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d00e      	beq.n	8008194 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a1f      	ldr	r2, [pc, #124]	@ (80081f8 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d009      	beq.n	8008194 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a1d      	ldr	r2, [pc, #116]	@ (80081fc <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d004      	beq.n	8008194 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a1c      	ldr	r2, [pc, #112]	@ (8008200 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d10c      	bne.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800819a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68ba      	ldr	r2, [r7, #8]
 80081ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2201      	movs	r2, #1
 80081b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3714      	adds	r7, #20
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	40012c00 	.word	0x40012c00
 80081d0:	50012c00 	.word	0x50012c00
 80081d4:	40013400 	.word	0x40013400
 80081d8:	50013400 	.word	0x50013400
 80081dc:	40000400 	.word	0x40000400
 80081e0:	50000400 	.word	0x50000400
 80081e4:	40000800 	.word	0x40000800
 80081e8:	50000800 	.word	0x50000800
 80081ec:	40000c00 	.word	0x40000c00
 80081f0:	50000c00 	.word	0x50000c00
 80081f4:	40001800 	.word	0x40001800
 80081f8:	50001800 	.word	0x50001800
 80081fc:	40014000 	.word	0x40014000
 8008200:	50014000 	.word	0x50014000

08008204 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008248:	bf00      	nop
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800825c:	bf00      	nop
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <__NVIC_SetPriority>:
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	4603      	mov	r3, r0
 8008298:	6039      	str	r1, [r7, #0]
 800829a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800829c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	db0a      	blt.n	80082ba <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	b2da      	uxtb	r2, r3
 80082a8:	490c      	ldr	r1, [pc, #48]	@ (80082dc <__NVIC_SetPriority+0x4c>)
 80082aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80082ae:	0112      	lsls	r2, r2, #4
 80082b0:	b2d2      	uxtb	r2, r2
 80082b2:	440b      	add	r3, r1
 80082b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80082b8:	e00a      	b.n	80082d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	b2da      	uxtb	r2, r3
 80082be:	4908      	ldr	r1, [pc, #32]	@ (80082e0 <__NVIC_SetPriority+0x50>)
 80082c0:	88fb      	ldrh	r3, [r7, #6]
 80082c2:	f003 030f 	and.w	r3, r3, #15
 80082c6:	3b04      	subs	r3, #4
 80082c8:	0112      	lsls	r2, r2, #4
 80082ca:	b2d2      	uxtb	r2, r2
 80082cc:	440b      	add	r3, r1
 80082ce:	761a      	strb	r2, [r3, #24]
}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr
 80082dc:	e000e100 	.word	0xe000e100
 80082e0:	e000ed00 	.word	0xe000ed00

080082e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80082e4:	b580      	push	{r7, lr}
 80082e6:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 80082e8:	4b05      	ldr	r3, [pc, #20]	@ (8008300 <SysTick_Handler+0x1c>)
 80082ea:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80082ec:	f001 fba6 	bl	8009a3c <xTaskGetSchedulerState>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d001      	beq.n	80082fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80082f6:	f001 ff51 	bl	800a19c <xPortSysTickHandler>
  }
}
 80082fa:	bf00      	nop
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	e000e010 	.word	0xe000e010

08008304 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008304:	b580      	push	{r7, lr}
 8008306:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 8008308:	2100      	movs	r1, #0
 800830a:	f06f 0004 	mvn.w	r0, #4
 800830e:	f7ff ffbf 	bl	8008290 <__NVIC_SetPriority>
#endif
}
 8008312:	bf00      	nop
 8008314:	bd80      	pop	{r7, pc}

08008316 <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 8008316:	b580      	push	{r7, lr}
 8008318:	b086      	sub	sp, #24
 800831a:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 800831c:	2300      	movs	r3, #0
 800831e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008320:	f3ef 8305 	mrs	r3, IPSR
 8008324:	60fb      	str	r3, [r7, #12]
  return(result);
 8008326:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 8008328:	2b00      	cmp	r3, #0
 800832a:	d002      	beq.n	8008332 <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 800832c:	2301      	movs	r3, #1
 800832e:	617b      	str	r3, [r7, #20]
 8008330:	e013      	b.n	800835a <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 8008332:	f001 fb83 	bl	8009a3c <xTaskGetSchedulerState>
 8008336:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d00d      	beq.n	800835a <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800833e:	f3ef 8310 	mrs	r3, PRIMASK
 8008342:	60bb      	str	r3, [r7, #8]
  return(result);
 8008344:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 8008346:	2b00      	cmp	r3, #0
 8008348:	d105      	bne.n	8008356 <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800834a:	f3ef 8311 	mrs	r3, BASEPRI
 800834e:	607b      	str	r3, [r7, #4]
  return(result);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d001      	beq.n	800835a <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 8008356:	2301      	movs	r3, #1
 8008358:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 800835a:	697b      	ldr	r3, [r7, #20]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3718      	adds	r7, #24
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800836a:	f7ff ffd4 	bl	8008316 <IRQ_Context>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d003      	beq.n	800837c <osKernelInitialize+0x18>
    stat = osErrorISR;
 8008374:	f06f 0305 	mvn.w	r3, #5
 8008378:	607b      	str	r3, [r7, #4]
 800837a:	e012      	b.n	80083a2 <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 800837c:	f001 fb5e 	bl	8009a3c <xTaskGetSchedulerState>
 8008380:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d109      	bne.n	800839c <osKernelInitialize+0x38>
 8008388:	4b08      	ldr	r3, [pc, #32]	@ (80083ac <osKernelInitialize+0x48>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d105      	bne.n	800839c <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008390:	4b06      	ldr	r3, [pc, #24]	@ (80083ac <osKernelInitialize+0x48>)
 8008392:	2201      	movs	r2, #1
 8008394:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008396:	2300      	movs	r3, #0
 8008398:	607b      	str	r3, [r7, #4]
 800839a:	e002      	b.n	80083a2 <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 800839c:	f04f 33ff 	mov.w	r3, #4294967295
 80083a0:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 80083a2:	687b      	ldr	r3, [r7, #4]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	200002d8 	.word	0x200002d8

080083b0 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 80083b6:	f7ff ffae 	bl	8008316 <IRQ_Context>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d003      	beq.n	80083c8 <osKernelStart+0x18>
    stat = osErrorISR;
 80083c0:	f06f 0305 	mvn.w	r3, #5
 80083c4:	607b      	str	r3, [r7, #4]
 80083c6:	e016      	b.n	80083f6 <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 80083c8:	f001 fb38 	bl	8009a3c <xTaskGetSchedulerState>
 80083cc:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d10d      	bne.n	80083f0 <osKernelStart+0x40>
 80083d4:	4b0a      	ldr	r3, [pc, #40]	@ (8008400 <osKernelStart+0x50>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d109      	bne.n	80083f0 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80083dc:	f7ff ff92 	bl	8008304 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 80083e0:	4b07      	ldr	r3, [pc, #28]	@ (8008400 <osKernelStart+0x50>)
 80083e2:	2202      	movs	r2, #2
 80083e4:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80083e6:	f000 fdf7 	bl	8008fd8 <vTaskStartScheduler>
      stat = osOK;
 80083ea:	2300      	movs	r3, #0
 80083ec:	607b      	str	r3, [r7, #4]
 80083ee:	e002      	b.n	80083f6 <osKernelStart+0x46>
    } else {
      stat = osError;
 80083f0:	f04f 33ff 	mov.w	r3, #4294967295
 80083f4:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 80083f6:	687b      	ldr	r3, [r7, #4]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	200002d8 	.word	0x200002d8

08008404 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008404:	b580      	push	{r7, lr}
 8008406:	b08e      	sub	sp, #56	@ 0x38
 8008408:	af04      	add	r7, sp, #16
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008410:	2300      	movs	r3, #0
 8008412:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 8008414:	f7ff ff7f 	bl	8008316 <IRQ_Context>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d17e      	bne.n	800851c <osThreadNew+0x118>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d07b      	beq.n	800851c <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 8008424:	2380      	movs	r3, #128	@ 0x80
 8008426:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008428:	2318      	movs	r3, #24
 800842a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800842c:	2300      	movs	r3, #0
 800842e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008430:	f04f 33ff 	mov.w	r3, #4294967295
 8008434:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d045      	beq.n	80084c8 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d002      	beq.n	800844a <osThreadNew+0x46>
        name = attr->name;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d002      	beq.n	8008458 <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	699b      	ldr	r3, [r3, #24]
 8008456:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d008      	beq.n	8008470 <osThreadNew+0x6c>
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	2b38      	cmp	r3, #56	@ 0x38
 8008462:	d805      	bhi.n	8008470 <osThreadNew+0x6c>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	f003 0301 	and.w	r3, r3, #1
 800846c:	2b00      	cmp	r3, #0
 800846e:	d001      	beq.n	8008474 <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 8008470:	2300      	movs	r3, #0
 8008472:	e054      	b.n	800851e <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	695b      	ldr	r3, [r3, #20]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d003      	beq.n	8008484 <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	695b      	ldr	r3, [r3, #20]
 8008480:	089b      	lsrs	r3, r3, #2
 8008482:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00e      	beq.n	80084aa <osThreadNew+0xa6>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	2b5b      	cmp	r3, #91	@ 0x5b
 8008492:	d90a      	bls.n	80084aa <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008498:	2b00      	cmp	r3, #0
 800849a:	d006      	beq.n	80084aa <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	695b      	ldr	r3, [r3, #20]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d002      	beq.n	80084aa <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 80084a4:	2301      	movs	r3, #1
 80084a6:	61bb      	str	r3, [r7, #24]
 80084a8:	e010      	b.n	80084cc <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10c      	bne.n	80084cc <osThreadNew+0xc8>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d108      	bne.n	80084cc <osThreadNew+0xc8>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d104      	bne.n	80084cc <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 80084c2:	2300      	movs	r3, #0
 80084c4:	61bb      	str	r3, [r7, #24]
 80084c6:	e001      	b.n	80084cc <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d110      	bne.n	80084f4 <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084da:	9202      	str	r2, [sp, #8]
 80084dc:	9301      	str	r3, [sp, #4]
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	6a3a      	ldr	r2, [r7, #32]
 80084e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f000 fba5 	bl	8008c38 <xTaskCreateStatic>
 80084ee:	4603      	mov	r3, r0
 80084f0:	617b      	str	r3, [r7, #20]
 80084f2:	e013      	b.n	800851c <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d110      	bne.n	800851c <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 80084fa:	6a3b      	ldr	r3, [r7, #32]
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	f107 0314 	add.w	r3, r7, #20
 8008502:	9301      	str	r3, [sp, #4]
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	9300      	str	r3, [sp, #0]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f000 fbe0 	bl	8008cd2 <xTaskCreate>
 8008512:	4603      	mov	r3, r0
 8008514:	2b01      	cmp	r3, #1
 8008516:	d001      	beq.n	800851c <osThreadNew+0x118>
            hTask = NULL;
 8008518:	2300      	movs	r3, #0
 800851a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 800851c:	697b      	ldr	r3, [r7, #20]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3728      	adds	r7, #40	@ 0x28
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 8008526:	b580      	push	{r7, lr}
 8008528:	b084      	sub	sp, #16
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 800852e:	f7ff fef2 	bl	8008316 <IRQ_Context>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d003      	beq.n	8008540 <osDelay+0x1a>
    stat = osErrorISR;
 8008538:	f06f 0305 	mvn.w	r3, #5
 800853c:	60fb      	str	r3, [r7, #12]
 800853e:	e007      	b.n	8008550 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 8008540:	2300      	movs	r3, #0
 8008542:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <osDelay+0x2a>
      vTaskDelay(ticks);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fd1e 	bl	8008f8c <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 8008550:	68fb      	ldr	r3, [r7, #12]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
	...

0800855c <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	4a07      	ldr	r2, [pc, #28]	@ (8008588 <vApplicationGetIdleTaskMemory+0x2c>)
 800856c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	4a06      	ldr	r2, [pc, #24]	@ (800858c <vApplicationGetIdleTaskMemory+0x30>)
 8008572:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2280      	movs	r2, #128	@ 0x80
 8008578:	601a      	str	r2, [r3, #0]
}
 800857a:	bf00      	nop
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	200002dc 	.word	0x200002dc
 800858c:	20000338 	.word	0x20000338

08008590 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	4a07      	ldr	r2, [pc, #28]	@ (80085bc <vApplicationGetTimerTaskMemory+0x2c>)
 80085a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	4a06      	ldr	r2, [pc, #24]	@ (80085c0 <vApplicationGetTimerTaskMemory+0x30>)
 80085a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2280      	movs	r2, #128	@ 0x80
 80085ac:	601a      	str	r2, [r3, #0]
}
 80085ae:	bf00      	nop
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	20000538 	.word	0x20000538
 80085c0:	20000594 	.word	0x20000594

080085c4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f103 0208 	add.w	r2, r3, #8
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f04f 32ff 	mov.w	r2, #4294967295
 80085dc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f103 0208 	add.w	r2, r3, #8
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f103 0208 	add.w	r2, r3, #8
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008612:	bf00      	nop
 8008614:	370c      	adds	r7, #12
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr

0800861e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800861e:	b480      	push	{r7}
 8008620:	b085      	sub	sp, #20
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
 8008626:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008634:	d103      	bne.n	800863e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	60fb      	str	r3, [r7, #12]
 800863c:	e00c      	b.n	8008658 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	3308      	adds	r3, #8
 8008642:	60fb      	str	r3, [r7, #12]
 8008644:	e002      	b.n	800864c <vListInsert+0x2e>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	60fb      	str	r3, [r7, #12]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	429a      	cmp	r2, r3
 8008656:	d2f6      	bcs.n	8008646 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	685a      	ldr	r2, [r3, #4]
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	683a      	ldr	r2, [r7, #0]
 8008666:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	683a      	ldr	r2, [r7, #0]
 8008672:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	1c5a      	adds	r2, r3, #1
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	601a      	str	r2, [r3, #0]
}
 8008684:	bf00      	nop
 8008686:	3714      	adds	r7, #20
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	6892      	ldr	r2, [r2, #8]
 80086a6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	6852      	ldr	r2, [r2, #4]
 80086b0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d103      	bne.n	80086c4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	689a      	ldr	r2, [r3, #8]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	1e5a      	subs	r2, r3, #1
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3714      	adds	r7, #20
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80086ee:	2301      	movs	r3, #1
 80086f0:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d103      	bne.n	8008704 <xQueueGenericReset+0x20>
 80086fc:	f001 febc 	bl	800a478 <ulSetInterruptMask>
 8008700:	bf00      	nop
 8008702:	e7fd      	b.n	8008700 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d057      	beq.n	80087ba <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800870e:	2b00      	cmp	r3, #0
 8008710:	d053      	beq.n	80087ba <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800871a:	2100      	movs	r1, #0
 800871c:	fba3 2302 	umull	r2, r3, r3, r2
 8008720:	2b00      	cmp	r3, #0
 8008722:	d000      	beq.n	8008726 <xQueueGenericReset+0x42>
 8008724:	2101      	movs	r1, #1
 8008726:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8008728:	2b00      	cmp	r3, #0
 800872a:	d146      	bne.n	80087ba <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 800872c:	f001 fd0a 	bl	800a144 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008738:	68b9      	ldr	r1, [r7, #8]
 800873a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800873c:	fb01 f303 	mul.w	r3, r1, r3
 8008740:	441a      	add	r2, r3
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	2200      	movs	r2, #0
 800874a:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800875c:	3b01      	subs	r3, #1
 800875e:	68b9      	ldr	r1, [r7, #8]
 8008760:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008762:	fb01 f303 	mul.w	r3, r1, r3
 8008766:	441a      	add	r2, r3
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	22ff      	movs	r2, #255	@ 0xff
 8008770:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	22ff      	movs	r2, #255	@ 0xff
 8008778:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d10e      	bne.n	80087a0 <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d014      	beq.n	80087b4 <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	3310      	adds	r3, #16
 800878e:	4618      	mov	r0, r3
 8008790:	f000 ff4a 	bl	8009628 <xTaskRemoveFromEventList>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00c      	beq.n	80087b4 <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800879a:	f001 fcc1 	bl	800a120 <vPortYield>
 800879e:	e009      	b.n	80087b4 <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	3310      	adds	r3, #16
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7ff ff0d 	bl	80085c4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	3324      	adds	r3, #36	@ 0x24
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7ff ff08 	bl	80085c4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80087b4:	f001 fcd8 	bl	800a168 <vPortExitCritical>
 80087b8:	e001      	b.n	80087be <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 80087ba:	2300      	movs	r3, #0
 80087bc:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d103      	bne.n	80087cc <xQueueGenericReset+0xe8>
 80087c4:	f001 fe58 	bl	800a478 <ulSetInterruptMask>
 80087c8:	bf00      	nop
 80087ca:	e7fd      	b.n	80087c8 <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80087cc:	68fb      	ldr	r3, [r7, #12]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b088      	sub	sp, #32
 80087da:	af02      	add	r7, sp, #8
 80087dc:	60f8      	str	r0, [r7, #12]
 80087de:	60b9      	str	r1, [r7, #8]
 80087e0:	607a      	str	r2, [r7, #4]
 80087e2:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 80087e4:	2300      	movs	r3, #0
 80087e6:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d103      	bne.n	80087f6 <xQueueGenericCreateStatic+0x20>
 80087ee:	f001 fe43 	bl	800a478 <ulSetInterruptMask>
 80087f2:	bf00      	nop
 80087f4:	e7fd      	b.n	80087f2 <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d029      	beq.n	8008850 <xQueueGenericCreateStatic+0x7a>
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d026      	beq.n	8008850 <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d020      	beq.n	8008850 <xQueueGenericCreateStatic+0x7a>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d102      	bne.n	800881a <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d11a      	bne.n	8008850 <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800881a:	2350      	movs	r3, #80	@ 0x50
 800881c:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	2b50      	cmp	r3, #80	@ 0x50
 8008822:	d003      	beq.n	800882c <xQueueGenericCreateStatic+0x56>
 8008824:	f001 fe28 	bl	800a478 <ulSetInterruptMask>
 8008828:	bf00      	nop
 800882a:	e7fd      	b.n	8008828 <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800882c:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	2201      	movs	r2, #1
 8008836:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800883a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	4613      	mov	r3, r2
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	68b9      	ldr	r1, [r7, #8]
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f000 f80d 	bl	8008868 <prvInitialiseNewQueue>
 800884e:	e006      	b.n	800885e <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d103      	bne.n	800885e <xQueueGenericCreateStatic+0x88>
 8008856:	f001 fe0f 	bl	800a478 <ulSetInterruptMask>
 800885a:	bf00      	nop
 800885c:	e7fd      	b.n	800885a <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800885e:	697b      	ldr	r3, [r7, #20]
    }
 8008860:	4618      	mov	r0, r3
 8008862:	3718      	adds	r7, #24
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
 8008874:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d103      	bne.n	8008884 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	69ba      	ldr	r2, [r7, #24]
 8008880:	601a      	str	r2, [r3, #0]
 8008882:	e002      	b.n	800888a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008896:	2101      	movs	r1, #1
 8008898:	69b8      	ldr	r0, [r7, #24]
 800889a:	f7ff ff23 	bl	80086e4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	78fa      	ldrb	r2, [r7, #3]
 80088a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80088a6:	bf00      	nop
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b08a      	sub	sp, #40	@ 0x28
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	60f8      	str	r0, [r7, #12]
 80088b6:	60b9      	str	r1, [r7, #8]
 80088b8:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80088ba:	2300      	movs	r3, #0
 80088bc:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80088c2:	6a3b      	ldr	r3, [r7, #32]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d103      	bne.n	80088d0 <xQueueReceive+0x22>
 80088c8:	f001 fdd6 	bl	800a478 <ulSetInterruptMask>
 80088cc:	bf00      	nop
 80088ce:	e7fd      	b.n	80088cc <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d103      	bne.n	80088de <xQueueReceive+0x30>
 80088d6:	6a3b      	ldr	r3, [r7, #32]
 80088d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d101      	bne.n	80088e2 <xQueueReceive+0x34>
 80088de:	2301      	movs	r3, #1
 80088e0:	e000      	b.n	80088e4 <xQueueReceive+0x36>
 80088e2:	2300      	movs	r3, #0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d103      	bne.n	80088f0 <xQueueReceive+0x42>
 80088e8:	f001 fdc6 	bl	800a478 <ulSetInterruptMask>
 80088ec:	bf00      	nop
 80088ee:	e7fd      	b.n	80088ec <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088f0:	f001 f8a4 	bl	8009a3c <xTaskGetSchedulerState>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d102      	bne.n	8008900 <xQueueReceive+0x52>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d101      	bne.n	8008904 <xQueueReceive+0x56>
 8008900:	2301      	movs	r3, #1
 8008902:	e000      	b.n	8008906 <xQueueReceive+0x58>
 8008904:	2300      	movs	r3, #0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d103      	bne.n	8008912 <xQueueReceive+0x64>
 800890a:	f001 fdb5 	bl	800a478 <ulSetInterruptMask>
 800890e:	bf00      	nop
 8008910:	e7fd      	b.n	800890e <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008912:	f001 fc17 	bl	800a144 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008916:	6a3b      	ldr	r3, [r7, #32]
 8008918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800891a:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d019      	beq.n	8008956 <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008922:	68b9      	ldr	r1, [r7, #8]
 8008924:	6a38      	ldr	r0, [r7, #32]
 8008926:	f000 f87e 	bl	8008a26 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	1e5a      	subs	r2, r3, #1
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008932:	6a3b      	ldr	r3, [r7, #32]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d009      	beq.n	800894e <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800893a:	6a3b      	ldr	r3, [r7, #32]
 800893c:	3310      	adds	r3, #16
 800893e:	4618      	mov	r0, r3
 8008940:	f000 fe72 	bl	8009628 <xTaskRemoveFromEventList>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800894a:	f001 fbe9 	bl	800a120 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800894e:	f001 fc0b 	bl	800a168 <vPortExitCritical>
                return pdPASS;
 8008952:	2301      	movs	r3, #1
 8008954:	e063      	b.n	8008a1e <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d103      	bne.n	8008964 <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800895c:	f001 fc04 	bl	800a168 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8008960:	2300      	movs	r3, #0
 8008962:	e05c      	b.n	8008a1e <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008966:	2b00      	cmp	r3, #0
 8008968:	d106      	bne.n	8008978 <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800896a:	f107 0314 	add.w	r3, r7, #20
 800896e:	4618      	mov	r0, r3
 8008970:	f000 ff28 	bl	80097c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008974:	2301      	movs	r3, #1
 8008976:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008978:	f001 fbf6 	bl	800a168 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800897c:	f000 fb88 	bl	8009090 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008980:	f001 fbe0 	bl	800a144 <vPortEnterCritical>
 8008984:	6a3b      	ldr	r3, [r7, #32]
 8008986:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800898a:	b25b      	sxtb	r3, r3
 800898c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008990:	d103      	bne.n	800899a <xQueueReceive+0xec>
 8008992:	6a3b      	ldr	r3, [r7, #32]
 8008994:	2200      	movs	r2, #0
 8008996:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089a0:	b25b      	sxtb	r3, r3
 80089a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a6:	d103      	bne.n	80089b0 <xQueueReceive+0x102>
 80089a8:	6a3b      	ldr	r3, [r7, #32]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80089b0:	f001 fbda 	bl	800a168 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089b4:	1d3a      	adds	r2, r7, #4
 80089b6:	f107 0314 	add.w	r3, r7, #20
 80089ba:	4611      	mov	r1, r2
 80089bc:	4618      	mov	r0, r3
 80089be:	f000 ff17 	bl	80097f0 <xTaskCheckForTimeOut>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d11d      	bne.n	8008a04 <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089c8:	6a38      	ldr	r0, [r7, #32]
 80089ca:	f000 f8a4 	bl	8008b16 <prvIsQueueEmpty>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d011      	beq.n	80089f8 <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80089d4:	6a3b      	ldr	r3, [r7, #32]
 80089d6:	3324      	adds	r3, #36	@ 0x24
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	4611      	mov	r1, r2
 80089dc:	4618      	mov	r0, r3
 80089de:	f000 fdc7 	bl	8009570 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80089e2:	6a38      	ldr	r0, [r7, #32]
 80089e4:	f000 f845 	bl	8008a72 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80089e8:	f000 fb60 	bl	80090ac <xTaskResumeAll>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d18f      	bne.n	8008912 <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 80089f2:	f001 fb95 	bl	800a120 <vPortYield>
 80089f6:	e78c      	b.n	8008912 <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80089f8:	6a38      	ldr	r0, [r7, #32]
 80089fa:	f000 f83a 	bl	8008a72 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80089fe:	f000 fb55 	bl	80090ac <xTaskResumeAll>
 8008a02:	e786      	b.n	8008912 <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8008a04:	6a38      	ldr	r0, [r7, #32]
 8008a06:	f000 f834 	bl	8008a72 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008a0a:	f000 fb4f 	bl	80090ac <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a0e:	6a38      	ldr	r0, [r7, #32]
 8008a10:	f000 f881 	bl	8008b16 <prvIsQueueEmpty>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f43f af7b 	beq.w	8008912 <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8008a1c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3728      	adds	r7, #40	@ 0x28
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b082      	sub	sp, #8
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d018      	beq.n	8008a6a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	68da      	ldr	r2, [r3, #12]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a40:	441a      	add	r2, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	68da      	ldr	r2, [r3, #12]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d303      	bcc.n	8008a5a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	68d9      	ldr	r1, [r3, #12]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a62:	461a      	mov	r2, r3
 8008a64:	6838      	ldr	r0, [r7, #0]
 8008a66:	f001 fe33 	bl	800a6d0 <memcpy>
    }
}
 8008a6a:	bf00      	nop
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b084      	sub	sp, #16
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8008a7a:	f001 fb63 	bl	800a144 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a84:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a86:	e011      	b.n	8008aac <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d012      	beq.n	8008ab6 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	3324      	adds	r3, #36	@ 0x24
 8008a94:	4618      	mov	r0, r3
 8008a96:	f000 fdc7 	bl	8009628 <xTaskRemoveFromEventList>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d001      	beq.n	8008aa4 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8008aa0:	f000 fefe 	bl	80098a0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	dce9      	bgt.n	8008a88 <prvUnlockQueue+0x16>
 8008ab4:	e000      	b.n	8008ab8 <prvUnlockQueue+0x46>
                    break;
 8008ab6:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	22ff      	movs	r2, #255	@ 0xff
 8008abc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8008ac0:	f001 fb52 	bl	800a168 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8008ac4:	f001 fb3e 	bl	800a144 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ace:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ad0:	e011      	b.n	8008af6 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d012      	beq.n	8008b00 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	3310      	adds	r3, #16
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f000 fda2 	bl	8009628 <xTaskRemoveFromEventList>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8008aea:	f000 fed9 	bl	80098a0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8008aee:	7bbb      	ldrb	r3, [r7, #14]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008af6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	dce9      	bgt.n	8008ad2 <prvUnlockQueue+0x60>
 8008afe:	e000      	b.n	8008b02 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8008b00:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	22ff      	movs	r2, #255	@ 0xff
 8008b06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8008b0a:	f001 fb2d 	bl	800a168 <vPortExitCritical>
}
 8008b0e:	bf00      	nop
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b084      	sub	sp, #16
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8008b1e:	f001 fb11 	bl	800a144 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d102      	bne.n	8008b30 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	60fb      	str	r3, [r7, #12]
 8008b2e:	e001      	b.n	8008b34 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8008b30:	2300      	movs	r3, #0
 8008b32:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8008b34:	f001 fb18 	bl	800a168 <vPortExitCritical>

    return xReturn;
 8008b38:	68fb      	ldr	r3, [r7, #12]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
	...

08008b44 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d103      	bne.n	8008b60 <vQueueAddToRegistry+0x1c>
 8008b58:	f001 fc8e 	bl	800a478 <ulSetInterruptMask>
 8008b5c:	bf00      	nop
 8008b5e:	e7fd      	b.n	8008b5c <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d024      	beq.n	8008bb0 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b66:	2300      	movs	r3, #0
 8008b68:	60fb      	str	r3, [r7, #12]
 8008b6a:	e01e      	b.n	8008baa <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008b6c:	4a17      	ldr	r2, [pc, #92]	@ (8008bcc <vQueueAddToRegistry+0x88>)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	00db      	lsls	r3, r3, #3
 8008b72:	4413      	add	r3, r2
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d105      	bne.n	8008b88 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	00db      	lsls	r3, r3, #3
 8008b80:	4a12      	ldr	r2, [pc, #72]	@ (8008bcc <vQueueAddToRegistry+0x88>)
 8008b82:	4413      	add	r3, r2
 8008b84:	60bb      	str	r3, [r7, #8]
                    break;
 8008b86:	e013      	b.n	8008bb0 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d10a      	bne.n	8008ba4 <vQueueAddToRegistry+0x60>
 8008b8e:	4a0f      	ldr	r2, [pc, #60]	@ (8008bcc <vQueueAddToRegistry+0x88>)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d104      	bne.n	8008ba4 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	00db      	lsls	r3, r3, #3
 8008b9e:	4a0b      	ldr	r2, [pc, #44]	@ (8008bcc <vQueueAddToRegistry+0x88>)
 8008ba0:	4413      	add	r3, r2
 8008ba2:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	60fb      	str	r3, [r7, #12]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2b07      	cmp	r3, #7
 8008bae:	d9dd      	bls.n	8008b6c <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d005      	beq.n	8008bc2 <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	683a      	ldr	r2, [r7, #0]
 8008bba:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8008bc2:	bf00      	nop
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	20000794 	.word	0x20000794

08008bd0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8008be0:	f001 fab0 	bl	800a144 <vPortEnterCritical>
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008bea:	b25b      	sxtb	r3, r3
 8008bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bf0:	d103      	bne.n	8008bfa <vQueueWaitForMessageRestricted+0x2a>
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c00:	b25b      	sxtb	r3, r3
 8008c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c06:	d103      	bne.n	8008c10 <vQueueWaitForMessageRestricted+0x40>
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c10:	f001 faaa 	bl	800a168 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d106      	bne.n	8008c2a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	3324      	adds	r3, #36	@ 0x24
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	68b9      	ldr	r1, [r7, #8]
 8008c24:	4618      	mov	r0, r3
 8008c26:	f000 fcc1 	bl	80095ac <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8008c2a:	6978      	ldr	r0, [r7, #20]
 8008c2c:	f7ff ff21 	bl	8008a72 <prvUnlockQueue>
    }
 8008c30:	bf00      	nop
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b08c      	sub	sp, #48	@ 0x30
 8008c3c:	af04      	add	r7, sp, #16
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
 8008c44:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8008c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d103      	bne.n	8008c54 <xTaskCreateStatic+0x1c>
 8008c4c:	f001 fc14 	bl	800a478 <ulSetInterruptMask>
 8008c50:	bf00      	nop
 8008c52:	e7fd      	b.n	8008c50 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 8008c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d103      	bne.n	8008c62 <xTaskCreateStatic+0x2a>
 8008c5a:	f001 fc0d 	bl	800a478 <ulSetInterruptMask>
 8008c5e:	bf00      	nop
 8008c60:	e7fd      	b.n	8008c5e <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8008c62:	235c      	movs	r3, #92	@ 0x5c
 8008c64:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	2b5c      	cmp	r3, #92	@ 0x5c
 8008c6a:	d003      	beq.n	8008c74 <xTaskCreateStatic+0x3c>
 8008c6c:	f001 fc04 	bl	800a478 <ulSetInterruptMask>
 8008c70:	bf00      	nop
 8008c72:	e7fd      	b.n	8008c70 <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008c74:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d023      	beq.n	8008cc4 <xTaskCreateStatic+0x8c>
 8008c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d020      	beq.n	8008cc4 <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c84:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8008c86:	225c      	movs	r2, #92	@ 0x5c
 8008c88:	2100      	movs	r1, #0
 8008c8a:	69f8      	ldr	r0, [r7, #28]
 8008c8c:	f001 fcec 	bl	800a668 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c94:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	2202      	movs	r2, #2
 8008c9a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	9303      	str	r3, [sp, #12]
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	9302      	str	r3, [sp, #8]
 8008ca6:	f107 0318 	add.w	r3, r7, #24
 8008caa:	9301      	str	r3, [sp, #4]
 8008cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	68b9      	ldr	r1, [r7, #8]
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	f000 f855 	bl	8008d66 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8008cbc:	69f8      	ldr	r0, [r7, #28]
 8008cbe:	f000 f8d5 	bl	8008e6c <prvAddNewTaskToReadyList>
 8008cc2:	e001      	b.n	8008cc8 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8008cc8:	69bb      	ldr	r3, [r7, #24]
    }
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3720      	adds	r7, #32
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b08c      	sub	sp, #48	@ 0x30
 8008cd6:	af04      	add	r7, sp, #16
 8008cd8:	60f8      	str	r0, [r7, #12]
 8008cda:	60b9      	str	r1, [r7, #8]
 8008cdc:	603b      	str	r3, [r7, #0]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ce2:	88fb      	ldrh	r3, [r7, #6]
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f001 fc26 	bl	800a538 <pvPortMalloc>
 8008cec:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d013      	beq.n	8008d1c <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008cf4:	205c      	movs	r0, #92	@ 0x5c
 8008cf6:	f001 fc1f 	bl	800a538 <pvPortMalloc>
 8008cfa:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d008      	beq.n	8008d14 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8008d02:	225c      	movs	r2, #92	@ 0x5c
 8008d04:	2100      	movs	r1, #0
 8008d06:	69f8      	ldr	r0, [r7, #28]
 8008d08:	f001 fcae 	bl	800a668 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	631a      	str	r2, [r3, #48]	@ 0x30
 8008d12:	e005      	b.n	8008d20 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8008d14:	6978      	ldr	r0, [r7, #20]
 8008d16:	f001 fc61 	bl	800a5dc <vPortFree>
 8008d1a:	e001      	b.n	8008d20 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d017      	beq.n	8008d56 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d2e:	88fa      	ldrh	r2, [r7, #6]
 8008d30:	2300      	movs	r3, #0
 8008d32:	9303      	str	r3, [sp, #12]
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	9302      	str	r3, [sp, #8]
 8008d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d3a:	9301      	str	r3, [sp, #4]
 8008d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	68b9      	ldr	r1, [r7, #8]
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	f000 f80e 	bl	8008d66 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8008d4a:	69f8      	ldr	r0, [r7, #28]
 8008d4c:	f000 f88e 	bl	8008e6c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8008d50:	2301      	movs	r3, #1
 8008d52:	61bb      	str	r3, [r7, #24]
 8008d54:	e002      	b.n	8008d5c <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d56:	f04f 33ff 	mov.w	r3, #4294967295
 8008d5a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8008d5c:	69bb      	ldr	r3, [r7, #24]
    }
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3720      	adds	r7, #32
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b086      	sub	sp, #24
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	60f8      	str	r0, [r7, #12]
 8008d6e:	60b9      	str	r1, [r7, #8]
 8008d70:	607a      	str	r2, [r7, #4]
 8008d72:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d76:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	21a5      	movs	r1, #165	@ 0xa5
 8008d80:	f001 fc72 	bl	800a668 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	f023 0307 	bic.w	r3, r3, #7
 8008d9c:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	f003 0307 	and.w	r3, r3, #7
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d003      	beq.n	8008db0 <prvInitialiseNewTask+0x4a>
 8008da8:	f001 fb66 	bl	800a478 <ulSetInterruptMask>
 8008dac:	bf00      	nop
 8008dae:	e7fd      	b.n	8008dac <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d01e      	beq.n	8008df4 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008db6:	2300      	movs	r3, #0
 8008db8:	617b      	str	r3, [r7, #20]
 8008dba:	e012      	b.n	8008de2 <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	7819      	ldrb	r1, [r3, #0]
 8008dc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	4413      	add	r3, r2
 8008dca:	3334      	adds	r3, #52	@ 0x34
 8008dcc:	460a      	mov	r2, r1
 8008dce:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8008dd0:	68ba      	ldr	r2, [r7, #8]
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d006      	beq.n	8008dea <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	3301      	adds	r3, #1
 8008de0:	617b      	str	r3, [r7, #20]
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	2b0f      	cmp	r3, #15
 8008de6:	d9e9      	bls.n	8008dbc <prvInitialiseNewTask+0x56>
 8008de8:	e000      	b.n	8008dec <prvInitialiseNewTask+0x86>
            {
                break;
 8008dea:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dee:	2200      	movs	r2, #0
 8008df0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8008df4:	6a3b      	ldr	r3, [r7, #32]
 8008df6:	2b37      	cmp	r3, #55	@ 0x37
 8008df8:	d903      	bls.n	8008e02 <prvInitialiseNewTask+0x9c>
 8008dfa:	f001 fb3d 	bl	800a478 <ulSetInterruptMask>
 8008dfe:	bf00      	nop
 8008e00:	e7fd      	b.n	8008dfe <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e02:	6a3b      	ldr	r3, [r7, #32]
 8008e04:	2b37      	cmp	r3, #55	@ 0x37
 8008e06:	d901      	bls.n	8008e0c <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e08:	2337      	movs	r3, #55	@ 0x37
 8008e0a:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8008e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e0e:	6a3a      	ldr	r2, [r7, #32]
 8008e10:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8008e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e14:	6a3a      	ldr	r2, [r7, #32]
 8008e16:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7ff fbf1 	bl	8008604 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e24:	3318      	adds	r3, #24
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7ff fbec 	bl	8008604 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e30:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e32:	6a3b      	ldr	r3, [r7, #32]
 8008e34:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e40:	625a      	str	r2, [r3, #36]	@ 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8008e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e44:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	6938      	ldr	r0, [r7, #16]
 8008e4c:	f001 f9d8 	bl	800a200 <pxPortInitialiseStack>
 8008e50:	4602      	mov	r2, r0
 8008e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e54:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8008e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d002      	beq.n	8008e62 <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e60:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008e62:	bf00      	nop
 8008e64:	3718      	adds	r7, #24
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
	...

08008e6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8008e74:	f001 f966 	bl	800a144 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8008e78:	4b3e      	ldr	r3, [pc, #248]	@ (8008f74 <prvAddNewTaskToReadyList+0x108>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	4a3d      	ldr	r2, [pc, #244]	@ (8008f74 <prvAddNewTaskToReadyList+0x108>)
 8008e80:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8008e82:	4b3d      	ldr	r3, [pc, #244]	@ (8008f78 <prvAddNewTaskToReadyList+0x10c>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d109      	bne.n	8008e9e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8008e8a:	4a3b      	ldr	r2, [pc, #236]	@ (8008f78 <prvAddNewTaskToReadyList+0x10c>)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e90:	4b38      	ldr	r3, [pc, #224]	@ (8008f74 <prvAddNewTaskToReadyList+0x108>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d110      	bne.n	8008eba <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8008e98:	f000 fd1e 	bl	80098d8 <prvInitialiseTaskLists>
 8008e9c:	e00d      	b.n	8008eba <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8008e9e:	4b37      	ldr	r3, [pc, #220]	@ (8008f7c <prvAddNewTaskToReadyList+0x110>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d109      	bne.n	8008eba <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ea6:	4b34      	ldr	r3, [pc, #208]	@ (8008f78 <prvAddNewTaskToReadyList+0x10c>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d802      	bhi.n	8008eba <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8008eb4:	4a30      	ldr	r2, [pc, #192]	@ (8008f78 <prvAddNewTaskToReadyList+0x10c>)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8008eba:	4b31      	ldr	r3, [pc, #196]	@ (8008f80 <prvAddNewTaskToReadyList+0x114>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	4a2f      	ldr	r2, [pc, #188]	@ (8008f80 <prvAddNewTaskToReadyList+0x114>)
 8008ec2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008ec4:	4b2e      	ldr	r3, [pc, #184]	@ (8008f80 <prvAddNewTaskToReadyList+0x114>)
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ed0:	4b2c      	ldr	r3, [pc, #176]	@ (8008f84 <prvAddNewTaskToReadyList+0x118>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d903      	bls.n	8008ee0 <prvAddNewTaskToReadyList+0x74>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008edc:	4a29      	ldr	r2, [pc, #164]	@ (8008f84 <prvAddNewTaskToReadyList+0x118>)
 8008ede:	6013      	str	r3, [r2, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ee4:	4928      	ldr	r1, [pc, #160]	@ (8008f88 <prvAddNewTaskToReadyList+0x11c>)
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	4413      	add	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	440b      	add	r3, r1
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	60fb      	str	r3, [r7, #12]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	609a      	str	r2, [r3, #8]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	689a      	ldr	r2, [r3, #8]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	60da      	str	r2, [r3, #12]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	3204      	adds	r2, #4
 8008f0c:	605a      	str	r2, [r3, #4]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	1d1a      	adds	r2, r3, #4
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	609a      	str	r2, [r3, #8]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	4413      	add	r3, r2
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	4a19      	ldr	r2, [pc, #100]	@ (8008f88 <prvAddNewTaskToReadyList+0x11c>)
 8008f24:	441a      	add	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	615a      	str	r2, [r3, #20]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f2e:	4916      	ldr	r1, [pc, #88]	@ (8008f88 <prvAddNewTaskToReadyList+0x11c>)
 8008f30:	4613      	mov	r3, r2
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4413      	add	r3, r2
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	440b      	add	r3, r1
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	1c59      	adds	r1, r3, #1
 8008f3e:	4812      	ldr	r0, [pc, #72]	@ (8008f88 <prvAddNewTaskToReadyList+0x11c>)
 8008f40:	4613      	mov	r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	4413      	add	r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4403      	add	r3, r0
 8008f4a:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8008f4c:	f001 f90c 	bl	800a168 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8008f50:	4b0a      	ldr	r3, [pc, #40]	@ (8008f7c <prvAddNewTaskToReadyList+0x110>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d008      	beq.n	8008f6a <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f58:	4b07      	ldr	r3, [pc, #28]	@ (8008f78 <prvAddNewTaskToReadyList+0x10c>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d201      	bcs.n	8008f6a <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8008f66:	f001 f8db 	bl	800a120 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008f6a:	bf00      	nop
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	20000ca8 	.word	0x20000ca8
 8008f78:	200007d4 	.word	0x200007d4
 8008f7c:	20000cb4 	.word	0x20000cb4
 8008f80:	20000cc4 	.word	0x20000cc4
 8008f84:	20000cb0 	.word	0x20000cb0
 8008f88:	200007d8 	.word	0x200007d8

08008f8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8008f94:	2300      	movs	r3, #0
 8008f96:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d010      	beq.n	8008fc0 <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 8008f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8008fd4 <vTaskDelay+0x48>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d003      	beq.n	8008fae <vTaskDelay+0x22>
 8008fa6:	f001 fa67 	bl	800a478 <ulSetInterruptMask>
 8008faa:	bf00      	nop
 8008fac:	e7fd      	b.n	8008faa <vTaskDelay+0x1e>
            vTaskSuspendAll();
 8008fae:	f000 f86f 	bl	8009090 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fd5f 	bl	8009a78 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8008fba:	f000 f877 	bl	80090ac <xTaskResumeAll>
 8008fbe:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d101      	bne.n	8008fca <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 8008fc6:	f001 f8ab 	bl	800a120 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8008fca:	bf00      	nop
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	20000cd0 	.word	0x20000cd0

08008fd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b088      	sub	sp, #32
 8008fdc:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008fe6:	463a      	mov	r2, r7
 8008fe8:	1d39      	adds	r1, r7, #4
 8008fea:	f107 0308 	add.w	r3, r7, #8
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7ff fab4 	bl	800855c <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	9202      	str	r2, [sp, #8]
 8008ffc:	9301      	str	r3, [sp, #4]
 8008ffe:	2300      	movs	r3, #0
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	2300      	movs	r3, #0
 8009004:	460a      	mov	r2, r1
 8009006:	491b      	ldr	r1, [pc, #108]	@ (8009074 <vTaskStartScheduler+0x9c>)
 8009008:	481b      	ldr	r0, [pc, #108]	@ (8009078 <vTaskStartScheduler+0xa0>)
 800900a:	f7ff fe15 	bl	8008c38 <xTaskCreateStatic>
 800900e:	4603      	mov	r3, r0
 8009010:	4a1a      	ldr	r2, [pc, #104]	@ (800907c <vTaskStartScheduler+0xa4>)
 8009012:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8009014:	4b19      	ldr	r3, [pc, #100]	@ (800907c <vTaskStartScheduler+0xa4>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d002      	beq.n	8009022 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 800901c:	2301      	movs	r3, #1
 800901e:	60fb      	str	r3, [r7, #12]
 8009020:	e001      	b.n	8009026 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 8009022:	2300      	movs	r3, #0
 8009024:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2b01      	cmp	r3, #1
 800902a:	d102      	bne.n	8009032 <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 800902c:	f000 fd92 	bl	8009b54 <xTimerCreateTimerTask>
 8009030:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2b01      	cmp	r3, #1
 8009036:	d10e      	bne.n	8009056 <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8009038:	f001 fa1e 	bl	800a478 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800903c:	4b10      	ldr	r3, [pc, #64]	@ (8009080 <vTaskStartScheduler+0xa8>)
 800903e:	f04f 32ff 	mov.w	r2, #4294967295
 8009042:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8009044:	4b0f      	ldr	r3, [pc, #60]	@ (8009084 <vTaskStartScheduler+0xac>)
 8009046:	2201      	movs	r2, #1
 8009048:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800904a:	4b0f      	ldr	r3, [pc, #60]	@ (8009088 <vTaskStartScheduler+0xb0>)
 800904c:	2200      	movs	r2, #0
 800904e:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8009050:	f001 f960 	bl	800a314 <xPortStartScheduler>
 8009054:	e007      	b.n	8009066 <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800905c:	d103      	bne.n	8009066 <vTaskStartScheduler+0x8e>
 800905e:	f001 fa0b 	bl	800a478 <ulSetInterruptMask>
 8009062:	bf00      	nop
 8009064:	e7fd      	b.n	8009062 <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8009066:	4b09      	ldr	r3, [pc, #36]	@ (800908c <vTaskStartScheduler+0xb4>)
 8009068:	681b      	ldr	r3, [r3, #0]
}
 800906a:	bf00      	nop
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	0800b020 	.word	0x0800b020
 8009078:	080098b9 	.word	0x080098b9
 800907c:	20000ccc 	.word	0x20000ccc
 8009080:	20000cc8 	.word	0x20000cc8
 8009084:	20000cb4 	.word	0x20000cb4
 8009088:	20000cac 	.word	0x20000cac
 800908c:	0800b098 	.word	0x0800b098

08009090 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009090:	b480      	push	{r7}
 8009092:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8009094:	4b04      	ldr	r3, [pc, #16]	@ (80090a8 <vTaskSuspendAll+0x18>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	3301      	adds	r3, #1
 800909a:	4a03      	ldr	r2, [pc, #12]	@ (80090a8 <vTaskSuspendAll+0x18>)
 800909c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800909e:	bf00      	nop
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr
 80090a8:	20000cd0 	.word	0x20000cd0

080090ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b086      	sub	sp, #24
 80090b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80090b2:	2300      	movs	r3, #0
 80090b4:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 80090b6:	2300      	movs	r3, #0
 80090b8:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 80090ba:	4b6b      	ldr	r3, [pc, #428]	@ (8009268 <xTaskResumeAll+0x1bc>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d103      	bne.n	80090ca <xTaskResumeAll+0x1e>
 80090c2:	f001 f9d9 	bl	800a478 <ulSetInterruptMask>
 80090c6:	bf00      	nop
 80090c8:	e7fd      	b.n	80090c6 <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80090ca:	f001 f83b 	bl	800a144 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80090ce:	4b66      	ldr	r3, [pc, #408]	@ (8009268 <xTaskResumeAll+0x1bc>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	3b01      	subs	r3, #1
 80090d4:	4a64      	ldr	r2, [pc, #400]	@ (8009268 <xTaskResumeAll+0x1bc>)
 80090d6:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80090d8:	4b63      	ldr	r3, [pc, #396]	@ (8009268 <xTaskResumeAll+0x1bc>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f040 80bb 	bne.w	8009258 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80090e2:	4b62      	ldr	r3, [pc, #392]	@ (800926c <xTaskResumeAll+0x1c0>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f000 80b6 	beq.w	8009258 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090ec:	e08b      	b.n	8009206 <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090ee:	4b60      	ldr	r3, [pc, #384]	@ (8009270 <xTaskResumeAll+0x1c4>)
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090fa:	60bb      	str	r3, [r7, #8]
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	69db      	ldr	r3, [r3, #28]
 8009100:	697a      	ldr	r2, [r7, #20]
 8009102:	6a12      	ldr	r2, [r2, #32]
 8009104:	609a      	str	r2, [r3, #8]
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	6a1b      	ldr	r3, [r3, #32]
 800910a:	697a      	ldr	r2, [r7, #20]
 800910c:	69d2      	ldr	r2, [r2, #28]
 800910e:	605a      	str	r2, [r3, #4]
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	685a      	ldr	r2, [r3, #4]
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	3318      	adds	r3, #24
 8009118:	429a      	cmp	r2, r3
 800911a:	d103      	bne.n	8009124 <xTaskResumeAll+0x78>
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	6a1a      	ldr	r2, [r3, #32]
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	605a      	str	r2, [r3, #4]
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	2200      	movs	r2, #0
 8009128:	629a      	str	r2, [r3, #40]	@ 0x28
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	1e5a      	subs	r2, r3, #1
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	695b      	ldr	r3, [r3, #20]
 8009138:	607b      	str	r3, [r7, #4]
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	697a      	ldr	r2, [r7, #20]
 8009140:	68d2      	ldr	r2, [r2, #12]
 8009142:	609a      	str	r2, [r3, #8]
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	697a      	ldr	r2, [r7, #20]
 800914a:	6892      	ldr	r2, [r2, #8]
 800914c:	605a      	str	r2, [r3, #4]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	685a      	ldr	r2, [r3, #4]
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	3304      	adds	r3, #4
 8009156:	429a      	cmp	r2, r3
 8009158:	d103      	bne.n	8009162 <xTaskResumeAll+0xb6>
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	68da      	ldr	r2, [r3, #12]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	605a      	str	r2, [r3, #4]
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	2200      	movs	r2, #0
 8009166:	615a      	str	r2, [r3, #20]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	1e5a      	subs	r2, r3, #1
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009176:	4b3f      	ldr	r3, [pc, #252]	@ (8009274 <xTaskResumeAll+0x1c8>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	429a      	cmp	r2, r3
 800917c:	d903      	bls.n	8009186 <xTaskResumeAll+0xda>
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009182:	4a3c      	ldr	r2, [pc, #240]	@ (8009274 <xTaskResumeAll+0x1c8>)
 8009184:	6013      	str	r3, [r2, #0]
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800918a:	493b      	ldr	r1, [pc, #236]	@ (8009278 <xTaskResumeAll+0x1cc>)
 800918c:	4613      	mov	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4413      	add	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	440b      	add	r3, r1
 8009196:	3304      	adds	r3, #4
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	603b      	str	r3, [r7, #0]
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	683a      	ldr	r2, [r7, #0]
 80091a0:	609a      	str	r2, [r3, #8]
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	689a      	ldr	r2, [r3, #8]
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	60da      	str	r2, [r3, #12]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	697a      	ldr	r2, [r7, #20]
 80091b0:	3204      	adds	r2, #4
 80091b2:	605a      	str	r2, [r3, #4]
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	1d1a      	adds	r2, r3, #4
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	609a      	str	r2, [r3, #8]
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091c0:	4613      	mov	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4413      	add	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	4a2b      	ldr	r2, [pc, #172]	@ (8009278 <xTaskResumeAll+0x1cc>)
 80091ca:	441a      	add	r2, r3
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	615a      	str	r2, [r3, #20]
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091d4:	4928      	ldr	r1, [pc, #160]	@ (8009278 <xTaskResumeAll+0x1cc>)
 80091d6:	4613      	mov	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4413      	add	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	440b      	add	r3, r1
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	1c59      	adds	r1, r3, #1
 80091e4:	4824      	ldr	r0, [pc, #144]	@ (8009278 <xTaskResumeAll+0x1cc>)
 80091e6:	4613      	mov	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	4403      	add	r3, r0
 80091f0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091f6:	4b21      	ldr	r3, [pc, #132]	@ (800927c <xTaskResumeAll+0x1d0>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d902      	bls.n	8009206 <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 8009200:	4b1f      	ldr	r3, [pc, #124]	@ (8009280 <xTaskResumeAll+0x1d4>)
 8009202:	2201      	movs	r2, #1
 8009204:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009206:	4b1a      	ldr	r3, [pc, #104]	@ (8009270 <xTaskResumeAll+0x1c4>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	f47f af6f 	bne.w	80090ee <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d001      	beq.n	800921a <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8009216:	f000 fbf5 	bl	8009a04 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800921a:	4b1a      	ldr	r3, [pc, #104]	@ (8009284 <xTaskResumeAll+0x1d8>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d010      	beq.n	8009248 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8009226:	f000 f83f 	bl	80092a8 <xTaskIncrementTick>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d002      	beq.n	8009236 <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 8009230:	4b13      	ldr	r3, [pc, #76]	@ (8009280 <xTaskResumeAll+0x1d4>)
 8009232:	2201      	movs	r2, #1
 8009234:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	3b01      	subs	r3, #1
 800923a:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1f1      	bne.n	8009226 <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 8009242:	4b10      	ldr	r3, [pc, #64]	@ (8009284 <xTaskResumeAll+0x1d8>)
 8009244:	2200      	movs	r2, #0
 8009246:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8009248:	4b0d      	ldr	r3, [pc, #52]	@ (8009280 <xTaskResumeAll+0x1d4>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d003      	beq.n	8009258 <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8009250:	2301      	movs	r3, #1
 8009252:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8009254:	f000 ff64 	bl	800a120 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8009258:	f000 ff86 	bl	800a168 <vPortExitCritical>

    return xAlreadyYielded;
 800925c:	693b      	ldr	r3, [r7, #16]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3718      	adds	r7, #24
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	20000cd0 	.word	0x20000cd0
 800926c:	20000ca8 	.word	0x20000ca8
 8009270:	20000c68 	.word	0x20000c68
 8009274:	20000cb0 	.word	0x20000cb0
 8009278:	200007d8 	.word	0x200007d8
 800927c:	200007d4 	.word	0x200007d4
 8009280:	20000cbc 	.word	0x20000cbc
 8009284:	20000cb8 	.word	0x20000cb8

08009288 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800928e:	4b05      	ldr	r3, [pc, #20]	@ (80092a4 <xTaskGetTickCount+0x1c>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8009294:	687b      	ldr	r3, [r7, #4]
}
 8009296:	4618      	mov	r0, r3
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	20000cac 	.word	0x20000cac

080092a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b088      	sub	sp, #32
 80092ac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80092ae:	2300      	movs	r3, #0
 80092b0:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80092b2:	4b7a      	ldr	r3, [pc, #488]	@ (800949c <xTaskIncrementTick+0x1f4>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f040 80e6 	bne.w	8009488 <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80092bc:	4b78      	ldr	r3, [pc, #480]	@ (80094a0 <xTaskIncrementTick+0x1f8>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	3301      	adds	r3, #1
 80092c2:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80092c4:	4a76      	ldr	r2, [pc, #472]	@ (80094a0 <xTaskIncrementTick+0x1f8>)
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d119      	bne.n	8009304 <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 80092d0:	4b74      	ldr	r3, [pc, #464]	@ (80094a4 <xTaskIncrementTick+0x1fc>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d003      	beq.n	80092e2 <xTaskIncrementTick+0x3a>
 80092da:	f001 f8cd 	bl	800a478 <ulSetInterruptMask>
 80092de:	bf00      	nop
 80092e0:	e7fd      	b.n	80092de <xTaskIncrementTick+0x36>
 80092e2:	4b70      	ldr	r3, [pc, #448]	@ (80094a4 <xTaskIncrementTick+0x1fc>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	617b      	str	r3, [r7, #20]
 80092e8:	4b6f      	ldr	r3, [pc, #444]	@ (80094a8 <xTaskIncrementTick+0x200>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a6d      	ldr	r2, [pc, #436]	@ (80094a4 <xTaskIncrementTick+0x1fc>)
 80092ee:	6013      	str	r3, [r2, #0]
 80092f0:	4a6d      	ldr	r2, [pc, #436]	@ (80094a8 <xTaskIncrementTick+0x200>)
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	6013      	str	r3, [r2, #0]
 80092f6:	4b6d      	ldr	r3, [pc, #436]	@ (80094ac <xTaskIncrementTick+0x204>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	3301      	adds	r3, #1
 80092fc:	4a6b      	ldr	r2, [pc, #428]	@ (80094ac <xTaskIncrementTick+0x204>)
 80092fe:	6013      	str	r3, [r2, #0]
 8009300:	f000 fb80 	bl	8009a04 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8009304:	4b6a      	ldr	r3, [pc, #424]	@ (80094b0 <xTaskIncrementTick+0x208>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	69ba      	ldr	r2, [r7, #24]
 800930a:	429a      	cmp	r2, r3
 800930c:	f0c0 80a7 	bcc.w	800945e <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009310:	4b64      	ldr	r3, [pc, #400]	@ (80094a4 <xTaskIncrementTick+0x1fc>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d104      	bne.n	8009324 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800931a:	4b65      	ldr	r3, [pc, #404]	@ (80094b0 <xTaskIncrementTick+0x208>)
 800931c:	f04f 32ff 	mov.w	r2, #4294967295
 8009320:	601a      	str	r2, [r3, #0]
                    break;
 8009322:	e09c      	b.n	800945e <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009324:	4b5f      	ldr	r3, [pc, #380]	@ (80094a4 <xTaskIncrementTick+0x1fc>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8009334:	69ba      	ldr	r2, [r7, #24]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	429a      	cmp	r2, r3
 800933a:	d203      	bcs.n	8009344 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800933c:	4a5c      	ldr	r2, [pc, #368]	@ (80094b0 <xTaskIncrementTick+0x208>)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8009342:	e08c      	b.n	800945e <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	695b      	ldr	r3, [r3, #20]
 8009348:	60bb      	str	r3, [r7, #8]
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	693a      	ldr	r2, [r7, #16]
 8009350:	68d2      	ldr	r2, [r2, #12]
 8009352:	609a      	str	r2, [r3, #8]
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	6892      	ldr	r2, [r2, #8]
 800935c:	605a      	str	r2, [r3, #4]
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	685a      	ldr	r2, [r3, #4]
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	3304      	adds	r3, #4
 8009366:	429a      	cmp	r2, r3
 8009368:	d103      	bne.n	8009372 <xTaskIncrementTick+0xca>
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	68da      	ldr	r2, [r3, #12]
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	605a      	str	r2, [r3, #4]
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	2200      	movs	r2, #0
 8009376:	615a      	str	r2, [r3, #20]
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	1e5a      	subs	r2, r3, #1
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009386:	2b00      	cmp	r3, #0
 8009388:	d01e      	beq.n	80093c8 <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800938e:	607b      	str	r3, [r7, #4]
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	69db      	ldr	r3, [r3, #28]
 8009394:	693a      	ldr	r2, [r7, #16]
 8009396:	6a12      	ldr	r2, [r2, #32]
 8009398:	609a      	str	r2, [r3, #8]
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	6a1b      	ldr	r3, [r3, #32]
 800939e:	693a      	ldr	r2, [r7, #16]
 80093a0:	69d2      	ldr	r2, [r2, #28]
 80093a2:	605a      	str	r2, [r3, #4]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	685a      	ldr	r2, [r3, #4]
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	3318      	adds	r3, #24
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d103      	bne.n	80093b8 <xTaskIncrementTick+0x110>
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	6a1a      	ldr	r2, [r3, #32]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	605a      	str	r2, [r3, #4]
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	2200      	movs	r2, #0
 80093bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	1e5a      	subs	r2, r3, #1
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093cc:	4b39      	ldr	r3, [pc, #228]	@ (80094b4 <xTaskIncrementTick+0x20c>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d903      	bls.n	80093dc <xTaskIncrementTick+0x134>
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d8:	4a36      	ldr	r2, [pc, #216]	@ (80094b4 <xTaskIncrementTick+0x20c>)
 80093da:	6013      	str	r3, [r2, #0]
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093e0:	4935      	ldr	r1, [pc, #212]	@ (80094b8 <xTaskIncrementTick+0x210>)
 80093e2:	4613      	mov	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	440b      	add	r3, r1
 80093ec:	3304      	adds	r3, #4
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	603b      	str	r3, [r7, #0]
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	683a      	ldr	r2, [r7, #0]
 80093f6:	609a      	str	r2, [r3, #8]
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	689a      	ldr	r2, [r3, #8]
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	60da      	str	r2, [r3, #12]
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	693a      	ldr	r2, [r7, #16]
 8009406:	3204      	adds	r2, #4
 8009408:	605a      	str	r2, [r3, #4]
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	1d1a      	adds	r2, r3, #4
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	609a      	str	r2, [r3, #8]
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009416:	4613      	mov	r3, r2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	4413      	add	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4a26      	ldr	r2, [pc, #152]	@ (80094b8 <xTaskIncrementTick+0x210>)
 8009420:	441a      	add	r2, r3
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	615a      	str	r2, [r3, #20]
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800942a:	4923      	ldr	r1, [pc, #140]	@ (80094b8 <xTaskIncrementTick+0x210>)
 800942c:	4613      	mov	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	440b      	add	r3, r1
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	1c59      	adds	r1, r3, #1
 800943a:	481f      	ldr	r0, [pc, #124]	@ (80094b8 <xTaskIncrementTick+0x210>)
 800943c:	4613      	mov	r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	4413      	add	r3, r2
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	4403      	add	r3, r0
 8009446:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800944c:	4b1b      	ldr	r3, [pc, #108]	@ (80094bc <xTaskIncrementTick+0x214>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009452:	429a      	cmp	r2, r3
 8009454:	f67f af5c 	bls.w	8009310 <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 8009458:	2301      	movs	r3, #1
 800945a:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800945c:	e758      	b.n	8009310 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800945e:	4b17      	ldr	r3, [pc, #92]	@ (80094bc <xTaskIncrementTick+0x214>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009464:	4914      	ldr	r1, [pc, #80]	@ (80094b8 <xTaskIncrementTick+0x210>)
 8009466:	4613      	mov	r3, r2
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	4413      	add	r3, r2
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	440b      	add	r3, r1
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2b01      	cmp	r3, #1
 8009474:	d901      	bls.n	800947a <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 8009476:	2301      	movs	r3, #1
 8009478:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800947a:	4b11      	ldr	r3, [pc, #68]	@ (80094c0 <xTaskIncrementTick+0x218>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d007      	beq.n	8009492 <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 8009482:	2301      	movs	r3, #1
 8009484:	61fb      	str	r3, [r7, #28]
 8009486:	e004      	b.n	8009492 <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8009488:	4b0e      	ldr	r3, [pc, #56]	@ (80094c4 <xTaskIncrementTick+0x21c>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	3301      	adds	r3, #1
 800948e:	4a0d      	ldr	r2, [pc, #52]	@ (80094c4 <xTaskIncrementTick+0x21c>)
 8009490:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8009492:	69fb      	ldr	r3, [r7, #28]
}
 8009494:	4618      	mov	r0, r3
 8009496:	3720      	adds	r7, #32
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	20000cd0 	.word	0x20000cd0
 80094a0:	20000cac 	.word	0x20000cac
 80094a4:	20000c60 	.word	0x20000c60
 80094a8:	20000c64 	.word	0x20000c64
 80094ac:	20000cc0 	.word	0x20000cc0
 80094b0:	20000cc8 	.word	0x20000cc8
 80094b4:	20000cb0 	.word	0x20000cb0
 80094b8:	200007d8 	.word	0x200007d8
 80094bc:	200007d4 	.word	0x200007d4
 80094c0:	20000cbc 	.word	0x20000cbc
 80094c4:	20000cb8 	.word	0x20000cb8

080094c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80094ce:	4b23      	ldr	r3, [pc, #140]	@ (800955c <vTaskSwitchContext+0x94>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d003      	beq.n	80094de <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80094d6:	4b22      	ldr	r3, [pc, #136]	@ (8009560 <vTaskSwitchContext+0x98>)
 80094d8:	2201      	movs	r2, #1
 80094da:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80094dc:	e039      	b.n	8009552 <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 80094de:	4b20      	ldr	r3, [pc, #128]	@ (8009560 <vTaskSwitchContext+0x98>)
 80094e0:	2200      	movs	r2, #0
 80094e2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094e4:	4b1f      	ldr	r3, [pc, #124]	@ (8009564 <vTaskSwitchContext+0x9c>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	607b      	str	r3, [r7, #4]
 80094ea:	e009      	b.n	8009500 <vTaskSwitchContext+0x38>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d103      	bne.n	80094fa <vTaskSwitchContext+0x32>
 80094f2:	f000 ffc1 	bl	800a478 <ulSetInterruptMask>
 80094f6:	bf00      	nop
 80094f8:	e7fd      	b.n	80094f6 <vTaskSwitchContext+0x2e>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	3b01      	subs	r3, #1
 80094fe:	607b      	str	r3, [r7, #4]
 8009500:	4919      	ldr	r1, [pc, #100]	@ (8009568 <vTaskSwitchContext+0xa0>)
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	4613      	mov	r3, r2
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	4413      	add	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	440b      	add	r3, r1
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d0eb      	beq.n	80094ec <vTaskSwitchContext+0x24>
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	4613      	mov	r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4413      	add	r3, r2
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4a12      	ldr	r2, [pc, #72]	@ (8009568 <vTaskSwitchContext+0xa0>)
 8009520:	4413      	add	r3, r2
 8009522:	603b      	str	r3, [r7, #0]
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	685a      	ldr	r2, [r3, #4]
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	605a      	str	r2, [r3, #4]
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	685a      	ldr	r2, [r3, #4]
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	3308      	adds	r3, #8
 8009536:	429a      	cmp	r2, r3
 8009538:	d103      	bne.n	8009542 <vTaskSwitchContext+0x7a>
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	68da      	ldr	r2, [r3, #12]
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	605a      	str	r2, [r3, #4]
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	4a08      	ldr	r2, [pc, #32]	@ (800956c <vTaskSwitchContext+0xa4>)
 800954a:	6013      	str	r3, [r2, #0]
 800954c:	4a05      	ldr	r2, [pc, #20]	@ (8009564 <vTaskSwitchContext+0x9c>)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6013      	str	r3, [r2, #0]
}
 8009552:	bf00      	nop
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	20000cd0 	.word	0x20000cd0
 8009560:	20000cbc 	.word	0x20000cbc
 8009564:	20000cb0 	.word	0x20000cb0
 8009568:	200007d8 	.word	0x200007d8
 800956c:	200007d4 	.word	0x200007d4

08009570 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d103      	bne.n	8009588 <vTaskPlaceOnEventList+0x18>
 8009580:	f000 ff7a 	bl	800a478 <ulSetInterruptMask>
 8009584:	bf00      	nop
 8009586:	e7fd      	b.n	8009584 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009588:	4b07      	ldr	r3, [pc, #28]	@ (80095a8 <vTaskPlaceOnEventList+0x38>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	3318      	adds	r3, #24
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7ff f844 	bl	800861e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009596:	2101      	movs	r1, #1
 8009598:	6838      	ldr	r0, [r7, #0]
 800959a:	f000 fa6d 	bl	8009a78 <prvAddCurrentTaskToDelayedList>
}
 800959e:	bf00      	nop
 80095a0:	3708      	adds	r7, #8
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	200007d4 	.word	0x200007d4

080095ac <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d103      	bne.n	80095c6 <vTaskPlaceOnEventListRestricted+0x1a>
 80095be:	f000 ff5b 	bl	800a478 <ulSetInterruptMask>
 80095c2:	bf00      	nop
 80095c4:	e7fd      	b.n	80095c2 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	617b      	str	r3, [r7, #20]
 80095cc:	4b15      	ldr	r3, [pc, #84]	@ (8009624 <vTaskPlaceOnEventListRestricted+0x78>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	697a      	ldr	r2, [r7, #20]
 80095d2:	61da      	str	r2, [r3, #28]
 80095d4:	4b13      	ldr	r3, [pc, #76]	@ (8009624 <vTaskPlaceOnEventListRestricted+0x78>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	697a      	ldr	r2, [r7, #20]
 80095da:	6892      	ldr	r2, [r2, #8]
 80095dc:	621a      	str	r2, [r3, #32]
 80095de:	4b11      	ldr	r3, [pc, #68]	@ (8009624 <vTaskPlaceOnEventListRestricted+0x78>)
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	3218      	adds	r2, #24
 80095e8:	605a      	str	r2, [r3, #4]
 80095ea:	4b0e      	ldr	r3, [pc, #56]	@ (8009624 <vTaskPlaceOnEventListRestricted+0x78>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f103 0218 	add.w	r2, r3, #24
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	609a      	str	r2, [r3, #8]
 80095f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009624 <vTaskPlaceOnEventListRestricted+0x78>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	1c5a      	adds	r2, r3, #1
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d002      	beq.n	8009614 <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 800960e:	f04f 33ff 	mov.w	r3, #4294967295
 8009612:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009614:	6879      	ldr	r1, [r7, #4]
 8009616:	68b8      	ldr	r0, [r7, #8]
 8009618:	f000 fa2e 	bl	8009a78 <prvAddCurrentTaskToDelayedList>
    }
 800961c:	bf00      	nop
 800961e:	3718      	adds	r7, #24
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	200007d4 	.word	0x200007d4

08009628 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b088      	sub	sp, #32
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d103      	bne.n	8009646 <xTaskRemoveFromEventList+0x1e>
 800963e:	f000 ff1b 	bl	800a478 <ulSetInterruptMask>
 8009642:	bf00      	nop
 8009644:	e7fd      	b.n	8009642 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800964a:	617b      	str	r3, [r7, #20]
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	69db      	ldr	r3, [r3, #28]
 8009650:	69ba      	ldr	r2, [r7, #24]
 8009652:	6a12      	ldr	r2, [r2, #32]
 8009654:	609a      	str	r2, [r3, #8]
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	69ba      	ldr	r2, [r7, #24]
 800965c:	69d2      	ldr	r2, [r2, #28]
 800965e:	605a      	str	r2, [r3, #4]
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	685a      	ldr	r2, [r3, #4]
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	3318      	adds	r3, #24
 8009668:	429a      	cmp	r2, r3
 800966a:	d103      	bne.n	8009674 <xTaskRemoveFromEventList+0x4c>
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	6a1a      	ldr	r2, [r3, #32]
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	605a      	str	r2, [r3, #4]
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	2200      	movs	r2, #0
 8009678:	629a      	str	r2, [r3, #40]	@ 0x28
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	1e5a      	subs	r2, r3, #1
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8009684:	4b49      	ldr	r3, [pc, #292]	@ (80097ac <xTaskRemoveFromEventList+0x184>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d15f      	bne.n	800974c <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	695b      	ldr	r3, [r3, #20]
 8009690:	60fb      	str	r3, [r7, #12]
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	69ba      	ldr	r2, [r7, #24]
 8009698:	68d2      	ldr	r2, [r2, #12]
 800969a:	609a      	str	r2, [r3, #8]
 800969c:	69bb      	ldr	r3, [r7, #24]
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	69ba      	ldr	r2, [r7, #24]
 80096a2:	6892      	ldr	r2, [r2, #8]
 80096a4:	605a      	str	r2, [r3, #4]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	685a      	ldr	r2, [r3, #4]
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	3304      	adds	r3, #4
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d103      	bne.n	80096ba <xTaskRemoveFromEventList+0x92>
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	68da      	ldr	r2, [r3, #12]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	605a      	str	r2, [r3, #4]
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	2200      	movs	r2, #0
 80096be:	615a      	str	r2, [r3, #20]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	1e5a      	subs	r2, r3, #1
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096ce:	4b38      	ldr	r3, [pc, #224]	@ (80097b0 <xTaskRemoveFromEventList+0x188>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d903      	bls.n	80096de <xTaskRemoveFromEventList+0xb6>
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096da:	4a35      	ldr	r2, [pc, #212]	@ (80097b0 <xTaskRemoveFromEventList+0x188>)
 80096dc:	6013      	str	r3, [r2, #0]
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096e2:	4934      	ldr	r1, [pc, #208]	@ (80097b4 <xTaskRemoveFromEventList+0x18c>)
 80096e4:	4613      	mov	r3, r2
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	4413      	add	r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	440b      	add	r3, r1
 80096ee:	3304      	adds	r3, #4
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	60bb      	str	r3, [r7, #8]
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	609a      	str	r2, [r3, #8]
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	689a      	ldr	r2, [r3, #8]
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	60da      	str	r2, [r3, #12]
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	69ba      	ldr	r2, [r7, #24]
 8009708:	3204      	adds	r2, #4
 800970a:	605a      	str	r2, [r3, #4]
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	1d1a      	adds	r2, r3, #4
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	609a      	str	r2, [r3, #8]
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009718:	4613      	mov	r3, r2
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	4413      	add	r3, r2
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	4a24      	ldr	r2, [pc, #144]	@ (80097b4 <xTaskRemoveFromEventList+0x18c>)
 8009722:	441a      	add	r2, r3
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	615a      	str	r2, [r3, #20]
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800972c:	4921      	ldr	r1, [pc, #132]	@ (80097b4 <xTaskRemoveFromEventList+0x18c>)
 800972e:	4613      	mov	r3, r2
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	4413      	add	r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	440b      	add	r3, r1
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	1c59      	adds	r1, r3, #1
 800973c:	481d      	ldr	r0, [pc, #116]	@ (80097b4 <xTaskRemoveFromEventList+0x18c>)
 800973e:	4613      	mov	r3, r2
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	4413      	add	r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	4403      	add	r3, r0
 8009748:	6019      	str	r1, [r3, #0]
 800974a:	e01b      	b.n	8009784 <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800974c:	4b1a      	ldr	r3, [pc, #104]	@ (80097b8 <xTaskRemoveFromEventList+0x190>)
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	613b      	str	r3, [r7, #16]
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	693a      	ldr	r2, [r7, #16]
 8009756:	61da      	str	r2, [r3, #28]
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	689a      	ldr	r2, [r3, #8]
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	621a      	str	r2, [r3, #32]
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	69ba      	ldr	r2, [r7, #24]
 8009766:	3218      	adds	r2, #24
 8009768:	605a      	str	r2, [r3, #4]
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	f103 0218 	add.w	r2, r3, #24
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	609a      	str	r2, [r3, #8]
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	4a10      	ldr	r2, [pc, #64]	@ (80097b8 <xTaskRemoveFromEventList+0x190>)
 8009778:	629a      	str	r2, [r3, #40]	@ 0x28
 800977a:	4b0f      	ldr	r3, [pc, #60]	@ (80097b8 <xTaskRemoveFromEventList+0x190>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	3301      	adds	r3, #1
 8009780:	4a0d      	ldr	r2, [pc, #52]	@ (80097b8 <xTaskRemoveFromEventList+0x190>)
 8009782:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009788:	4b0c      	ldr	r3, [pc, #48]	@ (80097bc <xTaskRemoveFromEventList+0x194>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800978e:	429a      	cmp	r2, r3
 8009790:	d905      	bls.n	800979e <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8009792:	2301      	movs	r3, #1
 8009794:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8009796:	4b0a      	ldr	r3, [pc, #40]	@ (80097c0 <xTaskRemoveFromEventList+0x198>)
 8009798:	2201      	movs	r2, #1
 800979a:	601a      	str	r2, [r3, #0]
 800979c:	e001      	b.n	80097a2 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 800979e:	2300      	movs	r3, #0
 80097a0:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 80097a2:	69fb      	ldr	r3, [r7, #28]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3720      	adds	r7, #32
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	20000cd0 	.word	0x20000cd0
 80097b0:	20000cb0 	.word	0x20000cb0
 80097b4:	200007d8 	.word	0x200007d8
 80097b8:	20000c68 	.word	0x20000c68
 80097bc:	200007d4 	.word	0x200007d4
 80097c0:	20000cbc 	.word	0x20000cbc

080097c4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80097cc:	4b06      	ldr	r3, [pc, #24]	@ (80097e8 <vTaskInternalSetTimeOutState+0x24>)
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80097d4:	4b05      	ldr	r3, [pc, #20]	@ (80097ec <vTaskInternalSetTimeOutState+0x28>)
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	605a      	str	r2, [r3, #4]
}
 80097dc:	bf00      	nop
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr
 80097e8:	20000cc0 	.word	0x20000cc0
 80097ec:	20000cac 	.word	0x20000cac

080097f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b086      	sub	sp, #24
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d103      	bne.n	8009808 <xTaskCheckForTimeOut+0x18>
 8009800:	f000 fe3a 	bl	800a478 <ulSetInterruptMask>
 8009804:	bf00      	nop
 8009806:	e7fd      	b.n	8009804 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d103      	bne.n	8009816 <xTaskCheckForTimeOut+0x26>
 800980e:	f000 fe33 	bl	800a478 <ulSetInterruptMask>
 8009812:	bf00      	nop
 8009814:	e7fd      	b.n	8009812 <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 8009816:	f000 fc95 	bl	800a144 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800981a:	4b1f      	ldr	r3, [pc, #124]	@ (8009898 <xTaskCheckForTimeOut+0xa8>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	693a      	ldr	r2, [r7, #16]
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009832:	d102      	bne.n	800983a <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8009834:	2300      	movs	r3, #0
 8009836:	617b      	str	r3, [r7, #20]
 8009838:	e026      	b.n	8009888 <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	4b17      	ldr	r3, [pc, #92]	@ (800989c <xTaskCheckForTimeOut+0xac>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	429a      	cmp	r2, r3
 8009844:	d00a      	beq.n	800985c <xTaskCheckForTimeOut+0x6c>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	693a      	ldr	r2, [r7, #16]
 800984c:	429a      	cmp	r2, r3
 800984e:	d305      	bcc.n	800985c <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8009850:	2301      	movs	r3, #1
 8009852:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	2200      	movs	r2, #0
 8009858:	601a      	str	r2, [r3, #0]
 800985a:	e015      	b.n	8009888 <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	429a      	cmp	r2, r3
 8009864:	d20b      	bcs.n	800987e <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	1ad2      	subs	r2, r2, r3
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f7ff ffa6 	bl	80097c4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8009878:	2300      	movs	r3, #0
 800987a:	617b      	str	r3, [r7, #20]
 800987c:	e004      	b.n	8009888 <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	2200      	movs	r2, #0
 8009882:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8009884:	2301      	movs	r3, #1
 8009886:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8009888:	f000 fc6e 	bl	800a168 <vPortExitCritical>

    return xReturn;
 800988c:	697b      	ldr	r3, [r7, #20]
}
 800988e:	4618      	mov	r0, r3
 8009890:	3718      	adds	r7, #24
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	20000cac 	.word	0x20000cac
 800989c:	20000cc0 	.word	0x20000cc0

080098a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80098a0:	b480      	push	{r7}
 80098a2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80098a4:	4b03      	ldr	r3, [pc, #12]	@ (80098b4 <vTaskMissedYield+0x14>)
 80098a6:	2201      	movs	r2, #1
 80098a8:	601a      	str	r2, [r3, #0]
}
 80098aa:	bf00      	nop
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr
 80098b4:	20000cbc 	.word	0x20000cbc

080098b8 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80098c0:	f000 f84a 	bl	8009958 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80098c4:	4b03      	ldr	r3, [pc, #12]	@ (80098d4 <prvIdleTask+0x1c>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d9f9      	bls.n	80098c0 <prvIdleTask+0x8>
            {
                taskYIELD();
 80098cc:	f000 fc28 	bl	800a120 <vPortYield>
        prvCheckTasksWaitingTermination();
 80098d0:	e7f6      	b.n	80098c0 <prvIdleTask+0x8>
 80098d2:	bf00      	nop
 80098d4:	200007d8 	.word	0x200007d8

080098d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098de:	2300      	movs	r3, #0
 80098e0:	607b      	str	r3, [r7, #4]
 80098e2:	e00c      	b.n	80098fe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	4613      	mov	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	4413      	add	r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	4a12      	ldr	r2, [pc, #72]	@ (8009938 <prvInitialiseTaskLists+0x60>)
 80098f0:	4413      	add	r3, r2
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7fe fe66 	bl	80085c4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	3301      	adds	r3, #1
 80098fc:	607b      	str	r3, [r7, #4]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2b37      	cmp	r3, #55	@ 0x37
 8009902:	d9ef      	bls.n	80098e4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8009904:	480d      	ldr	r0, [pc, #52]	@ (800993c <prvInitialiseTaskLists+0x64>)
 8009906:	f7fe fe5d 	bl	80085c4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800990a:	480d      	ldr	r0, [pc, #52]	@ (8009940 <prvInitialiseTaskLists+0x68>)
 800990c:	f7fe fe5a 	bl	80085c4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8009910:	480c      	ldr	r0, [pc, #48]	@ (8009944 <prvInitialiseTaskLists+0x6c>)
 8009912:	f7fe fe57 	bl	80085c4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8009916:	480c      	ldr	r0, [pc, #48]	@ (8009948 <prvInitialiseTaskLists+0x70>)
 8009918:	f7fe fe54 	bl	80085c4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800991c:	480b      	ldr	r0, [pc, #44]	@ (800994c <prvInitialiseTaskLists+0x74>)
 800991e:	f7fe fe51 	bl	80085c4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8009922:	4b0b      	ldr	r3, [pc, #44]	@ (8009950 <prvInitialiseTaskLists+0x78>)
 8009924:	4a05      	ldr	r2, [pc, #20]	@ (800993c <prvInitialiseTaskLists+0x64>)
 8009926:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009928:	4b0a      	ldr	r3, [pc, #40]	@ (8009954 <prvInitialiseTaskLists+0x7c>)
 800992a:	4a05      	ldr	r2, [pc, #20]	@ (8009940 <prvInitialiseTaskLists+0x68>)
 800992c:	601a      	str	r2, [r3, #0]
}
 800992e:	bf00      	nop
 8009930:	3708      	adds	r7, #8
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	200007d8 	.word	0x200007d8
 800993c:	20000c38 	.word	0x20000c38
 8009940:	20000c4c 	.word	0x20000c4c
 8009944:	20000c68 	.word	0x20000c68
 8009948:	20000c7c 	.word	0x20000c7c
 800994c:	20000c94 	.word	0x20000c94
 8009950:	20000c60 	.word	0x20000c60
 8009954:	20000c64 	.word	0x20000c64

08009958 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800995e:	e019      	b.n	8009994 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8009960:	f000 fbf0 	bl	800a144 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009964:	4b10      	ldr	r3, [pc, #64]	@ (80099a8 <prvCheckTasksWaitingTermination+0x50>)
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	3304      	adds	r3, #4
 8009970:	4618      	mov	r0, r3
 8009972:	f7fe fe8d 	bl	8008690 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8009976:	4b0d      	ldr	r3, [pc, #52]	@ (80099ac <prvCheckTasksWaitingTermination+0x54>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	3b01      	subs	r3, #1
 800997c:	4a0b      	ldr	r2, [pc, #44]	@ (80099ac <prvCheckTasksWaitingTermination+0x54>)
 800997e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8009980:	4b0b      	ldr	r3, [pc, #44]	@ (80099b0 <prvCheckTasksWaitingTermination+0x58>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	3b01      	subs	r3, #1
 8009986:	4a0a      	ldr	r2, [pc, #40]	@ (80099b0 <prvCheckTasksWaitingTermination+0x58>)
 8009988:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800998a:	f000 fbed 	bl	800a168 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 f810 	bl	80099b4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009994:	4b06      	ldr	r3, [pc, #24]	@ (80099b0 <prvCheckTasksWaitingTermination+0x58>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d1e1      	bne.n	8009960 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800999c:	bf00      	nop
 800999e:	bf00      	nop
 80099a0:	3708      	adds	r7, #8
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	20000c7c 	.word	0x20000c7c
 80099ac:	20000ca8 	.word	0x20000ca8
 80099b0:	20000c90 	.word	0x20000c90

080099b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d108      	bne.n	80099d8 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099ca:	4618      	mov	r0, r3
 80099cc:	f000 fe06 	bl	800a5dc <vPortFree>
                vPortFree( pxTCB );
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fe03 	bl	800a5dc <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80099d6:	e011      	b.n	80099fc <prvDeleteTCB+0x48>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d103      	bne.n	80099ea <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 fdfa 	bl	800a5dc <vPortFree>
    }
 80099e8:	e008      	b.n	80099fc <prvDeleteTCB+0x48>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80099f0:	2b02      	cmp	r3, #2
 80099f2:	d003      	beq.n	80099fc <prvDeleteTCB+0x48>
 80099f4:	f000 fd40 	bl	800a478 <ulSetInterruptMask>
 80099f8:	bf00      	nop
 80099fa:	e7fd      	b.n	80099f8 <prvDeleteTCB+0x44>
    }
 80099fc:	bf00      	nop
 80099fe:	3708      	adds	r7, #8
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a04:	b480      	push	{r7}
 8009a06:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a08:	4b0a      	ldr	r3, [pc, #40]	@ (8009a34 <prvResetNextTaskUnblockTime+0x30>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d104      	bne.n	8009a1c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8009a12:	4b09      	ldr	r3, [pc, #36]	@ (8009a38 <prvResetNextTaskUnblockTime+0x34>)
 8009a14:	f04f 32ff 	mov.w	r2, #4294967295
 8009a18:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8009a1a:	e005      	b.n	8009a28 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009a1c:	4b05      	ldr	r3, [pc, #20]	@ (8009a34 <prvResetNextTaskUnblockTime+0x30>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a04      	ldr	r2, [pc, #16]	@ (8009a38 <prvResetNextTaskUnblockTime+0x34>)
 8009a26:	6013      	str	r3, [r2, #0]
}
 8009a28:	bf00      	nop
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	20000c60 	.word	0x20000c60
 8009a38:	20000cc8 	.word	0x20000cc8

08009a3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8009a42:	4b0b      	ldr	r3, [pc, #44]	@ (8009a70 <xTaskGetSchedulerState+0x34>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d102      	bne.n	8009a50 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	607b      	str	r3, [r7, #4]
 8009a4e:	e008      	b.n	8009a62 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8009a50:	4b08      	ldr	r3, [pc, #32]	@ (8009a74 <xTaskGetSchedulerState+0x38>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d102      	bne.n	8009a5e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8009a58:	2302      	movs	r3, #2
 8009a5a:	607b      	str	r3, [r7, #4]
 8009a5c:	e001      	b.n	8009a62 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8009a62:	687b      	ldr	r3, [r7, #4]
    }
 8009a64:	4618      	mov	r0, r3
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr
 8009a70:	20000cb4 	.word	0x20000cb4
 8009a74:	20000cd0 	.word	0x20000cd0

08009a78 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b086      	sub	sp, #24
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8009a82:	4b2e      	ldr	r3, [pc, #184]	@ (8009b3c <prvAddCurrentTaskToDelayedList+0xc4>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a88:	4b2d      	ldr	r3, [pc, #180]	@ (8009b40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3304      	adds	r3, #4
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7fe fdfe 	bl	8008690 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a9a:	d124      	bne.n	8009ae6 <prvAddCurrentTaskToDelayedList+0x6e>
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d021      	beq.n	8009ae6 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009aa2:	4b28      	ldr	r3, [pc, #160]	@ (8009b44 <prvAddCurrentTaskToDelayedList+0xcc>)
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	613b      	str	r3, [r7, #16]
 8009aa8:	4b25      	ldr	r3, [pc, #148]	@ (8009b40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	693a      	ldr	r2, [r7, #16]
 8009aae:	609a      	str	r2, [r3, #8]
 8009ab0:	4b23      	ldr	r3, [pc, #140]	@ (8009b40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	693a      	ldr	r2, [r7, #16]
 8009ab6:	6892      	ldr	r2, [r2, #8]
 8009ab8:	60da      	str	r2, [r3, #12]
 8009aba:	4b21      	ldr	r3, [pc, #132]	@ (8009b40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	3204      	adds	r2, #4
 8009ac4:	605a      	str	r2, [r3, #4]
 8009ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8009b40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	1d1a      	adds	r2, r3, #4
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	609a      	str	r2, [r3, #8]
 8009ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8009b40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8009b44 <prvAddCurrentTaskToDelayedList+0xcc>)
 8009ad6:	615a      	str	r2, [r3, #20]
 8009ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8009b44 <prvAddCurrentTaskToDelayedList+0xcc>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	3301      	adds	r3, #1
 8009ade:	4a19      	ldr	r2, [pc, #100]	@ (8009b44 <prvAddCurrentTaskToDelayedList+0xcc>)
 8009ae0:	6013      	str	r3, [r2, #0]
 8009ae2:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8009ae4:	e026      	b.n	8009b34 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4413      	add	r3, r2
 8009aec:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009aee:	4b14      	ldr	r3, [pc, #80]	@ (8009b40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	68fa      	ldr	r2, [r7, #12]
 8009af4:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d209      	bcs.n	8009b12 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009afe:	4b12      	ldr	r3, [pc, #72]	@ (8009b48 <prvAddCurrentTaskToDelayedList+0xd0>)
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	4b0f      	ldr	r3, [pc, #60]	@ (8009b40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	3304      	adds	r3, #4
 8009b08:	4619      	mov	r1, r3
 8009b0a:	4610      	mov	r0, r2
 8009b0c:	f7fe fd87 	bl	800861e <vListInsert>
}
 8009b10:	e010      	b.n	8009b34 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b12:	4b0e      	ldr	r3, [pc, #56]	@ (8009b4c <prvAddCurrentTaskToDelayedList+0xd4>)
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	4b0a      	ldr	r3, [pc, #40]	@ (8009b40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	3304      	adds	r3, #4
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	4610      	mov	r0, r2
 8009b20:	f7fe fd7d 	bl	800861e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8009b24:	4b0a      	ldr	r3, [pc, #40]	@ (8009b50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	68fa      	ldr	r2, [r7, #12]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d202      	bcs.n	8009b34 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8009b2e:	4a08      	ldr	r2, [pc, #32]	@ (8009b50 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6013      	str	r3, [r2, #0]
}
 8009b34:	bf00      	nop
 8009b36:	3718      	adds	r7, #24
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	20000cac 	.word	0x20000cac
 8009b40:	200007d4 	.word	0x200007d4
 8009b44:	20000c94 	.word	0x20000c94
 8009b48:	20000c64 	.word	0x20000c64
 8009b4c:	20000c60 	.word	0x20000c60
 8009b50:	20000cc8 	.word	0x20000cc8

08009b54 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b088      	sub	sp, #32
 8009b58:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8009b5e:	f000 fa5f 	bl	800a020 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8009b62:	4b18      	ldr	r3, [pc, #96]	@ (8009bc4 <xTimerCreateTimerTask+0x70>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d020      	beq.n	8009bac <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009b72:	463a      	mov	r2, r7
 8009b74:	1d39      	adds	r1, r7, #4
 8009b76:	f107 0308 	add.w	r3, r7, #8
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7fe fd08 	bl	8008590 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	68ba      	ldr	r2, [r7, #8]
 8009b86:	9202      	str	r2, [sp, #8]
 8009b88:	9301      	str	r3, [sp, #4]
 8009b8a:	2302      	movs	r3, #2
 8009b8c:	9300      	str	r3, [sp, #0]
 8009b8e:	2300      	movs	r3, #0
 8009b90:	460a      	mov	r2, r1
 8009b92:	490d      	ldr	r1, [pc, #52]	@ (8009bc8 <xTimerCreateTimerTask+0x74>)
 8009b94:	480d      	ldr	r0, [pc, #52]	@ (8009bcc <xTimerCreateTimerTask+0x78>)
 8009b96:	f7ff f84f 	bl	8008c38 <xTaskCreateStatic>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	4a0c      	ldr	r2, [pc, #48]	@ (8009bd0 <xTimerCreateTimerTask+0x7c>)
 8009b9e:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 8009ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8009bd0 <xTimerCreateTimerTask+0x7c>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d001      	beq.n	8009bac <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d103      	bne.n	8009bba <xTimerCreateTimerTask+0x66>
 8009bb2:	f000 fc61 	bl	800a478 <ulSetInterruptMask>
 8009bb6:	bf00      	nop
 8009bb8:	e7fd      	b.n	8009bb6 <xTimerCreateTimerTask+0x62>
        return xReturn;
 8009bba:	68fb      	ldr	r3, [r7, #12]
    }
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3710      	adds	r7, #16
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	20000d04 	.word	0x20000d04
 8009bc8:	0800b028 	.word	0x0800b028
 8009bcc:	08009c79 	.word	0x08009c79
 8009bd0:	20000d08 	.word	0x20000d08

08009bd4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8009be0:	e008      	b.n	8009bf4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	699b      	ldr	r3, [r3, #24]
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	4413      	add	r3, r2
 8009bea:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6a1b      	ldr	r3, [r3, #32]
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	699a      	ldr	r2, [r3, #24]
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	18d1      	adds	r1, r2, r3
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f000 f8d7 	bl	8009db4 <prvInsertTimerInActiveList>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d1ea      	bne.n	8009be2 <prvReloadTimer+0xe>
        }
    }
 8009c0c:	bf00      	nop
 8009c0e:	bf00      	nop
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
	...

08009c18 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c22:	4b14      	ldr	r3, [pc, #80]	@ (8009c74 <prvProcessExpiredTimer+0x5c>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	3304      	adds	r3, #4
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7fe fd2d 	bl	8008690 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c3c:	f003 0304 	and.w	r3, r3, #4
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d005      	beq.n	8009c50 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8009c44:	683a      	ldr	r2, [r7, #0]
 8009c46:	6879      	ldr	r1, [r7, #4]
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f7ff ffc3 	bl	8009bd4 <prvReloadTimer>
 8009c4e:	e008      	b.n	8009c62 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c56:	f023 0301 	bic.w	r3, r3, #1
 8009c5a:	b2da      	uxtb	r2, r3
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	4798      	blx	r3
    }
 8009c6a:	bf00      	nop
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	20000cfc 	.word	0x20000cfc

08009c78 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c80:	f107 0308 	add.w	r3, r7, #8
 8009c84:	4618      	mov	r0, r3
 8009c86:	f000 f851 	bl	8009d2c <prvGetNextExpireTime>
 8009c8a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	4619      	mov	r1, r3
 8009c90:	68f8      	ldr	r0, [r7, #12]
 8009c92:	f000 f805 	bl	8009ca0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8009c96:	f000 f8cf 	bl	8009e38 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c9a:	bf00      	nop
 8009c9c:	e7f0      	b.n	8009c80 <prvTimerTask+0x8>
	...

08009ca0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8009caa:	f7ff f9f1 	bl	8009090 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009cae:	f107 0308 	add.w	r3, r7, #8
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f000 f85e 	bl	8009d74 <prvSampleTimeNow>
 8009cb8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d12a      	bne.n	8009d16 <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10a      	bne.n	8009cdc <prvProcessTimerOrBlockTask+0x3c>
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d806      	bhi.n	8009cdc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8009cce:	f7ff f9ed 	bl	80090ac <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009cd2:	68f9      	ldr	r1, [r7, #12]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f7ff ff9f 	bl	8009c18 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8009cda:	e01e      	b.n	8009d1a <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d008      	beq.n	8009cf4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009ce2:	4b10      	ldr	r3, [pc, #64]	@ (8009d24 <prvProcessTimerOrBlockTask+0x84>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d101      	bne.n	8009cf0 <prvProcessTimerOrBlockTask+0x50>
 8009cec:	2301      	movs	r3, #1
 8009cee:	e000      	b.n	8009cf2 <prvProcessTimerOrBlockTask+0x52>
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8009d28 <prvProcessTimerOrBlockTask+0x88>)
 8009cf6:	6818      	ldr	r0, [r3, #0]
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	683a      	ldr	r2, [r7, #0]
 8009d00:	4619      	mov	r1, r3
 8009d02:	f7fe ff65 	bl	8008bd0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8009d06:	f7ff f9d1 	bl	80090ac <xTaskResumeAll>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d104      	bne.n	8009d1a <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 8009d10:	f000 fa06 	bl	800a120 <vPortYield>
    }
 8009d14:	e001      	b.n	8009d1a <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 8009d16:	f7ff f9c9 	bl	80090ac <xTaskResumeAll>
    }
 8009d1a:	bf00      	nop
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	20000d00 	.word	0x20000d00
 8009d28:	20000d04 	.word	0x20000d04

08009d2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009d34:	4b0e      	ldr	r3, [pc, #56]	@ (8009d70 <prvGetNextExpireTime+0x44>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d101      	bne.n	8009d42 <prvGetNextExpireTime+0x16>
 8009d3e:	2201      	movs	r2, #1
 8009d40:	e000      	b.n	8009d44 <prvGetNextExpireTime+0x18>
 8009d42:	2200      	movs	r2, #0
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d105      	bne.n	8009d5c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d50:	4b07      	ldr	r3, [pc, #28]	@ (8009d70 <prvGetNextExpireTime+0x44>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	60fb      	str	r3, [r7, #12]
 8009d5a:	e001      	b.n	8009d60 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8009d60:	68fb      	ldr	r3, [r7, #12]
    }
 8009d62:	4618      	mov	r0, r3
 8009d64:	3714      	adds	r7, #20
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop
 8009d70:	20000cfc 	.word	0x20000cfc

08009d74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8009d7c:	f7ff fa84 	bl	8009288 <xTaskGetTickCount>
 8009d80:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8009d82:	4b0b      	ldr	r3, [pc, #44]	@ (8009db0 <prvSampleTimeNow+0x3c>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d205      	bcs.n	8009d98 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8009d8c:	f000 f922 	bl	8009fd4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2201      	movs	r2, #1
 8009d94:	601a      	str	r2, [r3, #0]
 8009d96:	e002      	b.n	8009d9e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8009d9e:	4a04      	ldr	r2, [pc, #16]	@ (8009db0 <prvSampleTimeNow+0x3c>)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8009da4:	68fb      	ldr	r3, [r7, #12]
    }
 8009da6:	4618      	mov	r0, r3
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	20000d0c 	.word	0x20000d0c

08009db4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b086      	sub	sp, #24
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	607a      	str	r2, [r7, #4]
 8009dc0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	68ba      	ldr	r2, [r7, #8]
 8009dca:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	68fa      	ldr	r2, [r7, #12]
 8009dd0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d812      	bhi.n	8009e00 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	1ad2      	subs	r2, r2, r3
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	699b      	ldr	r3, [r3, #24]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d302      	bcc.n	8009dee <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8009de8:	2301      	movs	r3, #1
 8009dea:	617b      	str	r3, [r7, #20]
 8009dec:	e01b      	b.n	8009e26 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009dee:	4b10      	ldr	r3, [pc, #64]	@ (8009e30 <prvInsertTimerInActiveList+0x7c>)
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	3304      	adds	r3, #4
 8009df6:	4619      	mov	r1, r3
 8009df8:	4610      	mov	r0, r2
 8009dfa:	f7fe fc10 	bl	800861e <vListInsert>
 8009dfe:	e012      	b.n	8009e26 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d206      	bcs.n	8009e16 <prvInsertTimerInActiveList+0x62>
 8009e08:	68ba      	ldr	r2, [r7, #8]
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d302      	bcc.n	8009e16 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8009e10:	2301      	movs	r3, #1
 8009e12:	617b      	str	r3, [r7, #20]
 8009e14:	e007      	b.n	8009e26 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e16:	4b07      	ldr	r3, [pc, #28]	@ (8009e34 <prvInsertTimerInActiveList+0x80>)
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	3304      	adds	r3, #4
 8009e1e:	4619      	mov	r1, r3
 8009e20:	4610      	mov	r0, r2
 8009e22:	f7fe fbfc 	bl	800861e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8009e26:	697b      	ldr	r3, [r7, #20]
    }
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3718      	adds	r7, #24
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	20000d00 	.word	0x20000d00
 8009e34:	20000cfc 	.word	0x20000cfc

08009e38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b088      	sub	sp, #32
 8009e3c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e3e:	e0b7      	b.n	8009fb0 <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	da11      	bge.n	8009e6a <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009e46:	1d3b      	adds	r3, r7, #4
 8009e48:	3304      	adds	r3, #4
 8009e4a:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d103      	bne.n	8009e5a <prvProcessReceivedCommands+0x22>
 8009e52:	f000 fb11 	bl	800a478 <ulSetInterruptMask>
 8009e56:	bf00      	nop
 8009e58:	e7fd      	b.n	8009e56 <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	69fa      	ldr	r2, [r7, #28]
 8009e60:	6850      	ldr	r0, [r2, #4]
 8009e62:	69fa      	ldr	r2, [r7, #28]
 8009e64:	6892      	ldr	r2, [r2, #8]
 8009e66:	4611      	mov	r1, r2
 8009e68:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	f2c0 809f 	blt.w	8009fb0 <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	695b      	ldr	r3, [r3, #20]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d004      	beq.n	8009e88 <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	3304      	adds	r3, #4
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fe fc04 	bl	8008690 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e88:	463b      	mov	r3, r7
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7ff ff72 	bl	8009d74 <prvSampleTimeNow>
 8009e90:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	3b01      	subs	r3, #1
 8009e96:	2b08      	cmp	r3, #8
 8009e98:	f200 8087 	bhi.w	8009faa <prvProcessReceivedCommands+0x172>
 8009e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8009ea4 <prvProcessReceivedCommands+0x6c>)
 8009e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea2:	bf00      	nop
 8009ea4:	08009ec9 	.word	0x08009ec9
 8009ea8:	08009ec9 	.word	0x08009ec9
 8009eac:	08009f31 	.word	0x08009f31
 8009eb0:	08009f45 	.word	0x08009f45
 8009eb4:	08009f81 	.word	0x08009f81
 8009eb8:	08009ec9 	.word	0x08009ec9
 8009ebc:	08009ec9 	.word	0x08009ec9
 8009ec0:	08009f31 	.word	0x08009f31
 8009ec4:	08009f45 	.word	0x08009f45
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ece:	f043 0301 	orr.w	r3, r3, #1
 8009ed2:	b2da      	uxtb	r2, r3
 8009ed4:	69bb      	ldr	r3, [r7, #24]
 8009ed6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	69bb      	ldr	r3, [r7, #24]
 8009ede:	699b      	ldr	r3, [r3, #24]
 8009ee0:	18d1      	adds	r1, r2, r3
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	697a      	ldr	r2, [r7, #20]
 8009ee6:	69b8      	ldr	r0, [r7, #24]
 8009ee8:	f7ff ff64 	bl	8009db4 <prvInsertTimerInActiveList>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d05d      	beq.n	8009fae <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ef8:	f003 0304 	and.w	r3, r3, #4
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d009      	beq.n	8009f14 <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8009f00:	68ba      	ldr	r2, [r7, #8]
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	699b      	ldr	r3, [r3, #24]
 8009f06:	4413      	add	r3, r2
 8009f08:	697a      	ldr	r2, [r7, #20]
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	69b8      	ldr	r0, [r7, #24]
 8009f0e:	f7ff fe61 	bl	8009bd4 <prvReloadTimer>
 8009f12:	e008      	b.n	8009f26 <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f1a:	f023 0301 	bic.w	r3, r3, #1
 8009f1e:	b2da      	uxtb	r2, r3
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	6a1b      	ldr	r3, [r3, #32]
 8009f2a:	69b8      	ldr	r0, [r7, #24]
 8009f2c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8009f2e:	e03e      	b.n	8009fae <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f36:	f023 0301 	bic.w	r3, r3, #1
 8009f3a:	b2da      	uxtb	r2, r3
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8009f42:	e035      	b.n	8009fb0 <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f4a:	f043 0301 	orr.w	r3, r3, #1
 8009f4e:	b2da      	uxtb	r2, r3
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	699b      	ldr	r3, [r3, #24]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d103      	bne.n	8009f6c <prvProcessReceivedCommands+0x134>
 8009f64:	f000 fa88 	bl	800a478 <ulSetInterruptMask>
 8009f68:	bf00      	nop
 8009f6a:	e7fd      	b.n	8009f68 <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	699a      	ldr	r2, [r3, #24]
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	18d1      	adds	r1, r2, r3
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	697a      	ldr	r2, [r7, #20]
 8009f78:	69b8      	ldr	r0, [r7, #24]
 8009f7a:	f7ff ff1b 	bl	8009db4 <prvInsertTimerInActiveList>
                        break;
 8009f7e:	e017      	b.n	8009fb0 <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f86:	f003 0302 	and.w	r3, r3, #2
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d103      	bne.n	8009f96 <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 8009f8e:	69b8      	ldr	r0, [r7, #24]
 8009f90:	f000 fb24 	bl	800a5dc <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8009f94:	e00c      	b.n	8009fb0 <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8009f96:	69bb      	ldr	r3, [r7, #24]
 8009f98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f9c:	f023 0301 	bic.w	r3, r3, #1
 8009fa0:	b2da      	uxtb	r2, r3
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8009fa8:	e002      	b.n	8009fb0 <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 8009faa:	bf00      	nop
 8009fac:	e000      	b.n	8009fb0 <prvProcessReceivedCommands+0x178>
                        break;
 8009fae:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009fb0:	4b07      	ldr	r3, [pc, #28]	@ (8009fd0 <prvProcessReceivedCommands+0x198>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	1d39      	adds	r1, r7, #4
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7fe fc78 	bl	80088ae <xQueueReceive>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	f47f af3d 	bne.w	8009e40 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8009fc6:	bf00      	nop
 8009fc8:	bf00      	nop
 8009fca:	3720      	adds	r7, #32
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}
 8009fd0:	20000d04 	.word	0x20000d04

08009fd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009fda:	e009      	b.n	8009ff0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fdc:	4b0e      	ldr	r3, [pc, #56]	@ (800a018 <prvSwitchTimerLists+0x44>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8009fe6:	f04f 31ff 	mov.w	r1, #4294967295
 8009fea:	6838      	ldr	r0, [r7, #0]
 8009fec:	f7ff fe14 	bl	8009c18 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ff0:	4b09      	ldr	r3, [pc, #36]	@ (800a018 <prvSwitchTimerLists+0x44>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d1f0      	bne.n	8009fdc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8009ffa:	4b07      	ldr	r3, [pc, #28]	@ (800a018 <prvSwitchTimerLists+0x44>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800a000:	4b06      	ldr	r3, [pc, #24]	@ (800a01c <prvSwitchTimerLists+0x48>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a04      	ldr	r2, [pc, #16]	@ (800a018 <prvSwitchTimerLists+0x44>)
 800a006:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800a008:	4a04      	ldr	r2, [pc, #16]	@ (800a01c <prvSwitchTimerLists+0x48>)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6013      	str	r3, [r2, #0]
    }
 800a00e:	bf00      	nop
 800a010:	3708      	adds	r7, #8
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	20000cfc 	.word	0x20000cfc
 800a01c:	20000d00 	.word	0x20000d00

0800a020 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800a026:	f000 f88d 	bl	800a144 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800a02a:	4b15      	ldr	r3, [pc, #84]	@ (800a080 <prvCheckForValidListAndQueue+0x60>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d120      	bne.n	800a074 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800a032:	4814      	ldr	r0, [pc, #80]	@ (800a084 <prvCheckForValidListAndQueue+0x64>)
 800a034:	f7fe fac6 	bl	80085c4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800a038:	4813      	ldr	r0, [pc, #76]	@ (800a088 <prvCheckForValidListAndQueue+0x68>)
 800a03a:	f7fe fac3 	bl	80085c4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800a03e:	4b13      	ldr	r3, [pc, #76]	@ (800a08c <prvCheckForValidListAndQueue+0x6c>)
 800a040:	4a10      	ldr	r2, [pc, #64]	@ (800a084 <prvCheckForValidListAndQueue+0x64>)
 800a042:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800a044:	4b12      	ldr	r3, [pc, #72]	@ (800a090 <prvCheckForValidListAndQueue+0x70>)
 800a046:	4a10      	ldr	r2, [pc, #64]	@ (800a088 <prvCheckForValidListAndQueue+0x68>)
 800a048:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a04a:	2300      	movs	r3, #0
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	4b11      	ldr	r3, [pc, #68]	@ (800a094 <prvCheckForValidListAndQueue+0x74>)
 800a050:	4a11      	ldr	r2, [pc, #68]	@ (800a098 <prvCheckForValidListAndQueue+0x78>)
 800a052:	2110      	movs	r1, #16
 800a054:	200a      	movs	r0, #10
 800a056:	f7fe fbbe 	bl	80087d6 <xQueueGenericCreateStatic>
 800a05a:	4603      	mov	r3, r0
 800a05c:	4a08      	ldr	r2, [pc, #32]	@ (800a080 <prvCheckForValidListAndQueue+0x60>)
 800a05e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800a060:	4b07      	ldr	r3, [pc, #28]	@ (800a080 <prvCheckForValidListAndQueue+0x60>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d005      	beq.n	800a074 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a068:	4b05      	ldr	r3, [pc, #20]	@ (800a080 <prvCheckForValidListAndQueue+0x60>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	490b      	ldr	r1, [pc, #44]	@ (800a09c <prvCheckForValidListAndQueue+0x7c>)
 800a06e:	4618      	mov	r0, r3
 800a070:	f7fe fd68 	bl	8008b44 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800a074:	f000 f878 	bl	800a168 <vPortExitCritical>
    }
 800a078:	bf00      	nop
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	20000d04 	.word	0x20000d04
 800a084:	20000cd4 	.word	0x20000cd4
 800a088:	20000ce8 	.word	0x20000ce8
 800a08c:	20000cfc 	.word	0x20000cfc
 800a090:	20000d00 	.word	0x20000d00
 800a094:	20000db0 	.word	0x20000db0
 800a098:	20000d10 	.word	0x20000d10
 800a09c:	0800b030 	.word	0x0800b030

0800a0a0 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a0a4:	4b0b      	ldr	r3, [pc, #44]	@ (800a0d4 <vPortSetupTimerInterrupt+0x34>)
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a0aa:	4b0b      	ldr	r3, [pc, #44]	@ (800a0d8 <vPortSetupTimerInterrupt+0x38>)
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a0b0:	4b0a      	ldr	r3, [pc, #40]	@ (800a0dc <vPortSetupTimerInterrupt+0x3c>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a0a      	ldr	r2, [pc, #40]	@ (800a0e0 <vPortSetupTimerInterrupt+0x40>)
 800a0b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ba:	099b      	lsrs	r3, r3, #6
 800a0bc:	4a09      	ldr	r2, [pc, #36]	@ (800a0e4 <vPortSetupTimerInterrupt+0x44>)
 800a0be:	3b01      	subs	r3, #1
 800a0c0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800a0c2:	4b04      	ldr	r3, [pc, #16]	@ (800a0d4 <vPortSetupTimerInterrupt+0x34>)
 800a0c4:	2207      	movs	r2, #7
 800a0c6:	601a      	str	r2, [r3, #0]
}
 800a0c8:	bf00      	nop
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	e000e010 	.word	0xe000e010
 800a0d8:	e000e018 	.word	0xe000e018
 800a0dc:	20000018 	.word	0x20000018
 800a0e0:	10624dd3 	.word	0x10624dd3
 800a0e4:	e000e014 	.word	0xe000e014

0800a0e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800a0f2:	4b0a      	ldr	r3, [pc, #40]	@ (800a11c <prvTaskExitError+0x34>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0fa:	d003      	beq.n	800a104 <prvTaskExitError+0x1c>
 800a0fc:	f000 f9bc 	bl	800a478 <ulSetInterruptMask>
 800a100:	bf00      	nop
 800a102:	e7fd      	b.n	800a100 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800a104:	f000 f9b8 	bl	800a478 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800a108:	bf00      	nop
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d0fc      	beq.n	800a10a <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800a110:	bf00      	nop
 800a112:	bf00      	nop
 800a114:	3708      	adds	r7, #8
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	20000024 	.word	0x20000024

0800a120 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800a120:	b480      	push	{r7}
 800a122:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a124:	4b06      	ldr	r3, [pc, #24]	@ (800a140 <vPortYield+0x20>)
 800a126:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a12a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800a12c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800a130:	f3bf 8f6f 	isb	sy
}
 800a134:	bf00      	nop
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr
 800a13e:	bf00      	nop
 800a140:	e000ed04 	.word	0xe000ed04

0800a144 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800a144:	b580      	push	{r7, lr}
 800a146:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800a148:	f000 f996 	bl	800a478 <ulSetInterruptMask>
    ulCriticalNesting++;
 800a14c:	4b05      	ldr	r3, [pc, #20]	@ (800a164 <vPortEnterCritical+0x20>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	3301      	adds	r3, #1
 800a152:	4a04      	ldr	r2, [pc, #16]	@ (800a164 <vPortEnterCritical+0x20>)
 800a154:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800a156:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800a15a:	f3bf 8f6f 	isb	sy
}
 800a15e:	bf00      	nop
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	20000024 	.word	0x20000024

0800a168 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800a16c:	4b0a      	ldr	r3, [pc, #40]	@ (800a198 <vPortExitCritical+0x30>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d103      	bne.n	800a17c <vPortExitCritical+0x14>
 800a174:	f000 f980 	bl	800a478 <ulSetInterruptMask>
 800a178:	bf00      	nop
 800a17a:	e7fd      	b.n	800a178 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800a17c:	4b06      	ldr	r3, [pc, #24]	@ (800a198 <vPortExitCritical+0x30>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	3b01      	subs	r3, #1
 800a182:	4a05      	ldr	r2, [pc, #20]	@ (800a198 <vPortExitCritical+0x30>)
 800a184:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800a186:	4b04      	ldr	r3, [pc, #16]	@ (800a198 <vPortExitCritical+0x30>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d102      	bne.n	800a194 <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 800a18e:	2000      	movs	r0, #0
 800a190:	f000 f97f 	bl	800a492 <vClearInterruptMask>
    }
}
 800a194:	bf00      	nop
 800a196:	bd80      	pop	{r7, pc}
 800a198:	20000024 	.word	0x20000024

0800a19c <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1a2:	f000 f969 	bl	800a478 <ulSetInterruptMask>
 800a1a6:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800a1a8:	f7ff f87e 	bl	80092a8 <xTaskIncrementTick>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d003      	beq.n	800a1ba <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a1b2:	4b05      	ldr	r3, [pc, #20]	@ (800a1c8 <xPortSysTickHandler+0x2c>)
 800a1b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1b8:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f969 	bl	800a492 <vClearInterruptMask>
}
 800a1c0:	bf00      	nop
 800a1c2:	3708      	adds	r7, #8
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	e000ed04 	.word	0xe000ed04

0800a1cc <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	699b      	ldr	r3, [r3, #24]
 800a1d8:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	3b02      	subs	r3, #2
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800a1e2:	7afb      	ldrb	r3, [r7, #11]
 800a1e4:	2b66      	cmp	r3, #102	@ 0x66
 800a1e6:	d102      	bne.n	800a1ee <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800a1e8:	f000 f912 	bl	800a410 <vRestoreContextOfFirstTask>
            break;
 800a1ec:	e003      	b.n	800a1f6 <vPortSVCHandler_C+0x2a>
                break;
        #endif /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 1 ) */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800a1ee:	f000 f943 	bl	800a478 <ulSetInterruptMask>
 800a1f2:	bf00      	nop
 800a1f4:	e7fd      	b.n	800a1f2 <vPortSVCHandler_C+0x26>
    }
}
 800a1f6:	bf00      	nop
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
	...

0800a200 <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
 800a200:	b480      	push	{r7}
 800a202:	b085      	sub	sp, #20
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	607a      	str	r2, [r7, #4]
 800a20c:	603b      	str	r3, [r7, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	3b04      	subs	r3, #4
 800a212:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a21a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	3b04      	subs	r3, #4
 800a220:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	3b04      	subs	r3, #4
 800a22c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
 800a22e:	4a38      	ldr	r2, [pc, #224]	@ (800a310 <pxPortInitialiseStack+0x110>)
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	3b04      	subs	r3, #4
 800a238:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 800a240:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	3b04      	subs	r3, #4
 800a246:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 800a24e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	3b04      	subs	r3, #4
 800a254:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800a25c:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	3b04      	subs	r3, #4
 800a262:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 800a26a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	3b04      	subs	r3, #4
 800a270:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
 800a272:	683a      	ldr	r2, [r7, #0]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	3b04      	subs	r3, #4
 800a27c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 800a284:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	3b04      	subs	r3, #4
 800a28a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800a292:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	3b04      	subs	r3, #4
 800a298:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 800a2a0:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	3b04      	subs	r3, #4
 800a2a6:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800a2ae:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	3b04      	subs	r3, #4
 800a2b4:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800a2bc:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	3b04      	subs	r3, #4
 800a2c2:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 800a2ca:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	3b04      	subs	r3, #4
 800a2d0:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 800a2d8:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	3b04      	subs	r3, #4
 800a2de:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 800a2e6:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	3b04      	subs	r3, #4
 800a2ec:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 800a2f4:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	3b04      	subs	r3, #4
 800a2fa:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800a2fc:	68ba      	ldr	r2, [r7, #8]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	601a      	str	r2, [r3, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
 800a302:	68fb      	ldr	r3, [r7, #12]
    }
 800a304:	4618      	mov	r0, r3
 800a306:	3714      	adds	r7, #20
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr
 800a310:	0800a0e9 	.word	0x0800a0e9

0800a314 <xPortStartScheduler>:

#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800a31a:	2300      	movs	r3, #0
 800a31c:	60bb      	str	r3, [r7, #8]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = portNVIC_SHPR2_REG;
 800a31e:	4b35      	ldr	r3, [pc, #212]	@ (800a3f4 <xPortStartScheduler+0xe0>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	60fb      	str	r3, [r7, #12]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        portNVIC_SHPR2_REG = 0xFF000000;
 800a324:	4b33      	ldr	r3, [pc, #204]	@ (800a3f4 <xPortStartScheduler+0xe0>)
 800a326:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800a32a:	601a      	str	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 800a32c:	4b31      	ldr	r3, [pc, #196]	@ (800a3f4 <xPortStartScheduler+0xe0>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	0e1b      	lsrs	r3, r3, #24
 800a332:	b2db      	uxtb	r3, r3
 800a334:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a336:	79fb      	ldrb	r3, [r7, #7]
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a33e:	b2da      	uxtb	r2, r3
 800a340:	4b2d      	ldr	r3, [pc, #180]	@ (800a3f8 <xPortStartScheduler+0xe4>)
 800a342:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800a344:	4b2c      	ldr	r3, [pc, #176]	@ (800a3f8 <xPortStartScheduler+0xe4>)
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d103      	bne.n	800a354 <xPortStartScheduler+0x40>
 800a34c:	f000 f894 	bl	800a478 <ulSetInterruptMask>
 800a350:	bf00      	nop
 800a352:	e7fd      	b.n	800a350 <xPortStartScheduler+0x3c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800a354:	79fb      	ldrb	r3, [r7, #7]
 800a356:	b2db      	uxtb	r3, r3
 800a358:	43db      	mvns	r3, r3
 800a35a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d00b      	beq.n	800a37a <xPortStartScheduler+0x66>
 800a362:	f000 f889 	bl	800a478 <ulSetInterruptMask>
 800a366:	bf00      	nop
 800a368:	e7fd      	b.n	800a366 <xPortStartScheduler+0x52>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	3301      	adds	r3, #1
 800a36e:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a370:	79fb      	ldrb	r3, [r7, #7]
 800a372:	b2db      	uxtb	r3, r3
 800a374:	005b      	lsls	r3, r3, #1
 800a376:	b2db      	uxtb	r3, r3
 800a378:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a37a:	79fb      	ldrb	r3, [r7, #7]
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a382:	2b80      	cmp	r3, #128	@ 0x80
 800a384:	d0f1      	beq.n	800a36a <xPortStartScheduler+0x56>
        }

        if( ulImplementedPrioBits == 8 )
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	2b08      	cmp	r3, #8
 800a38a:	d103      	bne.n	800a394 <xPortStartScheduler+0x80>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 800a38c:	4b1b      	ldr	r3, [pc, #108]	@ (800a3fc <xPortStartScheduler+0xe8>)
 800a38e:	2200      	movs	r2, #0
 800a390:	601a      	str	r2, [r3, #0]
 800a392:	e004      	b.n	800a39e <xPortStartScheduler+0x8a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	f1c3 0307 	rsb	r3, r3, #7
 800a39a:	4a18      	ldr	r2, [pc, #96]	@ (800a3fc <xPortStartScheduler+0xe8>)
 800a39c:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a39e:	4b17      	ldr	r3, [pc, #92]	@ (800a3fc <xPortStartScheduler+0xe8>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	021b      	lsls	r3, r3, #8
 800a3a4:	4a15      	ldr	r2, [pc, #84]	@ (800a3fc <xPortStartScheduler+0xe8>)
 800a3a6:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a3a8:	4b14      	ldr	r3, [pc, #80]	@ (800a3fc <xPortStartScheduler+0xe8>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a3b0:	4a12      	ldr	r2, [pc, #72]	@ (800a3fc <xPortStartScheduler+0xe8>)
 800a3b2:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        portNVIC_SHPR2_REG = ulOriginalPriority;
 800a3b4:	4a0f      	ldr	r2, [pc, #60]	@ (800a3f4 <xPortStartScheduler+0xe0>)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	6013      	str	r3, [r2, #0]
    }
    #endif /* #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) ) */

    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800a3ba:	4b11      	ldr	r3, [pc, #68]	@ (800a400 <xPortStartScheduler+0xec>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a10      	ldr	r2, [pc, #64]	@ (800a400 <xPortStartScheduler+0xec>)
 800a3c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3c4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800a3c6:	4b0e      	ldr	r3, [pc, #56]	@ (800a400 <xPortStartScheduler+0xec>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a0d      	ldr	r2, [pc, #52]	@ (800a400 <xPortStartScheduler+0xec>)
 800a3cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3d0:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800a3d2:	f7ff fe65 	bl	800a0a0 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800a3d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a404 <xPortStartScheduler+0xf0>)
 800a3d8:	2200      	movs	r2, #0
 800a3da:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif

    /* Start the first task. */
    vStartFirstTask();
 800a3dc:	f000 f838 	bl	800a450 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800a3e0:	f7ff f872 	bl	80094c8 <vTaskSwitchContext>
    prvTaskExitError();
 800a3e4:	f7ff fe80 	bl	800a0e8 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	e000ed1c 	.word	0xe000ed1c
 800a3f8:	20000e00 	.word	0x20000e00
 800a3fc:	20000e04 	.word	0x20000e04
 800a400:	e000ed20 	.word	0xe000ed20
 800a404:	20000024 	.word	0x20000024
	...

0800a410 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800a410:	4a0b      	ldr	r2, [pc, #44]	@ (800a440 <pxCurrentTCBConst2>)
 800a412:	6811      	ldr	r1, [r2, #0]
 800a414:	6808      	ldr	r0, [r1, #0]
 800a416:	c806      	ldmia	r0!, {r1, r2}
 800a418:	f381 880b 	msr	PSPLIM, r1
 800a41c:	2102      	movs	r1, #2
 800a41e:	f381 8814 	msr	CONTROL, r1
 800a422:	3020      	adds	r0, #32
 800a424:	f380 8809 	msr	PSP, r0
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	f04f 0000 	mov.w	r0, #0
 800a430:	f380 8811 	msr	BASEPRI, r0
 800a434:	4710      	bx	r2
 800a436:	bf00      	nop
 800a438:	f3af 8000 	nop.w
 800a43c:	f3af 8000 	nop.w

0800a440 <pxCurrentTCBConst2>:
 800a440:	200007d4 	.word	0x200007d4
            "   bx   r2                                         \n" /* Finally, branch to EXC_RETURN. */
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
    }
 800a444:	bf00      	nop
 800a446:	bf00      	nop
	...

0800a450 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800a450:	4807      	ldr	r0, [pc, #28]	@ (800a470 <xVTORConst>)
 800a452:	6800      	ldr	r0, [r0, #0]
 800a454:	6800      	ldr	r0, [r0, #0]
 800a456:	f380 8808 	msr	MSP, r0
 800a45a:	b662      	cpsie	i
 800a45c:	b661      	cpsie	f
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	f3bf 8f6f 	isb	sy
 800a466:	df66      	svc	102	@ 0x66
 800a468:	bf00      	nop
 800a46a:	bf00      	nop
 800a46c:	f3af 8000 	nop.w

0800a470 <xVTORConst>:
 800a470:	e000ed08 	.word	0xe000ed08
        "                                                   \n"
        "   .align 4                                        \n"
        "xVTORConst: .word 0xe000ed08                       \n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800a474:	bf00      	nop
 800a476:	bf00      	nop

0800a478 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800a478:	f3ef 8011 	mrs	r0, BASEPRI
 800a47c:	f04f 0150 	mov.w	r1, #80	@ 0x50
 800a480:	f381 8811 	msr	BASEPRI, r1
 800a484:	f3bf 8f4f 	dsb	sy
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800a48e:	bf00      	nop
 800a490:	4618      	mov	r0, r3

0800a492 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800a492:	f380 8811 	msr	BASEPRI, r0
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	f3bf 8f6f 	isb	sy
 800a49e:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::: "memory"
    );
}
 800a4a0:	bf00      	nop
	...

0800a4b0 <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800a4b0:	f3ef 8009 	mrs	r0, PSP
 800a4b4:	f3ef 820b 	mrs	r2, PSPLIM
 800a4b8:	4673      	mov	r3, lr
 800a4ba:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800a4be:	4a10      	ldr	r2, [pc, #64]	@ (800a500 <pxCurrentTCBConst>)
 800a4c0:	6811      	ldr	r1, [r2, #0]
 800a4c2:	6008      	str	r0, [r1, #0]
 800a4c4:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a4c8:	f380 8811 	msr	BASEPRI, r0
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	f3bf 8f6f 	isb	sy
 800a4d4:	f7fe fff8 	bl	80094c8 <vTaskSwitchContext>
 800a4d8:	f04f 0000 	mov.w	r0, #0
 800a4dc:	f380 8811 	msr	BASEPRI, r0
 800a4e0:	4a07      	ldr	r2, [pc, #28]	@ (800a500 <pxCurrentTCBConst>)
 800a4e2:	6811      	ldr	r1, [r2, #0]
 800a4e4:	6808      	ldr	r0, [r1, #0]
 800a4e6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800a4ea:	f382 880b 	msr	PSPLIM, r2
 800a4ee:	f380 8809 	msr	PSP, r0
 800a4f2:	4718      	bx	r3
 800a4f4:	f3af 8000 	nop.w
 800a4f8:	f3af 8000 	nop.w
 800a4fc:	f3af 8000 	nop.w

0800a500 <pxCurrentTCBConst>:
 800a500:	200007d4 	.word	0x200007d4
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst: .word pxCurrentTCB              \n"
            ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
        );
    }
 800a504:	bf00      	nop
 800a506:	bf00      	nop
	...

0800a510 <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800a510:	f01e 0f04 	tst.w	lr, #4
 800a514:	bf0c      	ite	eq
 800a516:	f3ef 8008 	mrseq	r0, MSP
 800a51a:	f3ef 8009 	mrsne	r0, PSP
 800a51e:	4904      	ldr	r1, [pc, #16]	@ (800a530 <svchandler_address_const>)
 800a520:	4708      	bx	r1
 800a522:	bf00      	nop
 800a524:	f3af 8000 	nop.w
 800a528:	f3af 8000 	nop.w
 800a52c:	f3af 8000 	nop.w

0800a530 <svchandler_address_const>:
 800a530:	0800a1cd 	.word	0x0800a1cd
            "   bx r1                                           \n"
            "                                                   \n"
            "   .align 4                                        \n"
            "svchandler_address_const: .word vPortSVCHandler_C  \n"
        );
    }
 800a534:	bf00      	nop
 800a536:	bf00      	nop

0800a538 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 800a540:	2300      	movs	r3, #0
 800a542:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f003 0307 	and.w	r3, r3, #7
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00e      	beq.n	800a56c <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f023 0307 	bic.w	r3, r3, #7
 800a554:	3308      	adds	r3, #8
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	429a      	cmp	r2, r3
 800a55a:	d205      	bcs.n	800a568 <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f023 0307 	bic.w	r3, r3, #7
 800a562:	3308      	adds	r3, #8
 800a564:	607b      	str	r3, [r7, #4]
 800a566:	e001      	b.n	800a56c <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 800a568:	2300      	movs	r3, #0
 800a56a:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 800a56c:	f7fe fd90 	bl	8009090 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 800a570:	4b17      	ldr	r3, [pc, #92]	@ (800a5d0 <pvPortMalloc+0x98>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d105      	bne.n	800a584 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800a578:	4b16      	ldr	r3, [pc, #88]	@ (800a5d4 <pvPortMalloc+0x9c>)
 800a57a:	f023 0307 	bic.w	r3, r3, #7
 800a57e:	461a      	mov	r2, r3
 800a580:	4b13      	ldr	r3, [pc, #76]	@ (800a5d0 <pvPortMalloc+0x98>)
 800a582:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d01b      	beq.n	800a5c2 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800a58a:	4b13      	ldr	r3, [pc, #76]	@ (800a5d8 <pvPortMalloc+0xa0>)
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 800a592:	f641 72f7 	movw	r2, #8183	@ 0x1ff7
 800a596:	4293      	cmp	r3, r2
 800a598:	d813      	bhi.n	800a5c2 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 800a59a:	4b0f      	ldr	r3, [pc, #60]	@ (800a5d8 <pvPortMalloc+0xa0>)
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	441a      	add	r2, r3
 800a5a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a5d8 <pvPortMalloc+0xa0>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d90b      	bls.n	800a5c2 <pvPortMalloc+0x8a>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 800a5aa:	4b09      	ldr	r3, [pc, #36]	@ (800a5d0 <pvPortMalloc+0x98>)
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	4b0a      	ldr	r3, [pc, #40]	@ (800a5d8 <pvPortMalloc+0xa0>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 800a5b6:	4b08      	ldr	r3, [pc, #32]	@ (800a5d8 <pvPortMalloc+0xa0>)
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4413      	add	r3, r2
 800a5be:	4a06      	ldr	r2, [pc, #24]	@ (800a5d8 <pvPortMalloc+0xa0>)
 800a5c0:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800a5c2:	f7fe fd73 	bl	80090ac <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	20002e0c 	.word	0x20002e0c
 800a5d4:	20000e0f 	.word	0x20000e0f
 800a5d8:	20002e08 	.word	0x20002e08

0800a5dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d003      	beq.n	800a5f2 <vPortFree+0x16>
 800a5ea:	f7ff ff45 	bl	800a478 <ulSetInterruptMask>
 800a5ee:	bf00      	nop
 800a5f0:	e7fd      	b.n	800a5ee <vPortFree+0x12>
}
 800a5f2:	bf00      	nop
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
	...

0800a5fc <sniprintf>:
 800a5fc:	b40c      	push	{r2, r3}
 800a5fe:	4b19      	ldr	r3, [pc, #100]	@ (800a664 <sniprintf+0x68>)
 800a600:	b530      	push	{r4, r5, lr}
 800a602:	1e0c      	subs	r4, r1, #0
 800a604:	b09d      	sub	sp, #116	@ 0x74
 800a606:	681d      	ldr	r5, [r3, #0]
 800a608:	da08      	bge.n	800a61c <sniprintf+0x20>
 800a60a:	238b      	movs	r3, #139	@ 0x8b
 800a60c:	f04f 30ff 	mov.w	r0, #4294967295
 800a610:	602b      	str	r3, [r5, #0]
 800a612:	b01d      	add	sp, #116	@ 0x74
 800a614:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a618:	b002      	add	sp, #8
 800a61a:	4770      	bx	lr
 800a61c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a620:	9002      	str	r0, [sp, #8]
 800a622:	9006      	str	r0, [sp, #24]
 800a624:	a902      	add	r1, sp, #8
 800a626:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a62a:	f04f 0300 	mov.w	r3, #0
 800a62e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a630:	4628      	mov	r0, r5
 800a632:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a634:	bf14      	ite	ne
 800a636:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a63a:	4623      	moveq	r3, r4
 800a63c:	9304      	str	r3, [sp, #16]
 800a63e:	9307      	str	r3, [sp, #28]
 800a640:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a644:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a648:	ab21      	add	r3, sp, #132	@ 0x84
 800a64a:	9301      	str	r3, [sp, #4]
 800a64c:	f000 f9a2 	bl	800a994 <_svfiprintf_r>
 800a650:	1c43      	adds	r3, r0, #1
 800a652:	bfbc      	itt	lt
 800a654:	238b      	movlt	r3, #139	@ 0x8b
 800a656:	602b      	strlt	r3, [r5, #0]
 800a658:	2c00      	cmp	r4, #0
 800a65a:	d0da      	beq.n	800a612 <sniprintf+0x16>
 800a65c:	9b02      	ldr	r3, [sp, #8]
 800a65e:	2200      	movs	r2, #0
 800a660:	701a      	strb	r2, [r3, #0]
 800a662:	e7d6      	b.n	800a612 <sniprintf+0x16>
 800a664:	20000028 	.word	0x20000028

0800a668 <memset>:
 800a668:	4402      	add	r2, r0
 800a66a:	4603      	mov	r3, r0
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d100      	bne.n	800a672 <memset+0xa>
 800a670:	4770      	bx	lr
 800a672:	f803 1b01 	strb.w	r1, [r3], #1
 800a676:	e7f9      	b.n	800a66c <memset+0x4>

0800a678 <__errno>:
 800a678:	4b01      	ldr	r3, [pc, #4]	@ (800a680 <__errno+0x8>)
 800a67a:	6818      	ldr	r0, [r3, #0]
 800a67c:	4770      	bx	lr
 800a67e:	bf00      	nop
 800a680:	20000028 	.word	0x20000028

0800a684 <__libc_init_array>:
 800a684:	b570      	push	{r4, r5, r6, lr}
 800a686:	4d0d      	ldr	r5, [pc, #52]	@ (800a6bc <__libc_init_array+0x38>)
 800a688:	2600      	movs	r6, #0
 800a68a:	4c0d      	ldr	r4, [pc, #52]	@ (800a6c0 <__libc_init_array+0x3c>)
 800a68c:	1b64      	subs	r4, r4, r5
 800a68e:	10a4      	asrs	r4, r4, #2
 800a690:	42a6      	cmp	r6, r4
 800a692:	d109      	bne.n	800a6a8 <__libc_init_array+0x24>
 800a694:	4d0b      	ldr	r5, [pc, #44]	@ (800a6c4 <__libc_init_array+0x40>)
 800a696:	2600      	movs	r6, #0
 800a698:	4c0b      	ldr	r4, [pc, #44]	@ (800a6c8 <__libc_init_array+0x44>)
 800a69a:	f000 fc75 	bl	800af88 <_init>
 800a69e:	1b64      	subs	r4, r4, r5
 800a6a0:	10a4      	asrs	r4, r4, #2
 800a6a2:	42a6      	cmp	r6, r4
 800a6a4:	d105      	bne.n	800a6b2 <__libc_init_array+0x2e>
 800a6a6:	bd70      	pop	{r4, r5, r6, pc}
 800a6a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6ac:	3601      	adds	r6, #1
 800a6ae:	4798      	blx	r3
 800a6b0:	e7ee      	b.n	800a690 <__libc_init_array+0xc>
 800a6b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6b6:	3601      	adds	r6, #1
 800a6b8:	4798      	blx	r3
 800a6ba:	e7f2      	b.n	800a6a2 <__libc_init_array+0x1e>
 800a6bc:	0800b0d0 	.word	0x0800b0d0
 800a6c0:	0800b0d0 	.word	0x0800b0d0
 800a6c4:	0800b0d0 	.word	0x0800b0d0
 800a6c8:	0800b0d4 	.word	0x0800b0d4

0800a6cc <__retarget_lock_acquire_recursive>:
 800a6cc:	4770      	bx	lr

0800a6ce <__retarget_lock_release_recursive>:
 800a6ce:	4770      	bx	lr

0800a6d0 <memcpy>:
 800a6d0:	440a      	add	r2, r1
 800a6d2:	1e43      	subs	r3, r0, #1
 800a6d4:	4291      	cmp	r1, r2
 800a6d6:	d100      	bne.n	800a6da <memcpy+0xa>
 800a6d8:	4770      	bx	lr
 800a6da:	b510      	push	{r4, lr}
 800a6dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6e0:	4291      	cmp	r1, r2
 800a6e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6e6:	d1f9      	bne.n	800a6dc <memcpy+0xc>
 800a6e8:	bd10      	pop	{r4, pc}
	...

0800a6ec <_free_r>:
 800a6ec:	b538      	push	{r3, r4, r5, lr}
 800a6ee:	4605      	mov	r5, r0
 800a6f0:	2900      	cmp	r1, #0
 800a6f2:	d041      	beq.n	800a778 <_free_r+0x8c>
 800a6f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6f8:	1f0c      	subs	r4, r1, #4
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	bfb8      	it	lt
 800a6fe:	18e4      	addlt	r4, r4, r3
 800a700:	f000 f8e0 	bl	800a8c4 <__malloc_lock>
 800a704:	4a1d      	ldr	r2, [pc, #116]	@ (800a77c <_free_r+0x90>)
 800a706:	6813      	ldr	r3, [r2, #0]
 800a708:	b933      	cbnz	r3, 800a718 <_free_r+0x2c>
 800a70a:	6063      	str	r3, [r4, #4]
 800a70c:	6014      	str	r4, [r2, #0]
 800a70e:	4628      	mov	r0, r5
 800a710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a714:	f000 b8dc 	b.w	800a8d0 <__malloc_unlock>
 800a718:	42a3      	cmp	r3, r4
 800a71a:	d908      	bls.n	800a72e <_free_r+0x42>
 800a71c:	6820      	ldr	r0, [r4, #0]
 800a71e:	1821      	adds	r1, r4, r0
 800a720:	428b      	cmp	r3, r1
 800a722:	bf01      	itttt	eq
 800a724:	6819      	ldreq	r1, [r3, #0]
 800a726:	685b      	ldreq	r3, [r3, #4]
 800a728:	1809      	addeq	r1, r1, r0
 800a72a:	6021      	streq	r1, [r4, #0]
 800a72c:	e7ed      	b.n	800a70a <_free_r+0x1e>
 800a72e:	461a      	mov	r2, r3
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	b10b      	cbz	r3, 800a738 <_free_r+0x4c>
 800a734:	42a3      	cmp	r3, r4
 800a736:	d9fa      	bls.n	800a72e <_free_r+0x42>
 800a738:	6811      	ldr	r1, [r2, #0]
 800a73a:	1850      	adds	r0, r2, r1
 800a73c:	42a0      	cmp	r0, r4
 800a73e:	d10b      	bne.n	800a758 <_free_r+0x6c>
 800a740:	6820      	ldr	r0, [r4, #0]
 800a742:	4401      	add	r1, r0
 800a744:	1850      	adds	r0, r2, r1
 800a746:	6011      	str	r1, [r2, #0]
 800a748:	4283      	cmp	r3, r0
 800a74a:	d1e0      	bne.n	800a70e <_free_r+0x22>
 800a74c:	6818      	ldr	r0, [r3, #0]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	4408      	add	r0, r1
 800a752:	6053      	str	r3, [r2, #4]
 800a754:	6010      	str	r0, [r2, #0]
 800a756:	e7da      	b.n	800a70e <_free_r+0x22>
 800a758:	d902      	bls.n	800a760 <_free_r+0x74>
 800a75a:	230c      	movs	r3, #12
 800a75c:	602b      	str	r3, [r5, #0]
 800a75e:	e7d6      	b.n	800a70e <_free_r+0x22>
 800a760:	6820      	ldr	r0, [r4, #0]
 800a762:	1821      	adds	r1, r4, r0
 800a764:	428b      	cmp	r3, r1
 800a766:	bf02      	ittt	eq
 800a768:	6819      	ldreq	r1, [r3, #0]
 800a76a:	685b      	ldreq	r3, [r3, #4]
 800a76c:	1809      	addeq	r1, r1, r0
 800a76e:	6063      	str	r3, [r4, #4]
 800a770:	bf08      	it	eq
 800a772:	6021      	streq	r1, [r4, #0]
 800a774:	6054      	str	r4, [r2, #4]
 800a776:	e7ca      	b.n	800a70e <_free_r+0x22>
 800a778:	bd38      	pop	{r3, r4, r5, pc}
 800a77a:	bf00      	nop
 800a77c:	20002f54 	.word	0x20002f54

0800a780 <sbrk_aligned>:
 800a780:	b570      	push	{r4, r5, r6, lr}
 800a782:	4e0f      	ldr	r6, [pc, #60]	@ (800a7c0 <sbrk_aligned+0x40>)
 800a784:	460c      	mov	r4, r1
 800a786:	4605      	mov	r5, r0
 800a788:	6831      	ldr	r1, [r6, #0]
 800a78a:	b911      	cbnz	r1, 800a792 <sbrk_aligned+0x12>
 800a78c:	f000 fba8 	bl	800aee0 <_sbrk_r>
 800a790:	6030      	str	r0, [r6, #0]
 800a792:	4621      	mov	r1, r4
 800a794:	4628      	mov	r0, r5
 800a796:	f000 fba3 	bl	800aee0 <_sbrk_r>
 800a79a:	1c43      	adds	r3, r0, #1
 800a79c:	d103      	bne.n	800a7a6 <sbrk_aligned+0x26>
 800a79e:	f04f 34ff 	mov.w	r4, #4294967295
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	bd70      	pop	{r4, r5, r6, pc}
 800a7a6:	1cc4      	adds	r4, r0, #3
 800a7a8:	f024 0403 	bic.w	r4, r4, #3
 800a7ac:	42a0      	cmp	r0, r4
 800a7ae:	d0f8      	beq.n	800a7a2 <sbrk_aligned+0x22>
 800a7b0:	1a21      	subs	r1, r4, r0
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	f000 fb94 	bl	800aee0 <_sbrk_r>
 800a7b8:	3001      	adds	r0, #1
 800a7ba:	d1f2      	bne.n	800a7a2 <sbrk_aligned+0x22>
 800a7bc:	e7ef      	b.n	800a79e <sbrk_aligned+0x1e>
 800a7be:	bf00      	nop
 800a7c0:	20002f50 	.word	0x20002f50

0800a7c4 <_malloc_r>:
 800a7c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7c8:	1ccd      	adds	r5, r1, #3
 800a7ca:	4606      	mov	r6, r0
 800a7cc:	f025 0503 	bic.w	r5, r5, #3
 800a7d0:	3508      	adds	r5, #8
 800a7d2:	2d0c      	cmp	r5, #12
 800a7d4:	bf38      	it	cc
 800a7d6:	250c      	movcc	r5, #12
 800a7d8:	2d00      	cmp	r5, #0
 800a7da:	db01      	blt.n	800a7e0 <_malloc_r+0x1c>
 800a7dc:	42a9      	cmp	r1, r5
 800a7de:	d904      	bls.n	800a7ea <_malloc_r+0x26>
 800a7e0:	230c      	movs	r3, #12
 800a7e2:	6033      	str	r3, [r6, #0]
 800a7e4:	2000      	movs	r0, #0
 800a7e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a8c0 <_malloc_r+0xfc>
 800a7ee:	f000 f869 	bl	800a8c4 <__malloc_lock>
 800a7f2:	f8d8 3000 	ldr.w	r3, [r8]
 800a7f6:	461c      	mov	r4, r3
 800a7f8:	bb44      	cbnz	r4, 800a84c <_malloc_r+0x88>
 800a7fa:	4629      	mov	r1, r5
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	f7ff ffbf 	bl	800a780 <sbrk_aligned>
 800a802:	1c43      	adds	r3, r0, #1
 800a804:	4604      	mov	r4, r0
 800a806:	d158      	bne.n	800a8ba <_malloc_r+0xf6>
 800a808:	f8d8 4000 	ldr.w	r4, [r8]
 800a80c:	4627      	mov	r7, r4
 800a80e:	2f00      	cmp	r7, #0
 800a810:	d143      	bne.n	800a89a <_malloc_r+0xd6>
 800a812:	2c00      	cmp	r4, #0
 800a814:	d04b      	beq.n	800a8ae <_malloc_r+0xea>
 800a816:	6823      	ldr	r3, [r4, #0]
 800a818:	4639      	mov	r1, r7
 800a81a:	4630      	mov	r0, r6
 800a81c:	eb04 0903 	add.w	r9, r4, r3
 800a820:	f000 fb5e 	bl	800aee0 <_sbrk_r>
 800a824:	4581      	cmp	r9, r0
 800a826:	d142      	bne.n	800a8ae <_malloc_r+0xea>
 800a828:	6821      	ldr	r1, [r4, #0]
 800a82a:	4630      	mov	r0, r6
 800a82c:	1a6d      	subs	r5, r5, r1
 800a82e:	4629      	mov	r1, r5
 800a830:	f7ff ffa6 	bl	800a780 <sbrk_aligned>
 800a834:	3001      	adds	r0, #1
 800a836:	d03a      	beq.n	800a8ae <_malloc_r+0xea>
 800a838:	6823      	ldr	r3, [r4, #0]
 800a83a:	442b      	add	r3, r5
 800a83c:	6023      	str	r3, [r4, #0]
 800a83e:	f8d8 3000 	ldr.w	r3, [r8]
 800a842:	685a      	ldr	r2, [r3, #4]
 800a844:	bb62      	cbnz	r2, 800a8a0 <_malloc_r+0xdc>
 800a846:	f8c8 7000 	str.w	r7, [r8]
 800a84a:	e00f      	b.n	800a86c <_malloc_r+0xa8>
 800a84c:	6822      	ldr	r2, [r4, #0]
 800a84e:	1b52      	subs	r2, r2, r5
 800a850:	d420      	bmi.n	800a894 <_malloc_r+0xd0>
 800a852:	2a0b      	cmp	r2, #11
 800a854:	d917      	bls.n	800a886 <_malloc_r+0xc2>
 800a856:	1961      	adds	r1, r4, r5
 800a858:	42a3      	cmp	r3, r4
 800a85a:	6025      	str	r5, [r4, #0]
 800a85c:	bf18      	it	ne
 800a85e:	6059      	strne	r1, [r3, #4]
 800a860:	6863      	ldr	r3, [r4, #4]
 800a862:	bf08      	it	eq
 800a864:	f8c8 1000 	streq.w	r1, [r8]
 800a868:	5162      	str	r2, [r4, r5]
 800a86a:	604b      	str	r3, [r1, #4]
 800a86c:	4630      	mov	r0, r6
 800a86e:	f000 f82f 	bl	800a8d0 <__malloc_unlock>
 800a872:	f104 000b 	add.w	r0, r4, #11
 800a876:	1d23      	adds	r3, r4, #4
 800a878:	f020 0007 	bic.w	r0, r0, #7
 800a87c:	1ac2      	subs	r2, r0, r3
 800a87e:	bf1c      	itt	ne
 800a880:	1a1b      	subne	r3, r3, r0
 800a882:	50a3      	strne	r3, [r4, r2]
 800a884:	e7af      	b.n	800a7e6 <_malloc_r+0x22>
 800a886:	6862      	ldr	r2, [r4, #4]
 800a888:	42a3      	cmp	r3, r4
 800a88a:	bf0c      	ite	eq
 800a88c:	f8c8 2000 	streq.w	r2, [r8]
 800a890:	605a      	strne	r2, [r3, #4]
 800a892:	e7eb      	b.n	800a86c <_malloc_r+0xa8>
 800a894:	4623      	mov	r3, r4
 800a896:	6864      	ldr	r4, [r4, #4]
 800a898:	e7ae      	b.n	800a7f8 <_malloc_r+0x34>
 800a89a:	463c      	mov	r4, r7
 800a89c:	687f      	ldr	r7, [r7, #4]
 800a89e:	e7b6      	b.n	800a80e <_malloc_r+0x4a>
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	42a3      	cmp	r3, r4
 800a8a6:	d1fb      	bne.n	800a8a0 <_malloc_r+0xdc>
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	6053      	str	r3, [r2, #4]
 800a8ac:	e7de      	b.n	800a86c <_malloc_r+0xa8>
 800a8ae:	230c      	movs	r3, #12
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	6033      	str	r3, [r6, #0]
 800a8b4:	f000 f80c 	bl	800a8d0 <__malloc_unlock>
 800a8b8:	e794      	b.n	800a7e4 <_malloc_r+0x20>
 800a8ba:	6005      	str	r5, [r0, #0]
 800a8bc:	e7d6      	b.n	800a86c <_malloc_r+0xa8>
 800a8be:	bf00      	nop
 800a8c0:	20002f54 	.word	0x20002f54

0800a8c4 <__malloc_lock>:
 800a8c4:	4801      	ldr	r0, [pc, #4]	@ (800a8cc <__malloc_lock+0x8>)
 800a8c6:	f7ff bf01 	b.w	800a6cc <__retarget_lock_acquire_recursive>
 800a8ca:	bf00      	nop
 800a8cc:	20002f4c 	.word	0x20002f4c

0800a8d0 <__malloc_unlock>:
 800a8d0:	4801      	ldr	r0, [pc, #4]	@ (800a8d8 <__malloc_unlock+0x8>)
 800a8d2:	f7ff befc 	b.w	800a6ce <__retarget_lock_release_recursive>
 800a8d6:	bf00      	nop
 800a8d8:	20002f4c 	.word	0x20002f4c

0800a8dc <__ssputs_r>:
 800a8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8e0:	461f      	mov	r7, r3
 800a8e2:	688e      	ldr	r6, [r1, #8]
 800a8e4:	4682      	mov	sl, r0
 800a8e6:	460c      	mov	r4, r1
 800a8e8:	42be      	cmp	r6, r7
 800a8ea:	4690      	mov	r8, r2
 800a8ec:	680b      	ldr	r3, [r1, #0]
 800a8ee:	d82d      	bhi.n	800a94c <__ssputs_r+0x70>
 800a8f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a8f8:	d026      	beq.n	800a948 <__ssputs_r+0x6c>
 800a8fa:	6965      	ldr	r5, [r4, #20]
 800a8fc:	6909      	ldr	r1, [r1, #16]
 800a8fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a902:	eba3 0901 	sub.w	r9, r3, r1
 800a906:	1c7b      	adds	r3, r7, #1
 800a908:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a90c:	444b      	add	r3, r9
 800a90e:	106d      	asrs	r5, r5, #1
 800a910:	429d      	cmp	r5, r3
 800a912:	bf38      	it	cc
 800a914:	461d      	movcc	r5, r3
 800a916:	0553      	lsls	r3, r2, #21
 800a918:	d527      	bpl.n	800a96a <__ssputs_r+0x8e>
 800a91a:	4629      	mov	r1, r5
 800a91c:	f7ff ff52 	bl	800a7c4 <_malloc_r>
 800a920:	4606      	mov	r6, r0
 800a922:	b360      	cbz	r0, 800a97e <__ssputs_r+0xa2>
 800a924:	464a      	mov	r2, r9
 800a926:	6921      	ldr	r1, [r4, #16]
 800a928:	f7ff fed2 	bl	800a6d0 <memcpy>
 800a92c:	89a3      	ldrh	r3, [r4, #12]
 800a92e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a936:	81a3      	strh	r3, [r4, #12]
 800a938:	6126      	str	r6, [r4, #16]
 800a93a:	444e      	add	r6, r9
 800a93c:	6165      	str	r5, [r4, #20]
 800a93e:	eba5 0509 	sub.w	r5, r5, r9
 800a942:	6026      	str	r6, [r4, #0]
 800a944:	463e      	mov	r6, r7
 800a946:	60a5      	str	r5, [r4, #8]
 800a948:	42be      	cmp	r6, r7
 800a94a:	d900      	bls.n	800a94e <__ssputs_r+0x72>
 800a94c:	463e      	mov	r6, r7
 800a94e:	4632      	mov	r2, r6
 800a950:	4641      	mov	r1, r8
 800a952:	6820      	ldr	r0, [r4, #0]
 800a954:	f000 faaa 	bl	800aeac <memmove>
 800a958:	68a3      	ldr	r3, [r4, #8]
 800a95a:	2000      	movs	r0, #0
 800a95c:	1b9b      	subs	r3, r3, r6
 800a95e:	60a3      	str	r3, [r4, #8]
 800a960:	6823      	ldr	r3, [r4, #0]
 800a962:	4433      	add	r3, r6
 800a964:	6023      	str	r3, [r4, #0]
 800a966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a96a:	462a      	mov	r2, r5
 800a96c:	f000 fad6 	bl	800af1c <_realloc_r>
 800a970:	4606      	mov	r6, r0
 800a972:	2800      	cmp	r0, #0
 800a974:	d1e0      	bne.n	800a938 <__ssputs_r+0x5c>
 800a976:	6921      	ldr	r1, [r4, #16]
 800a978:	4650      	mov	r0, sl
 800a97a:	f7ff feb7 	bl	800a6ec <_free_r>
 800a97e:	230c      	movs	r3, #12
 800a980:	f04f 30ff 	mov.w	r0, #4294967295
 800a984:	f8ca 3000 	str.w	r3, [sl]
 800a988:	89a3      	ldrh	r3, [r4, #12]
 800a98a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a98e:	81a3      	strh	r3, [r4, #12]
 800a990:	e7e9      	b.n	800a966 <__ssputs_r+0x8a>
	...

0800a994 <_svfiprintf_r>:
 800a994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a998:	4698      	mov	r8, r3
 800a99a:	898b      	ldrh	r3, [r1, #12]
 800a99c:	b09d      	sub	sp, #116	@ 0x74
 800a99e:	4607      	mov	r7, r0
 800a9a0:	061b      	lsls	r3, r3, #24
 800a9a2:	460d      	mov	r5, r1
 800a9a4:	4614      	mov	r4, r2
 800a9a6:	d510      	bpl.n	800a9ca <_svfiprintf_r+0x36>
 800a9a8:	690b      	ldr	r3, [r1, #16]
 800a9aa:	b973      	cbnz	r3, 800a9ca <_svfiprintf_r+0x36>
 800a9ac:	2140      	movs	r1, #64	@ 0x40
 800a9ae:	f7ff ff09 	bl	800a7c4 <_malloc_r>
 800a9b2:	6028      	str	r0, [r5, #0]
 800a9b4:	6128      	str	r0, [r5, #16]
 800a9b6:	b930      	cbnz	r0, 800a9c6 <_svfiprintf_r+0x32>
 800a9b8:	230c      	movs	r3, #12
 800a9ba:	603b      	str	r3, [r7, #0]
 800a9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c0:	b01d      	add	sp, #116	@ 0x74
 800a9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9c6:	2340      	movs	r3, #64	@ 0x40
 800a9c8:	616b      	str	r3, [r5, #20]
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9d0:	f04f 0901 	mov.w	r9, #1
 800a9d4:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800ab78 <_svfiprintf_r+0x1e4>
 800a9d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9da:	2320      	movs	r3, #32
 800a9dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a9e0:	2330      	movs	r3, #48	@ 0x30
 800a9e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9e6:	4623      	mov	r3, r4
 800a9e8:	469a      	mov	sl, r3
 800a9ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9ee:	b10a      	cbz	r2, 800a9f4 <_svfiprintf_r+0x60>
 800a9f0:	2a25      	cmp	r2, #37	@ 0x25
 800a9f2:	d1f9      	bne.n	800a9e8 <_svfiprintf_r+0x54>
 800a9f4:	ebba 0b04 	subs.w	fp, sl, r4
 800a9f8:	d00b      	beq.n	800aa12 <_svfiprintf_r+0x7e>
 800a9fa:	465b      	mov	r3, fp
 800a9fc:	4622      	mov	r2, r4
 800a9fe:	4629      	mov	r1, r5
 800aa00:	4638      	mov	r0, r7
 800aa02:	f7ff ff6b 	bl	800a8dc <__ssputs_r>
 800aa06:	3001      	adds	r0, #1
 800aa08:	f000 80a7 	beq.w	800ab5a <_svfiprintf_r+0x1c6>
 800aa0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa0e:	445a      	add	r2, fp
 800aa10:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa12:	f89a 3000 	ldrb.w	r3, [sl]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	f000 809f 	beq.w	800ab5a <_svfiprintf_r+0x1c6>
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa22:	f10a 0a01 	add.w	sl, sl, #1
 800aa26:	9304      	str	r3, [sp, #16]
 800aa28:	9307      	str	r3, [sp, #28]
 800aa2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa2e:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa34:	4654      	mov	r4, sl
 800aa36:	2205      	movs	r2, #5
 800aa38:	484f      	ldr	r0, [pc, #316]	@ (800ab78 <_svfiprintf_r+0x1e4>)
 800aa3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa3e:	f000 fa5f 	bl	800af00 <memchr>
 800aa42:	9a04      	ldr	r2, [sp, #16]
 800aa44:	b9d8      	cbnz	r0, 800aa7e <_svfiprintf_r+0xea>
 800aa46:	06d0      	lsls	r0, r2, #27
 800aa48:	bf44      	itt	mi
 800aa4a:	2320      	movmi	r3, #32
 800aa4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa50:	0711      	lsls	r1, r2, #28
 800aa52:	bf44      	itt	mi
 800aa54:	232b      	movmi	r3, #43	@ 0x2b
 800aa56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa5a:	f89a 3000 	ldrb.w	r3, [sl]
 800aa5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa60:	d015      	beq.n	800aa8e <_svfiprintf_r+0xfa>
 800aa62:	9a07      	ldr	r2, [sp, #28]
 800aa64:	4654      	mov	r4, sl
 800aa66:	2000      	movs	r0, #0
 800aa68:	f04f 0c0a 	mov.w	ip, #10
 800aa6c:	4621      	mov	r1, r4
 800aa6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa72:	3b30      	subs	r3, #48	@ 0x30
 800aa74:	2b09      	cmp	r3, #9
 800aa76:	d94b      	bls.n	800ab10 <_svfiprintf_r+0x17c>
 800aa78:	b1b0      	cbz	r0, 800aaa8 <_svfiprintf_r+0x114>
 800aa7a:	9207      	str	r2, [sp, #28]
 800aa7c:	e014      	b.n	800aaa8 <_svfiprintf_r+0x114>
 800aa7e:	eba0 0308 	sub.w	r3, r0, r8
 800aa82:	46a2      	mov	sl, r4
 800aa84:	fa09 f303 	lsl.w	r3, r9, r3
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	9304      	str	r3, [sp, #16]
 800aa8c:	e7d2      	b.n	800aa34 <_svfiprintf_r+0xa0>
 800aa8e:	9b03      	ldr	r3, [sp, #12]
 800aa90:	1d19      	adds	r1, r3, #4
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	9103      	str	r1, [sp, #12]
 800aa98:	bfbb      	ittet	lt
 800aa9a:	425b      	neglt	r3, r3
 800aa9c:	f042 0202 	orrlt.w	r2, r2, #2
 800aaa0:	9307      	strge	r3, [sp, #28]
 800aaa2:	9307      	strlt	r3, [sp, #28]
 800aaa4:	bfb8      	it	lt
 800aaa6:	9204      	strlt	r2, [sp, #16]
 800aaa8:	7823      	ldrb	r3, [r4, #0]
 800aaaa:	2b2e      	cmp	r3, #46	@ 0x2e
 800aaac:	d10a      	bne.n	800aac4 <_svfiprintf_r+0x130>
 800aaae:	7863      	ldrb	r3, [r4, #1]
 800aab0:	2b2a      	cmp	r3, #42	@ 0x2a
 800aab2:	d132      	bne.n	800ab1a <_svfiprintf_r+0x186>
 800aab4:	9b03      	ldr	r3, [sp, #12]
 800aab6:	3402      	adds	r4, #2
 800aab8:	1d1a      	adds	r2, r3, #4
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aac0:	9203      	str	r2, [sp, #12]
 800aac2:	9305      	str	r3, [sp, #20]
 800aac4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ab88 <_svfiprintf_r+0x1f4>
 800aac8:	2203      	movs	r2, #3
 800aaca:	7821      	ldrb	r1, [r4, #0]
 800aacc:	4650      	mov	r0, sl
 800aace:	f000 fa17 	bl	800af00 <memchr>
 800aad2:	b138      	cbz	r0, 800aae4 <_svfiprintf_r+0x150>
 800aad4:	eba0 000a 	sub.w	r0, r0, sl
 800aad8:	2240      	movs	r2, #64	@ 0x40
 800aada:	9b04      	ldr	r3, [sp, #16]
 800aadc:	3401      	adds	r4, #1
 800aade:	4082      	lsls	r2, r0
 800aae0:	4313      	orrs	r3, r2
 800aae2:	9304      	str	r3, [sp, #16]
 800aae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aae8:	2206      	movs	r2, #6
 800aaea:	4824      	ldr	r0, [pc, #144]	@ (800ab7c <_svfiprintf_r+0x1e8>)
 800aaec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aaf0:	f000 fa06 	bl	800af00 <memchr>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	d036      	beq.n	800ab66 <_svfiprintf_r+0x1d2>
 800aaf8:	4b21      	ldr	r3, [pc, #132]	@ (800ab80 <_svfiprintf_r+0x1ec>)
 800aafa:	bb1b      	cbnz	r3, 800ab44 <_svfiprintf_r+0x1b0>
 800aafc:	9b03      	ldr	r3, [sp, #12]
 800aafe:	3307      	adds	r3, #7
 800ab00:	f023 0307 	bic.w	r3, r3, #7
 800ab04:	3308      	adds	r3, #8
 800ab06:	9303      	str	r3, [sp, #12]
 800ab08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab0a:	4433      	add	r3, r6
 800ab0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab0e:	e76a      	b.n	800a9e6 <_svfiprintf_r+0x52>
 800ab10:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab14:	460c      	mov	r4, r1
 800ab16:	2001      	movs	r0, #1
 800ab18:	e7a8      	b.n	800aa6c <_svfiprintf_r+0xd8>
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	3401      	adds	r4, #1
 800ab1e:	f04f 0c0a 	mov.w	ip, #10
 800ab22:	4619      	mov	r1, r3
 800ab24:	9305      	str	r3, [sp, #20]
 800ab26:	4620      	mov	r0, r4
 800ab28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab2c:	3a30      	subs	r2, #48	@ 0x30
 800ab2e:	2a09      	cmp	r2, #9
 800ab30:	d903      	bls.n	800ab3a <_svfiprintf_r+0x1a6>
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d0c6      	beq.n	800aac4 <_svfiprintf_r+0x130>
 800ab36:	9105      	str	r1, [sp, #20]
 800ab38:	e7c4      	b.n	800aac4 <_svfiprintf_r+0x130>
 800ab3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab3e:	4604      	mov	r4, r0
 800ab40:	2301      	movs	r3, #1
 800ab42:	e7f0      	b.n	800ab26 <_svfiprintf_r+0x192>
 800ab44:	ab03      	add	r3, sp, #12
 800ab46:	462a      	mov	r2, r5
 800ab48:	a904      	add	r1, sp, #16
 800ab4a:	4638      	mov	r0, r7
 800ab4c:	9300      	str	r3, [sp, #0]
 800ab4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab84 <_svfiprintf_r+0x1f0>)
 800ab50:	f3af 8000 	nop.w
 800ab54:	1c42      	adds	r2, r0, #1
 800ab56:	4606      	mov	r6, r0
 800ab58:	d1d6      	bne.n	800ab08 <_svfiprintf_r+0x174>
 800ab5a:	89ab      	ldrh	r3, [r5, #12]
 800ab5c:	065b      	lsls	r3, r3, #25
 800ab5e:	f53f af2d 	bmi.w	800a9bc <_svfiprintf_r+0x28>
 800ab62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab64:	e72c      	b.n	800a9c0 <_svfiprintf_r+0x2c>
 800ab66:	ab03      	add	r3, sp, #12
 800ab68:	462a      	mov	r2, r5
 800ab6a:	a904      	add	r1, sp, #16
 800ab6c:	4638      	mov	r0, r7
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	4b04      	ldr	r3, [pc, #16]	@ (800ab84 <_svfiprintf_r+0x1f0>)
 800ab72:	f000 f87d 	bl	800ac70 <_printf_i>
 800ab76:	e7ed      	b.n	800ab54 <_svfiprintf_r+0x1c0>
 800ab78:	0800b09c 	.word	0x0800b09c
 800ab7c:	0800b0a6 	.word	0x0800b0a6
 800ab80:	00000000 	.word	0x00000000
 800ab84:	0800a8dd 	.word	0x0800a8dd
 800ab88:	0800b0a2 	.word	0x0800b0a2

0800ab8c <_printf_common>:
 800ab8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab90:	4616      	mov	r6, r2
 800ab92:	4698      	mov	r8, r3
 800ab94:	688a      	ldr	r2, [r1, #8]
 800ab96:	4607      	mov	r7, r0
 800ab98:	690b      	ldr	r3, [r1, #16]
 800ab9a:	460c      	mov	r4, r1
 800ab9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aba0:	4293      	cmp	r3, r2
 800aba2:	bfb8      	it	lt
 800aba4:	4613      	movlt	r3, r2
 800aba6:	6033      	str	r3, [r6, #0]
 800aba8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800abac:	b10a      	cbz	r2, 800abb2 <_printf_common+0x26>
 800abae:	3301      	adds	r3, #1
 800abb0:	6033      	str	r3, [r6, #0]
 800abb2:	6823      	ldr	r3, [r4, #0]
 800abb4:	0699      	lsls	r1, r3, #26
 800abb6:	bf42      	ittt	mi
 800abb8:	6833      	ldrmi	r3, [r6, #0]
 800abba:	3302      	addmi	r3, #2
 800abbc:	6033      	strmi	r3, [r6, #0]
 800abbe:	6825      	ldr	r5, [r4, #0]
 800abc0:	f015 0506 	ands.w	r5, r5, #6
 800abc4:	d106      	bne.n	800abd4 <_printf_common+0x48>
 800abc6:	f104 0a19 	add.w	sl, r4, #25
 800abca:	68e3      	ldr	r3, [r4, #12]
 800abcc:	6832      	ldr	r2, [r6, #0]
 800abce:	1a9b      	subs	r3, r3, r2
 800abd0:	42ab      	cmp	r3, r5
 800abd2:	dc2b      	bgt.n	800ac2c <_printf_common+0xa0>
 800abd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800abd8:	6822      	ldr	r2, [r4, #0]
 800abda:	3b00      	subs	r3, #0
 800abdc:	bf18      	it	ne
 800abde:	2301      	movne	r3, #1
 800abe0:	0692      	lsls	r2, r2, #26
 800abe2:	d430      	bmi.n	800ac46 <_printf_common+0xba>
 800abe4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800abe8:	4641      	mov	r1, r8
 800abea:	4638      	mov	r0, r7
 800abec:	47c8      	blx	r9
 800abee:	3001      	adds	r0, #1
 800abf0:	d023      	beq.n	800ac3a <_printf_common+0xae>
 800abf2:	6823      	ldr	r3, [r4, #0]
 800abf4:	341a      	adds	r4, #26
 800abf6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800abfa:	f003 0306 	and.w	r3, r3, #6
 800abfe:	2b04      	cmp	r3, #4
 800ac00:	bf0a      	itet	eq
 800ac02:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800ac06:	2500      	movne	r5, #0
 800ac08:	6833      	ldreq	r3, [r6, #0]
 800ac0a:	f04f 0600 	mov.w	r6, #0
 800ac0e:	bf08      	it	eq
 800ac10:	1aed      	subeq	r5, r5, r3
 800ac12:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ac16:	bf08      	it	eq
 800ac18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	bfc4      	itt	gt
 800ac20:	1a9b      	subgt	r3, r3, r2
 800ac22:	18ed      	addgt	r5, r5, r3
 800ac24:	42b5      	cmp	r5, r6
 800ac26:	d11a      	bne.n	800ac5e <_printf_common+0xd2>
 800ac28:	2000      	movs	r0, #0
 800ac2a:	e008      	b.n	800ac3e <_printf_common+0xb2>
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	4652      	mov	r2, sl
 800ac30:	4641      	mov	r1, r8
 800ac32:	4638      	mov	r0, r7
 800ac34:	47c8      	blx	r9
 800ac36:	3001      	adds	r0, #1
 800ac38:	d103      	bne.n	800ac42 <_printf_common+0xb6>
 800ac3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac42:	3501      	adds	r5, #1
 800ac44:	e7c1      	b.n	800abca <_printf_common+0x3e>
 800ac46:	18e1      	adds	r1, r4, r3
 800ac48:	1c5a      	adds	r2, r3, #1
 800ac4a:	2030      	movs	r0, #48	@ 0x30
 800ac4c:	3302      	adds	r3, #2
 800ac4e:	4422      	add	r2, r4
 800ac50:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac5c:	e7c2      	b.n	800abe4 <_printf_common+0x58>
 800ac5e:	2301      	movs	r3, #1
 800ac60:	4622      	mov	r2, r4
 800ac62:	4641      	mov	r1, r8
 800ac64:	4638      	mov	r0, r7
 800ac66:	47c8      	blx	r9
 800ac68:	3001      	adds	r0, #1
 800ac6a:	d0e6      	beq.n	800ac3a <_printf_common+0xae>
 800ac6c:	3601      	adds	r6, #1
 800ac6e:	e7d9      	b.n	800ac24 <_printf_common+0x98>

0800ac70 <_printf_i>:
 800ac70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac74:	7e0f      	ldrb	r7, [r1, #24]
 800ac76:	4691      	mov	r9, r2
 800ac78:	4680      	mov	r8, r0
 800ac7a:	460c      	mov	r4, r1
 800ac7c:	2f78      	cmp	r7, #120	@ 0x78
 800ac7e:	469a      	mov	sl, r3
 800ac80:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac86:	d807      	bhi.n	800ac98 <_printf_i+0x28>
 800ac88:	2f62      	cmp	r7, #98	@ 0x62
 800ac8a:	d80a      	bhi.n	800aca2 <_printf_i+0x32>
 800ac8c:	2f00      	cmp	r7, #0
 800ac8e:	f000 80d1 	beq.w	800ae34 <_printf_i+0x1c4>
 800ac92:	2f58      	cmp	r7, #88	@ 0x58
 800ac94:	f000 80b8 	beq.w	800ae08 <_printf_i+0x198>
 800ac98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aca0:	e03a      	b.n	800ad18 <_printf_i+0xa8>
 800aca2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aca6:	2b15      	cmp	r3, #21
 800aca8:	d8f6      	bhi.n	800ac98 <_printf_i+0x28>
 800acaa:	a101      	add	r1, pc, #4	@ (adr r1, 800acb0 <_printf_i+0x40>)
 800acac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800acb0:	0800ad09 	.word	0x0800ad09
 800acb4:	0800ad1d 	.word	0x0800ad1d
 800acb8:	0800ac99 	.word	0x0800ac99
 800acbc:	0800ac99 	.word	0x0800ac99
 800acc0:	0800ac99 	.word	0x0800ac99
 800acc4:	0800ac99 	.word	0x0800ac99
 800acc8:	0800ad1d 	.word	0x0800ad1d
 800accc:	0800ac99 	.word	0x0800ac99
 800acd0:	0800ac99 	.word	0x0800ac99
 800acd4:	0800ac99 	.word	0x0800ac99
 800acd8:	0800ac99 	.word	0x0800ac99
 800acdc:	0800ae1b 	.word	0x0800ae1b
 800ace0:	0800ad47 	.word	0x0800ad47
 800ace4:	0800add5 	.word	0x0800add5
 800ace8:	0800ac99 	.word	0x0800ac99
 800acec:	0800ac99 	.word	0x0800ac99
 800acf0:	0800ae3d 	.word	0x0800ae3d
 800acf4:	0800ac99 	.word	0x0800ac99
 800acf8:	0800ad47 	.word	0x0800ad47
 800acfc:	0800ac99 	.word	0x0800ac99
 800ad00:	0800ac99 	.word	0x0800ac99
 800ad04:	0800addd 	.word	0x0800addd
 800ad08:	6833      	ldr	r3, [r6, #0]
 800ad0a:	1d1a      	adds	r2, r3, #4
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	6032      	str	r2, [r6, #0]
 800ad10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad18:	2301      	movs	r3, #1
 800ad1a:	e09c      	b.n	800ae56 <_printf_i+0x1e6>
 800ad1c:	6833      	ldr	r3, [r6, #0]
 800ad1e:	6820      	ldr	r0, [r4, #0]
 800ad20:	1d19      	adds	r1, r3, #4
 800ad22:	6031      	str	r1, [r6, #0]
 800ad24:	0606      	lsls	r6, r0, #24
 800ad26:	d501      	bpl.n	800ad2c <_printf_i+0xbc>
 800ad28:	681d      	ldr	r5, [r3, #0]
 800ad2a:	e003      	b.n	800ad34 <_printf_i+0xc4>
 800ad2c:	0645      	lsls	r5, r0, #25
 800ad2e:	d5fb      	bpl.n	800ad28 <_printf_i+0xb8>
 800ad30:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad34:	2d00      	cmp	r5, #0
 800ad36:	da03      	bge.n	800ad40 <_printf_i+0xd0>
 800ad38:	232d      	movs	r3, #45	@ 0x2d
 800ad3a:	426d      	negs	r5, r5
 800ad3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad40:	4858      	ldr	r0, [pc, #352]	@ (800aea4 <_printf_i+0x234>)
 800ad42:	230a      	movs	r3, #10
 800ad44:	e011      	b.n	800ad6a <_printf_i+0xfa>
 800ad46:	6821      	ldr	r1, [r4, #0]
 800ad48:	6833      	ldr	r3, [r6, #0]
 800ad4a:	0608      	lsls	r0, r1, #24
 800ad4c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad50:	d402      	bmi.n	800ad58 <_printf_i+0xe8>
 800ad52:	0649      	lsls	r1, r1, #25
 800ad54:	bf48      	it	mi
 800ad56:	b2ad      	uxthmi	r5, r5
 800ad58:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad5a:	6033      	str	r3, [r6, #0]
 800ad5c:	4851      	ldr	r0, [pc, #324]	@ (800aea4 <_printf_i+0x234>)
 800ad5e:	bf14      	ite	ne
 800ad60:	230a      	movne	r3, #10
 800ad62:	2308      	moveq	r3, #8
 800ad64:	2100      	movs	r1, #0
 800ad66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad6a:	6866      	ldr	r6, [r4, #4]
 800ad6c:	2e00      	cmp	r6, #0
 800ad6e:	60a6      	str	r6, [r4, #8]
 800ad70:	db05      	blt.n	800ad7e <_printf_i+0x10e>
 800ad72:	6821      	ldr	r1, [r4, #0]
 800ad74:	432e      	orrs	r6, r5
 800ad76:	f021 0104 	bic.w	r1, r1, #4
 800ad7a:	6021      	str	r1, [r4, #0]
 800ad7c:	d04b      	beq.n	800ae16 <_printf_i+0x1a6>
 800ad7e:	4616      	mov	r6, r2
 800ad80:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad84:	fb03 5711 	mls	r7, r3, r1, r5
 800ad88:	5dc7      	ldrb	r7, [r0, r7]
 800ad8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad8e:	462f      	mov	r7, r5
 800ad90:	460d      	mov	r5, r1
 800ad92:	42bb      	cmp	r3, r7
 800ad94:	d9f4      	bls.n	800ad80 <_printf_i+0x110>
 800ad96:	2b08      	cmp	r3, #8
 800ad98:	d10b      	bne.n	800adb2 <_printf_i+0x142>
 800ad9a:	6823      	ldr	r3, [r4, #0]
 800ad9c:	07df      	lsls	r7, r3, #31
 800ad9e:	d508      	bpl.n	800adb2 <_printf_i+0x142>
 800ada0:	6923      	ldr	r3, [r4, #16]
 800ada2:	6861      	ldr	r1, [r4, #4]
 800ada4:	4299      	cmp	r1, r3
 800ada6:	bfde      	ittt	le
 800ada8:	2330      	movle	r3, #48	@ 0x30
 800adaa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800adae:	f106 36ff 	addle.w	r6, r6, #4294967295
 800adb2:	1b92      	subs	r2, r2, r6
 800adb4:	6122      	str	r2, [r4, #16]
 800adb6:	464b      	mov	r3, r9
 800adb8:	aa03      	add	r2, sp, #12
 800adba:	4621      	mov	r1, r4
 800adbc:	4640      	mov	r0, r8
 800adbe:	f8cd a000 	str.w	sl, [sp]
 800adc2:	f7ff fee3 	bl	800ab8c <_printf_common>
 800adc6:	3001      	adds	r0, #1
 800adc8:	d14a      	bne.n	800ae60 <_printf_i+0x1f0>
 800adca:	f04f 30ff 	mov.w	r0, #4294967295
 800adce:	b004      	add	sp, #16
 800add0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800add4:	6823      	ldr	r3, [r4, #0]
 800add6:	f043 0320 	orr.w	r3, r3, #32
 800adda:	6023      	str	r3, [r4, #0]
 800addc:	2778      	movs	r7, #120	@ 0x78
 800adde:	4832      	ldr	r0, [pc, #200]	@ (800aea8 <_printf_i+0x238>)
 800ade0:	6823      	ldr	r3, [r4, #0]
 800ade2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ade6:	061f      	lsls	r7, r3, #24
 800ade8:	6831      	ldr	r1, [r6, #0]
 800adea:	f851 5b04 	ldr.w	r5, [r1], #4
 800adee:	d402      	bmi.n	800adf6 <_printf_i+0x186>
 800adf0:	065f      	lsls	r7, r3, #25
 800adf2:	bf48      	it	mi
 800adf4:	b2ad      	uxthmi	r5, r5
 800adf6:	6031      	str	r1, [r6, #0]
 800adf8:	07d9      	lsls	r1, r3, #31
 800adfa:	bf44      	itt	mi
 800adfc:	f043 0320 	orrmi.w	r3, r3, #32
 800ae00:	6023      	strmi	r3, [r4, #0]
 800ae02:	b11d      	cbz	r5, 800ae0c <_printf_i+0x19c>
 800ae04:	2310      	movs	r3, #16
 800ae06:	e7ad      	b.n	800ad64 <_printf_i+0xf4>
 800ae08:	4826      	ldr	r0, [pc, #152]	@ (800aea4 <_printf_i+0x234>)
 800ae0a:	e7e9      	b.n	800ade0 <_printf_i+0x170>
 800ae0c:	6823      	ldr	r3, [r4, #0]
 800ae0e:	f023 0320 	bic.w	r3, r3, #32
 800ae12:	6023      	str	r3, [r4, #0]
 800ae14:	e7f6      	b.n	800ae04 <_printf_i+0x194>
 800ae16:	4616      	mov	r6, r2
 800ae18:	e7bd      	b.n	800ad96 <_printf_i+0x126>
 800ae1a:	6833      	ldr	r3, [r6, #0]
 800ae1c:	6825      	ldr	r5, [r4, #0]
 800ae1e:	1d18      	adds	r0, r3, #4
 800ae20:	6961      	ldr	r1, [r4, #20]
 800ae22:	6030      	str	r0, [r6, #0]
 800ae24:	062e      	lsls	r6, r5, #24
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	d501      	bpl.n	800ae2e <_printf_i+0x1be>
 800ae2a:	6019      	str	r1, [r3, #0]
 800ae2c:	e002      	b.n	800ae34 <_printf_i+0x1c4>
 800ae2e:	0668      	lsls	r0, r5, #25
 800ae30:	d5fb      	bpl.n	800ae2a <_printf_i+0x1ba>
 800ae32:	8019      	strh	r1, [r3, #0]
 800ae34:	2300      	movs	r3, #0
 800ae36:	4616      	mov	r6, r2
 800ae38:	6123      	str	r3, [r4, #16]
 800ae3a:	e7bc      	b.n	800adb6 <_printf_i+0x146>
 800ae3c:	6833      	ldr	r3, [r6, #0]
 800ae3e:	2100      	movs	r1, #0
 800ae40:	1d1a      	adds	r2, r3, #4
 800ae42:	6032      	str	r2, [r6, #0]
 800ae44:	681e      	ldr	r6, [r3, #0]
 800ae46:	6862      	ldr	r2, [r4, #4]
 800ae48:	4630      	mov	r0, r6
 800ae4a:	f000 f859 	bl	800af00 <memchr>
 800ae4e:	b108      	cbz	r0, 800ae54 <_printf_i+0x1e4>
 800ae50:	1b80      	subs	r0, r0, r6
 800ae52:	6060      	str	r0, [r4, #4]
 800ae54:	6863      	ldr	r3, [r4, #4]
 800ae56:	6123      	str	r3, [r4, #16]
 800ae58:	2300      	movs	r3, #0
 800ae5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae5e:	e7aa      	b.n	800adb6 <_printf_i+0x146>
 800ae60:	6923      	ldr	r3, [r4, #16]
 800ae62:	4632      	mov	r2, r6
 800ae64:	4649      	mov	r1, r9
 800ae66:	4640      	mov	r0, r8
 800ae68:	47d0      	blx	sl
 800ae6a:	3001      	adds	r0, #1
 800ae6c:	d0ad      	beq.n	800adca <_printf_i+0x15a>
 800ae6e:	6823      	ldr	r3, [r4, #0]
 800ae70:	079b      	lsls	r3, r3, #30
 800ae72:	d413      	bmi.n	800ae9c <_printf_i+0x22c>
 800ae74:	68e0      	ldr	r0, [r4, #12]
 800ae76:	9b03      	ldr	r3, [sp, #12]
 800ae78:	4298      	cmp	r0, r3
 800ae7a:	bfb8      	it	lt
 800ae7c:	4618      	movlt	r0, r3
 800ae7e:	e7a6      	b.n	800adce <_printf_i+0x15e>
 800ae80:	2301      	movs	r3, #1
 800ae82:	4632      	mov	r2, r6
 800ae84:	4649      	mov	r1, r9
 800ae86:	4640      	mov	r0, r8
 800ae88:	47d0      	blx	sl
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	d09d      	beq.n	800adca <_printf_i+0x15a>
 800ae8e:	3501      	adds	r5, #1
 800ae90:	68e3      	ldr	r3, [r4, #12]
 800ae92:	9903      	ldr	r1, [sp, #12]
 800ae94:	1a5b      	subs	r3, r3, r1
 800ae96:	42ab      	cmp	r3, r5
 800ae98:	dcf2      	bgt.n	800ae80 <_printf_i+0x210>
 800ae9a:	e7eb      	b.n	800ae74 <_printf_i+0x204>
 800ae9c:	2500      	movs	r5, #0
 800ae9e:	f104 0619 	add.w	r6, r4, #25
 800aea2:	e7f5      	b.n	800ae90 <_printf_i+0x220>
 800aea4:	0800b0ad 	.word	0x0800b0ad
 800aea8:	0800b0be 	.word	0x0800b0be

0800aeac <memmove>:
 800aeac:	4288      	cmp	r0, r1
 800aeae:	b510      	push	{r4, lr}
 800aeb0:	eb01 0402 	add.w	r4, r1, r2
 800aeb4:	d902      	bls.n	800aebc <memmove+0x10>
 800aeb6:	4284      	cmp	r4, r0
 800aeb8:	4623      	mov	r3, r4
 800aeba:	d807      	bhi.n	800aecc <memmove+0x20>
 800aebc:	1e43      	subs	r3, r0, #1
 800aebe:	42a1      	cmp	r1, r4
 800aec0:	d008      	beq.n	800aed4 <memmove+0x28>
 800aec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aec6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aeca:	e7f8      	b.n	800aebe <memmove+0x12>
 800aecc:	4402      	add	r2, r0
 800aece:	4601      	mov	r1, r0
 800aed0:	428a      	cmp	r2, r1
 800aed2:	d100      	bne.n	800aed6 <memmove+0x2a>
 800aed4:	bd10      	pop	{r4, pc}
 800aed6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aeda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aede:	e7f7      	b.n	800aed0 <memmove+0x24>

0800aee0 <_sbrk_r>:
 800aee0:	b538      	push	{r3, r4, r5, lr}
 800aee2:	2300      	movs	r3, #0
 800aee4:	4d05      	ldr	r5, [pc, #20]	@ (800aefc <_sbrk_r+0x1c>)
 800aee6:	4604      	mov	r4, r0
 800aee8:	4608      	mov	r0, r1
 800aeea:	602b      	str	r3, [r5, #0]
 800aeec:	f7f6 ff46 	bl	8001d7c <_sbrk>
 800aef0:	1c43      	adds	r3, r0, #1
 800aef2:	d102      	bne.n	800aefa <_sbrk_r+0x1a>
 800aef4:	682b      	ldr	r3, [r5, #0]
 800aef6:	b103      	cbz	r3, 800aefa <_sbrk_r+0x1a>
 800aef8:	6023      	str	r3, [r4, #0]
 800aefa:	bd38      	pop	{r3, r4, r5, pc}
 800aefc:	20002f48 	.word	0x20002f48

0800af00 <memchr>:
 800af00:	b2c9      	uxtb	r1, r1
 800af02:	4603      	mov	r3, r0
 800af04:	4402      	add	r2, r0
 800af06:	b510      	push	{r4, lr}
 800af08:	4293      	cmp	r3, r2
 800af0a:	4618      	mov	r0, r3
 800af0c:	d101      	bne.n	800af12 <memchr+0x12>
 800af0e:	2000      	movs	r0, #0
 800af10:	e003      	b.n	800af1a <memchr+0x1a>
 800af12:	7804      	ldrb	r4, [r0, #0]
 800af14:	3301      	adds	r3, #1
 800af16:	428c      	cmp	r4, r1
 800af18:	d1f6      	bne.n	800af08 <memchr+0x8>
 800af1a:	bd10      	pop	{r4, pc}

0800af1c <_realloc_r>:
 800af1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af20:	4607      	mov	r7, r0
 800af22:	4614      	mov	r4, r2
 800af24:	460d      	mov	r5, r1
 800af26:	b921      	cbnz	r1, 800af32 <_realloc_r+0x16>
 800af28:	4611      	mov	r1, r2
 800af2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af2e:	f7ff bc49 	b.w	800a7c4 <_malloc_r>
 800af32:	b92a      	cbnz	r2, 800af40 <_realloc_r+0x24>
 800af34:	4625      	mov	r5, r4
 800af36:	f7ff fbd9 	bl	800a6ec <_free_r>
 800af3a:	4628      	mov	r0, r5
 800af3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af40:	f000 f81a 	bl	800af78 <_malloc_usable_size_r>
 800af44:	4284      	cmp	r4, r0
 800af46:	4606      	mov	r6, r0
 800af48:	d802      	bhi.n	800af50 <_realloc_r+0x34>
 800af4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af4e:	d8f4      	bhi.n	800af3a <_realloc_r+0x1e>
 800af50:	4621      	mov	r1, r4
 800af52:	4638      	mov	r0, r7
 800af54:	f7ff fc36 	bl	800a7c4 <_malloc_r>
 800af58:	4680      	mov	r8, r0
 800af5a:	b908      	cbnz	r0, 800af60 <_realloc_r+0x44>
 800af5c:	4645      	mov	r5, r8
 800af5e:	e7ec      	b.n	800af3a <_realloc_r+0x1e>
 800af60:	42b4      	cmp	r4, r6
 800af62:	4622      	mov	r2, r4
 800af64:	4629      	mov	r1, r5
 800af66:	bf28      	it	cs
 800af68:	4632      	movcs	r2, r6
 800af6a:	f7ff fbb1 	bl	800a6d0 <memcpy>
 800af6e:	4629      	mov	r1, r5
 800af70:	4638      	mov	r0, r7
 800af72:	f7ff fbbb 	bl	800a6ec <_free_r>
 800af76:	e7f1      	b.n	800af5c <_realloc_r+0x40>

0800af78 <_malloc_usable_size_r>:
 800af78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af7c:	1f18      	subs	r0, r3, #4
 800af7e:	2b00      	cmp	r3, #0
 800af80:	bfbc      	itt	lt
 800af82:	580b      	ldrlt	r3, [r1, r0]
 800af84:	18c0      	addlt	r0, r0, r3
 800af86:	4770      	bx	lr

0800af88 <_init>:
 800af88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8a:	bf00      	nop
 800af8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af8e:	bc08      	pop	{r3}
 800af90:	469e      	mov	lr, r3
 800af92:	4770      	bx	lr

0800af94 <_fini>:
 800af94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af96:	bf00      	nop
 800af98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af9a:	bc08      	pop	{r3}
 800af9c:	469e      	mov	lr, r3
 800af9e:	4770      	bx	lr
